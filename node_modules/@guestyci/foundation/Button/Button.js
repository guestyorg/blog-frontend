"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _Spinner = _interopRequireDefault(require("../Spinner"));

var _commonUtility = require("../utils/commonUtility");

var _TouchRipple = _interopRequireDefault(require("./TouchRipple"));

var _colors = require("../theme/colors");

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      border: 0,
      padding: 0,
      cursor: 'pointer',
      position: 'relative',
      outline: 'none',
      borderRadius: 3,
      transition: theme.transition.create(['background-color', 'box-shadow', 'border']),
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    },
    content: {
      display: 'flex',
      height: '100%',
      width: '100%',
      zIndex: 1,
      justifyContent: 'inherit',
      alignItems: 'inherit'
    },
    cursorDefault: {
      cursor: 'default !important',
      pointerEvents: 'none'
    },
    disabled: {
      cursor: 'not-allowed !important'
    },
    pointerEventsNone: {
      pointerEvents: 'none'
    },
    spinner: {
      position: 'absolute'
    },
    hidden: {
      visibility: 'hidden'
    },
    btnMd: {
      minHeight: 36,
      fontWeight: 'bold',
      padding: '8px 15px'
    },
    btnLg: {
      minHeight: 46,
      padding: '8px 15px',
      fontSize: theme.typography.fontSize.h3
    },
    btnXl: {
      minHeight: 54,
      padding: '7px 15px',
      fontSize: theme.typography.fontSize.h2,
      textTransform: 'uppercase'
    },
    webkitAppearanceNone: {
      appearance: 'none'
    }
  };
}, {
  name: 'Button'
});
exports.useStyles = useStyles;

var Button = _react["default"].forwardRef(function Button(_ref, ref) {
  var _cn;

  var children = _ref.children,
      size = _ref.size,
      component = _ref.component,
      isLoading = _ref.isLoading,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      className = _ref.className,
      enableRipple = _ref.enableRipple,
      spinnerColor = _ref.spinnerColor,
      rippleColor = _ref.rippleColor,
      onMouseDown = _ref.onMouseDown,
      onMouseUp = _ref.onMouseUp,
      type = _ref.type,
      jss = _ref.jss,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "size", "component", "isLoading", "onClick", "disabled", "className", "enableRipple", "spinnerColor", "rippleColor", "onMouseDown", "onMouseUp", "type", "jss"]);
  var buttonProps = props;
  var classes = useStyles({
    jss: jss
  });
  var rippleRef = (0, _react.useRef)(null);
  var shouldEnableRipple = enableRipple && !isLoading && !disabled;
  var Component = component;
  var isButton = component === 'button';

  if (!isButton) {
    buttonProps.role = 'button';
  }

  var handleMouseDown = (0, _react.useCallback)(function (event) {
    if (onMouseDown) {
      onMouseDown(event);
    }

    var touchRipple = rippleRef.current;

    if (enableRipple && touchRipple) {
      touchRipple.ripple(event);
    }
  }, [enableRipple, onMouseDown, rippleRef]);
  var handleMouseUp = (0, _react.useCallback)(function (event) {
    if (onMouseUp) {
      onMouseUp(event);
    }

    var touchRipple = rippleRef.current;

    if (enableRipple && touchRipple) {
      touchRipple.stop(event);
    }
  }, [enableRipple, onMouseUp, rippleRef]);
  return /*#__PURE__*/_react["default"].createElement(Component, (0, _extends2["default"])({}, buttonProps, {
    disabled: disabled,
    type: type,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onClick: onClick,
    className: (0, _classnames["default"])(classes.root, (_cn = {}, (0, _defineProperty2["default"])(_cn, classes.cursorDefault, isLoading), (0, _defineProperty2["default"])(_cn, classes.disabled, disabled), (0, _defineProperty2["default"])(_cn, classes.pointerEventsNone, disabled && !isButton), (0, _defineProperty2["default"])(_cn, classes.webkitAppearanceNone, !isButton), (0, _defineProperty2["default"])(_cn, classes["btn".concat((0, _commonUtility.capitalize)(size))], size), _cn), className),
    ref: ref
  }), isLoading && /*#__PURE__*/_react["default"].createElement(_Spinner["default"], {
    className: classes.spinner,
    size: 20,
    strokeWidth: 6,
    color: spinnerColor
  }), /*#__PURE__*/_react["default"].createElement("span", {
    className: (0, _classnames["default"])(classes.content, (0, _defineProperty2["default"])({}, classes.hidden, isLoading))
  }, children), shouldEnableRipple && /*#__PURE__*/_react["default"].createElement(_TouchRipple["default"], {
    ref: rippleRef,
    color: rippleColor
  }));
});

Button.defaultProps = {
  onClick: _noop["default"],
  isLoading: false,
  disabled: false,
  spinnerColor: _colors.white,
  enableRipple: true,
  rippleColor: _colors.gray400,
  component: 'button',
  type: 'button'
};
Button.propTypes = {
  /** Child element to locate inside of button */
  children: _propTypes["default"].node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: _propTypes["default"].func,

  /** Indicator whether or not to show loader in button */
  isLoading: _propTypes["default"].bool,

  /** Indicator whether or not to button is disabled */
  disabled: _propTypes["default"].bool,

  /** Color of button spinner - Using old color scheme  */
  spinnerColor: _propTypes["default"].string,

  /** Allow click ripple effect */
  enableRipple: _propTypes["default"].bool,

  /** Set ripple color = defaults gray400 */
  rippleColor: _propTypes["default"].string,

  /** jss override object to customize the jss classes */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** render component for Button component - used to avoid rendering button inside another button */
  component: _propTypes["default"].string,

  /** Set html button type */
  type: _propTypes["default"].string
};
Button.displayName = 'Button';
var _default = Button;
exports["default"] = _default;