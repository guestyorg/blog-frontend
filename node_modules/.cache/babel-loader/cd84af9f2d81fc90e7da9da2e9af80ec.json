{"ast":null,"code":"/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Foundation-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  var hashColor = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(hashColor.length / 3, \"}\"), 'g');\n  var colors = hashColor.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(_int) {\n  var hex = _int.toString(16);\n\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{values: number[], type: string}} - A MUI color object: {type: string, values: number[]}\n */\n\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Foundation-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  var decomposedColor = decomposeColor(color);\n  var values = color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (decomposedColor.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  var decomposedColor = decomposeColor(color);\n  var absValue = clamp(value);\n\n  if (decomposedColor.type === 'rgb' || decomposedColor.type === 'hsl') {\n    decomposedColor.type += 'a';\n  }\n\n  decomposedColor.values[3] = absValue;\n  return recomposeColor(decomposedColor);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] *= 1 - absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] *= 1 - absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] += (100 - decomposedColor.values[2]) * absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] += (255 - decomposedColor.values[i]) * absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/node_modules/@guestyci/foundation/esm/theme/utils.js"],"names":["clamp","value","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","concat","Math","hexToRgb","color","hashColor","substr","re","RegExp","colors","match","map","n","parseInt","join","intToHex","_int","hex","toString","decomposeColor","type","charAt","marker","indexOf","substring","Error","values","split","parseFloat","rgbToHex","_decomposeColor","recomposeColor","i","hslToRgb","decomposedColor","h","s","l","a","f","k","rgb","round","push","fade","absValue","darken","coefficient","absCoefficient","lighten"],"mappings":"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","sourcesContent":["/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Foundation-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nexport function hexToRgb(color) {\n  var hashColor = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(hashColor.length / 3, \"}\"), 'g');\n  var colors = hashColor.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(_int) {\n  var hex = _int.toString(16);\n\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{values: number[], type: string}} - A MUI color object: {type: string, values: number[]}\n */\n\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Foundation-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\nexport function hslToRgb(color) {\n  var decomposedColor = decomposeColor(color);\n  var values = color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (decomposedColor.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function fade(color, value) {\n  var decomposedColor = decomposeColor(color);\n  var absValue = clamp(value);\n\n  if (decomposedColor.type === 'rgb' || decomposedColor.type === 'hsl') {\n    decomposedColor.type += 'a';\n  }\n\n  decomposedColor.values[3] = absValue;\n  return recomposeColor(decomposedColor);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function darken(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] *= 1 - absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] *= 1 - absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\nexport function lighten(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] += (100 - decomposedColor.values[2]) * absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] += (255 - decomposedColor.values[i]) * absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}"]},"metadata":{},"sourceType":"module"}