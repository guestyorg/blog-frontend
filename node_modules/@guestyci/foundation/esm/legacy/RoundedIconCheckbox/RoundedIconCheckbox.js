import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import withStyles from 'react-jss';
import cn from 'classnames';
import Icon from "../Icon";
import withHover from "../../withHover/withHover";
var styles = {
  button: {
    padding: 0,
    '&:active': {
      border: 'none',
      boxShadow: 'inset 0 1px 3px 0 rgba(39, 43, 45, 0.2)'
    }
  },
  size: function size(_ref) {
    var lg = _ref.lg;
    return {
      width: lg ? 36 : 27,
      height: lg ? 36 : 27
    };
  },
  shadow: {
    'box-shadow': 'inset 0 1px 3px 0 rgba(39, 43, 45, 0.2)'
  }
};

var RoundedIconCheckbox = /*#__PURE__*/function (_PureComponent) {
  _inherits(RoundedIconCheckbox, _PureComponent);

  var _super = _createSuper(RoundedIconCheckbox);

  function RoundedIconCheckbox(props) {
    var _this;

    _classCallCheck(this, RoundedIconCheckbox);

    _this = _super.call(this, props);

    _this.onChange = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          id = _this$props.id,
          onChange = _this$props.onChange,
          name = _this$props.name;
      var isChecked = _this.state.isChecked;
      onChange(value || !isChecked, id || name, !isChecked);

      _this.setState({
        isChecked: !isChecked
      });
    };

    _this.state = {
      isChecked: props.checked || false
    };
    return _this;
  }

  _createClass(RoundedIconCheckbox, [{
    key: "changeIconColor",
    value: function changeIconColor() {
      var isChecked = this.state.isChecked;
      var isHovering = this.props.isHovering;

      if (isHovering && isChecked) {
        return 'muted';
      }

      if (isChecked || isHovering) {
        return 'blue';
      }

      return 'muted';
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          svg = _this$props2.svg,
          onHoverLeave = _this$props2.onHoverLeave,
          onHoverEnter = _this$props2.onHoverEnter,
          _this$props2$classes = _this$props2.classes,
          button = _this$props2$classes.button,
          size = _this$props2$classes.size,
          shadow = _this$props2$classes.shadow,
          className = _this$props2.className,
          iconHeight = _this$props2.iconHeight,
          iconWidth = _this$props2.iconWidth;
      var isChecked = this.state.isChecked;
      return /*#__PURE__*/React.createElement("button", {
        type: "button",
        className: cn('flex-center', 'border-radius-4', 'border-gray-light', 'clickable', isChecked ? 'bg-gray-light' : 'bg-gray-lightest', _defineProperty({}, shadow, isChecked), button, size, className),
        onClick: this.onChange,
        onMouseEnter: onHoverEnter,
        onMouseLeave: onHoverLeave,
        "data-qa": "rounded-icon-checkbox"
      }, /*#__PURE__*/React.createElement(Icon, {
        icon: icon,
        svg: svg,
        height: iconHeight,
        width: iconWidth,
        color: this.changeIconColor()
      }));
    }
  }]);

  return RoundedIconCheckbox;
}(PureComponent);

RoundedIconCheckbox.defaultProps = {
  className: '',
  id: undefined,
  value: '',
  name: '',
  iconHeight: 20,
  iconWidth: 20,
  checked: false,
  lg: false
};
RoundedIconCheckbox.propTypes = {
  /** A specified Icon from the Guesty Icons bank */
  icon: PropTypes.string,

  /** The svg icon to render */
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Function to toggle the check box click the cb is (value, id || name, state) */
  onChange: PropTypes.func.isRequired,

  /** A unique id */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** An indicator */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** A name */
  name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Additional class to add to the checkbox */
  className: PropTypes.string,

  /** Icon Height */
  iconHeight: PropTypes.number,

  /** Icon Width */
  iconWidth: PropTypes.number,

  /** checked indicator */
  checked: PropTypes.bool,

  /** Indicator whether to use large size - 36px or md -25px */
  lg: PropTypes.bool
};
export var RoundedCheckboxComponent = RoundedIconCheckbox;
export default withHover(withStyles(styles)(RoundedIconCheckbox));