import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import configureMockStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import { mount } from 'enzyme';
/**
 * create the setup for container components(connected to store)
 * @param Comp  {JSX.Element} The component to setup
 * @param initalStore {Object} The inital state of the store
 * @returns {WrappedComponent: function(props: {object}): JSX.Element, componentSetup: function(additionalStore: {Object}, props: {Object}, attachTo: {HTMLElement}): WrappedComponent}
 */

export default (function (Comp) {
  var initalStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    WrappedComponent: function WrappedComponent(props) {
      return React.createElement(Provider, {
        store: configureMockStore()(initalStore)
      }, React.createElement(Comp, props));
    },
    componentSetup: function componentSetup() {
      var additionalStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var props = arguments.length > 1 ? arguments[1] : undefined;
      var attachTo = arguments.length > 2 ? arguments[2] : undefined;
      var store = configureMockStore()(_extends({}, initalStore, {}, additionalStore));
      var wrappedComponent = React.createElement(Provider, {
        store: store
      }, React.createElement(Comp, props));
      return mount(wrappedComponent, attachTo ? {
        attachTo: attachTo
      } : undefined);
    }
  };
});