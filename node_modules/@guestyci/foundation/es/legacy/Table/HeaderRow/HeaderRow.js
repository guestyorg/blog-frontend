import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import CheckboxCell from "../CheckboxCell";
import createStyles from "../../../createStyles";
import { white } from "../../../theme/colors";
const useStyles = createStyles(theme => ({
  root: {
    height: 45,
    borderBottom: `1px solid ${theme.palette.text.primary}`,
    display: 'table-header-group',
    '& .header-cell, .checkbox-cell': {
      '&.cell-group-left': {
        borderTop: `2px solid ${theme.palette.border}`
      },
      '&.cell-group-right': {
        borderTopWidth: 2,
        borderTopColor: `${theme.palette.border} !important`
      },
      '&.cell-group-item-last': {
        '& .header-cell-content': {
          '& .header-cell-divider': {
            display: 'none'
          }
        }
      },
      '&.cell-group-item-first': {
        '& .header-cell-content': {
          '& .header-cell-divider': {
            display: 'none'
          }
        }
      },
      '&:last-child': {
        '& .header-cell-content': {
          '& .header-cell-divider': {
            display: 'none'
          }
        }
      }
    }
  },
  checkboxCell: {
    zIndex: 11,
    position: 'sticky',
    top: 0,
    backgroundColor: white,
    borderBottom: `1px solid ${theme.palette.text.primary}`
  }
}), {
  name: 'HeaderRow'
});

const HeaderRow = ({
  children,
  className,
  style,
  draggable,
  onDragDrop,
  onSort,
  onResize,
  sortBy,
  multiSelect,
  masterCheckbox: {
    checked = false,
    indeterminate = false,
    onChange = noop
  }
}) => {
  const fixedLeft = children[0]?.props?.fixed === 'left';
  const classes = useStyles();
  const [sortId, sortDirection] = useMemo(() => {
    const minusPrefix = sortBy?.startsWith('-');
    const direction = minusPrefix ? 'desc' : 'asc';
    const id = minusPrefix ? sortBy.substring(1) : sortBy;
    return [id, direction];
  }, [sortBy]);
  const cells = useMemo(() => React.Children.map(children, child => {
    const {
      className: cellClassName,
      fixed,
      id
    } = child.props;
    return React.cloneElement(child, {
      draggable: !fixed && draggable,
      onDragDrop,
      className: cn(cellClassName),
      onResize,
      onSort,
      sortDirection: sortId === id ? sortDirection : undefined
    });
  }), [children, draggable, sortDirection, sortId]);
  return /*#__PURE__*/React.createElement("div", {
    className: cn('header-row', className, classes.root),
    style: style,
    "data-qa": "header-row"
  }, multiSelect && /*#__PURE__*/React.createElement(CheckboxCell, {
    onChange: onChange,
    checked: checked,
    indeterminate: indeterminate,
    fixed: fixedLeft,
    className: cn({
      'checkbox-cell cell-group-left': fixedLeft
    }, classes.checkboxCell)
  }), cells);
};

HeaderRow.defaultProps = {
  style: {},
  className: '',
  masterCheckbox: {
    checked: false,
    indeterminate: false,
    onChange: noop
  },
  multiSelect: false,
  draggable: false,
  onDragDrop: noop
};
HeaderRow.propTypes = {
  draggable: PropTypes.bool,
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  style: PropTypes.shape(),
  multiSelect: PropTypes.bool,
  masterCheckbox: PropTypes.shape({
    checked: PropTypes.bool,
    indeterminate: PropTypes.bool,
    onChange: PropTypes.func
  }),
  onDragDrop: PropTypes.func,
  sortBy: PropTypes.string,
  onSort: PropTypes.func
};
export default HeaderRow;