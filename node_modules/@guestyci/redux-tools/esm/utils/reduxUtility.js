import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import isEmpty from 'lodash.isempty'; // For only thunk MIDDLEWARE

export var API_SUCCESS = 'SUCCESS';
export var API_FAILURE = 'FAILURE';
export var API_REQUEST = 'REQUEST'; // For working with API MIDDLEWARE

export var SUCCESS = 'SUCCESS';
export var FAILURE = 'FAILURE';
export var REQUEST = 'REQUEST';

var _trim = function _trim(payload) {
  if (!payload) {
    return ['payload'];
  }

  return payload.split(',').map(function (item) {
    return item.trim();
  });
};
/**
 * Create a simple action creator according to the type and payload structure
 * @param type  {String}  The type to dispatch
 * @param argNames  {String}  Spread of strings to pass (each argument must be string)
 * @returns {function(...[*]): {type: *}} The action creator function to be called : if argsName passed,
 * will create the structure according to the desired argNames. Other will only accept and object and set it as payload
 */


export function makeActionCreator(type) {
  for (var _len = arguments.length, argNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    argNames[_key - 1] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var action = {
      type: type
    };

    if (!isEmpty(argNames)) {
      argNames.forEach(function (arg, index) {
        if (!isEmpty(arg)) {
          action[argNames[index]] = args[index];
        }
      });
    } else {
      var payload = args[0];
      action.payload = payload;
    }

    return action;
  };
}
/**
 * Create the normalized action creators for a specific flow
 * @param type {String} The type to dispatch to -
 * success, failure, request will be added automatically
 * @param successPayload {String} the structure of the success payload -
 * separated by comma if multiple - defaults to payload
 * @param errorPayload {String} the structure of the error payload -
 * separated by comma if multiple - defaults to payload
 * @param requestPayload {String} the structure of the request payload -
 * separated by comma if multiple - defaults to payload
 * @returns {{success: {function(...[*])}, failure: {function(...[*])}, request: {function(...[*])}}
 */

export function makeAsyncActionCreator(type) {
  var successPayload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var errorPayload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var requestPayload = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  var sPayload = _trim(successPayload);

  var ePayload = _trim(errorPayload);

  var rPayload = _trim(requestPayload);

  return {
    success: makeActionCreator.apply(void 0, ["".concat(type, " ").concat(API_SUCCESS)].concat(_toConsumableArray(sPayload))),
    failure: makeActionCreator.apply(void 0, ["".concat(type, " ").concat(API_FAILURE)].concat(_toConsumableArray(ePayload))),
    request: makeActionCreator.apply(void 0, ["".concat(type, " ").concat(API_REQUEST)].concat(_toConsumableArray(rPayload)))
  };
}