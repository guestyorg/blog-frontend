import { useCallback, useEffect, useRef } from 'react';

const useInfiniteScroll = ({
  /** Scroll offset, from the bottom, from which loading the next chunk should be triggered */
  scrollOffset,

  /** index of the first item in the current chunk */
  skip,

  /** total count of the data entries */
  totalCount,

  /** cb function handle loading more data */
  onLoadMore,

  /** loading state of the data */
  isLoading,

  /** number of rows per page */
  pageSize
}) => {
  const scrollableRef = useRef(null);
  const hasReachedBottom = useCallback((scrollHeight, clientHeight, scrollTop) => scrollHeight - clientHeight - scrollTop <= scrollOffset, [scrollOffset]);
  const scrollHandler = useCallback(e => {
    const nextSkip = skip + pageSize;

    if (nextSkip < totalCount) {
      const {
        current: scrollableEl
      } = scrollableRef;
      const {
        target: {
          scrollHeight,
          scrollTop,
          clientHeight
        }
      } = e;

      if (hasReachedBottom(scrollHeight, clientHeight, scrollTop)) {
        scrollableEl.removeEventListener('scroll', scrollHandler);
        onLoadMore(nextSkip, pageSize);
      }
    }
  }, [skip, pageSize, totalCount, onLoadMore, hasReachedBottom]);
  useEffect(() => {
    if (!isLoading && totalCount) {
      const {
        current: scrollableEl
      } = scrollableRef;

      if (scrollableEl) {
        scrollableEl.addEventListener('scroll', scrollHandler);
        return () => scrollableEl.removeEventListener('scroll', scrollHandler);
      }
    }
  }, [scrollHandler, isLoading, totalCount]);
  return scrollableRef;
};

export default useInfiniteScroll;