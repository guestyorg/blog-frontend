"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _Cell = _interopRequireDefault(require("../Cell"));

var TextCell = function TextCell(_ref) {
  var children = _ref.children,
      isLoading = _ref.isLoading,
      overflowEllipsis = _ref.overflowEllipsis,
      overflowEllipsisTooltip = _ref.overflowEllipsisTooltip,
      className = _ref.className,
      contentClassName = _ref.contentClassName,
      style = _ref.style,
      Placeholder = _ref.Placeholder,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["children", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style", "Placeholder"]);
  return /*#__PURE__*/_react["default"].createElement(_Cell["default"], (0, _extends2["default"])({}, rest, {
    isLoading: isLoading,
    overflowEllipsis: overflowEllipsis,
    overflowEllipsisTooltip: overflowEllipsisTooltip || children,
    className: (0, _classnames["default"])('text-cell', className),
    contentClassName: contentClassName,
    style: style,
    Placeholder: Placeholder,
    "data-qa": "text-cell"
  }), children);
};

TextCell.propTypes = {
  /** content of a cell */
  children: _propTypes.node,

  /** indicator that cell is yet to receive data */
  isLoading: _propTypes.bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: _propTypes.bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: _propTypes.node,

  /** class name of cell */
  className: _propTypes.string,

  /** class name of cell content wrapper */
  contentClassName: _propTypes.string,

  /** styles applied to a cell */
  style: (0, _propTypes.shape)(),

  /** component to be rendered when loading is in progress  */
  Placeholder: _propTypes.node
};
TextCell.defaultProps = {
  children: '',
  overflowEllipsis: true,
  overflowEllipsisTooltip: null
};
var _default = TextCell;
exports["default"] = _default;