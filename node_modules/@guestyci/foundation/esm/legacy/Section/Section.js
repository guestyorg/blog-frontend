import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { createUseStyles } from 'react-jss';
import Col from "../Col/Col";
import Row from "../Row/Row";
var useStyles = createUseStyles({
  children: {
    justifyContent: 'inherit',
    alignItems: 'inherit',
    width: '100%'
  }
});
var Section = React.forwardRef(function Section(_ref, ref) {
  var className = _ref.className,
      style = _ref.style,
      children = _ref.children,
      col = _ref.col,
      width = _ref.width,
      dense = _ref.dense,
      innerClassName = _ref.innerClassName,
      spacing = _ref.spacing,
      flex = _ref.flex,
      justify = _ref.justify,
      align = _ref.align,
      bgColor = _ref.bgColor;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: cn("p-".concat(spacing), width ? "width-".concat(width) : 'w-fill', {
      'd-flex': flex
    }, _defineProperty({}, "bg-".concat(bgColor), bgColor), _defineProperty({}, "justify-content-".concat(justify), justify), _defineProperty({}, "align-items-".concat(align), align), className),
    style: style
  }, col ? /*#__PURE__*/React.createElement(Col, {
    className: cn(classes.children, innerClassName),
    dense: dense
  }, children) : /*#__PURE__*/React.createElement(Row, {
    className: cn(classes.children, innerClassName),
    dense: dense
  }, children));
});
Section.defaultProps = {
  bgColor: null,
  className: '',
  style: {},
  col: false,
  children: null,
  width: null,
  spacing: 6,
  dense: false,
  innerClassName: '',
  flex: false
};
Section.propTypes = {
  /** Background color for section */
  bgColor: PropTypes.string,

  /** Additional class for top level */
  className: PropTypes.string,

  /** Indicator whether or not to render section as column */
  col: PropTypes.bool,

  /** Additional styling for root level */
  style: PropTypes.shape(),

  /** Width to specify to section - otherwise full width */
  width: PropTypes.number,

  /** Child components inside a section */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /** Indicator to set the children as dense (no inherited margins) */
  dense: PropTypes.bool,

  /** Additional class name for Col/Row child components */
  innerClassName: PropTypes.string,

  /** Boolean to set section a flex */
  flex: PropTypes.bool,

  /** Set the section padding spacing 0-10 calculated in leaps of 5px */
  spacing: PropTypes.number,

  /** Set flex alignment  */
  align: PropTypes.string,

  /** Set flex justify content */
  justify: PropTypes.string
}; // Hack for withInfo plugin

Section.displayName = 'Section';
export default Section;