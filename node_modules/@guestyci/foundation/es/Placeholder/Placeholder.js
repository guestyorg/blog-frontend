import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
import { gray200 } from "../theme/colors";
const useStyles = createStyles(theme => ({
  root: {
    width: '100%',
    backgroundColor: theme.palette.background.system,
    display: 'inline-block'
  },
  animate: {
    animation: '$shimmer 2s infinite linear',
    background: `linear-gradient(to right, ${theme.palette.background.system} 8%, ${gray200} 18%, ${theme.palette.background.system} 28%);`,
    backgroundSize: 1000
  },
  '@keyframes shimmer': {
    from: {
      backgroundPosition: -1000
    },
    to: {
      backgroundPosition: 1000
    }
  }
}), {
  name: 'Placeholder'
});
const Placeholder = React.forwardRef(function Placeholder(_ref, ref) {
  let {
    className = '',
    style = {},
    animate = true,
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "style", "animate", "jss"]);

  const classes = useStyles({
    jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn(className, classes.root, {
      [classes.animate]: animate
    }),
    style: style
  }));
});
Placeholder.displayName = 'Placeholder';
Placeholder.propTypes = {
  /** Additional classes to style your placeholder */
  className: PropTypes.string,

  /** additional styles to pass to placeholder */
  style: PropTypes.shape(),

  /** if placeholder should be animated */
  animate: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
export default Placeholder;