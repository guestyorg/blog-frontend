import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Icon from "../Icon";
import IconButton from "../IconButton/IconButton";

var TileItem = /*#__PURE__*/function (_Component) {
  _inherits(TileItem, _Component);

  var _super = _createSuper(TileItem);

  function TileItem() {
    var _this;

    _classCallCheck(this, TileItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onDeleteItem = function () {
      var _this$props = _this.props,
          onDelete = _this$props.onDelete,
          itemKey = _this$props.itemKey;
      onDelete(itemKey);
    };

    return _this;
  }

  _createClass(TileItem, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          text = _this$props2.text,
          width = _this$props2.width,
          height = _this$props2.height;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('flex-space-between-center flex-column bg-white p-1 h-fill w-fill'),
        "data-qa": "tile-item"
      }, /*#__PURE__*/React.createElement(IconButton, {
        className: "d-flex-fill flex-end-center",
        onClick: this.onDeleteItem,
        icon: "BtnDelete",
        iconHeight: 10,
        iconWidth: 10
      }), /*#__PURE__*/React.createElement(Icon, {
        icon: icon,
        width: width,
        height: height
      }), /*#__PURE__*/React.createElement("div", {
        className: "item-text font-size-xs mb-2"
      }, text));
    }
  }]);

  return TileItem;
}(Component);

TileItem.defaultProps = {
  icon: '',
  text: '',
  height: 40,
  width: 40,
  onDelete: function onDelete() {}
};
TileItem.propTypes = {
  // icon name - string
  icon: PropTypes.string,
  // icon text
  text: PropTypes.string,
  // icon height
  height: PropTypes.number,
  // icon width
  width: PropTypes.number,
  // item's key
  itemKey: PropTypes.string.isRequired,
  // callback to be called when a tile is changed
  onDelete: PropTypes.func
};
export default TileItem;