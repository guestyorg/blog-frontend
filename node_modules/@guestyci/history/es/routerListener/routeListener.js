export const NGNIX_BASE = '/apps';
export function serializeUrl({
  baseUrl = '',
  alias,
  locationPath = ''
}) {
  const appUrlPath = `${alias || baseUrl}${locationPath}`;
  return appUrlPath.replace(NGNIX_BASE, '');
}
export function postInnerAppRouteChange(location, search) {
  window.parent.postMessage({
    action: 'INNER_APP_ROUTE_CHANGE',
    payload: {
      location,
      search
    }
  }, '*');
}
export function pushError(errorMessage) {
  window.parent.postMessage({
    action: 'INNER_APP_ERROR',
    payload: errorMessage
  }, '*');
}
export function postRouteChangeOutOfApp(location, search) {
  window.parent.postMessage({
    action: 'ROUTE_CHANGE_OUT_OF_APP',
    payload: {
      location,
      search
    }
  }, '*');
}
export function shouldPostBaseUrl(baseUrl, alias) {
  try {
    if (!baseUrl) {
      return false;
    }

    const serializedBaseUrl = serializeUrl({
      baseUrl,
      alias
    });
    const location = window.parent.location.pathname;
    return !location.includes(serializedBaseUrl);
  } catch (error) {
    console.error('No window found!');
    return false;
  }
}
export function init(pathname, search = '') {
  const location = serializeUrl({
    locationPath: pathname
  });
  postInnerAppRouteChange(location, search);
}
export const listener = history => {
  const {
    baseUrl,
    alias,
    isFragment
  } = history;

  if (shouldPostBaseUrl(baseUrl, alias) && isFragment) {
    init(baseUrl);
  }

  return history.listen((location, action) => {
    if (action === 'PUSH' || action === 'REPLACE') {
      const {
        pathname: locationPath,
        search
      } = location;
      const path = serializeUrl({
        baseUrl,
        alias,
        locationPath
      });

      if (history.isFragment) {
        postInnerAppRouteChange(path, search);
      }
    }
  });
};