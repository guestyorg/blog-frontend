import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import CellRow from "./CellRow/CellRow";

const LoadingIndicator = ({
  show,
  isTableEmpty,
  pageSize,
  multiSelect,
  checked,
  className,
  cellComponents
}) => {
  const rowPlaceholdersArray = useMemo(() => {
    const count = isTableEmpty ? pageSize : 4;
    return [...Array(count).keys()];
  }, [isTableEmpty, pageSize]);
  return show ? rowPlaceholdersArray.map(key => /*#__PURE__*/React.createElement(CellRow, {
    key: `placeholder-${key}`,
    rowId: `placeholder-${key}`,
    multiSelect: multiSelect,
    className: className,
    data: {},
    checked: checked,
    isLoading: true
  }, cellComponents)) : null;
};

LoadingIndicator.defaultProps = {
  isTableEmpty: true,
  pageSize: 25,
  multiSelect: false,
  checked: false,
  className: undefined,
  cellComponents: undefined
};
LoadingIndicator.propTypes = {
  /** Defines whether to show the indicator */
  show: PropTypes.bool,

  /** Defines whether the table is currently empty */
  isTableEmpty: PropTypes.bool,

  /** Numner of items per page */
  pageSize: PropTypes.number,

  /** Boolean indicator for allowing bulk actions */
  multiSelect: PropTypes.bool,

  /** Boolean indicator the rows to be checked */
  checked: PropTypes.bool,

  /** Optional class name to the cell row */
  className: PropTypes.string,

  /** cell components to be shown in each row  */
  cellComponents: PropTypes.node.isRequired
};
export default LoadingIndicator;