"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _filter = _interopRequireDefault(require("lodash/filter"));

var _head = _interopRequireDefault(require("lodash/head"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _map = _interopRequireDefault(require("lodash/map"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _find = _interopRequireDefault(require("lodash/find"));

var _size = _interopRequireDefault(require("lodash/size"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * Create a wrapper compose to support multi-select functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */
var withMultiSelect = function withMultiSelect(ComposedComponent) {
  var _temp;

  return _temp = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(MultiSelectWrapper, _Component);

    var _super = _createSuper(MultiSelectWrapper);

    function MultiSelectWrapper(props) {
      var _this;

      (0, _classCallCheck2["default"])(this, MultiSelectWrapper);
      _this = _super.call(this, props);

      _this.getSelectedItems = function (options, selected) {
        if (!(0, _size["default"])(selected)) return [];
        var checkedItemsSet = new Set(selected);
        return (0, _filter["default"])(options, function (option) {
          return checkedItemsSet.has(option.value);
        });
      };

      _this.getUnselectedItems = function (options, selected) {
        if (!(0, _size["default"])(selected)) return options;
        var checkedItemsSet = new Set(selected);
        return (0, _filter["default"])(options, function (option) {
          return !checkedItemsSet.has(option.value);
        });
      };

      _this.getPlaceholder = function (options) {
        var single = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'more';
        var plural = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'more';
        if (!options || !(0, _size["default"])(options)) return '';
        var tmpOptions = options;
        var firstItem;
        firstItem = (0, _head["default"])(options).label;

        if (!(0, _isString["default"])(firstItem)) {
          tmpOptions = (0, _map["default"])(options, 'name');
          firstItem = (0, _head["default"])(tmpOptions);
        }

        if (tmpOptions.length === 1) return firstItem;
        var type = tmpOptions.length === 2 ? single : plural;
        return "".concat(firstItem, " + ").concat(tmpOptions.length - 1, " ").concat(type);
      };

      _this.setValues = function (values) {
        var _this$props = _this.props,
            single = _this$props.single,
            plural = _this$props.plural,
            options = _this$props.options;

        var unselectedOptions = _this.getUnselectedItems(options, values);

        var selectedOptions = _this.getSelectedItems(options, values);

        var searchInputValue = _this.getPlaceholder(selectedOptions, single, plural);

        _this.setState({
          searchInputValue: searchInputValue,
          selectedOptions: selectedOptions,
          unselectedOptions: unselectedOptions
        });
      };

      _this.setNewOptions = function (options, selectedValues) {
        var selectedOptions = _this.state.selectedOptions;
        var selectedItems = selectedValues || selectedOptions.map(function (option) {
          return option.value;
        });

        var unselectedOptions = _this.getUnselectedItems(options, selectedItems);

        _this.setState({
          unselectedOptions: unselectedOptions
        });
      };

      _this.clearSelected = function () {
        var _this$props2 = _this.props,
            onChange = _this$props2.onChange,
            id = _this$props2.id,
            name = _this$props2.name,
            options = _this$props2.options;

        _this.setState({
          searchInputValue: '',
          selectedOptions: [],
          unselectedOptions: options
        });

        onChange([], id || name);
      };

      _this.handleItemChange = function (item) {
        var _this$state = _this.state,
            selectedOptions = _this$state.selectedOptions,
            unselectedOptions = _this$state.unselectedOptions;
        var _this$props3 = _this.props,
            single = _this$props3.single,
            plural = _this$props3.plural,
            id = _this$props3.id,
            name = _this$props3.name,
            onChange = _this$props3.onChange;
        var isChecked = (0, _find["default"])(selectedOptions, {
          value: item.value
        });

        if (isChecked) {
          unselectedOptions.push(item);
          selectedOptions = (0, _filter["default"])(selectedOptions, function (option) {
            return option.value !== item.value;
          });
        } else {
          selectedOptions.push(item);
          unselectedOptions = (0, _filter["default"])(unselectedOptions, function (option) {
            return option.value !== item.value;
          });
        }

        var searchInputValue = _this.getPlaceholder(selectedOptions, single, plural);

        _this.setState({
          searchInputValue: searchInputValue,
          selectedOptions: selectedOptions,
          unselectedOptions: unselectedOptions
        });

        onChange((0, _map["default"])(selectedOptions, 'value'), id || name);
      };

      var intialValues = props.value || props.values;

      var initialSelectedItems = _this.getSelectedItems(props.options, intialValues);

      _this.state = {
        unselectedOptions: _this.getUnselectedItems(props.options, intialValues),
        selectedOptions: initialSelectedItems,
        searchInputValue: _this.getPlaceholder(initialSelectedItems, props.single, props.plural)
      };
      return _this;
    }

    (0, _createClass2["default"])(MultiSelectWrapper, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props4 = this.props,
            value = _this$props4.value,
            values = _this$props4.values,
            options = _this$props4.options;
        var prevValue = prevProps.value,
            prevValues = prevProps.values,
            prevOptions = prevProps.options;
        var dropdownValues = value || values;
        var prevDropdownValues = prevValue || prevValues;

        if (options.length !== prevOptions.length && !(0, _isEqual["default"])(options, prevOptions)) {
          this.setNewOptions(options, dropdownValues);
        }

        if (!(0, _isEqual["default"])(dropdownValues, prevDropdownValues)) {
          this.setValues(dropdownValues);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state2 = this.state,
            searchInputValue = _this$state2.searchInputValue,
            unselectedOptions = _this$state2.unselectedOptions,
            selectedOptions = _this$state2.selectedOptions;
        return /*#__PURE__*/_react["default"].createElement(ComposedComponent, (0, _extends2["default"])({}, this.props, {
          unselectedOptions: unselectedOptions,
          selectedOptions: selectedOptions,
          searchInputValue: searchInputValue,
          onChange: this.handleItemChange,
          getSelectedItems: this.getSelectedItems,
          getUnselectedItems: this.getUnselectedItems,
          clearSelected: this.clearSelected,
          setNewOptions: this.setNewOptions,
          setValues: this.setValues
        }));
      }
    }]);
    return MultiSelectWrapper;
  }(_react.Component), _temp;
};

var _default = withMultiSelect;
exports["default"] = _default;