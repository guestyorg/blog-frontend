import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useEffect, useMemo, useRef } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
import Row from "../Layout/Row";
import Button from "../Button";
import TextField from "../TextField";
import PickerClearButton from "../basePicker/PickerClearButton";
import PickerInputButton from "../basePicker/PickerInputButton";

var BtnTime = function BtnTime(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M10.5 0C4.71 0 0 4.71 0 10.5S4.71 21 10.5 21 21 16.29 21 10.5 16.29 0 10.5 0zm0 20C5.262 20 1 15.738 1 10.5S5.262 1 10.5 1 20 5.262 20 10.5 15.738 20 10.5 20z"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M10 5H9v7h7v-1h-6z"
  }));
};

BtnTime.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 21 21"
};
import Input from "../Input";
import PickerResetWrapper from "../basePicker/PickerResetWrapper";
import { timePickerInputStyles } from "./styles";
export const useStyles = createStyles(theme => _extends({}, timePickerInputStyles(theme)));
export const deserializeTimeToObject = value => {
  if (!value) {
    return {
      hour: '',
      minute: '',
      ampm: ''
    };
  }

  const valueArray = value.split(':');
  const minValueArray = valueArray[1].trim().split(' ');
  return {
    hour: (valueArray[0] || '00').trim(),
    minute: (minValueArray[0] || '00').trim(),
    ampm: minValueArray[1] || 'am'
  };
};

const serializeTimeFromValue = (e, {
  hour,
  minute,
  ampm
}, name, paddedValue) => {
  const {
    value
  } = e.target;
  const usableValue = paddedValue || value;

  if (!value) {
    return '';
  }

  switch (name) {
    case 'hour':
      return `${usableValue} : ${minute || '00'} ${ampm || 'am'}`;

    case 'minute':
      return `${hour || '00'} : ${usableValue || ''} ${ampm || 'am'}`;

    case 'ampm':
      return `${hour || '00'} : ${minute || '00'} ${usableValue}`;

    default:
      return '';
  }
};

const jumpToNextInput = ref => {
  ref.current.select();
};

const TimePickerInput = React.forwardRef(function TimePickerInput(_ref, ref) {
  let {
    value,
    onClick,
    onChange,
    open,
    name = '',
    className,
    style,
    disabled,
    onClear,
    noClear,
    defaultValue,
    resetable,
    jss,
    error
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "onClick", "onChange", "open", "name", "className", "style", "disabled", "onClear", "noClear", "defaultValue", "resetable", "jss", "error"]);

  const classes = useStyles({
    jss
  });
  const hourRef = useRef();
  const minuteRef = useRef();
  const ampmRef = useRef();
  useEffect(() => {
    if (open) {
      hourRef.current.focus();
    }
  }, [open]);
  const time = useMemo(() => deserializeTimeToObject(value), [value]);

  const handleInputFocus = e => {
    e.target.select();
  };

  const handleInputBlur = inputName => e => {
    const {
      value: inputValue
    } = e.target;
    const paddedValue = inputValue.length === 1 ? `0${inputValue}` : inputValue;

    if (paddedValue !== inputValue) {
      const newValue = serializeTimeFromValue(e, time, inputName, paddedValue);
      onChange(e, newValue);
    }
  };

  const handleReset = e => {
    e.stopPropagation();
    onChange(e, defaultValue);
  };

  const dispatchEvent = (e, newValue) => {
    e.stopPropagation();
    onChange(e, newValue);
  };

  const handleAMPMChange = e => {
    const newValue = serializeTimeFromValue(e, time, 'ampm');
    dispatchEvent(e, newValue);
  };

  const handleHoursChange = e => {
    const {
      value: inputValue
    } = e.currentTarget;

    if (inputValue < 0 || inputValue > 12) {
      return;
    }

    const newValue = serializeTimeFromValue(e, time, 'hour');
    dispatchEvent(e, newValue);

    if (inputValue.length === 2) {
      jumpToNextInput(minuteRef);
    }
  };

  const handleMinutesChange = e => {
    const {
      value: inputValue
    } = e.target;

    if (inputValue < 0 || inputValue >= 60) {
      return;
    }

    const newValue = serializeTimeFromValue(e, time, 'minute');
    dispatchEvent(e, newValue);

    if (inputValue.length === 2) {
      jumpToNextInput(ampmRef);
    }
  };

  const {
    hour,
    minute,
    ampm
  } = time;
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: cn(classes.root, {
      [classes.disabled]: disabled,
      [classes.focus]: open,
      [classes.error]: error
    }, className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/React.createElement(PickerResetWrapper, {
    align: "center",
    justify: "between",
    resetable: resetable,
    onReset: handleReset
  }, /*#__PURE__*/React.createElement(PickerInputButton, {
    svg: BtnTime,
    disabled: disabled,
    active: open
  }), /*#__PURE__*/React.createElement(Row, {
    className: classes.row,
    span: "auto",
    align: "center"
  }, /*#__PURE__*/React.createElement(Input, {
    disabled: disabled,
    ref: hourRef,
    maxLength: 2,
    onFocus: handleInputFocus,
    onChange: handleHoursChange,
    onBlur: handleInputBlur('hour'),
    name: "hour",
    value: hour,
    className: classes.input,
    placeholder: "HH"
  }), /*#__PURE__*/React.createElement(TextField, {
    className: classes.separator
  }, ":"), /*#__PURE__*/React.createElement(Input, {
    disabled: disabled,
    maxLength: 2,
    ref: minuteRef,
    onFocus: handleInputFocus,
    onChange: handleMinutesChange,
    onBlur: handleInputBlur('minute'),
    name: "minute",
    value: minute,
    className: classes.input,
    placeholder: "MM"
  }), /*#__PURE__*/React.createElement(Input, {
    disabled: disabled,
    maxLength: 2,
    ref: ampmRef,
    onFocus: handleInputFocus,
    onChange: handleAMPMChange,
    name: "ampm",
    value: ampm,
    className: classes.input,
    placeholder: "AM"
  })), !noClear && !disabled && /*#__PURE__*/React.createElement(PickerClearButton, {
    show: !!value,
    onClick: onClear
  })));
});
TimePickerInput.propTypes = {
  /** Selected value to pass to the input */
  value: PropTypes.oneOfType([PropTypes.shape(), PropTypes.array, PropTypes.string, PropTypes.number]),
  onClick: PropTypes.func,
  onClear: PropTypes.func,

  /** Prop to remove clear button if exists */
  noClear: PropTypes.bool,

  /** Disabled boolean indicator */
  disabled: PropTypes.bool,

  /** Additional className */
  className: PropTypes.string,

  /** Additional style */
  style: PropTypes.shape(),

  /** form level name */
  name: PropTypes.string,

  /** Indicator whether or not the dropdown is open */
  open: PropTypes.bool,

  /** jss override  */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
TimePickerInput.displayName = 'TimePickerInput';
export default TimePickerInput;