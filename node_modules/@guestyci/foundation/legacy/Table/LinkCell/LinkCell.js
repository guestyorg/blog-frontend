"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _Link = _interopRequireDefault(require("@guestyci/history/Link"));

var _TextCell = _interopRequireDefault(require("../TextCell"));

var _createStyles = _interopRequireDefault(require("../../../createStyles"));

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    link: {
      '&:hover': {
        textDecoration: 'underline'
      },
      '.row-hovered &': {
        color: theme.palette.brand.primary,
        fill: theme.palette.brand.primary
      }
    }
  };
}, {
  name: 'LinkCell'
});

var LinkCell = function LinkCell(_ref) {
  var title = _ref.title,
      href = _ref.href,
      target = _ref.target,
      isLoading = _ref.isLoading,
      className = _ref.className,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["title", "href", "target", "isLoading", "className", "style"]);
  var classes = useStyles();
  return /*#__PURE__*/_react["default"].createElement(_TextCell["default"], (0, _extends2["default"])({}, rest, {
    isLoading: isLoading,
    overflowEllipsisTooltip: title,
    className: (0, _classnames["default"])('link-cell', className),
    style: style,
    "data-qa": "link-cell"
  }), /*#__PURE__*/_react["default"].createElement(_Link["default"], {
    href: href,
    className: classes.link,
    target: target
  }, title));
};

LinkCell.propTypes = {
  /** text of a link */
  title: _propTypes.string,

  /** navigation prop for window location navigation */
  href: _propTypes.string,

  /** target to open link in e.g. _blank */
  target: _propTypes.string,

  /** indicator that cell is yet to receive data */
  isLoading: _propTypes.bool,

  /** class name of cell */
  className: _propTypes.string,

  /** styles applied to a cell */
  style: (0, _propTypes.shape)()
};
LinkCell.defaultProps = {
  title: '',
  href: '',
  target: '',
  isLoading: false
};
LinkCell.displayName = 'LinkCell';
var _default = LinkCell;
exports["default"] = _default;