import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import Popper from "../legacy/Popper";
import Paper from "../Paper";
import createStyles from "../createStyles";
import { white } from "../theme/colors";
import { OriginDirectionType } from "../enums";
import ClickOutsideListener from "../ClickOutsideListener";
import useComposeRefs from "../useComposeRefs";
export const useStyles = createStyles(theme => ({
  enter: {
    opacity: 0.01,
    transform: 'scale(.85)'
  },
  enterActive: {
    transform: 'scale(1)',
    opacity: 1,
    transition: theme.transition.create('all', {
      duration: 200
    })
  },
  enterDone: {
    transform: 'scale(1)',
    opacity: 1
  },
  exit: {
    opacity: 1,
    transform: 'scale(1)'
  },
  exitDone: {
    opacity: 0,
    transform: 'scale(.85)'
  },
  exitActive: {
    transform: 'scale(.85)',
    opacity: 0.01,
    transition: theme.transition.create('all', {
      duration: 200
    })
  },
  content: {
    padding: theme.spacer(2),
    borderRadius: 3,
    backgroundColor: theme.palette.secondary.default,
    color: white
  },
  maxWidth: {
    maxWidth: 350
  }
}), {
  name: 'Popover'
});
const Popover = React.forwardRef(function Popover(_ref, ref) {
  let {
    children,
    className = '',
    body = null,
    style = {},
    placement = OriginDirectionType.Top,
    onClose = noop,
    open = false,
    anchor,
    offset = 15,
    fullWidth = false,
    backdrop = true,
    jss = {},
    popperProps = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "className", "body", "style", "placement", "onClose", "open", "anchor", "offset", "fullWidth", "backdrop", "jss", "popperProps"]);

  const popoverRef = useRef();
  const composedRef = useCallback(useComposeRefs(anchor, popoverRef), []);
  const classes = useStyles({
    jss
  });
  const [originDirection, anchorDirection = 'center'] = placement.split(' ');
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    ref: composedRef
  }, children), body && /*#__PURE__*/React.createElement(Popper, _extends({}, popperProps, {
    offset: offset,
    trigger: open,
    backdrop: backdrop,
    transition: {
      enter: classes.enter,
      enterActive: classes.enterActive,
      enterDone: classes.enterActive,
      exit: classes.exit,
      exitActive: classes.exitActive,
      exitDone: classes.exitDone
    },
    anchorDirection: anchorDirection,
    originDirection: originDirection,
    anchor: popoverRef
  }), /*#__PURE__*/React.createElement(ClickOutsideListener, {
    delay: 250,
    onClickOutside: onClose
  }, /*#__PURE__*/React.createElement(Paper, _extends({
    ref: ref
  }, props, {
    elevation: 2,
    className: cn(classes.content, {
      [classes.maxWidth]: !fullWidth
    }, className),
    style: style
  }), body))));
});
Popover.propTypes = {
  /** Control option for anchor in popover */
  anchor: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.shape({
    current: PropTypes.object
  })]),

  /** Add backdrop to Popover */
  backdrop: PropTypes.bool,

  /** Bool - Boolean defining whether or not to toggle the popover */
  open: PropTypes.bool.isRequired,

  /** Node - the component wrapped by the tooltip */
  children: PropTypes.node.isRequired,

  /** String || React Element - The tooltip body */
  body: PropTypes.node,

  /** onClose  - Function to support the popover toggle */
  onClose: PropTypes.func,

  /** Additional component class */
  className: PropTypes.string,

  /** Additional component style */
  style: PropTypes.shape(),

  /** Popover placement supporting:
   *  (top, bottom, left, right, top start, top end, bottom start, bottom end, left start, left end, right start, right end )
   *  */
  placement: PropTypes.string,

  /** Set the popover content to fit to its children full width */
  fullWidth: PropTypes.bool,

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Additional Popper props */
  popperProps: PropTypes.shape(),

  /** offset position from anchor */
  offset: PropTypes.number
};
Popover.displayName = 'Popover';
export default Popover;