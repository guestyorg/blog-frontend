{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport IntlPolyfill from 'intl';\nimport React from 'react';\nimport IntlMessageFormat from 'intl-messageformat';\nimport escapeHtml from 'escape-html';\nimport cookie from 'cookie';\nimport queryParser from 'querystring';\nimport load from 'load-script';\nimport invariant from 'invariant';\nimport 'console-polyfill';\nimport merge from 'lodash/merge';\nimport * as constants from \"./react-intl-consts\";\n\nvar isGetLanguages = function isGetLanguages() {\n  return window && window.localStorage && window.localStorage.getItem('getLanguages');\n};\n\nString.prototype.defaultMessage = String.prototype.d = function (msg) {\n  if (this.search('GUESTY_KEY=') > -1) {\n    var newMsg = this.split('=');\n    var body = {\n      fields: {}\n    };\n    body.fields.message = {\n      stringValue: msg\n    };\n    console.log('Guesty translate:', this, newMsg[1], msg);\n    fetch(\"https://firestore.googleapis.com/v1beta1/projects/guesty-18n/databases/(default)/documents/overall/\".concat(newMsg[1].trim()), {\n      method: 'PATCH',\n      body: JSON.stringify(body)\n    });\n    return msg || '';\n  }\n\n  return this || msg || '';\n};\n\nvar ReactIntlUniversal = /*#__PURE__*/function () {\n  function ReactIntlUniversal() {\n    _classCallCheck(this, ReactIntlUniversal);\n\n    this.options = {\n      // Current locale such as 'en-US'\n      currentLocale: null,\n      // URL's query Key to determine locale. Example: if URL=http://localhost?lang=en-US, then set it 'lang'\n      urlLocaleKey: null,\n      // Cookie's Key to determine locale. Example: if cookie=lang:en-US, then set it 'lang'\n      cookieLocaleKey: null,\n      // app locale data like {\"en-US\":{\"key1\":\"value1\"},\"zh-CN\":{\"key1\":\"值1\"}}\n      locales: {},\n      // ability to accumulate missing messages using third party services like Sentry\n      warningHandler: console.warn.bind(console),\n      // Common locales js urls\n      commonLocaleDataUrls: {},\n      // disable escape html in variable mode\n      escapeHtml: true,\n      // Locale to use if a key is not found in the current locale\n      fallbackLocale: null,\n      debug: false\n    };\n  }\n  /**\n   * Get the formatted message by key\n   * @param {string} key The string representing key in locale data file\n   * @param {Object} variables Variables in message\n   * @returns {string} message\n   */\n\n\n  _createClass(ReactIntlUniversal, [{\n    key: \"get\",\n    value: function get(key, variables) {\n      var _this = this;\n\n      var defaultMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      invariant(key, 'key is required');\n      var _this$options = this.options,\n          locales = _this$options.locales,\n          currentLocale = _this$options.currentLocale,\n          formats = _this$options.formats,\n          warningHandler = _this$options.warningHandler,\n          fallbackLocale = _this$options.fallbackLocale,\n          debug = _this$options.debug;\n\n      var getMessage = function getMessage(key) {\n        if (!locales || !locales[currentLocale]) {\n          debug && warningHandler(\"[react-intl] locales data \\\"\".concat(currentLocale, \"\\\" does not exist.\"));\n          return '';\n        }\n\n        var msg = _this.getDescendantProp(locales[currentLocale], key);\n\n        if (msg == null) {\n          if (fallbackLocale) {\n            msg = _this.getDescendantProp(locales[fallbackLocale], key);\n\n            if (msg == null) {\n              debug && warningHandler(\"react-intl-universal key \\\"\".concat(key, \"\\\" not defined in \").concat(currentLocale, \" or the fallback locale, \").concat(fallbackLocale));\n\n              if (isGetLanguages()) {\n                return \"GUESTY_KEY=\".concat(key);\n              }\n\n              return '';\n            }\n          } else {\n            if (isGetLanguages()) {\n              return \"GUESTY_KEY=\".concat(key);\n            }\n\n            debug && warningHandler(\"react-intl-universal key \\\"\".concat(key, \"\\\" not defined in \").concat(currentLocale));\n            return '';\n          }\n        }\n\n        return msg;\n      };\n\n      var msg = getMessage(key);\n\n      if (msg == null || msg == '') {\n        if (defaultMessage != null) {\n          msg = defaultMessage;\n        } else {\n          return ''; // keep old behavior if default not provided\n        }\n      }\n\n      if (variables) {\n        variables = Object.assign({}, variables); // HTML message with variables. Escape it to avoid XSS attack.\n\n        for (var i in variables) {\n          var value = variables[i];\n\n          if (this.options.escapeHtml === true && (typeof value === 'string' || value instanceof String) && value.indexOf('<') >= 0 && value.indexOf('>') >= 0) {\n            value = escapeHtml(value);\n          }\n\n          variables[i] = value;\n        }\n      }\n\n      try {\n        var msgFormatter = new IntlMessageFormat(msg, currentLocale, formats);\n        return msgFormatter.format(variables);\n      } catch (err) {\n        debug && warningHandler(\"[react-intl] format message failed for key='\".concat(key, \"'.\"), err.message);\n        return msg;\n      }\n    }\n    /**\n     * Get the formatted html message by key.\n     * @param {string} key The string representing key in locale data file\n     * @param {Object} variables Variables in message\n     * @returns {React.Element} message\n     */\n\n  }, {\n    key: \"getHTML\",\n    value: function getHTML(key, variables) {\n      var msg = this.get(key, variables);\n\n      if (msg) {\n        var el = React.createElement('span', {\n          dangerouslySetInnerHTML: {\n            __html: msg\n          }\n        }); // when key exists, it should still return element if there's defaultMessage() after getHTML()\n\n        var defaultMessage = function defaultMessage() {\n          return el;\n        };\n\n        return Object.assign({\n          defaultMessage: defaultMessage,\n          d: defaultMessage\n        }, el);\n      }\n\n      return '';\n    }\n    /**\n     * As same as get(...) API\n     * @param {Object} options\n     * @param {string} options.id\n     * @param {string} options.defaultMessage\n     * @param {Object} variables Variables in message\n     * @returns {string} message\n     */\n\n  }, {\n    key: \"formatMessage\",\n    value: function formatMessage(messageDescriptor, variables) {\n      var id = messageDescriptor.id,\n          defaultMessage = messageDescriptor.defaultMessage;\n      return this.get(id, variables).defaultMessage(defaultMessage);\n    }\n    /**\n     * As same as getHTML(...) API\n     * @param {Object} options\n     * @param {string} options.id\n     * @param {React.Element} options.defaultMessage\n     * @param {Object} variables Variables in message\n     * @returns {React.Element} message\n     */\n\n  }, {\n    key: \"formatHTMLMessage\",\n    value: function formatHTMLMessage(messageDescriptor, variables) {\n      var id = messageDescriptor.id,\n          defaultMessage = messageDescriptor.defaultMessage;\n      return this.getHTML(id, variables).defaultMessage(defaultMessage);\n    }\n    /**\n     * Helper: determine user's locale via URL, cookie, and browser's language.\n     * You may not this API, if you have other rules to determine user's locale.\n     * @param {string} options.urlLocaleKey URL's query Key to determine locale. Example: if URL=http://localhost?lang=en-US, then set it 'lang'\n     * @param {string} options.cookieLocaleKey Cookie's Key to determine locale. Example: if cookie=lang:en-US, then set it 'lang'\n     * @returns {string} determined locale such as 'en-US'\n     */\n\n  }, {\n    key: \"determineLocale\",\n    value: function determineLocale() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.getLocaleFromURL(options) || this.getLocaleFromCookie(options) || this.getLocaleFromBrowser();\n    }\n    /**\n     * Initialize properties and load CLDR locale data according to currentLocale\n     * @param {Object} options\n     * @param {string} options.currentLocale Current locale such as 'en-US'\n     * @param {string} options.locales App locale data like {\"en-US\":{\"key1\":\"value1\"},\"zh-CN\":{\"key1\":\"值1\"}}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      invariant(options.currentLocale, 'options.currentLocale is required');\n      Object.assign(this.options, options);\n      var currentLocale = this.options.currentLocale;\n      this.options.formats = Object.assign({}, this.options.formats, constants.defaultFormats);\n      var langURL = this.getLocaleFromURL({\n        urlLocaleKey: 'lang'\n      });\n\n      if (langURL && window && window.localStorage) {\n        console.warn('changing lang to ', langURL);\n        window.localStorage.setItem('lang', langURL);\n      }\n\n      return this.loadRemoteScript(currentLocale);\n    }\n    /**\n     * Get the inital options\n     */\n\n  }, {\n    key: \"getInitOptions\",\n    value: function getInitOptions() {\n      return this.options;\n    }\n    /**\n     * Load more locales after init\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(locales) {\n      merge(this.options.locales, locales);\n    }\n  }, {\n    key: \"loadRemoteScript\",\n    value: function loadRemoteScript(lang) {\n      var locale = lang.split('-')[0].split('_')[0];\n      var _this$options2 = this.options,\n          commonLocaleDataUrls = _this$options2.commonLocaleDataUrls,\n          debug = _this$options2.debug,\n          warningHandler = _this$options2.warningHandler;\n      return new Promise(function (resolve) {\n        var localeURL = commonLocaleDataUrls[locale];\n\n        if (!localeURL && debug) {\n          warningHandler(\"[react-intl] Language \\\"\".concat(lang, \"\\\" is not fully supported.\"));\n          resolve();\n        }\n\n        load(localeURL, function (err) {\n          if (err && debug) {\n            warningHandler(\"[react-intl] Language file \\\"\".concat(lang, \".js\\\" was not loaded.\"));\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"getLocaleFromCookie\",\n    value: function getLocaleFromCookie(options) {\n      var cookieLocaleKey = options.cookieLocaleKey;\n\n      if (cookieLocaleKey) {\n        var params = cookie.parse(document.cookie);\n        return params && params[cookieLocaleKey];\n      }\n    }\n  }, {\n    key: \"getLocaleFromURL\",\n    value: function getLocaleFromURL(options) {\n      var urlLocaleKey = options.urlLocaleKey;\n\n      if (urlLocaleKey) {\n        var query = location.search.split('?');\n\n        if (query.length >= 2) {\n          var params = queryParser.parse(query[1]);\n          return params && params[urlLocaleKey];\n        }\n      }\n    }\n  }, {\n    key: \"getDescendantProp\",\n    value: function getDescendantProp(locale, key) {\n      if (locale[key]) {\n        return locale[key];\n      }\n\n      var msg = key.split('.').reduce(function (a, b) {\n        return a !== undefined ? a[b] : a;\n      }, locale);\n      return msg;\n    }\n  }, {\n    key: \"getLocaleFromBrowser\",\n    value: function getLocaleFromBrowser() {\n      return navigator.language || navigator.userLanguage;\n    }\n  }]);\n\n  return ReactIntlUniversal;\n}();\n\nvar instance = new ReactIntlUniversal();\nexport default instance;","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/onboarding-blog/onboarding-blog-app/onboarding-frontend-main/simple-app-archive/node_modules/@guestyci/localize/esm/react-intl.js"],"names":["_classCallCheck","_createClass","IntlPolyfill","React","IntlMessageFormat","escapeHtml","cookie","queryParser","load","invariant","merge","constants","isGetLanguages","window","localStorage","getItem","String","prototype","defaultMessage","d","msg","search","newMsg","split","body","fields","message","stringValue","console","log","fetch","concat","trim","method","JSON","stringify","ReactIntlUniversal","options","currentLocale","urlLocaleKey","cookieLocaleKey","locales","warningHandler","warn","bind","commonLocaleDataUrls","fallbackLocale","debug","key","value","get","variables","_this","arguments","length","undefined","_this$options","formats","getMessage","getDescendantProp","Object","assign","i","indexOf","msgFormatter","format","err","getHTML","el","createElement","dangerouslySetInnerHTML","__html","formatMessage","messageDescriptor","id","formatHTMLMessage","determineLocale","getLocaleFromURL","getLocaleFromCookie","getLocaleFromBrowser","init","defaultFormats","langURL","setItem","loadRemoteScript","getInitOptions","lang","locale","_this$options2","Promise","resolve","localeURL","params","parse","document","query","location","reduce","a","b","navigator","language","userLanguage","instance"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,YAAP,MAAyB,MAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,kBAAP;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;;AAEA,IAAIC,cAAc,GAAG,SAASA,cAAT,GAA0B;AAC7C,SAAOC,MAAM,IAAIA,MAAM,CAACC,YAAjB,IAAiCD,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,cAA5B,CAAxC;AACD,CAFD;;AAIAC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,GAAkCF,MAAM,CAACC,SAAP,CAAiBE,CAAjB,GAAqB,UAAUC,GAAV,EAAe;AACpE,MAAI,KAAKC,MAAL,CAAY,aAAZ,IAA6B,CAAC,CAAlC,EAAqC;AACnC,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAW,GAAX,CAAb;AACA,QAAIC,IAAI,GAAG;AACTC,MAAAA,MAAM,EAAE;AADC,KAAX;AAGAD,IAAAA,IAAI,CAACC,MAAL,CAAYC,OAAZ,GAAsB;AACpBC,MAAAA,WAAW,EAAEP;AADO,KAAtB;AAGAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC,IAAjC,EAAuCP,MAAM,CAAC,CAAD,CAA7C,EAAkDF,GAAlD;AACAU,IAAAA,KAAK,CAAC,sGAAsGC,MAAtG,CAA6GT,MAAM,CAAC,CAAD,CAAN,CAAUU,IAAV,EAA7G,CAAD,EAAiI;AACpIC,MAAAA,MAAM,EAAE,OAD4H;AAEpIT,MAAAA,IAAI,EAAEU,IAAI,CAACC,SAAL,CAAeX,IAAf;AAF8H,KAAjI,CAAL;AAIA,WAAOJ,GAAG,IAAI,EAAd;AACD;;AAED,SAAO,QAAQA,GAAR,IAAe,EAAtB;AACD,CAlBD;;AAoBA,IAAIgB,kBAAkB,GACtB,aACA,YAAY;AACV,WAASA,kBAAT,GAA8B;AAC5BpC,IAAAA,eAAe,CAAC,IAAD,EAAOoC,kBAAP,CAAf;;AAEA,SAAKC,OAAL,GAAe;AACb;AACAC,MAAAA,aAAa,EAAE,IAFF;AAGb;AACAC,MAAAA,YAAY,EAAE,IAJD;AAKb;AACAC,MAAAA,eAAe,EAAE,IANJ;AAOb;AACAC,MAAAA,OAAO,EAAE,EARI;AASb;AACAC,MAAAA,cAAc,EAAEd,OAAO,CAACe,IAAR,CAAaC,IAAb,CAAkBhB,OAAlB,CAVH;AAWb;AACAiB,MAAAA,oBAAoB,EAAE,EAZT;AAab;AACAxC,MAAAA,UAAU,EAAE,IAdC;AAeb;AACAyC,MAAAA,cAAc,EAAE,IAhBH;AAiBbC,MAAAA,KAAK,EAAE;AAjBM,KAAf;AAmBD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGE9C,EAAAA,YAAY,CAACmC,kBAAD,EAAqB,CAAC;AAChCY,IAAAA,GAAG,EAAE,KAD2B;AAEhCC,IAAAA,KAAK,EAAE,SAASC,GAAT,CAAaF,GAAb,EAAkBG,SAAlB,EAA6B;AAClC,UAAIC,KAAK,GAAG,IAAZ;;AAEA,UAAIlC,cAAc,GAAGmC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAzF;AACA5C,MAAAA,SAAS,CAACuC,GAAD,EAAM,iBAAN,CAAT;AACA,UAAIQ,aAAa,GAAG,KAAKnB,OAAzB;AAAA,UACII,OAAO,GAAGe,aAAa,CAACf,OAD5B;AAAA,UAEIH,aAAa,GAAGkB,aAAa,CAAClB,aAFlC;AAAA,UAGImB,OAAO,GAAGD,aAAa,CAACC,OAH5B;AAAA,UAIIf,cAAc,GAAGc,aAAa,CAACd,cAJnC;AAAA,UAKII,cAAc,GAAGU,aAAa,CAACV,cALnC;AAAA,UAMIC,KAAK,GAAGS,aAAa,CAACT,KAN1B;;AAQA,UAAIW,UAAU,GAAG,SAASA,UAAT,CAAoBV,GAApB,EAAyB;AACxC,YAAI,CAACP,OAAD,IAAY,CAACA,OAAO,CAACH,aAAD,CAAxB,EAAyC;AACvCS,UAAAA,KAAK,IAAIL,cAAc,CAAC,+BAA+BX,MAA/B,CAAsCO,aAAtC,EAAqD,oBAArD,CAAD,CAAvB;AACA,iBAAO,EAAP;AACD;;AAED,YAAIlB,GAAG,GAAGgC,KAAK,CAACO,iBAAN,CAAwBlB,OAAO,CAACH,aAAD,CAA/B,EAAgDU,GAAhD,CAAV;;AAEA,YAAI5B,GAAG,IAAI,IAAX,EAAiB;AACf,cAAI0B,cAAJ,EAAoB;AAClB1B,YAAAA,GAAG,GAAGgC,KAAK,CAACO,iBAAN,CAAwBlB,OAAO,CAACK,cAAD,CAA/B,EAAiDE,GAAjD,CAAN;;AAEA,gBAAI5B,GAAG,IAAI,IAAX,EAAiB;AACf2B,cAAAA,KAAK,IAAIL,cAAc,CAAC,8BAA8BX,MAA9B,CAAqCiB,GAArC,EAA0C,oBAA1C,EAAgEjB,MAAhE,CAAuEO,aAAvE,EAAsF,2BAAtF,EAAmHP,MAAnH,CAA0He,cAA1H,CAAD,CAAvB;;AAEA,kBAAIlC,cAAc,EAAlB,EAAsB;AACpB,uBAAO,cAAcmB,MAAd,CAAqBiB,GAArB,CAAP;AACD;;AAED,qBAAO,EAAP;AACD;AACF,WAZD,MAYO;AACL,gBAAIpC,cAAc,EAAlB,EAAsB;AACpB,qBAAO,cAAcmB,MAAd,CAAqBiB,GAArB,CAAP;AACD;;AAEDD,YAAAA,KAAK,IAAIL,cAAc,CAAC,8BAA8BX,MAA9B,CAAqCiB,GAArC,EAA0C,oBAA1C,EAAgEjB,MAAhE,CAAuEO,aAAvE,CAAD,CAAvB;AACA,mBAAO,EAAP;AACD;AACF;;AAED,eAAOlB,GAAP;AACD,OAhCD;;AAkCA,UAAIA,GAAG,GAAGsC,UAAU,CAACV,GAAD,CAApB;;AAEA,UAAI5B,GAAG,IAAI,IAAP,IAAeA,GAAG,IAAI,EAA1B,EAA8B;AAC5B,YAAIF,cAAc,IAAI,IAAtB,EAA4B;AAC1BE,UAAAA,GAAG,GAAGF,cAAN;AACD,SAFD,MAEO;AACL,iBAAO,EAAP,CADK,CACM;AACZ;AACF;;AAED,UAAIiC,SAAJ,EAAe;AACbA,QAAAA,SAAS,GAAGS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,SAAlB,CAAZ,CADa,CAC6B;;AAE1C,aAAK,IAAIW,CAAT,IAAcX,SAAd,EAAyB;AACvB,cAAIF,KAAK,GAAGE,SAAS,CAACW,CAAD,CAArB;;AAEA,cAAI,KAAKzB,OAAL,CAAahC,UAAb,KAA4B,IAA5B,KAAqC,OAAO4C,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYjC,MAAnF,KAA8FiC,KAAK,CAACc,OAAN,CAAc,GAAd,KAAsB,CAApH,IAAyHd,KAAK,CAACc,OAAN,CAAc,GAAd,KAAsB,CAAnJ,EAAsJ;AACpJd,YAAAA,KAAK,GAAG5C,UAAU,CAAC4C,KAAD,CAAlB;AACD;;AAEDE,UAAAA,SAAS,CAACW,CAAD,CAAT,GAAeb,KAAf;AACD;AACF;;AAED,UAAI;AACF,YAAIe,YAAY,GAAG,IAAI5D,iBAAJ,CAAsBgB,GAAtB,EAA2BkB,aAA3B,EAA0CmB,OAA1C,CAAnB;AACA,eAAOO,YAAY,CAACC,MAAb,CAAoBd,SAApB,CAAP;AACD,OAHD,CAGE,OAAOe,GAAP,EAAY;AACZnB,QAAAA,KAAK,IAAIL,cAAc,CAAC,+CAA+CX,MAA/C,CAAsDiB,GAAtD,EAA2D,IAA3D,CAAD,EAAmEkB,GAAG,CAACxC,OAAvE,CAAvB;AACA,eAAON,GAAP;AACD;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;;AAtFoC,GAAD,EAwF9B;AACD4B,IAAAA,GAAG,EAAE,SADJ;AAEDC,IAAAA,KAAK,EAAE,SAASkB,OAAT,CAAiBnB,GAAjB,EAAsBG,SAAtB,EAAiC;AACtC,UAAI/B,GAAG,GAAG,KAAK8B,GAAL,CAASF,GAAT,EAAcG,SAAd,CAAV;;AAEA,UAAI/B,GAAJ,EAAS;AACP,YAAIgD,EAAE,GAAGjE,KAAK,CAACkE,aAAN,CAAoB,MAApB,EAA4B;AACnCC,UAAAA,uBAAuB,EAAE;AACvBC,YAAAA,MAAM,EAAEnD;AADe;AADU,SAA5B,CAAT,CADO,CAKH;;AAEJ,YAAIF,cAAc,GAAG,SAASA,cAAT,GAA0B;AAC7C,iBAAOkD,EAAP;AACD,SAFD;;AAIA,eAAOR,MAAM,CAACC,MAAP,CAAc;AACnB3C,UAAAA,cAAc,EAAEA,cADG;AAEnBC,UAAAA,CAAC,EAAED;AAFgB,SAAd,EAGJkD,EAHI,CAAP;AAID;;AAED,aAAO,EAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AA/BK,GAxF8B,EAyH9B;AACDpB,IAAAA,GAAG,EAAE,eADJ;AAEDC,IAAAA,KAAK,EAAE,SAASuB,aAAT,CAAuBC,iBAAvB,EAA0CtB,SAA1C,EAAqD;AAC1D,UAAIuB,EAAE,GAAGD,iBAAiB,CAACC,EAA3B;AAAA,UACIxD,cAAc,GAAGuD,iBAAiB,CAACvD,cADvC;AAEA,aAAO,KAAKgC,GAAL,CAASwB,EAAT,EAAavB,SAAb,EAAwBjC,cAAxB,CAAuCA,cAAvC,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAdK,GAzH8B,EAyI9B;AACD8B,IAAAA,GAAG,EAAE,mBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS0B,iBAAT,CAA2BF,iBAA3B,EAA8CtB,SAA9C,EAAyD;AAC9D,UAAIuB,EAAE,GAAGD,iBAAiB,CAACC,EAA3B;AAAA,UACIxD,cAAc,GAAGuD,iBAAiB,CAACvD,cADvC;AAEA,aAAO,KAAKiD,OAAL,CAAaO,EAAb,EAAiBvB,SAAjB,EAA4BjC,cAA5B,CAA2CA,cAA3C,CAAP;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAbK,GAzI8B,EAwJ9B;AACD8B,IAAAA,GAAG,EAAE,iBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS2B,eAAT,GAA2B;AAChC,UAAIvC,OAAO,GAAGgB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,aAAO,KAAKwB,gBAAL,CAAsBxC,OAAtB,KAAkC,KAAKyC,mBAAL,CAAyBzC,OAAzB,CAAlC,IAAuE,KAAK0C,oBAAL,EAA9E;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAZK,GAxJ8B,EAsK9B;AACD/B,IAAAA,GAAG,EAAE,MADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS+B,IAAT,GAAgB;AACrB,UAAI3C,OAAO,GAAGgB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA5C,MAAAA,SAAS,CAAC4B,OAAO,CAACC,aAAT,EAAwB,mCAAxB,CAAT;AACAsB,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKxB,OAAnB,EAA4BA,OAA5B;AACA,UAAIC,aAAa,GAAG,KAAKD,OAAL,CAAaC,aAAjC;AACA,WAAKD,OAAL,CAAaoB,OAAb,GAAuBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKxB,OAAL,CAAaoB,OAA/B,EAAwC9C,SAAS,CAACsE,cAAlD,CAAvB;AACA,UAAIC,OAAO,GAAG,KAAKL,gBAAL,CAAsB;AAClCtC,QAAAA,YAAY,EAAE;AADoB,OAAtB,CAAd;;AAIA,UAAI2C,OAAO,IAAIrE,MAAX,IAAqBA,MAAM,CAACC,YAAhC,EAA8C;AAC5Cc,QAAAA,OAAO,CAACe,IAAR,CAAa,mBAAb,EAAkCuC,OAAlC;AACArE,QAAAA,MAAM,CAACC,YAAP,CAAoBqE,OAApB,CAA4B,MAA5B,EAAoCD,OAApC;AACD;;AAED,aAAO,KAAKE,gBAAL,CAAsB9C,aAAtB,CAAP;AACD;AACD;AACJ;AACA;;AArBK,GAtK8B,EA6L9B;AACDU,IAAAA,GAAG,EAAE,gBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASoC,cAAT,GAA0B;AAC/B,aAAO,KAAKhD,OAAZ;AACD;AACD;AACJ;AACA;;AAPK,GA7L8B,EAsM9B;AACDW,IAAAA,GAAG,EAAE,MADJ;AAEDC,IAAAA,KAAK,EAAE,SAASzC,IAAT,CAAciC,OAAd,EAAuB;AAC5B/B,MAAAA,KAAK,CAAC,KAAK2B,OAAL,CAAaI,OAAd,EAAuBA,OAAvB,CAAL;AACD;AAJA,GAtM8B,EA2M9B;AACDO,IAAAA,GAAG,EAAE,kBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASmC,gBAAT,CAA0BE,IAA1B,EAAgC;AACrC,UAAIC,MAAM,GAAGD,IAAI,CAAC/D,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBA,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAAb;AACA,UAAIiE,cAAc,GAAG,KAAKnD,OAA1B;AAAA,UACIQ,oBAAoB,GAAG2C,cAAc,CAAC3C,oBAD1C;AAAA,UAEIE,KAAK,GAAGyC,cAAc,CAACzC,KAF3B;AAAA,UAGIL,cAAc,GAAG8C,cAAc,CAAC9C,cAHpC;AAIA,aAAO,IAAI+C,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AACpC,YAAIC,SAAS,GAAG9C,oBAAoB,CAAC0C,MAAD,CAApC;;AAEA,YAAI,CAACI,SAAD,IAAc5C,KAAlB,EAAyB;AACvBL,UAAAA,cAAc,CAAC,2BAA2BX,MAA3B,CAAkCuD,IAAlC,EAAwC,4BAAxC,CAAD,CAAd;AACAI,UAAAA,OAAO;AACR;;AAEDlF,QAAAA,IAAI,CAACmF,SAAD,EAAY,UAAUzB,GAAV,EAAe;AAC7B,cAAIA,GAAG,IAAInB,KAAX,EAAkB;AAChBL,YAAAA,cAAc,CAAC,gCAAgCX,MAAhC,CAAuCuD,IAAvC,EAA6C,uBAA7C,CAAD,CAAd;AACD;;AAEDI,UAAAA,OAAO;AACR,SANG,CAAJ;AAOD,OAfM,CAAP;AAgBD;AAxBA,GA3M8B,EAoO9B;AACD1C,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS6B,mBAAT,CAA6BzC,OAA7B,EAAsC;AAC3C,UAAIG,eAAe,GAAGH,OAAO,CAACG,eAA9B;;AAEA,UAAIA,eAAJ,EAAqB;AACnB,YAAIoD,MAAM,GAAGtF,MAAM,CAACuF,KAAP,CAAaC,QAAQ,CAACxF,MAAtB,CAAb;AACA,eAAOsF,MAAM,IAAIA,MAAM,CAACpD,eAAD,CAAvB;AACD;AACF;AATA,GApO8B,EA8O9B;AACDQ,IAAAA,GAAG,EAAE,kBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS4B,gBAAT,CAA0BxC,OAA1B,EAAmC;AACxC,UAAIE,YAAY,GAAGF,OAAO,CAACE,YAA3B;;AAEA,UAAIA,YAAJ,EAAkB;AAChB,YAAIwD,KAAK,GAAGC,QAAQ,CAAC3E,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAZ;;AAEA,YAAIwE,KAAK,CAACzC,MAAN,IAAgB,CAApB,EAAuB;AACrB,cAAIsC,MAAM,GAAGrF,WAAW,CAACsF,KAAZ,CAAkBE,KAAK,CAAC,CAAD,CAAvB,CAAb;AACA,iBAAOH,MAAM,IAAIA,MAAM,CAACrD,YAAD,CAAvB;AACD;AACF;AACF;AAbA,GA9O8B,EA4P9B;AACDS,IAAAA,GAAG,EAAE,mBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASU,iBAAT,CAA2B4B,MAA3B,EAAmCvC,GAAnC,EAAwC;AAC7C,UAAIuC,MAAM,CAACvC,GAAD,CAAV,EAAiB;AACf,eAAOuC,MAAM,CAACvC,GAAD,CAAb;AACD;;AAED,UAAI5B,GAAG,GAAG4B,GAAG,CAACzB,KAAJ,CAAU,GAAV,EAAe0E,MAAf,CAAsB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9C,eAAOD,CAAC,KAAK3C,SAAN,GAAkB2C,CAAC,CAACC,CAAD,CAAnB,GAAyBD,CAAhC;AACD,OAFS,EAEPX,MAFO,CAAV;AAGA,aAAOnE,GAAP;AACD;AAXA,GA5P8B,EAwQ9B;AACD4B,IAAAA,GAAG,EAAE,sBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS8B,oBAAT,GAAgC;AACrC,aAAOqB,SAAS,CAACC,QAAV,IAAsBD,SAAS,CAACE,YAAvC;AACD;AAJA,GAxQ8B,CAArB,CAAZ;;AA+QA,SAAOlE,kBAAP;AACD,CAhTD,EAFA;;AAoTA,IAAImE,QAAQ,GAAG,IAAInE,kBAAJ,EAAf;AACA,eAAemE,QAAf","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport IntlPolyfill from 'intl';\nimport React from 'react';\nimport IntlMessageFormat from 'intl-messageformat';\nimport escapeHtml from 'escape-html';\nimport cookie from 'cookie';\nimport queryParser from 'querystring';\nimport load from 'load-script';\nimport invariant from 'invariant';\nimport 'console-polyfill';\nimport merge from 'lodash/merge';\nimport * as constants from \"./react-intl-consts\";\n\nvar isGetLanguages = function isGetLanguages() {\n  return window && window.localStorage && window.localStorage.getItem('getLanguages');\n};\n\nString.prototype.defaultMessage = String.prototype.d = function (msg) {\n  if (this.search('GUESTY_KEY=') > -1) {\n    var newMsg = this.split('=');\n    var body = {\n      fields: {}\n    };\n    body.fields.message = {\n      stringValue: msg\n    };\n    console.log('Guesty translate:', this, newMsg[1], msg);\n    fetch(\"https://firestore.googleapis.com/v1beta1/projects/guesty-18n/databases/(default)/documents/overall/\".concat(newMsg[1].trim()), {\n      method: 'PATCH',\n      body: JSON.stringify(body)\n    });\n    return msg || '';\n  }\n\n  return this || msg || '';\n};\n\nvar ReactIntlUniversal =\n/*#__PURE__*/\nfunction () {\n  function ReactIntlUniversal() {\n    _classCallCheck(this, ReactIntlUniversal);\n\n    this.options = {\n      // Current locale such as 'en-US'\n      currentLocale: null,\n      // URL's query Key to determine locale. Example: if URL=http://localhost?lang=en-US, then set it 'lang'\n      urlLocaleKey: null,\n      // Cookie's Key to determine locale. Example: if cookie=lang:en-US, then set it 'lang'\n      cookieLocaleKey: null,\n      // app locale data like {\"en-US\":{\"key1\":\"value1\"},\"zh-CN\":{\"key1\":\"值1\"}}\n      locales: {},\n      // ability to accumulate missing messages using third party services like Sentry\n      warningHandler: console.warn.bind(console),\n      // Common locales js urls\n      commonLocaleDataUrls: {},\n      // disable escape html in variable mode\n      escapeHtml: true,\n      // Locale to use if a key is not found in the current locale\n      fallbackLocale: null,\n      debug: false\n    };\n  }\n  /**\n   * Get the formatted message by key\n   * @param {string} key The string representing key in locale data file\n   * @param {Object} variables Variables in message\n   * @returns {string} message\n   */\n\n\n  _createClass(ReactIntlUniversal, [{\n    key: \"get\",\n    value: function get(key, variables) {\n      var _this = this;\n\n      var defaultMessage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      invariant(key, 'key is required');\n      var _this$options = this.options,\n          locales = _this$options.locales,\n          currentLocale = _this$options.currentLocale,\n          formats = _this$options.formats,\n          warningHandler = _this$options.warningHandler,\n          fallbackLocale = _this$options.fallbackLocale,\n          debug = _this$options.debug;\n\n      var getMessage = function getMessage(key) {\n        if (!locales || !locales[currentLocale]) {\n          debug && warningHandler(\"[react-intl] locales data \\\"\".concat(currentLocale, \"\\\" does not exist.\"));\n          return '';\n        }\n\n        var msg = _this.getDescendantProp(locales[currentLocale], key);\n\n        if (msg == null) {\n          if (fallbackLocale) {\n            msg = _this.getDescendantProp(locales[fallbackLocale], key);\n\n            if (msg == null) {\n              debug && warningHandler(\"react-intl-universal key \\\"\".concat(key, \"\\\" not defined in \").concat(currentLocale, \" or the fallback locale, \").concat(fallbackLocale));\n\n              if (isGetLanguages()) {\n                return \"GUESTY_KEY=\".concat(key);\n              }\n\n              return '';\n            }\n          } else {\n            if (isGetLanguages()) {\n              return \"GUESTY_KEY=\".concat(key);\n            }\n\n            debug && warningHandler(\"react-intl-universal key \\\"\".concat(key, \"\\\" not defined in \").concat(currentLocale));\n            return '';\n          }\n        }\n\n        return msg;\n      };\n\n      var msg = getMessage(key);\n\n      if (msg == null || msg == '') {\n        if (defaultMessage != null) {\n          msg = defaultMessage;\n        } else {\n          return ''; // keep old behavior if default not provided\n        }\n      }\n\n      if (variables) {\n        variables = Object.assign({}, variables); // HTML message with variables. Escape it to avoid XSS attack.\n\n        for (var i in variables) {\n          var value = variables[i];\n\n          if (this.options.escapeHtml === true && (typeof value === 'string' || value instanceof String) && value.indexOf('<') >= 0 && value.indexOf('>') >= 0) {\n            value = escapeHtml(value);\n          }\n\n          variables[i] = value;\n        }\n      }\n\n      try {\n        var msgFormatter = new IntlMessageFormat(msg, currentLocale, formats);\n        return msgFormatter.format(variables);\n      } catch (err) {\n        debug && warningHandler(\"[react-intl] format message failed for key='\".concat(key, \"'.\"), err.message);\n        return msg;\n      }\n    }\n    /**\n     * Get the formatted html message by key.\n     * @param {string} key The string representing key in locale data file\n     * @param {Object} variables Variables in message\n     * @returns {React.Element} message\n     */\n\n  }, {\n    key: \"getHTML\",\n    value: function getHTML(key, variables) {\n      var msg = this.get(key, variables);\n\n      if (msg) {\n        var el = React.createElement('span', {\n          dangerouslySetInnerHTML: {\n            __html: msg\n          }\n        }); // when key exists, it should still return element if there's defaultMessage() after getHTML()\n\n        var defaultMessage = function defaultMessage() {\n          return el;\n        };\n\n        return Object.assign({\n          defaultMessage: defaultMessage,\n          d: defaultMessage\n        }, el);\n      }\n\n      return '';\n    }\n    /**\n     * As same as get(...) API\n     * @param {Object} options\n     * @param {string} options.id\n     * @param {string} options.defaultMessage\n     * @param {Object} variables Variables in message\n     * @returns {string} message\n     */\n\n  }, {\n    key: \"formatMessage\",\n    value: function formatMessage(messageDescriptor, variables) {\n      var id = messageDescriptor.id,\n          defaultMessage = messageDescriptor.defaultMessage;\n      return this.get(id, variables).defaultMessage(defaultMessage);\n    }\n    /**\n     * As same as getHTML(...) API\n     * @param {Object} options\n     * @param {string} options.id\n     * @param {React.Element} options.defaultMessage\n     * @param {Object} variables Variables in message\n     * @returns {React.Element} message\n     */\n\n  }, {\n    key: \"formatHTMLMessage\",\n    value: function formatHTMLMessage(messageDescriptor, variables) {\n      var id = messageDescriptor.id,\n          defaultMessage = messageDescriptor.defaultMessage;\n      return this.getHTML(id, variables).defaultMessage(defaultMessage);\n    }\n    /**\n     * Helper: determine user's locale via URL, cookie, and browser's language.\n     * You may not this API, if you have other rules to determine user's locale.\n     * @param {string} options.urlLocaleKey URL's query Key to determine locale. Example: if URL=http://localhost?lang=en-US, then set it 'lang'\n     * @param {string} options.cookieLocaleKey Cookie's Key to determine locale. Example: if cookie=lang:en-US, then set it 'lang'\n     * @returns {string} determined locale such as 'en-US'\n     */\n\n  }, {\n    key: \"determineLocale\",\n    value: function determineLocale() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.getLocaleFromURL(options) || this.getLocaleFromCookie(options) || this.getLocaleFromBrowser();\n    }\n    /**\n     * Initialize properties and load CLDR locale data according to currentLocale\n     * @param {Object} options\n     * @param {string} options.currentLocale Current locale such as 'en-US'\n     * @param {string} options.locales App locale data like {\"en-US\":{\"key1\":\"value1\"},\"zh-CN\":{\"key1\":\"值1\"}}\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      invariant(options.currentLocale, 'options.currentLocale is required');\n      Object.assign(this.options, options);\n      var currentLocale = this.options.currentLocale;\n      this.options.formats = Object.assign({}, this.options.formats, constants.defaultFormats);\n      var langURL = this.getLocaleFromURL({\n        urlLocaleKey: 'lang'\n      });\n\n      if (langURL && window && window.localStorage) {\n        console.warn('changing lang to ', langURL);\n        window.localStorage.setItem('lang', langURL);\n      }\n\n      return this.loadRemoteScript(currentLocale);\n    }\n    /**\n     * Get the inital options\n     */\n\n  }, {\n    key: \"getInitOptions\",\n    value: function getInitOptions() {\n      return this.options;\n    }\n    /**\n     * Load more locales after init\n     */\n\n  }, {\n    key: \"load\",\n    value: function load(locales) {\n      merge(this.options.locales, locales);\n    }\n  }, {\n    key: \"loadRemoteScript\",\n    value: function loadRemoteScript(lang) {\n      var locale = lang.split('-')[0].split('_')[0];\n      var _this$options2 = this.options,\n          commonLocaleDataUrls = _this$options2.commonLocaleDataUrls,\n          debug = _this$options2.debug,\n          warningHandler = _this$options2.warningHandler;\n      return new Promise(function (resolve) {\n        var localeURL = commonLocaleDataUrls[locale];\n\n        if (!localeURL && debug) {\n          warningHandler(\"[react-intl] Language \\\"\".concat(lang, \"\\\" is not fully supported.\"));\n          resolve();\n        }\n\n        load(localeURL, function (err) {\n          if (err && debug) {\n            warningHandler(\"[react-intl] Language file \\\"\".concat(lang, \".js\\\" was not loaded.\"));\n          }\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"getLocaleFromCookie\",\n    value: function getLocaleFromCookie(options) {\n      var cookieLocaleKey = options.cookieLocaleKey;\n\n      if (cookieLocaleKey) {\n        var params = cookie.parse(document.cookie);\n        return params && params[cookieLocaleKey];\n      }\n    }\n  }, {\n    key: \"getLocaleFromURL\",\n    value: function getLocaleFromURL(options) {\n      var urlLocaleKey = options.urlLocaleKey;\n\n      if (urlLocaleKey) {\n        var query = location.search.split('?');\n\n        if (query.length >= 2) {\n          var params = queryParser.parse(query[1]);\n          return params && params[urlLocaleKey];\n        }\n      }\n    }\n  }, {\n    key: \"getDescendantProp\",\n    value: function getDescendantProp(locale, key) {\n      if (locale[key]) {\n        return locale[key];\n      }\n\n      var msg = key.split('.').reduce(function (a, b) {\n        return a !== undefined ? a[b] : a;\n      }, locale);\n      return msg;\n    }\n  }, {\n    key: \"getLocaleFromBrowser\",\n    value: function getLocaleFromBrowser() {\n      return navigator.language || navigator.userLanguage;\n    }\n  }]);\n\n  return ReactIntlUniversal;\n}();\n\nvar instance = new ReactIntlUniversal();\nexport default instance;"]},"metadata":{},"sourceType":"module"}