import React, { useEffect, useMemo, useState } from 'react';
import isEqual from 'lodash/isEqual';
import { isEmpty } from "../utils/commonUtility";
import DropdownSelectedMenuList from "./DropdownSelectedMenuList";

const getValueFromOption = option => option?.props?.value;

const doesSetContainsValue = (set, value) => Array.from(set).some(option => isEqual(option, value));

const buildSelectedArray = (map, newItem) => {
  const selectedValues = Array.from(map);

  if (selectedValues.some(selectedItem => isEqual(selectedItem, newItem))) {
    return selectedValues.filter(selectedItem => !isEqual(selectedItem, newItem));
  }

  return [...selectedValues, newItem];
};

const DropdownMenuList = ({
  children,
  value,
  onChange,
  disabled,
  variant
}) => {
  const [selectedOptionSet, setSelectedOptionSet] = useState(new Set());
  const isMultiSelect = variant === 'multiselect';
  const isChipSelect = variant === 'chip';
  const isSingleSelect = variant === 'single';
  useEffect(() => {
    if (!isEmpty(value)) {
      const selectedValue = isSingleSelect ? [value] : value;
      setSelectedOptionSet(new Set(selectedValue));
    }
  }, [value]);

  const handleItemClick = (e, menuItemValue) => {
    e.stopPropagation();
    const selectedItems = isSingleSelect ? menuItemValue : buildSelectedArray(selectedOptionSet, menuItemValue);
    onChange(e, selectedItems);

    if (isChipSelect) {
      setSelectedOptionSet(new Set(selectedItems));
    }
  };

  const handleRemoveSelection = (e, menuItemValue) => {
    e.stopPropagation();
    const selectedOptions = buildSelectedArray(selectedOptionSet, menuItemValue);
    setSelectedOptionSet(new Set(selectedOptions));
    onChange(e, selectedOptions);
  };

  const selectedOptions = useMemo(() => {
    if (!isMultiSelect) {
      return children;
    }

    return children.filter(option => doesSetContainsValue(selectedOptionSet, getValueFromOption(option)));
  }, [selectedOptionSet]);
  const shouldRenderSelectedMenuList = isMultiSelect && !isEmpty(selectedOptions);
  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderSelectedMenuList && /*#__PURE__*/React.createElement(DropdownSelectedMenuList, {
    onChange: handleRemoveSelection
  }, selectedOptions), React.Children.map(children, option => {
    if (isMultiSelect && doesSetContainsValue(selectedOptionSet, getValueFromOption(option))) {
      return null;
    }

    return React.cloneElement(option, {
      selected: !isMultiSelect ? doesSetContainsValue(selectedOptionSet, getValueFromOption(option)) : false,
      onClick: handleItemClick,
      multiselect: !isSingleSelect,
      disabled
    });
  }));
};

export default DropdownMenuList;