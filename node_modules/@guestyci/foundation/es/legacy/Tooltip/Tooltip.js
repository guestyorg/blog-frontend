import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useState, useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import StrapTooltip from 'reactstrap/lib/Tooltip';
import { uuid } from "../../utils/commonUtility";
import { Theme } from "../../enums/enums";

const Tooltip = (_ref) => {
  let {
    id,
    children,
    className,
    body,
    style,
    autoHide,
    theme,
    placement,
    offset,
    containerClassName,
    delay,
    fullWidth,
    innerClassName
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "children", "className", "body", "style", "autoHide", "theme", "placement", "offset", "containerClassName", "delay", "fullWidth", "innerClassName"]);

  const [isOpen, setIsOpen] = useState(false);
  const onToggle = useCallback(() => {
    setIsOpen(!isOpen);
  }, [isOpen]);
  const tooltipId = useMemo(() => id || uuid(), [id]);
  return body ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: containerClassName,
    id: `Tooltip-${tooltipId}`
  }, children), /*#__PURE__*/React.createElement(StrapTooltip, _extends({
    innerClassName: cn('font-size-md text-left border-radius-2', {
      'mw-100': fullWidth
    }, innerClassName),
    target: `Tooltip-${tooltipId}`,
    isOpen: isOpen && !!body,
    toggle: onToggle,
    className: cn({
      'light-theme': theme === Theme.Light
    }, {
      'error-theme': theme === Theme.Error
    }, className),
    popperClassName: "zindex-1500",
    style: style,
    autohide: autoHide,
    placement: placement,
    offset: offset,
    delay: delay
  }, props), body)) : children;
};

Tooltip.defaultProps = {
  className: '',
  id: undefined,
  autoHide: true,
  theme: 'dark',
  placement: 'top',
  offset: undefined,
  containerClassName: '',
  body: null,
  delay: {
    show: 250,
    hide: 0
  },
  fullWidth: false,
  innerClassName: ''
};
Tooltip.propTypes = {
  /** Node - the component wrapped by the tooltip */
  children: PropTypes.node.isRequired,

  /** String || React Element - The tooltip body */
  body: PropTypes.node,

  /** String - Set the tooltip trigger id */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** String - Additional tooltip component class */
  className: PropTypes.string,

  /** String - Additional tooltip component class */
  containerClassName: PropTypes.string,

  /** Set tooltip to not hide on mouseleave tooltip element */
  autoHide: PropTypes.bool,

  /** Set the theme for the tooltip */
  theme: PropTypes.oneOf(['dark', 'light', 'error']),

  /** Popover placement supporting (top, bottom, left, right ) => <pos>-start, <pos>-end */
  placement: PropTypes.string,

  /** set custom offset to tooltip arrow */
  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Set show/hide delay for dialog - structure {show, hide} or number */
  delay: PropTypes.oneOfType([PropTypes.shape({
    show: PropTypes.number,
    hide: PropTypes.number
  }), PropTypes.number]),

  /** Bool, if the tooltip with take max width or be contained */
  fullWidth: PropTypes.bool,

  /** Inner tooltip class name */
  innerClassName: PropTypes.string
};
export default Tooltip;