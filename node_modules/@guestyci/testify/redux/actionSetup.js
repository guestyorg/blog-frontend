"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _nock = _interopRequireDefault(require("nock"));

var _agni = _interopRequireDefault(require("@guestyci/agni"));

var _http = _interopRequireDefault(require("axios/lib/adapters/http"));

require("../testSetup");

var _Resource$create = _agni["default"].create({
  env: 'development'
}),
    api = _Resource$create.api,
    config = _Resource$create.config;

api.defaults.adapter = _http["default"];
/**
 * Create the basic setup for redux action tests
 * @param middleware {Array} middleware array
 * @param serviceUrlKey {String}  Base service urlKey for api calls - As defined in the config file - Or an the service string,
 * @return {Object} {
 * store {Object} the store instance,
 * baseUrl {String} The base url defined
 * nock (Function) The nock function to call
 * }
 */

var _default = function _default() {
  var middleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [_reduxThunk["default"].withExtraArgument(api)];
  var serviceUrlKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'API_URL';
  return function (store) {
    var mockStore = (0, _reduxMockStore["default"])((0, _toConsumableArray2["default"])(middleware));
    var baseUrl = config[serviceUrlKey] || serviceUrlKey;
    return {
      store: mockStore(store),
      baseUrl: baseUrl,
      nock: (0, _nock["default"])(baseUrl)
    };
  };
};

exports["default"] = _default;