import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { useMemo, forwardRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
export var useStyles = createStyles({
  root: {
    minWidth: function minWidth(props) {
      return props.width;
    },
    minHeight: function minHeight(props) {
      return props.height;
    }
  },
  fillInherit: {
    fill: 'currentColor'
  },
  fill: {
    fill: function fill(_ref) {
      var fillColor = _ref.fillColor;
      return fillColor || 'currentColor';
    }
  },
  stroke: {
    strokeColor: function strokeColor(_ref2) {
      var _strokeColor = _ref2.strokeColor;
      return _strokeColor || 'initial';
    }
  }
}, {
  name: 'Icon'
});
var Icon = forwardRef(function Icon(_ref3, ref) {
  var _cn;

  var width = _ref3.width,
      height = _ref3.height,
      fillColor = _ref3.fillColor,
      strokeColor = _ref3.strokeColor,
      className = _ref3.className,
      svg = _ref3.svg,
      style = _ref3.style,
      jss = _ref3.jss;
  var classes = useStyles({
    width: width,
    height: height,
    fillColor: fillColor,
    strokeColor: strokeColor,
    jss: jss
  });
  var Svg = useMemo(function () {
    return svg;
  }, [svg]);
  return /*#__PURE__*/React.createElement(Svg, {
    ref: ref,
    width: width,
    height: height,
    style: style,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.fillInherit, !fillColor), _defineProperty(_cn, classes.fill, fillColor), _defineProperty(_cn, classes.stroke, strokeColor), _cn), className)
  });
});
Icon.defaultProps = {
  fillColor: '',
  strokeColor: '',
  width: 20,
  height: 20,
  className: '',
  style: {}
};
Icon.propTypes = {
  /** Icon width in pixels */
  width: PropTypes.number,

  /** Icon height in pixels */
  height: PropTypes.number,

  /** Icon fill color - see style guide colors for options */
  fillColor: PropTypes.string,

  /** Icon stroke color - see style guide colors for options */
  strokeColor: PropTypes.string,

  /** Class to add to the Icon component */
  className: PropTypes.string,

  /** Style to add to Icon component */
  style: PropTypes.shape(),

  /** The svg icon to render */
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]).isRequired,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
}; // Hack for withInfo plugin

Icon.displayName = 'Icon';
export default Icon;