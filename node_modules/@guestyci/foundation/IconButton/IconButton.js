"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getIconSize = exports.useStyles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _Button = _interopRequireDefault(require("../Button"));

var _commonUtility = require("../utils/commonUtility");

var _colors = require("../theme/colors");

var _utils = require("../theme/utils");

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      height: 'fit-content',
      overflow: 'hidden',
      width: 'fit-content',
      borderRadius: '50% !important'
    },
    colorTransParent: {
      color: 'inherit',
      '&:not([disabled]):hover': {
        backgroundColor: 'transparent'
      }
    },
    colorPrimary: {
      color: theme.palette.primary["default"],
      '&:not([disabled]):hover': {
        backgroundColor: (0, _utils.fade)(_colors.blue10, 0.3)
      }
    },
    colorSecondary: {
      color: theme.palette.text.secondary,
      '&:not([disabled]):hover': {
        backgroundColor: _colors.gray50
      }
    },
    icon: {
      fill: 'currentColor'
    },
    iconXxs: {
      padding: theme.spacer(2)
    },
    iconXs: {
      padding: theme.spacer(2)
    },
    iconSm: {
      padding: theme.spacer(2)
    },
    iconMd: {
      padding: theme.spacer(3)
    },
    iconLg: {
      padding: theme.spacer(3)
    },
    positionSuffix: {
      marginRight: '-15px !important'
    },
    positionPrefix: {
      marginLeft: '-15px !important'
    }
  };
}, {
  name: 'IconButton'
});
exports.useStyles = useStyles;

var getIconSize = function getIconSize(size) {
  switch (size) {
    case 'xxs':
      return 10;

    case 'xs':
      return 15;

    case 'md':
      return 25;

    case 'lg':
      return 30;

    default:
      return 20;
  }
};

exports.getIconSize = getIconSize;

var getRippleColor = function getRippleColor(color, rippleColor) {
  if (color === 'primary') {
    return _colors.blue700;
  }

  if (color === 'secondary') {
    return _colors.gray600;
  }

  return rippleColor;
};

var IconButton = _react["default"].forwardRef(function IconButton(_ref, ref) {
  var _cn, _children$props, _children$props2, _children$props3;

  var size = _ref.size,
      isLoading = _ref.isLoading,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      className = _ref.className,
      spinnerColor = _ref.spinnerColor,
      children = _ref.children,
      position = _ref.position,
      jss = _ref.jss,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'default' : _ref$color,
      rippleColor = _ref.rippleColor,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["size", "isLoading", "onClick", "disabled", "className", "spinnerColor", "children", "position", "jss", "color", "rippleColor"]);
  var classes = useStyles({
    jss: jss
  });
  var iconSize = getIconSize(size);
  var iconColor = isLoading ? 'transparent' : color;
  var iconRippleColor = getRippleColor(color, rippleColor);
  return /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({}, props, {
    disabled: disabled,
    isLoading: isLoading,
    onClick: onClick,
    rippleColor: iconRippleColor,
    spinnerColor: spinnerColor,
    className: (0, _classnames["default"])(classes.root, (_cn = {}, (0, _defineProperty2["default"])(_cn, classes["color".concat((0, _commonUtility.capitalize)(iconColor))], iconColor !== 'default'), (0, _defineProperty2["default"])(_cn, classes["icon".concat((0, _commonUtility.capitalize)(size))], size), (0, _defineProperty2["default"])(_cn, classes["position".concat((0, _commonUtility.capitalize)(position))], position), _cn), className),
    ref: ref
  }), _react["default"].cloneElement(children, {
    className: (0, _classnames["default"])(classes.icon, children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.className),
    height: (children === null || children === void 0 ? void 0 : (_children$props2 = children.props) === null || _children$props2 === void 0 ? void 0 : _children$props2.height) || iconSize,
    width: (children === null || children === void 0 ? void 0 : (_children$props3 = children.props) === null || _children$props3 === void 0 ? void 0 : _children$props3.width) || iconSize
  }));
});

IconButton.defaultProps = {
  onClick: _noop["default"],
  isLoading: false,
  disabled: false,
  size: 'sm'
};
IconButton.propTypes = {
  /** Child element to locate inside of button */
  children: _propTypes["default"].node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: _propTypes["default"].func,

  /** Button size - values =['xs', 'sm', 'md', 'lg'] */
  size: _propTypes["default"].oneOf(['xxs', 'xs', 'sm', 'md', 'lg']),

  /** Indicator whether or not to show loader in button */
  isLoading: _propTypes["default"].bool,

  /** Indicator whether or not to button is disabled */
  disabled: _propTypes["default"].bool,

  /** jss override object to customize the jss classes */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** color to set icon button - value =[transparent, primary, secondary] */
  color: _propTypes["default"].string,

  /** Adds negative margins 15 to counter padding in components
   * Commonly used with Input suffix/prefix or Rows with spacing
   */
  position: _propTypes["default"].oneOf(['suffix', 'prefix'])
};
IconButton.displayName = 'IconButton';
var _default = IconButton;
exports["default"] = _default;