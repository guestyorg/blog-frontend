import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { bool, shape, string } from 'prop-types';
import cn from 'classnames';
import Person from "../../Person";
import Cell from "../Cell";
import TextCell from "../TextCell";
import Placeholder from "./Placeholder";

function PersonCell(_ref) {
  var img = _ref.img,
      name = _ref.name,
      withAvatar = _ref.withAvatar,
      isLoading = _ref.isLoading,
      className = _ref.className,
      contentClassName = _ref.contentClassName,
      style = _ref.style,
      rest = _objectWithoutProperties(_ref, ["img", "name", "withAvatar", "isLoading", "className", "contentClassName", "style"]);

  return withAvatar ? /*#__PURE__*/React.createElement(Cell, _extends({}, rest, {
    isLoading: isLoading,
    className: cn('person-cell', className),
    contentClassName: contentClassName,
    style: style,
    Placeholder: /*#__PURE__*/React.createElement(Placeholder, null)
  }), name && /*#__PURE__*/React.createElement(Person, {
    img: img,
    name: name,
    size: "sm"
  })) : /*#__PURE__*/React.createElement(TextCell, {
    isLoading: isLoading,
    className: cn('person-cell', className),
    contentClassName: contentClassName,
    style: style
  }, name);
}

PersonCell.propTypes = {
  /** Image url for person */
  img: string,

  /** Person full name */
  name: string.isRequired,

  /** Whether avatar should be displayed next to person's name */
  withAvatar: bool,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape()
};
PersonCell.defaultProps = {
  withAvatar: true,
  isLoading: false
};
export default PersonCell;