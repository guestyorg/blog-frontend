import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useContext, useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import memoize from '@guestyci/memoize';
import InputLabel from "../InputLabel/InputLabel";
import FormFieldComponent from "./FormFieldComponent";
import { required as requiredFn } from "../../validators";
import { FormProvider } from "../../enums";
import FormContext from "../Form/FormContext";
const composeValidators = memoize(validators => value => validators.reduce((error, validator) => error || validator(value), undefined));
const buildValidators = memoize((validations, required) => {
  return required ? [requiredFn, ...validations] : validations;
});
export const getFormFieldValidation = (validations, required, provider) => provider === FormProvider.Redux ? buildValidators(validations, required) : composeValidators(required ? [requiredFn, ...validations] : validations);

const FormField = (_ref) => {
  let {
    children,
    label,
    tooltip,
    className,
    style,
    name,
    validate,
    field,
    fieldClassName,
    inputLabelClassName,
    required
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "label", "tooltip", "className", "style", "name", "validate", "field", "fieldClassName", "inputLabelClassName", "required"]);

  const {
    provider,
    fieldInstance
  } = useContext(FormContext);
  const Field = field || fieldInstance;
  const validations = useMemo(() => getFormFieldValidation(validate, required, provider), [provider, validate, required]);
  return /*#__PURE__*/React.createElement("div", {
    className: cn('relative form-field w-fill', className),
    style: style,
    "data-qa": "form-field"
  }, label && /*#__PURE__*/React.createElement(InputLabel, {
    label: label,
    tooltip: tooltip,
    className: inputLabelClassName
  }), /*#__PURE__*/React.createElement(Field, _extends({
    name: name,
    validate: validations,
    className: fieldClassName,
    component: FormFieldComponent,
    required: required
  }, props), children));
};

FormField.defaultProps = {
  label: '',
  tooltip: '',
  className: '',
  field: undefined,
  style: {},
  fieldClassName: '',
  validate: [],
  required: false,
  inputLabelClassName: ''
};
FormField.propTypes = {
  /** form field name to validate accordingly */
  name: PropTypes.string.isRequired,

  /** the redux form field props - required due to redux-form limitations */
  field: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Form field level validations to run - to use required, use the boolean required prop - Must be an Array */
  validate: PropTypes.arrayOf(PropTypes.func),

  /** Form element to render */
  children: PropTypes.node.isRequired,

  /** form field label */
  label: PropTypes.string,

  /** Form field label tooltip */
  tooltip: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.arrayOf(PropTypes.node)]),

  /** Form field root level additional class */
  className: PropTypes.string,

  /** Form field root level additional class */
  style: PropTypes.shape(),

  /** Form field component level additional class */
  fieldClassName: PropTypes.string,

  /** Boolean indicator whether or not field is required */
  required: PropTypes.bool,

  /** Additional class for input label level */
  inputLabelClassName: PropTypes.string
};
export const FieldComponent = FormField;
export default FormField;