"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

function useResize(_ref) {
  var _ref$startWidth = _ref.startWidth,
      startWidth = _ref$startWidth === void 0 ? 0 : _ref$startWidth,
      _ref$minWidth = _ref.minWidth,
      minWidth = _ref$minWidth === void 0 ? 85 : _ref$minWidth,
      _ref$isResizable = _ref.isResizable,
      isResizable = _ref$isResizable === void 0 ? true : _ref$isResizable,
      id = _ref.id,
      onResizeEnd = _ref.onResizeEnd;
  var resizeRef = (0, _react.useRef)({});

  var _useState = (0, _react.useState)(startWidth),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      width = _useState2[0],
      setWidth = _useState2[1];

  var handleResize = function handleResize(e) {
    e.preventDefault();
    var node = resizeRef.current;
    var isDragging = node.isDragging,
        startX = node.startX,
        dragStartWidth = node.dragStartWidth;

    if (isDragging) {
      var calculatedWidth = Math.max(dragStartWidth + (e.pageX - startX), minWidth);

      if (width !== calculatedWidth) {
        setWidth(calculatedWidth);
      }

      node.cachedWidth = calculatedWidth;
    }
  };

  var handleResizeEnd = function handleResizeEnd(e) {
    var node = resizeRef.current;
    node.startX = e.pageX;
    node.isDragging = false;
    node.dragStartWidth = node.cachedWidth;
    onResizeEnd((0, _defineProperty2["default"])({}, id, node.cachedWidth));
    document.removeEventListener('mousemove', handleResize);
    document.removeEventListener('mouseup', handleResizeEnd);
  };

  var handleResizeStart = function handleResizeStart(e) {
    e.preventDefault();
    var node = resizeRef.current;
    node.isDragging = true;
    node.startX = e.pageX;
    node.dragStartWidth = node.dragStartWidth || width;
    document.addEventListener('mousemove', handleResize);
    document.addEventListener('mouseup', handleResizeEnd);
  };

  (0, _react.useEffect)(function () {
    var node = resizeRef.current;

    if (node && isResizable) {
      node.addEventListener('mousedown', handleResizeStart);
      return function () {
        node.removeEventListener('mousedown', handleResizeStart);
      };
    }
  }, [isResizable]);
  return [width, resizeRef];
}

var _default = useResize;
exports["default"] = _default;