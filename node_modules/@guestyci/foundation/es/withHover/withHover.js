import _extends from "@babel/runtime/helpers/esm/extends";
import React, { Component } from 'react';
/**
 * Create a wrapper compose to support Hover functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */

function withHover(ComposedComponent) {
  class HoverWrapper extends Component {
    constructor(props) {
      super(props);

      this.onHoverLeave = () => {
        this.setState({
          isHovering: false
        });
      };

      this.onHoverEnter = () => {
        this.setState({
          isHovering: true
        });
      };

      this.state = {
        isHovering: false
      };
      this.hoverRef = React.createRef();
    }

    componentDidMount() {
      const node = this.hoverRef.current;

      if (node) {
        node.addEventListener('mouseover', this.onHoverEnter);
        node.addEventListener('mouseleave', this.onHoverLeave);
        node.addEventListener('blur', this.onHoverLeave);
      }
    }

    componentWillUnmount() {
      const node = this.hoverRef.current;

      if (node) {
        node.removeEventListener('mouseover', this.onHoverEnter);
        node.removeEventListener('mouseleave', this.onHoverLeave);
        node.removeEventListener('blur', this.onHoverLeave);
      }
    }

    render() {
      const {
        isHovering
      } = this.state;
      return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        isHovering: isHovering,
        hoverRef: this.hoverRef,
        onHoverLeave: this.onHoverLeave,
        onHoverEnter: this.onHoverEnter,
        "data-qa": "hover-wrapper"
      }));
    }

  }

  return HoverWrapper;
}

export default withHover;