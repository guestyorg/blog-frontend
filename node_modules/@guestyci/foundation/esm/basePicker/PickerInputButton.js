import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
import Icon from "../Icon";
import Button from "../Button";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      height: '100%',
      width: 46,
      minWidth: 46,
      borderRadius: 0,
      transition: theme.transition.create(),
      fill: theme.palette.secondary["default"]
    },
    rightAligned: {
      borderLeft: "solid 1px ".concat(theme.palette.border)
    },
    leftAligned: {
      borderRight: "solid 1px ".concat(theme.palette.border)
    },
    active: {
      fill: theme.palette.primary["default"]
    }
  };
});
var PickerInputButton = React.forwardRef(function PickerInputButton(_ref, ref) {
  var _cn;

  var disabled = _ref.disabled,
      onClick = _ref.onClick,
      active = _ref.active,
      className = _ref.className,
      jss = _ref.jss,
      svg = _ref.svg,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'prefix' : _ref$position,
      props = _objectWithoutProperties(_ref, ["disabled", "onClick", "active", "className", "jss", "svg", "position"]);

  var classes = useStyles({
    jss: jss
  });
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    component: "span",
    ref: ref,
    enableRipple: false,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.rightAligned, position === 'suffix'), _defineProperty(_cn, classes.leftAligned, position === 'prefix'), _cn), className),
    disabled: disabled,
    size: "xs",
    onClick: onClick
  }), /*#__PURE__*/React.createElement(Icon, {
    svg: svg,
    className: cn(_defineProperty({}, classes.active, active), 'picker-button'),
    width: 19,
    height: 19
  }));
});
PickerInputButton.propTypes = {
  onClick: PropTypes.func,
  disabled: PropTypes.bool,
  className: PropTypes.string,
  active: PropTypes.bool,
  position: PropTypes.oneOf(['prefix', 'suffix']),
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
PickerInputButton.displayName = 'PickerInputButton';
export default PickerInputButton;