import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useEffect, useState } from 'react';
var cachedScripts = new Set();

function useScript(src) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      loaded = _useState2[0],
      setLoaded = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      error = _useState4[0],
      setError = _useState4[1];

  useEffect(function () {
    var script = document.createElement('script');

    var loadScript = function loadScript() {
      script.src = src;
      script.async = true;
      return new Promise(function (resolve, reject) {
        script.addEventListener('load', function () {
          return resolve(src);
        });
        script.addEventListener('error', function (e) {
          return reject(e);
        });
        document.body.appendChild(script);
      })["catch"](function (e) {
        throw e;
      });
    };

    var processRequestedScript = function processRequestedScript() {
      if (cachedScripts.has(src)) {
        setError(false);
        setLoaded(true);
      } else {
        var promise = loadScript();
        promise["catch"](function () {
          cachedScripts["delete"](src);
          setError(true);
          setLoaded(false);
        }).then(function () {
          cachedScripts.add(src);
          setError(false);
          setLoaded(true);
        });
      }
    };

    processRequestedScript();
  }, [src]);
  return [loaded, error];
}

export default useScript;