import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useState, useMemo, useCallback } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
import CSSTransitionGroup from "../CSSTransitionGroup";
import Portal from "../legacy/Portal";
import { Col } from "../Layout";
import { VARIANTS_NAMES } from "./Toast";
import StackedToast from "./StackedToast";
import context from "./context";
import { uuid } from "../utils/commonUtility";
import zIndex from "../theme/zIndex";
const {
  Provider
} = context;
const useStyles = createStyles(theme => ({
  wrapper: {
    position: 'fixed',
    left: 'auto',
    right: 24,
    top: 24,
    zIndex: zIndex.toast
  },
  enter: {
    transition: theme.transition.create('transform'),
    transform: 'translate(100%)'
  },
  enterActive: {
    transform: 'translate(0%)',
    transition: theme.transition.create('transform')
  },
  exit: {
    transition: theme.transition.create('transform'),
    transform: 'scale(1.5)'
  },
  exitActive: {
    transform: 'scale(0)',
    transition: theme.transition.create('transform')
  }
}));

const ToastProvider = ({
  children,
  className,
  duration
}) => {
  const _useStyles = useStyles(),
        {
    wrapper
  } = _useStyles,
        rest = _objectWithoutPropertiesLoose(_useStyles, ["wrapper"]);

  const [toasts, setToasts] = useState([]);
  const dismissToast = useCallback(id => {
    setToasts(_toasts => _toasts.filter(_toast => _toast.id !== id));
  }, [setToasts]);
  const ctx = useMemo(() => {
    const addToast = VARIANTS_NAMES.reduce((acc, variant) => {
      acc[variant] = (message, options = {}) => {
        const id = uuid();
        const {
          autoHide,
          autoHideDelay,
          action
        } = options;

        const onDismiss = () => dismissToast(id);

        setToasts(_toasts => [..._toasts, {
          autoHide,
          autoHideDelay,
          action,
          variant,
          message,
          id,
          onDismiss
        }]);
        return onDismiss;
      };

      return acc;
    }, {});
    return {
      addToast
    };
  }, [setToasts, dismissToast]);
  return /*#__PURE__*/React.createElement(Provider, {
    value: ctx,
    "data-qa": "toast-provider"
  }, children, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Col, {
    spacing: 1,
    className: cn(wrapper, className)
  }, /*#__PURE__*/React.createElement(CSSTransitionGroup, {
    animation: rest
  }, toasts?.map(props => /*#__PURE__*/React.createElement("div", {
    key: props.id
  }, /*#__PURE__*/React.createElement(StackedToast, _extends({}, props, {
    duration: duration
  }))))))));
};

ToastProvider.defaultProps = {
  duration: 300,
  className: ''
};
ToastProvider.propTypes = {
  /** Wrapper className */
  className: PropTypes.string,

  /** App tree | Consumer target */
  children: PropTypes.node.isRequired,

  /** Animation duration */
  duration: PropTypes.number
};
export default ToastProvider;