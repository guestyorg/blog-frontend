"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _CheckboxCell = _interopRequireDefault(require("../CheckboxCell"));

var _createStyles = _interopRequireDefault(require("../../../createStyles"));

var _colors = require("../../../theme/colors");

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      height: 45,
      borderBottom: "1px solid ".concat(theme.palette.text.primary),
      display: 'table-header-group',
      '& .header-cell, .checkbox-cell': {
        '&.cell-group-left': {
          borderTop: "2px solid ".concat(theme.palette.border)
        },
        '&.cell-group-right': {
          borderTopWidth: 2,
          borderTopColor: "".concat(theme.palette.border, " !important")
        },
        '&.cell-group-item-last': {
          '& .header-cell-content': {
            '& .header-cell-divider': {
              display: 'none'
            }
          }
        },
        '&.cell-group-item-first': {
          '& .header-cell-content': {
            '& .header-cell-divider': {
              display: 'none'
            }
          }
        },
        '&:last-child': {
          '& .header-cell-content': {
            '& .header-cell-divider': {
              display: 'none'
            }
          }
        }
      }
    },
    checkboxCell: {
      zIndex: 11,
      position: 'sticky',
      top: 0,
      backgroundColor: _colors.white,
      borderBottom: "1px solid ".concat(theme.palette.text.primary)
    }
  };
}, {
  name: 'HeaderRow'
});

var HeaderRow = function HeaderRow(_ref) {
  var _children$, _children$$props;

  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      draggable = _ref.draggable,
      onDragDrop = _ref.onDragDrop,
      onSort = _ref.onSort,
      onResize = _ref.onResize,
      sortBy = _ref.sortBy,
      multiSelect = _ref.multiSelect,
      _ref$masterCheckbox = _ref.masterCheckbox,
      _ref$masterCheckbox$c = _ref$masterCheckbox.checked,
      checked = _ref$masterCheckbox$c === void 0 ? false : _ref$masterCheckbox$c,
      _ref$masterCheckbox$i = _ref$masterCheckbox.indeterminate,
      indeterminate = _ref$masterCheckbox$i === void 0 ? false : _ref$masterCheckbox$i,
      _ref$masterCheckbox$o = _ref$masterCheckbox.onChange,
      onChange = _ref$masterCheckbox$o === void 0 ? _noop["default"] : _ref$masterCheckbox$o;
  var fixedLeft = ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : (_children$$props = _children$.props) === null || _children$$props === void 0 ? void 0 : _children$$props.fixed) === 'left';
  var classes = useStyles();

  var _useMemo = (0, _react.useMemo)(function () {
    var minusPrefix = sortBy === null || sortBy === void 0 ? void 0 : sortBy.startsWith('-');
    var direction = minusPrefix ? 'desc' : 'asc';
    var id = minusPrefix ? sortBy.substring(1) : sortBy;
    return [id, direction];
  }, [sortBy]),
      _useMemo2 = (0, _slicedToArray2["default"])(_useMemo, 2),
      sortId = _useMemo2[0],
      sortDirection = _useMemo2[1];

  var cells = (0, _react.useMemo)(function () {
    return _react["default"].Children.map(children, function (child) {
      var _child$props = child.props,
          cellClassName = _child$props.className,
          fixed = _child$props.fixed,
          id = _child$props.id;
      return _react["default"].cloneElement(child, {
        draggable: !fixed && draggable,
        onDragDrop: onDragDrop,
        className: (0, _classnames["default"])(cellClassName),
        onResize: onResize,
        onSort: onSort,
        sortDirection: sortId === id ? sortDirection : undefined
      });
    });
  }, [children, draggable, sortDirection, sortId]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('header-row', className, classes.root),
    style: style,
    "data-qa": "header-row"
  }, multiSelect && /*#__PURE__*/_react["default"].createElement(_CheckboxCell["default"], {
    onChange: onChange,
    checked: checked,
    indeterminate: indeterminate,
    fixed: fixedLeft,
    className: (0, _classnames["default"])({
      'checkbox-cell cell-group-left': fixedLeft
    }, classes.checkboxCell)
  }), cells);
};

HeaderRow.defaultProps = {
  style: {},
  className: '',
  masterCheckbox: {
    checked: false,
    indeterminate: false,
    onChange: _noop["default"]
  },
  multiSelect: false,
  draggable: false,
  onDragDrop: _noop["default"]
};
HeaderRow.propTypes = {
  draggable: _propTypes["default"].bool,
  children: _propTypes["default"].node.isRequired,
  className: _propTypes["default"].string,
  style: _propTypes["default"].shape(),
  multiSelect: _propTypes["default"].bool,
  masterCheckbox: _propTypes["default"].shape({
    checked: _propTypes["default"].bool,
    indeterminate: _propTypes["default"].bool,
    onChange: _propTypes["default"].func
  }),
  onDragDrop: _propTypes["default"].func,
  sortBy: _propTypes["default"].string,
  onSort: _propTypes["default"].func
};
var _default = HeaderRow;
exports["default"] = _default;