import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import isFunction from 'lodash/isFunction';
import Avatar from "../Avatar/Avatar";
import { nameToInitials } from "../../utils/commonUtility";
import PersonBadge from "./PersonBadge";
import PersonReturningGuestPill from "./PersonReturningGuestPill";
import Col from "../Col/Col";
import Row from "../Row/Row";
import TextField from "../TextField/TextField";
import Popover from "../Popover/Popover";
import PersonPopover from "./PersonPopover";
import withOverflowPopoverState from "../Popover/withOverflowPopoverState";
import RaisedBtn from "../RaisedButton/RaisedButton";
import Tooltip from "../Tooltip/Tooltip";

var airbnb = function airbnb(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M13.948 13.075a2.403 2.403 0 0 1-1.47 1.891c-.39.161-.81.21-1.23.161a3.204 3.204 0 0 1-1.228-.42c-.581-.324-1.162-.825-1.841-1.569 1.066-1.308 1.712-2.505 1.955-3.57.113-.502.13-.953.081-1.375a2.63 2.63 0 0 0-.436-1.098C9.277 6.367 8.436 5.947 7.5 5.947c-.938 0-1.779.436-2.279 1.148a2.614 2.614 0 0 0-.436 1.098c-.065.422-.049.89.08 1.374.243 1.066.905 2.279 1.955 3.588-.661.743-1.26 1.245-1.841 1.567a3.143 3.143 0 0 1-1.229.42 2.575 2.575 0 0 1-1.229-.161 2.4 2.4 0 0 1-1.47-1.89 2.68 2.68 0 0 1 .147-1.261c.047-.161.128-.323.21-.517.112-.258.242-.533.37-.808l.017-.033A176.46 176.46 0 0 1 5.35 3.216l.049-.096c.13-.243.259-.502.387-.744.13-.259.275-.501.453-.711.34-.388.792-.598 1.294-.598s.952.21 1.292.598c.178.211.322.452.452.711.13.242.26.501.388.744l.049.096a214.387 214.387 0 0 1 3.539 7.274v.015c.13.258.242.55.372.808.08.194.161.356.21.517.129.42.178.824.113 1.245m-6.448-.76c-.872-1.099-1.439-2.133-1.633-3.006-.08-.372-.097-.694-.048-.985.032-.26.13-.485.259-.68.307-.435.823-.71 1.422-.71.598 0 1.131.257 1.421.71.13.195.228.42.26.68.048.29.031.63-.048.985-.195.857-.76 1.89-1.633 3.006m7.288-.84c-.08-.195-.162-.405-.242-.583-.13-.291-.26-.565-.372-.824l-.016-.016a169.892 169.892 0 0 0-3.572-7.305l-.048-.096a31.004 31.004 0 0 1-.388-.76c-.161-.291-.322-.597-.581-.889A2.613 2.613 0 0 0 7.516 0C6.707 0 5.98.356 5.448.97c-.243.29-.42.597-.583.888-.125.256-.255.51-.387.76l-.048.097A189.639 189.639 0 0 0 .858 10.02l-.017.032c-.112.259-.242.534-.371.824-.081.179-.161.371-.242.581-.21.599-.275 1.165-.194 1.746a3.435 3.435 0 0 0 2.101 2.683 3.3 3.3 0 0 0 1.309.259 4.27 4.27 0 0 0 2.036-.583c.662-.371 1.292-.903 2.004-1.68.711.777 1.357 1.309 2.003 1.68a4.27 4.27 0 0 0 2.038.583c.451 0 .904-.08 1.307-.259a3.424 3.424 0 0 0 2.102-2.683c.129-.566.063-1.13-.146-1.728"
  }));
};

airbnb.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 15 17"
};

var airbnbVerifiedIcon = function airbnbVerifiedIcon(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    fill: "#72D28F",
    d: "M10.972.229l1.34 1.53L14.32.91a.6.6 0 0 1 .803.375l.612 1.973 2.176.039a.599.599 0 0 1 .584.667l-.243 2.054 1.973.92a.6.6 0 0 1 .288.795c-.269.557-.756 1.275-1.085 1.828l1.428 1.645a.6.6 0 0 1-.108.88l-1.688 1.193.636 2.083c.103.34-.11.69-.457.759l-2.024.403-.265 2.16a.6.6 0 0 1-.77.501l-1.973-.447-1.122 1.864a.599.599 0 0 1-.87.173l-1.658-1.238-1.783 1.248a.597.597 0 0 1-.864-.2l-1.008-1.8-2.14.415a.599.599 0 0 1-.71-.57l-.186-2.022-2.12-.49a.6.6 0 0 1-.434-.775l.666-1.957-1.74-1.311a.599.599 0 0 1-.043-.919l1.37-1.481L.51 7.769a.598.598 0 0 1 .288-.84l1.896-.815-.188-2.17a.602.602 0 0 1 .657-.648l2.013.028.71-2.06A.6.6 0 0 1 6.731.93l1.846.852L10.063.19a.599.599 0 0 1 .909.038zM10.5 3.015a7.431 7.431 0 1 1 0 14.862 7.431 7.431 0 0 1 0-14.862zm0 .64a6.792 6.792 0 1 0 0 13.583 6.792 6.792 0 0 0 0-13.584z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#FFF",
    d: "M10.165 12.979L8.053 10.48a.556.556 0 0 0-.432-.224.554.554 0 0 0-.431.224.952.952 0 0 0 0 1.14l2.543 3.166a.557.557 0 0 0 .432.213c.15 0 .29-.061.395-.173l5.25-8.479a.955.955 0 0 0 0-1.141.556.556 0 0 0-.818-.05l-4.827 7.822z"
  })));
};

airbnbVerifiedIcon.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "21",
  height: "21",
  viewBox: "0 0 21 21"
};
import SvgIcon from "../SvgIcon";
const useStyles = createUseStyles({
  text: {
    width: ({
      size
    }) => `calc(100% - ${size === 'sm' ? 30 : 45}px)`
  }
});
const Person = React.memo(({
  img,
  name = '',
  isUser,
  subTitle,
  size,
  className,
  style,
  onClick,
  disabled,
  badge,
  returningGuest,
  description,
  descriptionColor,
  showPopover,
  align,
  airbnbVerified,
  airbnbProfile,
  textClassContainer,
  goToGuestAirbnbProfile,
  iconSize,
  tooltipText,
  airbnbVerifiedText,
  airbnbProfileText,
  nameTextSize,
  descriptionTextSize
}) => {
  const classes = useStyles({
    size
  });
  const handlePersonClick = useCallback(() => {
    if (isFunction(onClick) && !disabled) {
      onClick(name);
    }
  }, [onClick, disabled, name]);
  const descriptionText = description || subTitle;
  return /*#__PURE__*/React.createElement(Col, {
    dense: true,
    fullWidth: true,
    className: className
  }, /*#__PURE__*/React.createElement("div", {
    role: "presentation",
    className: cn('person-container transition-color', {
      'text-hover-blue clickable': !disabled && isFunction(onClick)
    }, {
      'disabled-light': disabled
    }),
    style: style,
    onClick: handlePersonClick
  }, /*#__PURE__*/React.createElement(Row, {
    align: align,
    fullWidth: true,
    justify: "start",
    spacing: "sm"
  }, /*#__PURE__*/React.createElement(Popover, {
    placement: "top-start",
    isOpen: showPopover,
    body: /*#__PURE__*/React.createElement(PersonPopover, {
      title: name,
      subtitle: descriptionText,
      size: size
    })
  }, /*#__PURE__*/React.createElement(Avatar, {
    text: nameToInitials(name),
    src: img,
    isUser: isUser,
    size: iconSize || size,
    badge: badge && /*#__PURE__*/React.createElement(PersonBadge, null)
  })), /*#__PURE__*/React.createElement(Col, {
    dense: true,
    className: cn(classes.text, textClassContainer)
  }, /*#__PURE__*/React.createElement(TextField, {
    size: nameTextSize,
    className: "overflow-ellipsis text-left"
  }, name), descriptionTextSize && /*#__PURE__*/React.createElement(TextField, {
    color: descriptionColor,
    size: descriptionTextSize,
    className: "person-subtitle text-left overflow-ellipsis m-0"
  }, descriptionText), returningGuest && /*#__PURE__*/React.createElement(PersonReturningGuestPill, {
    className: cn({
      sm: size === 'sm' ? 'ml-7' : 'ml-10'
    }, 'my-1')
  }), airbnbVerified && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Tooltip, {
    className: "airbnb-verified",
    body: tooltipText
  }, /*#__PURE__*/React.createElement("div", {
    className: "d-flex flex-center"
  }, /*#__PURE__*/React.createElement(SvgIcon, {
    svg: airbnbVerifiedIcon
  }), /*#__PURE__*/React.createElement("span", {
    className: "ml-1 font-size-md"
  }, airbnbVerifiedText)))), airbnbProfile && /*#__PURE__*/React.createElement(Row, {
    className: "mt-1 airbnb-profile height-25 width-120"
  }, /*#__PURE__*/React.createElement(RaisedBtn, {
    onClick: goToGuestAirbnbProfile,
    className: "bg-transparent border-gray-darkest flex-center"
  }, /*#__PURE__*/React.createElement(Row, {
    className: "flex-center"
  }, /*#__PURE__*/React.createElement(SvgIcon, {
    svg: airbnb,
    className: "m-0",
    fillColor: "gray-darkest",
    color: "black",
    width: 15,
    height: 15
  }), /*#__PURE__*/React.createElement(TextField, {
    className: "ml-1 text-gray-darkest"
  }, airbnbProfileText))))))));
});
Person.defaultProps = {
  img: '',
  isUser: false,
  subTitle: '',
  size: 'md',
  className: '',
  style: {},
  onClick: null,
  disabled: false,
  badge: false,
  returningGuest: false,
  description: '',
  descriptionColor: null,
  align: 'center',
  airbnbVerified: null,
  airbnbProfile: null,
  goToGuestAirbnbProfile: null,
  textClassContainer: null,
  iconSize: null,
  tooltipText: null,
  airbnbVerifiedText: null,
  airbnbProfileText: null,
  nameTextSize: 'lg',
  descriptionTextSize: 'md'
};
Person.propTypes = {
  /** Image url for person */
  img: PropTypes.string,

  /** Person full name */
  name: PropTypes.string.isRequired,

  /** Indicator whether or not the person is a GSC */
  isUser: PropTypes.bool,

  /** bottom line text for the user */
  subTitle: PropTypes.string,

  /** bottom line text for the user */
  description: PropTypes.string,

  /** bottom line text color */
  descriptionColor: PropTypes.string,

  /** text size backward compatible */
  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'lg-xl', 'xl', '2xl', '3xl']),

  /** name text size */
  nameTextSize: PropTypes.oneOf(['xs', 'md', 'lg', 'lg-xl', 'xl', '2xl', '3xl']),

  /** description text size */
  descriptionTextSize: PropTypes.oneOf(['xs', 'md', 'lg', 'lg-xl', 'xl', '2xl', '3xl']),

  /** Additional class name for person */
  className: PropTypes.string,

  /** Additional style for person */
  style: PropTypes.shape(),

  /** CB function for person click */
  onClick: PropTypes.func,

  /** Indicator whether or not the person component is disabled */
  disabled: PropTypes.bool,

  /** Indicator whether or not to show  Badge on person avatar */
  badge: PropTypes.bool,

  /** Indicator whether or not to show  returning guest pill on person */
  returningGuest: PropTypes.bool,

  /** items representation */
  align: PropTypes.string,

  /** if guest is verified on airbnb platform */
  airbnbVerified: PropTypes.bool,

  /** click on redirect to airbnb profile* */
  redirectToAirbnbProfile: PropTypes.func,

  /** if guest profile available* */
  airbnbProfile: PropTypes.string,

  /** class for the text container * */
  textClassContainer: PropTypes.string,

  /** class for the text container * */
  goToGuestAirbnbProfile: PropTypes.func,

  /** icon size * */
  iconSize: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),

  /** tooltip txt * */
  tooltipText: PropTypes.string,

  /** airbnb verfied text * */
  airbnbVerifiedText: PropTypes.string,

  /** airbnb profile text * */
  airbnbProfileText: PropTypes.string
};
export const PersonComponent = Person;
export default withOverflowPopoverState(Person);