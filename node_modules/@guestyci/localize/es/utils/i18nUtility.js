/* eslint-disable global-require */
import queryParser from 'querystring';
import reactIntl from "../react-intl";

const localeDataURL = lang => `https://d2g7j5hs6q3xyb.cloudfront.net/production/atomic-design/localesInit/scripts/${lang}.js`;

const localeJsonURL = lang => `https://d2g7j5hs6q3xyb.cloudfront.net/production/atomic-design/localesInit/locales1/${lang}.json`;

export const warningHandler = console.warn.bind(console);
export const getLanguage = () => {
  const query = window.location.search.split('?');
  let queryLang;

  if (query.length >= 2) {
    const params = queryParser.parse(query[1]);
    queryLang = params && params.lang ? params.lang : undefined;
  }

  return queryLang || window.localStorage.getItem('lang') || 'en-US';
};
const {
  get,
  getHTML,
  formatHTMLMessage,
  formatMessage,
  determineLocale,
  load,
  loadRemoteScript,
  getLocaleFromCookie,
  getDescendantProp,
  getLocaleFromURL,
  getLocaleFromBrowser
} = reactIntl;
export const init = async options => {
  const {
    fallbackLocale = 'en-US',
    currentLocale: locale,
    debug = false
  } = options;
  const langs = [...new Set([locale, fallbackLocale])];

  try {
    const promises = langs.map(lang => {
      return fetch(localeJsonURL(lang)).then(response => response.json());
    });
    const responses = await Promise.all(promises);
    const locales = langs.reduce((acc, lang, index) => {
      acc[lang] = responses[index];
      return acc;
    }, {});
    console.log({
      locales
    });
    return reactIntl.init({
      locales,
      warningHandler,
      fallbackLocale,
      currentLocale: locale,
      debug,
      commonLocaleDataUrls: langs.reduce((acc, lang) => {
        const shortLang = lang.split('-')[0].split('_')[0];
        acc[shortLang] = localeDataURL(shortLang);
        return acc;
      }, {})
    });
  } catch (e) {
    console.warn('[i18n] Warning: Could not load locales, please validate language files');
    return e;
  }
};
export const intl = {
  init,
  get: get.bind(reactIntl),
  getHTML: getHTML.bind(reactIntl),
  formatHTMLMessage: formatHTMLMessage.bind(reactIntl),
  formatMessage: formatMessage.bind(reactIntl),
  determineLocale: determineLocale.bind(reactIntl),
  load: load.bind(reactIntl),
  loadRemoteScript: loadRemoteScript.bind(reactIntl),
  getLocaleFromCookie: getLocaleFromCookie.bind(reactIntl),
  getDescendantProp: getDescendantProp.bind(reactIntl),
  getLocaleFromURL: getLocaleFromURL.bind(reactIntl),
  getLocaleFromBrowser: getLocaleFromBrowser.bind(reactIntl)
};
export const locales = {};