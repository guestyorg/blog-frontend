#!/usr/bin/env node

const { execSync } = require('child_process');
const ora = require('ora');
const github = require('../util/github');
const files = require('../util/files');
const manifest = require('../util/manifest');
const slack = require('../util/slack');
const jenkins = require('../util/jenkins');

const {
  createInventoryFile,
  branchAndPR,
} = require('../scripts/update-manifest');

const {
  CLUSTER: env,
  AUTH_TOKEN: token,
  REPO_NAME: repo,
  CIRCLE_USERNAME: username,
  WORKFLOW_ID: workflowID,
  CIRCLE_TAG: gitTag,
  CIRCLE_BRANCH: gitBranch,
  CIRCLE_SHA1: gitSha,
  PLATFORM_FE_SLACK_WEBHOOK: platformWebhookURL,
  SLACK_WEBHOOK: teamWebhookURL,
  JENKINS_FE_DEPLOY_JOB: deployURL,
  JENKINS_API_USER: jenkinsUser,
  JENKINS_API_KEY: jenkinsAPIKey,
} = process.env;

async function run() {
  const spinner = ora();
  const api = github({ token });

  try {
    spinner.start('Checking app manifest for changes..');
    const isManifestChanged = manifest.hasChanged();
    if (!isManifestChanged) {
      spinner.succeed();
      spinner.text = 'Manifest has no changes, completing task.';
      spinner.succeed();
      return;
    }

    const isManifestValid = manifest.isValid();
    if (!isManifestValid) {
      spinner.succeed();
      throw new Error(
        'manifest.json has illigal values and cannot deploy. Please refer to the documentation'
      );
    }

    spinner.succeed();
    const appManifest = files.getManifest();

    spinner.text = 'Checking if app exists in inventory';

    const isExists = await manifest.isInInventory(api, repo);
    const action = isExists ? 'update' : 'add';
    const branch = gitBranch || /([0-9a-zA-Z/-]+)--/g.exec(gitTag)[1];

    spinner.succeed(`Inventory checked and change determined to be ${action}.`);

    if (action === 'add') {
      const inventoryEntry = createInventoryFile({
        manifest: appManifest,
      });

      spinner.text = 'Uploading new file to github and opening pr..';

      const {
        data: { html_url },
      } = await branchAndPR({
        repo,
        api,
        sha: gitSha,
        manifest: appManifest,
        inventoryEntry,
        username,
        workflowID,
        env,
        action,
      });

      spinner.succeed(`Opened PR.`);

      spinner.text = 'Notifying team and Platform UI';
      await slack.sendInventoryUpdateNotification({
        platformWebhookURL,
        teamWebhookURL,
        env,
        project: repo,
        branch,
        updater: username,
        prURL: html_url,
      });

      spinner.succeed(`Notified Platform and Team.`);
    }

    spinner.text = 'Writing configuration for IMDB';

    execSync(
      `FILE="deploy.conf"; echo "x=${env}" >> $FILE; echo "y=${repo}" >> $FILE; echo "branch=${branch}" >> $FILE`
    );

    spinner.succeed(`Finished writing configuration for IMDB`);
  } catch (e) {
    spinner.fail(e.message);
    process.exit(1);
  }
}

module.exports = run;
