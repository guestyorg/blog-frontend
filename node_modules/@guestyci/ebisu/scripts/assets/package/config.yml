version: 2.1
orbs:
  slack: circleci/slack@2.5.1
  jq: circleci/jq@1.9.0

defaults: &defaults
  working_directory: ~/package
  docker:
    - image: 'circleci/node:11.15.0'

version_filter: &version_filter
  tags:
    only: /^v.*/

branches_ignore: &branches_ignore
  branches:
    ignore: /.*/

sb_branch_filter: &sb_branch_filter
  branches:
    only: /^sb.*/

commands:
  authenticate_npm:
    description: 'Authenticate with Registry'
    steps:
      - run:
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

  install_deps:
    description: 'Install all dependencies and use cache'
    steps:
      - authenticate_npm

      - restore_cache:
          name: Restore Yarn package cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: 'Installing Yarn Pacakges'
          command: yarn install --frozen-lockfile

      - save_cache:
          name: Save Yarn package cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - ~/.cache/yarn

      - persist_to_workspace:
          root: .
          paths: .

jobs:
  #::inject-job.yml

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/package

      - run:
          name: 'Building bundle'
          command: yarn build

      - persist_to_workspace:
          root: .
          paths:
            - build

  publish:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/package

      - run: ls -la

      - jq/install
      - authenticate_npm

      - run: |
          regex=".*-alpha\.[0-9]"

          if [[ ${CIRCLE_TAG} =~ $regex ]]
          then
            cd build && npm publish --tag alpha
            echo "export TAG="alpha"" >> $BASH_ENV
          else
            cd build && npm publish
            echo "export TAG="latest"" >> $BASH_ENV
          fi

      - run: echo "export PACKAGE="$(cat package.json | jq '.name')"" >> $BASH_ENV

      - slack/notify:
          message: '*${PACKAGE}* ${CIRCLE_TAG} is out with tag *${TAG}*.'
          color: '#7474EF'
          webhook: ${SLACK_INFRA_WEBHOOK}
          include_job_number_field: false
          include_project_field: false
          include_visit_job_action: false

      - slack/status:
          mentions: 'here'
          success_message: '*${PACKAGE}* ${CIRCLE_TAG} is out.'

  test:
    <<: *defaults
    steps:
      - checkout
      - install_deps

      - run:
          name: Run Tests
          command: yarn test

  send_approval_notification:
    <<: *defaults
    steps:
      - slack/approval:
          message: Pending approval for release

  deploy_storybook:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/package

      - run:
          name: Deploy storybook
          command: BRANCH=$CIRCLE_BRANCH TAG=$CIRCLE_TAG AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY yarn ebisu deploy-storybook

workflows:
  build-test-and-publish:
    jobs:
      - test:
          context: org-global-libs
          filters:
            <<: *version_filter
            branches:
              only:
                - master
      - build:
          context: org-global-libs
          requires:
            - test
          filters:
            <<: *version_filter
            <<: *branches_ignore
      - hold:
          type: approval
          requires:
            - build
          filters:
            <<: *version_filter
            <<: *branches_ignore

      - send_approval_notification:
          context: org-global-libs
          requires:
            - build
          filters:
            <<: *version_filter
            <<: *branches_ignore

      - publish:
          context: org-global-libs
          requires:
            - hold
          filters:
            <<: *version_filter
            <<: *branches_ignore

      - deploy_storybook:
          context: org-global-libs
          requires:
            - publish
          filters:
            <<: *version_filter
            <<: *branches_ignore

  deploy_to_storybook:
    jobs:
      - deploy_storybook:
          pre-steps:
            - checkout
            - install_deps
          context: org-global-libs
          filters:
            <<: *sb_branch_filter
