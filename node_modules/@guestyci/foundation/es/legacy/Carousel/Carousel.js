import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useRef, useEffect, useCallback } from 'react';
import PropTypes from 'prop-types';
import Slider from 'react-slick';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import isNumber from 'lodash/isNumber';
import noop from 'lodash/noop';
import CarouselCustomArrow from "./CarouselCustomArrow";
import Bullet from "../Bullet/Bullet";
import { Theme } from "../../enums/enums";

const Carousel = ({
  children,
  dots,
  arrows,
  infinite,
  showArrowsOnHover,
  activeSlide,
  draggable,
  onChange,
  className,
  arrowTheme,
  arrowsFade,
  style,
  accessibility
}) => {
  const sliderRef = useRef(null);
  const afterChange = useCallback(slideIndex => {
    onChange(slideIndex);
  });
  const settings = {
    dots,
    arrows,
    infinite,
    draggable,
    afterChange,
    className,
    style,
    accessibility,
    adptiveHeight: true,
    initialSlide: activeSlide !== undefined ? activeSlide : 0,
    prevArrow: /*#__PURE__*/React.createElement(CarouselCustomArrow, {
      fade: arrowsFade,
      theme: arrowTheme,
      direction: "left",
      showArrowsOnHover: showArrowsOnHover
    }),
    nextArrow: /*#__PURE__*/React.createElement(CarouselCustomArrow, {
      fade: arrowsFade,
      theme: arrowTheme,
      direction: "right",
      showArrowsOnHover: showArrowsOnHover
    }),
    dotsClass: 'absolute text-align-center w-fill carousel-dots',
    customPaging: () => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Bullet, {
      color: "white",
      className: "clickable carousel-bullet"
    }))
  };
  useEffect(() => {
    if (isNumber(activeSlide)) {
      sliderRef.current.slickGoTo(activeSlide);
    }
  }, [activeSlide, sliderRef.current]);
  return /*#__PURE__*/React.createElement("div", {
    className: "d-flex w-fill",
    "data-qa": "carousel"
  }, /*#__PURE__*/React.createElement("div", {
    className: "flex-grow-1 width-0 carousel-component"
  }, /*#__PURE__*/React.createElement(Slider, _extends({
    ref: sliderRef
  }, settings), children)));
};

Carousel.defaultProps = {
  accessibility: true,
  dots: true,
  arrows: false,
  showArrowsOnHover: false,
  infinite: false,
  draggable: true,
  onChange: noop,
  className: '',
  arrowsFade: false,
  arrowTheme: Theme.Dark,
  style: {}
};
Carousel.propTypes = {
  /** indicates if to display dots */
  dots: PropTypes.bool,

  /** indicates if to display arrows */
  arrows: PropTypes.bool,

  /** indicates if to display fade around the arrows */
  arrowsFade: PropTypes.bool,

  /** Display arrows only when hovering */
  showArrowsOnHover: PropTypes.bool,

  /** arrow's theme */
  arrowTheme: PropTypes.oneOf([Theme.Light, Theme.Dark]),

  /** Infinitely wrap around contents */
  infinite: PropTypes.bool,

  /** Enable scrollable via dragging on desktop */
  draggable: PropTypes.bool,

  /** Slide index to show */
  activeSlide: PropTypes.number,

  /** Additional class name */
  className: PropTypes.string,

  /** Additional style */
  style: PropTypes.shape(),

  /** callback when slide changes through arrows/dots */
  onChange: PropTypes.func,

  /** The item to render inside the carousel */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** Enable tabbing and arrow key navigation */
  accessibility: PropTypes.bool
};
export default Carousel;