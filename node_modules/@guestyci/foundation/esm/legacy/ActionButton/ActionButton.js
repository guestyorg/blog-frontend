import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import Icon from "../Icon";
import useHover from "../../useHover";
import Tooltip from "../Tooltip";
var useStyles = createUseStyles({
  actionButton: {
    width: 45,
    borderBottomRightRadius: 2,
    borderTopRightRadius: 2,
    height: 45,
    '&:disabled': {
      opacity: 1,
      cursor: 'not-allowed'
    }
  }
});

var getIconColor = function getIconColor(disabled, isHovering, iconColor) {
  if (disabled) {
    return 'gray-light';
  }

  return isHovering ? 'blue' : iconColor;
};

var ActionButton = function ActionButton(_ref) {
  var disabled = _ref.disabled,
      iconColor = _ref.iconColor,
      className = _ref.className,
      onClick = _ref.onClick,
      onMouseDown = _ref.onMouseDown,
      icon = _ref.icon,
      svg = _ref.svg,
      iconWidth = _ref.iconWidth,
      id = _ref.id,
      iconHeight = _ref.iconHeight,
      style = _ref.style,
      iconClassName = _ref.iconClassName,
      tooltip = _ref.tooltip,
      tooltipPlacement = _ref.tooltipPlacement,
      children = _ref.children;
  var classes = useStyles();

  var _useHover = useHover(),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var _useState = useState(iconColor),
      _useState2 = _slicedToArray(_useState, 2),
      actionButtonIconColor = _useState2[0],
      setActionButtonIconColor = _useState2[1];

  useEffect(function () {
    return setActionButtonIconColor(getIconColor(disabled, isHovering, iconColor));
  }, [disabled, isHovering, iconColor]);
  return /*#__PURE__*/React.createElement(Tooltip, {
    body: tooltip,
    placement: tooltipPlacement,
    id: id,
    "data-qa": "action-button"
  }, /*#__PURE__*/React.createElement("button", {
    ref: hoverRef,
    className: cn('border-gray-light', 'flex-center', 'p-6-10', 'b-1', 'clickable', 'transition-opacity', classes.actionButton, className),
    disabled: disabled,
    onMouseDown: onMouseDown,
    onClick: onClick,
    style: style,
    type: "button"
  }, icon || svg ? /*#__PURE__*/React.createElement(Icon, {
    icon: icon,
    svg: svg,
    height: iconHeight,
    width: iconWidth,
    color: actionButtonIconColor,
    className: iconClassName
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, children)));
};

ActionButton.defaultProps = {
  className: '',
  disabled: false,
  iconWidth: 20,
  iconHeight: 20,
  iconColor: 'gray-dark',
  iconClassName: '',
  children: null,
  style: {},
  tooltip: null,
  tooltipPlacement: 'top',
  id: undefined
};
ActionButton.propTypes = {
  className: PropTypes.string,
  disabled: PropTypes.bool,
  onClick: PropTypes.func.isRequired,
  icon: PropTypes.string,
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),
  iconWidth: PropTypes.number,
  iconHeight: PropTypes.number,
  iconColor: PropTypes.string,
  style: PropTypes.shape(),
  iconClassName: PropTypes.string,
  tooltip: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.number]),
  tooltipPlacement: PropTypes.string,
  id: PropTypes.string,
  children: PropTypes.node
};
export default ActionButton;