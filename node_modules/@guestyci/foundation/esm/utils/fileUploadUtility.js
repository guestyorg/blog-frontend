import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import Resource from '@guestyci/agni';
import { getUserData } from "./commonUtility";
import { CLOUD_NAME, CLOUDINARY_API_KEY } from "../constants/constants";

var getFromTokenIssuer = function getFromTokenIssuer() {
  var issuer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return issuer.split('.')[0];
};

var _Resource$create = Resource.create({
  domain: '/user-generated-content/api'
}),
    api = _Resource$create.api;

var generateSignature = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callback, params) {
    var _yield$api$post, data;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return api.post('/media-provider/generate-signature', params);

          case 3:
            _yield$api$post = _context.sent;
            data = _yield$api$post.data;
            callback(data.signature);
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](0);
            console.log('error', _context.t0);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 8]]);
  }));

  return function generateSignature(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

export var setUploadFolder = function setUploadFolder() {
  var _ref2 = getUserData() || {},
      accountId = _ref2.accountId,
      iss = _ref2.iss;

  if (!accountId || !iss) {
    return 'general';
  }

  return "".concat(getFromTokenIssuer(iss), "/").concat(accountId);
};
/**
 * Create a cloudinary upload widget
 * @param onSuccess  {Function} - CB function to run on success
 * @param onFailure {Function} - CB function to run on failure
 * @param options = { Object} - options to pass to the widget
 * @return {Object} Cloudinary widget object
 */

export var createUploadWidget = function createUploadWidget(_ref3) {
  var onSuccess = _ref3.onSuccess,
      onFailure = _ref3.onFailure,
      options = _objectWithoutProperties(_ref3, ["onSuccess", "onFailure"]);

  if (window.cloudinary) {
    var _window = window,
        cloudinary = _window.cloudinary;
    return cloudinary.createUploadWidget(_extends({
      cloudName: CLOUD_NAME,
      apiKey: CLOUDINARY_API_KEY,
      uploadSignature: generateSignature,
      sources: ['local'],
      showPoweredBy: false,
      folder: setUploadFolder()
    }, options), function (uploadError, result) {
      if (uploadError && onFailure) {
        onFailure(uploadError);
      }

      if (result && result.event === 'success') {
        onSuccess(result.info);
      }
    });
  }
};
/**
 * Open a cloudinary upload widget
 * @param onSuccess  {Function} - CB function to run on success
 * @param onFailure {Function} - CB function to run on failure
 * @param options = { Object} - options to pass to the widget
 */

export var openUploadWidget = function openUploadWidget(_ref4) {
  var onSuccess = _ref4.onSuccess,
      onFailure = _ref4.onFailure,
      options = _objectWithoutProperties(_ref4, ["onSuccess", "onFailure"]);

  if (window.cloudinary) {
    window.cloudinary.openUploadWidget(_extends({
      cloudName: CLOUD_NAME,
      api_key: CLOUDINARY_API_KEY,
      sources: ['local'],
      showPoweredBy: false,
      uploadSignature: generateSignature,
      folder: setUploadFolder()
    }, options), function (uploadError, result) {
      if (uploadError && onFailure) {
        onFailure(uploadError);
      }

      if (result && result.event === 'success') {
        onSuccess(result.info);
      }
    });
  }
};