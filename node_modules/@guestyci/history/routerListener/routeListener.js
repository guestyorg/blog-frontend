"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeUrl = serializeUrl;
exports.postInnerAppRouteChange = postInnerAppRouteChange;
exports.pushError = pushError;
exports.postRouteChangeOutOfApp = postRouteChangeOutOfApp;
exports.shouldPostBaseUrl = shouldPostBaseUrl;
exports.init = init;
exports.listener = exports.NGNIX_BASE = void 0;
var NGNIX_BASE = '/apps';
exports.NGNIX_BASE = NGNIX_BASE;

function serializeUrl(_ref) {
  var _ref$baseUrl = _ref.baseUrl,
      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,
      alias = _ref.alias,
      _ref$locationPath = _ref.locationPath,
      locationPath = _ref$locationPath === void 0 ? '' : _ref$locationPath;
  var appUrlPath = "".concat(alias || baseUrl).concat(locationPath);
  return appUrlPath.replace(NGNIX_BASE, '');
}

function postInnerAppRouteChange(location, search) {
  window.parent.postMessage({
    action: 'INNER_APP_ROUTE_CHANGE',
    payload: {
      location: location,
      search: search
    }
  }, '*');
}

function pushError(errorMessage) {
  window.parent.postMessage({
    action: 'INNER_APP_ERROR',
    payload: errorMessage
  }, '*');
}

function postRouteChangeOutOfApp(location, search) {
  window.parent.postMessage({
    action: 'ROUTE_CHANGE_OUT_OF_APP',
    payload: {
      location: location,
      search: search
    }
  }, '*');
}

function shouldPostBaseUrl(baseUrl, alias) {
  try {
    if (!baseUrl) {
      return false;
    }

    var serializedBaseUrl = serializeUrl({
      baseUrl: baseUrl,
      alias: alias
    });
    var location = window.parent.location.pathname;
    return !location.includes(serializedBaseUrl);
  } catch (error) {
    console.error('No window found!');
    return false;
  }
}

function init(pathname) {
  var search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var location = serializeUrl({
    locationPath: pathname
  });
  postInnerAppRouteChange(location, search);
}

var listener = function listener(history) {
  var baseUrl = history.baseUrl,
      alias = history.alias,
      isFragment = history.isFragment;

  if (shouldPostBaseUrl(baseUrl, alias) && isFragment) {
    init(baseUrl);
  }

  return history.listen(function (location, action) {
    if (action === 'PUSH' || action === 'REPLACE') {
      var locationPath = location.pathname,
          search = location.search;
      var path = serializeUrl({
        baseUrl: baseUrl,
        alias: alias,
        locationPath: locationPath
      });

      if (history.isFragment) {
        postInnerAppRouteChange(path, search);
      }
    }
  });
};

exports.listener = listener;