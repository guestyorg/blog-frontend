import React from 'react';
import PropTypes from 'prop-types';
import Icon from "../Icon";
import Row from "../Layout/Row";
import TextField from "../TextField";
import Section from "../Layout/Section";
import createStyles from "../createStyles";
import { green10, red700, red10, yellow10, yellow400, green800 } from "../theme/colors";

var IcoApproved = function IcoApproved(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M10.5 0C4.701 0 0 4.701 0 10.5S4.701 21 10.5 21 21 16.299 21 10.5 16.299 0 10.5 0zm4.633 6.752l-5.537 8.202c-.018.026-.044.04-.065.063-.012.014-.018.032-.032.045-.01.01-.024.013-.035.021a.597.597 0 0 1-.123.075.595.595 0 0 1-.096.04.608.608 0 0 1-.121.018.617.617 0 0 1-.12 0 .602.602 0 0 1-.103-.025.596.596 0 0 1-.13-.054c-.013-.007-.027-.008-.04-.016-.016-.01-.024-.028-.04-.04-.023-.019-.051-.03-.072-.052l-2.693-2.931c-.233-.252-.218-.648.034-.88s.647-.219.88.033l2.163 2.354 5.098-7.55a.625.625 0 0 1 .864-.168c.284.192.36.581.168.865z"
  }));
};

IcoApproved.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 21 21"
};

var IcoDeclined = function IcoDeclined(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M10.5 0C4.701 0 0 4.701 0 10.5S4.701 21 10.5 21 21 16.299 21 10.5 16.299 0 10.5 0zm4.212 13.75l-.962.962-.106-.106-3.144-3.144-3.25 3.25-.962-.962 3.25-3.25-3.25-3.25.962-.962 3.25 3.25 3.25-3.25.962.962-3.25 3.25 3.25 3.25z"
  }));
};

IcoDeclined.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 21 21"
};

var IcoNotice = function IcoNotice(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M10.5 0C4.701 0 0 4.701 0 10.5S4.701 21 10.5 21 21 16.299 21 10.5 16.299 0 10.5 0zm-.923 5.53h1.885v3.717c0 .4-.024.795-.071 1.187-.048.392-.11.792-.189 1.199H9.837c-.078-.407-.14-.807-.189-1.2a9.873 9.873 0 0 1-.07-1.186V5.53zm1.98 8.888c-.059.137-.14.255-.245.354a1.17 1.17 0 0 1-.812.319c-.165 0-.316-.028-.455-.084a1.088 1.088 0 0 1-.601-.589c-.059-.136-.088-.282-.088-.439a1.076 1.076 0 0 1 .329-.786 1.145 1.145 0 0 1 .815-.325 1.175 1.175 0 0 1 .813.325 1.082 1.082 0 0 1 .331.786c0 .157-.03.303-.087.439z"
  }));
};

IcoNotice.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 21 21"
};
export const VARIANTS = ['success', 'danger', 'warning', 'redWarning'];
const [success, danger, warning, redWarning] = VARIANTS;
const variants = {
  [success]: {
    Svg: IcoApproved,
    backgroundColor: green10,
    fillColor: green800
  },
  [danger]: {
    Svg: IcoDeclined,
    backgroundColor: red10,
    fillColor: red700
  },
  [warning]: {
    Svg: IcoNotice,
    backgroundColor: yellow10,
    fillColor: yellow400
  },
  [redWarning]: {
    Svg: IcoNotice,
    backgroundColor: red10,
    fillColor: red700
  }
};
const useStyles = createStyles(theme => ({
  root: {
    borderRadius: 3
  },
  button: {
    color: theme.palette.link,
    cursor: 'pointer',
    whiteSpace: 'nowrap'
  }
}), {
  name: 'StatusIndication'
});

const StatusIndication = ({
  variant,
  text,
  onClick,
  btnText,
  hideIcon
}) => {
  const {
    root,
    button
  } = useStyles();
  const {
    Svg,
    backgroundColor,
    fillColor
  } = variants[variant] || {};
  return /*#__PURE__*/React.createElement(Section, {
    gutter: 3,
    style: {
      backgroundColor
    },
    className: root,
    "data-qa": "status-indication"
  }, /*#__PURE__*/React.createElement(Row, {
    fullWidth: true,
    align: "center",
    justify: "between"
  }, /*#__PURE__*/React.createElement(Row, {
    spacing: 3,
    align: "center"
  }, !hideIcon && /*#__PURE__*/React.createElement(Icon, {
    svg: Svg,
    fillColor: fillColor
  }), /*#__PURE__*/React.createElement(TextField, {
    className: "pr-3"
  }, text)), btnText && /*#__PURE__*/React.createElement("div", {
    tabIndex: "0",
    onClick: onClick,
    onKeyDown: onClick,
    className: button,
    role: "button"
  }, btnText)));
};

StatusIndication.propTypes = {
  /** Set additional class names to StatusIndication */
  className: PropTypes.string,

  /**  Variant of status */
  variant: PropTypes.oneOf(VARIANTS).isRequired,

  /** Button text */
  btnText: PropTypes.string,

  /** Button onClick */
  onClick: PropTypes.string,

  /** Defines whether to hide icon or not */
  hideIcon: PropTypes.bool
};
StatusIndication.displayName = 'StatusIndication';
export default StatusIndication;