import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { forwardRef, useLayoutEffect, useRef, useState } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
import InlineTip from "./InlineTip";
import MiniTip from "./MiniTip";
import SideTip from "./SideTip";
export var useStyles = createStyles(function () {
  return {
    root: {
      width: 'fit-content',
      maxWidth: '100%'
    }
  };
}, {
  name: 'Tip'
});
var Tip = forwardRef(function Tip(_ref, ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'side' : _ref$variant,
      className = _ref.className,
      children = _ref.children,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss;
  var classes = useStyles({
    jss: jss
  });
  var overflowRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      forceMini = _useState2[0],
      setForceMini = _useState2[1];

  useLayoutEffect(function () {
    if (variant === 'side') {
      var _overflowRef$current = overflowRef.current,
          current = _overflowRef$current === void 0 ? {} : _overflowRef$current;
      var clientWidth = current.clientWidth,
          scrollWidth = current.scrollWidth;
      var isOverflow = scrollWidth > clientWidth;

      if (isOverflow) {
        setForceMini(true);
      }
    }
  }, [overflowRef.current]);
  var shouldForceMini = variant === 'side' && forceMini;
  var selectedVariant = shouldForceMini ? 'mini' : variant;
  var TipComponent = {
    inline: InlineTip,
    side: SideTip,
    mini: MiniTip
  }[selectedVariant];
  return /*#__PURE__*/React.createElement("div", {
    ref: overflowRef,
    className: cn(classes.root, className)
  }, /*#__PURE__*/React.createElement(TipComponent, {
    jss: jss,
    ref: ref
  }, children));
});
Tip.displayName = 'Tip';
Tip.propTypes = {
  /** variant -  [ 'side', 'inline', 'mini' ] */
  variant: PropTypes.oneOf(['side', 'inline', 'mini']),

  /** root level class name to add */
  className: PropTypes.string,

  /** text node element */
  children: PropTypes.node.isRequired,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
export default Tip;