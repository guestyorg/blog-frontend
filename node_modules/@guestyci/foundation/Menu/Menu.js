"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _Paper = _interopRequireDefault(require("../Paper"));

var _enums = require("../enums");

var _Popper = _interopRequireDefault(require("../legacy/Popper"));

var _ClickOutsideListener = _interopRequireDefault(require("../ClickOutsideListener"));

var _colors = require("../theme/colors");

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      width: '100%',
      overflowX: 'hidden',
      overflowY: 'auto',
      padding: 0,
      marginBottom: 0,
      listStyleType: 'none'
    },
    menu: {
      maxHeight: 260
    },
    list: {
      overflowY: 'hidden',
      maxHeight: 'auto'
    },
    enter: {
      opacity: 0.01,
      transform: 'scaleY(0)'
    },
    enterActive: {
      transform: 'scaleY(1)',
      opacity: 1,
      transition: theme.transition.create('all', {
        duration: 200
      })
    },
    enterDone: {
      transform: 'scaleY(1)',
      opacity: 1
    },
    exit: {
      opacity: 1,
      transform: 'scaleY(1)'
    },
    exitDone: {
      opacity: 0,
      transform: 'scaleY(0)'
    },
    exitActive: {
      transform: 'scaleY(0)',
      opacity: 0.01,
      transition: theme.transition.create('all', {
        duration: 200
      })
    }
  };
}, {
  name: 'Menu'
});
exports.useStyles = useStyles;

var Menu = _react["default"].forwardRef(function Menu(_ref, ref) {
  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      anchor = _ref.anchor,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'list' : _ref$variant,
      _ref$bgColor = _ref.bgColor,
      bgColor = _ref$bgColor === void 0 ? _colors.white : _ref$bgColor,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$anchorDirection = _ref.anchorDirection,
      anchorDirection = _ref$anchorDirection === void 0 ? _enums.AnchorDirectionType.Start : _ref$anchorDirection,
      _ref$originDirection = _ref.originDirection,
      originDirection = _ref$originDirection === void 0 ? _enums.OriginDirectionType.Bottom : _ref$originDirection,
      _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      onClose = _ref.onClose,
      transition = _ref.transition,
      fitAnchor = _ref.fitAnchor,
      menuWidth = _ref.menuWidth,
      _ref$backdrop = _ref.backdrop,
      backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "className", "anchor", "variant", "bgColor", "style", "anchorDirection", "originDirection", "open", "jss", "onClose", "transition", "fitAnchor", "menuWidth", "backdrop"]);
  var classes = useStyles({
    jss: jss
  });
  var list = classes.list,
      menu = classes.menu,
      root = classes.root,
      defaultMenuTransition = (0, _objectWithoutProperties2["default"])(classes, ["list", "menu", "root"]);
  var Component = variant === 'menu' ? _Popper["default"] : _react.Fragment;
  var wrapperProps = {};

  if (variant === 'menu') {
    wrapperProps = {
      width: menuWidth,
      anchor: anchor,
      transition: transition || defaultMenuTransition,
      trigger: open,
      fitAnchor: fitAnchor,
      backdrop: backdrop,
      anchorDirection: anchorDirection,
      originDirection: originDirection
    };
  }

  return /*#__PURE__*/_react["default"].createElement(Component, wrapperProps, /*#__PURE__*/_react["default"].createElement(_ClickOutsideListener["default"], {
    delay: 250,
    onClickOutside: onClose
  }, /*#__PURE__*/_react["default"].createElement(_Paper["default"], {
    elevation: 2,
    bgColor: bgColor
  }, /*#__PURE__*/_react["default"].createElement("ul", (0, _extends2["default"])({}, props, {
    role: "listbox",
    tabIndex: -1,
    ref: ref,
    className: (0, _classnames["default"])(classes.root, (0, _defineProperty2["default"])({}, classes[variant], variant), className),
    style: style
  }), children))));
});

Menu.propTypes = {
  /** Indicator whether or not to open menu when variant = menu */
  open: _propTypes["default"].bool,

  /** Anchor element to append menu type Menu */
  anchor: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func, _propTypes["default"].shape()]),

  /** Child items in the menu component */
  children: _propTypes["default"].node.isRequired,

  /** Additional class for root level */
  className: _propTypes["default"].string,

  /** Additional style for root level */
  style: _propTypes["default"].shape(),

  /** variant to set the menu style - values - [menu, dropdown] */
  variant: _propTypes["default"].oneOf(['menu', 'list']),

  /* Menu transition prop for css transition */
  transition: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    appear: _propTypes["default"].string,
    appearActive: _propTypes["default"].string,
    enter: _propTypes["default"].string.isRequired,
    enterActive: _propTypes["default"].string.isRequired,
    enterDone: _propTypes["default"].string,
    exitActive: _propTypes["default"].string.isRequired,
    exit: _propTypes["default"].string.isRequired,
    exitDone: _propTypes["default"].string
  }), _propTypes["default"].string]),

  /** Background color to set to the menu */
  bgColor: _propTypes["default"].string,

  /** Direction to open the content relative to anchor (center, end ,start) */
  anchorDirection: _propTypes["default"].oneOf([_enums.AnchorDirectionType.Center, _enums.AnchorDirectionType.Start, _enums.AnchorDirectionType.End]),

  /** Direction to open the content relative to origin (Top bottom left right) */
  originDirection: _propTypes["default"].oneOf([_enums.OriginDirectionType.Top, _enums.OriginDirectionType.Bottom, _enums.OriginDirectionType.Left, _enums.OriginDirectionType.Right]),

  /** In case variant is menu - set the menu content width manually - by default it will resolve to the larger of the input width or the content width */
  menuWidth: _propTypes["default"].number,

  /** Control the backdrop for the popper element in variant = menu, defaults to true */
  backdrop: _propTypes["default"].bool
};
Menu.displayName = 'Menu';
var _default = Menu;
exports["default"] = _default;