import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import isEmpty from 'lodash/isEmpty';
import isUndefined from 'lodash/isUndefined';
import isObject from 'lodash/isObject';
import debounce from 'lodash/debounce';
import get from 'lodash/get';
import cn from 'classnames';
import withCollapse from "../Collapse/withCollapse";

var isEqualValue = function isEqualValue(prevValue, value) {
  if (isObject(prevValue) && isObject(value)) {
    return prevValue.value === value.value;
  }

  return prevValue === value;
};
/**
 * Create a wrapper compose to support dropdown functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


var withDropdown = function withDropdown(ComposedComponent) {
  var DropdownWrapper = /*#__PURE__*/function (_Component) {
    _inherits(DropdownWrapper, _Component);

    var _super = _createSuper(DropdownWrapper);

    function DropdownWrapper(props) {
      var _this;

      _classCallCheck(this, DropdownWrapper);

      _this = _super.call(this, props);
      _this.handleSearchQueryChange = debounce(function (val, identifier) {
        var onSearchQueryChange = _this.props.onSearchQueryChange;
        onSearchQueryChange(val, identifier);
      }, 500);

      _this.setSelectedItemControlledValue = function (defaultValue) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var value = {};

        if (!isUndefined(defaultValue)) {
          if (!isObject(defaultValue) && !isEmpty(options)) {
            value = options.find(function (option) {
              return option.value === defaultValue;
            }) || {
              label: undefined,
              value: defaultValue
            };
          } else {
            value = defaultValue;
          }
        }

        _this.setSelectedItem(value);
      };

      _this.handleClickOutside = function () {
        var _this$props = _this.props,
            isCollapsed = _this$props.isCollapsed,
            closeCollapse = _this$props.closeCollapse;
        var query = _this.state.query;

        if (!isCollapsed) {
          closeCollapse();

          if (!isEmpty(query)) {
            _this.searchQueryChange('');
          }
        }
      };

      _this.handleLoadMore = function (page) {
        var onLoadMore = _this.props.onLoadMore;
        var query = _this.state.query;

        _this.setState({
          currentPage: page
        });

        onLoadMore(page, query);
      };

      _this.handleSelectedItemChange = function (value) {
        var _this$props2 = _this.props,
            id = _this$props2.id,
            name = _this$props2.name,
            onSelect = _this$props2.onSelect,
            onChange = _this$props2.onChange;

        if (onSelect) {
          onSelect(value, id || name);
        } else if (onChange) {
          onChange(value, id || name);
        }
      };

      _this.handleSelectItem = function () {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var closeCollapse = _this.props.closeCollapse;
        closeCollapse();

        _this.setSelectedItem(item);

        _this.handleSelectedItemChange(item.value);
      };

      _this.clearSelectedItem = function () {
        _this.handleSelectedItemChange('');

        _this.setSelectedItem({});
      };

      _this.clearQuery = function () {
        _this.searchQueryChange('');
      };

      _this.handleSearchChange = function (e) {
        var query = e.currentTarget.value;
        var _this$props3 = _this.props,
            isCollapsed = _this$props3.isCollapsed,
            openCollapse = _this$props3.openCollapse;

        if (isCollapsed) {
          openCollapse();
        }

        _this.searchQueryChange(query);
      };

      _this.dropdownRef = React.createRef();
      _this.state = {
        selectedItem: {},
        query: '',
        currentPage: props.intialPage || 0,
        searchInputValue: ''
      };
      return _this;
    }

    _createClass(DropdownWrapper, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props4 = this.props,
            value = _this$props4.value,
            defaultValue = _this$props4.defaultValue,
            options = _this$props4.options;
        this.setSelectedItemControlledValue(value || defaultValue, options);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var _this$props5 = this.props,
            defaultValue = _this$props5.defaultValue,
            options = _this$props5.options,
            value = _this$props5.value;
        var selectedItem = this.state.selectedItem;

        if (!isEqualValue(prevProps.defaultValue, defaultValue) && isEmpty(selectedItem)) {
          this.setSelectedItemControlledValue(defaultValue, options);
        }

        if (!isEqualValue(prevProps.value, value) && !isEqualValue(value, selectedItem)) {
          this.setSelectedItemControlledValue(value, options);
        }

        if (options.length !== prevProps.options.length && !selectedItem.label) {
          this.setSelectedItemControlledValue(selectedItem.value, options);
        }
      }
    }, {
      key: "setSelectedItem",
      value: function setSelectedItem() {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.setState({
          selectedItem: item || {},
          searchInputValue: isObject(get(item, 'label')) ? item.name : get(item, 'label')
        });
      }
    }, {
      key: "searchQueryChange",
      value: function searchQueryChange(val) {
        var _this$props6 = this.props,
            id = _this$props6.id,
            name = _this$props6.name,
            onSearchQueryChange = _this$props6.onSearchQueryChange;
        this.setState({
          query: val,
          currentPage: 0
        });

        if (onSearchQueryChange) {
          this.handleSearchQueryChange(val, id || name);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props7 = this.props,
            containerClassName = _this$props7.containerClassName,
            onChange = _this$props7.onChange,
            props = _objectWithoutProperties(_this$props7, ["containerClassName", "onChange"]);

        return /*#__PURE__*/React.createElement("div", {
          ref: this.dropdownRef,
          className: cn('d-flex w-inherit dropdown-wrapper', containerClassName),
          "data-qa": "dropdown-wrapper"
        }, /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, props, this.state, {
          onSearchChange: this.handleSearchChange,
          clearSelectedItem: this.clearSelectedItem,
          onSelectItem: this.handleSelectItem,
          onChange: this.handleSelectedItemChange,
          fetchNextPage: this.handleLoadMore,
          clearQuery: this.clearQuery,
          closeDropdown: this.handleClickOutside
        })));
      }
    }]);

    return DropdownWrapper;
  }(Component);

  return withCollapse(DropdownWrapper);
};

export default withDropdown;