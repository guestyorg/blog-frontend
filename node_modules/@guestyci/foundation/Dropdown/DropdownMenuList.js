"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _commonUtility = require("../utils/commonUtility");

var _DropdownSelectedMenuList = _interopRequireDefault(require("./DropdownSelectedMenuList"));

var getValueFromOption = function getValueFromOption(option) {
  var _option$props;

  return option === null || option === void 0 ? void 0 : (_option$props = option.props) === null || _option$props === void 0 ? void 0 : _option$props.value;
};

var doesSetContainsValue = function doesSetContainsValue(set, value) {
  return Array.from(set).some(function (option) {
    return (0, _isEqual["default"])(option, value);
  });
};

var buildSelectedArray = function buildSelectedArray(map, newItem) {
  var selectedValues = Array.from(map);

  if (selectedValues.some(function (selectedItem) {
    return (0, _isEqual["default"])(selectedItem, newItem);
  })) {
    return selectedValues.filter(function (selectedItem) {
      return !(0, _isEqual["default"])(selectedItem, newItem);
    });
  }

  return [].concat((0, _toConsumableArray2["default"])(selectedValues), [newItem]);
};

var DropdownMenuList = function DropdownMenuList(_ref) {
  var children = _ref.children,
      value = _ref.value,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      variant = _ref.variant;

  var _useState = (0, _react.useState)(new Set()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      selectedOptionSet = _useState2[0],
      setSelectedOptionSet = _useState2[1];

  var isMultiSelect = variant === 'multiselect';
  var isChipSelect = variant === 'chip';
  var isSingleSelect = variant === 'single';
  (0, _react.useEffect)(function () {
    if (!(0, _commonUtility.isEmpty)(value)) {
      var selectedValue = isSingleSelect ? [value] : value;
      setSelectedOptionSet(new Set(selectedValue));
    }
  }, [value]);

  var handleItemClick = function handleItemClick(e, menuItemValue) {
    e.stopPropagation();
    var selectedItems = isSingleSelect ? menuItemValue : buildSelectedArray(selectedOptionSet, menuItemValue);
    onChange(e, selectedItems);

    if (isChipSelect) {
      setSelectedOptionSet(new Set(selectedItems));
    }
  };

  var handleRemoveSelection = function handleRemoveSelection(e, menuItemValue) {
    e.stopPropagation();
    var selectedOptions = buildSelectedArray(selectedOptionSet, menuItemValue);
    setSelectedOptionSet(new Set(selectedOptions));
    onChange(e, selectedOptions);
  };

  var selectedOptions = (0, _react.useMemo)(function () {
    if (!isMultiSelect) {
      return children;
    }

    return children.filter(function (option) {
      return doesSetContainsValue(selectedOptionSet, getValueFromOption(option));
    });
  }, [selectedOptionSet]);
  var shouldRenderSelectedMenuList = isMultiSelect && !(0, _commonUtility.isEmpty)(selectedOptions);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, shouldRenderSelectedMenuList && /*#__PURE__*/_react["default"].createElement(_DropdownSelectedMenuList["default"], {
    onChange: handleRemoveSelection
  }, selectedOptions), _react["default"].Children.map(children, function (option) {
    if (isMultiSelect && doesSetContainsValue(selectedOptionSet, getValueFromOption(option))) {
      return null;
    }

    return _react["default"].cloneElement(option, {
      selected: !isMultiSelect ? doesSetContainsValue(selectedOptionSet, getValueFromOption(option)) : false,
      onClick: handleItemClick,
      multiselect: !isSingleSelect,
      disabled: disabled
    });
  }));
};

var _default = DropdownMenuList;
exports["default"] = _default;