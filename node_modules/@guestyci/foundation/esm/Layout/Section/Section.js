import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import memoize from '@guestyci/memoize';
import { firstLetterUppercase as capitalize } from "../../utils/commonUtility";
import createStyles from "../../createStyles";
import styles from "../styles";
import { isNumber } from "../../utils";
export var generateGutter = memoize(function (gutter, spacer) {
  if (!gutter) {
    return undefined;
  }

  if (isNumber(gutter)) {
    return spacer(gutter);
  }

  return gutter.split(' ').reduce(function (padding, item) {
    return "".concat(padding, " ").concat(spacer(item), "px");
  }, '').trim();
});
export var useStyles = createStyles(function (theme) {
  return _extends({
    root: {
      backgroundColor: function backgroundColor(_ref) {
        var bgColor = _ref.bgColor;
        return bgColor;
      }
    },
    gutter: {
      padding: function padding(_ref2) {
        var gutter = _ref2.gutter;
        return generateGutter(gutter, theme.spacer);
      }
    },
    displayFlex: {
      display: 'flex',
      width: '100%'
    }
  }, styles);
}, {
  name: 'Section'
});
var Section = React.forwardRef(function Section(_ref3, ref) {
  var _cn;

  var className = _ref3.className,
      style = _ref3.style,
      children = _ref3.children,
      gutter = _ref3.gutter,
      flex = _ref3.flex,
      justify = _ref3.justify,
      wrap = _ref3.wrap,
      align = _ref3.align,
      bgColor = _ref3.bgColor,
      jss = _ref3.jss,
      props = _objectWithoutProperties(_ref3, ["className", "style", "children", "gutter", "flex", "justify", "wrap", "align", "bgColor", "jss"]);

  var classes = useStyles({
    bgColor: bgColor,
    gutter: gutter,
    jss: jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.gutter, gutter), _defineProperty(_cn, classes.flexWrap, wrap), _defineProperty(_cn, classes.displayFlex, flex), _defineProperty(_cn, classes["justify".concat(capitalize(justify))], justify !== 'start'), _defineProperty(_cn, classes["alignItems".concat(capitalize(align))], align !== 'stretch'), _cn), className),
    style: style
  }), children);
});
Section.defaultProps = {
  bgColor: 'initial',
  className: '',
  style: {},
  children: null,
  gutter: 0,
  flex: true,
  wrap: true,
  justify: 'start',
  align: 'stretch'
};
Section.propTypes = {
  /** Background color for section */
  bgColor: PropTypes.string,

  /** Additional class for top level */
  className: PropTypes.string,

  /** Indicator whether or not to render flex wrap */
  wrap: PropTypes.bool,

  /** Additional styling for root level */
  style: PropTypes.shape(),

  /** set gutter padding to component - available value - [0,1,2,3,4,5,6,7,8,9,10] will be determined by the theme spacer (default 5)
   * Also supporting string format "x y", "top right bottom left" - e.g "2 3", "2 2 0 2"
   * */
  gutter: PropTypes.oneOfType([PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), PropTypes.string]),

  /** Child components inside a section */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /** Boolean to set section a flex */
  flex: PropTypes.bool,

  /** Set flex alignment - available values = ['start', 'center', 'end', 'stretch', 'baseline']  */
  align: PropTypes.oneOf(['start', 'center', 'end', 'stretch', 'baseline']),

  /** Set flex justify content - available values = ['start','center','end','between','around','evenly'] */
  justify: PropTypes.oneOf(['start', 'center', 'end', 'between', 'around', 'evenly']),

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
}; // Hack for withInfo plugin

Section.displayName = 'Section';
export default Section;