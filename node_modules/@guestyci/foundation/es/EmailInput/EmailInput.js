import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import InputActions from "../Input/InputActions";
import Input from "../Input";
import useHover from "../useHover";
const EmailInput = React.forwardRef(function EmailInput(_ref, ref) {
  let {
    value = '',
    disabled = false,
    name = '',
    withActions = true,
    className = '',
    placeholder = '',
    onChange = noop,
    onStar = noop,
    onRemove = noop,
    primary = false,
    style = {},
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "disabled", "name", "withActions", "className", "placeholder", "onChange", "onStar", "onRemove", "primary", "style", "jss"]);

  const [isHovering, hoverRef] = useHover();
  return /*#__PURE__*/React.createElement("div", {
    ref: hoverRef
  }, /*#__PURE__*/React.createElement(Input, _extends({}, props, {
    ref: ref,
    onChange: onChange,
    style: style,
    className: className,
    disabled: disabled,
    value: value,
    type: "email",
    placeholder: placeholder,
    name: name,
    jss: jss,
    suffix: withActions && /*#__PURE__*/React.createElement(InputActions, {
      disabled: disabled,
      show: isHovering,
      primary: primary,
      onRemove: onRemove,
      onStar: onStar,
      name: name
    })
  })));
});
EmailInput.propTypes = {
  /** Cb for input change
   *  passing : value: {String}, target: {id or name defined}
   *  */
  onChange: PropTypes.func,

  /**  Cb for clicking on the trash icon */
  onRemove: PropTypes.func,

  /** Cb for clicking on the star (set primary) icon */
  onStar: PropTypes.func,

  /** Indicator whether to show the star/trash actions */
  withActions: PropTypes.bool,

  /** Boolean setting the email as primary */
  primary: PropTypes.bool,

  /** Input level name property */
  name: PropTypes.string,

  /** Email value - setting as controlled */
  value: PropTypes.string,

  /** Placeholder for the email */
  placeholder: PropTypes.string,

  /** Boolean to set the email and component as disabled */
  disabled: PropTypes.bool,

  /** Additional class to the top component level */
  className: PropTypes.string,

  /** Additional style to the top component level */
  style: PropTypes.shape(),

  /** JSS override object */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
EmailInput.displayName = 'EmailInput';
export default EmailInput;