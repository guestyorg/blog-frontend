import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';

var BtnArrowDown = function BtnArrowDown(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M4.533 4.997c.13.006.26-.039.357-.136L8.925.826a.488.488 0 0 0-.69-.69L4.532 3.843.826.137a.488.488 0 0 0-.69.69L4.172 4.86c.097.097.23.143.362.136z"
  }));
};

BtnArrowDown.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 9.0618038 4.9977479"
};
import createStyles from "../createStyles";
import TextField from "../TextField";
import Icon from "../Icon";
import Button from "../Button";
import { Row, Section } from "../Layout";
import Collapse from "../Collapse";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      paddingTop: theme.spacer(3),
      paddingBottom: theme.spacer(3),
      display: 'flex',
      flexDirection: 'column'
    },
    header: {
      width: 'inherit',
      color: theme.palette.secondary["default"]
    },
    content: {
      paddingTop: theme.spacer(4),
      paddingBottom: theme.spacer(1)
    },
    borderBottom: {
      borderBottom: "solid 1px ".concat(theme.palette.border)
    },
    iconContainer: {
      width: '20px'
    },
    rotateChevron: {
      transition: theme.transition.create('all', {
        duration: theme.transition.duration.enteringScreen,
        easing: theme.transition.easing.easeOut
      })
    },
    openChevron: {
      transform: 'rotate(180deg)'
    },
    title: {
      width: '100%'
    }
  };
}, {
  name: 'Accordion'
});
var Accordion = React.forwardRef(function Accordion(_ref, ref) {
  var children = _ref.children,
      _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? '' : _ref$title,
      jss = _ref.jss,
      className = _ref.className,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      icon = _ref.icon,
      _ref$divider = _ref.divider,
      divider = _ref$divider === void 0 ? false : _ref$divider;
  var classes = useStyles({
    jss: jss
  });
  return /*#__PURE__*/React.createElement("div", {
    className: cn(classes.root, _defineProperty({}, classes.borderBottom, divider), className),
    ref: ref
  }, /*#__PURE__*/React.createElement(Button, {
    className: classes.header,
    enableRipple: false,
    onClick: onChange
  }, /*#__PURE__*/React.createElement(Row, {
    align: "center",
    justify: "between",
    fullWidth: true
  }, /*#__PURE__*/React.createElement(Row, {
    align: "center",
    spacing: 2,
    fullWidth: true
  }, icon && /*#__PURE__*/React.createElement(Section, {
    className: classes.iconContainer,
    justify: "center",
    align: "center"
  }, /*#__PURE__*/React.createElement(Icon, {
    className: classes.icon,
    svg: icon
  })), /*#__PURE__*/React.createElement(TextField, {
    className: classes.title,
    align: "left",
    variant: "h5",
    bold: true
  }, title)), /*#__PURE__*/React.createElement(Icon, {
    className: cn(classes.chevron, classes.rotateChevron, _defineProperty({}, classes.openChevron, open)),
    width: 10,
    height: 5,
    svg: BtnArrowDown
  }))), /*#__PURE__*/React.createElement(Collapse, {
    show: open
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.content
  }, children)));
});
Accordion.propTypes = {
  /** The accordion component children */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** The accordion title element */
  title: PropTypes.node.isRequired,

  /** CallBack for on click (for controlled mode ) */
  onChange: PropTypes.func,

  /** Indicator whether or not to open accordion (for controlled mode ) */
  open: PropTypes.bool,

  /** Icon to be shown to the left of the title */
  icon: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Indicator whether or not to have bottom border accordion */
  divider: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Additional class name for css Accordion root */
  className: PropTypes.string
};
Accordion.displayName = 'Accordion';
export default Accordion;