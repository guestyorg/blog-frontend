import _extends from "@babel/runtime/helpers/esm/extends";
import memoize from '@guestyci/memoize';
import { capitalize } from "../utils/commonUtility";
const COL_SPANS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
export const spacing = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
export const generateSpacing = memoize((spacer, spacings = spacing, merging) => spacings.reduce((acc, space) => {
  const spacingObj = {
    [`spacing${space}`]: {
      '& > * ': {
        [`margin${capitalize(merging)}`]: spacer(space)
      }
    }
  };
  return _extends({}, acc, {}, spacingObj);
}, {}));
export const generateMediaSupport = memoize((breakpoints = {
  keys: []
}) => breakpoints.keys.reduce((acc, breakpoint) => {
  const styles = {};
  const control = {};
  COL_SPANS.forEach(span => {
    const key = `col-${breakpoint}-${span}`; // Keep 7 significant numbers.

    const width = `${Math.round(span / 12 * 10e7) / 10e5}%`;
    styles[key] = {
      flexBasis: width,
      flexGrow: 0,
      maxWidth: width
    };
    control[key] = {
      display: 'flex'
    };
  });

  if (breakpoint === 'xs') {
    styles[`col-${breakpoint}-auto`] = {
      flexGrow: 1
    };
    Object.assign(acc, styles);
  } else {
    acc[breakpoints.create(breakpoint)] = styles;
    Object.assign(acc, control);
  }

  return acc;
}, {}));
export default {
  flexWrap: {
    flexWrap: 'wrap'
  },
  // justify styling
  justifyBetween: {
    justifyContent: 'space-between'
  },
  justifyAround: {
    justifyContent: 'space-around'
  },
  justifyEvenly: {
    justifyContent: 'space-evenly'
  },
  justifyCenter: {
    justifyContent: 'center'
  },
  justifyStart: {
    justifyContent: 'flex-start'
  },
  justifyEnd: {
    justifyContent: 'flex-end'
  },
  // align styling
  alignItemsBaseline: {
    alignItems: 'baseline'
  },
  alignItemsCenter: {
    alignItems: 'center'
  },
  alignItemsStart: {
    alignItems: 'flex-start'
  },
  alignItemsEnd: {
    alignItems: 'flex-end'
  },
  // support full width
  fullWidth: {
    width: '100%'
  }
};