import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState, useCallback } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { Row, Col } from "../Layout";
import RadioGroupContext from "./RadioGroupContext";
var RadioGroup = React.forwardRef(function RadioGroup(_ref, ref) {
  var children = _ref.children,
      name = _ref.name,
      className = _ref.className,
      inline = _ref.inline,
      valueProp = _ref.value,
      style = _ref.style,
      onChange = _ref.onChange,
      props = _objectWithoutProperties(_ref, ["children", "name", "className", "inline", "value", "style", "onChange"]);

  var _useState = useState(valueProp),
      _useState2 = _slicedToArray(_useState, 2),
      activeItem = _useState2[0],
      setActiveItem = _useState2[1];

  var handleOnChange = useCallback(function (e) {
    var value = e.target.value;
    setActiveItem(value);

    if (onChange) {
      onChange(e);
    }
  }, [onChange]);
  return /*#__PURE__*/React.createElement(RadioGroupContext.Provider, {
    value: {
      name: name,
      onChange: handleOnChange,
      value: activeItem
    }
  }, inline ? /*#__PURE__*/React.createElement(Row, _extends({}, props, {
    ref: ref
  }), children) : /*#__PURE__*/React.createElement(Col, _extends({}, props, {
    ref: ref
  }), children));
});
RadioGroup.defaultProps = {
  name: '',
  className: '',
  value: '',
  onChange: noop,
  style: {},
  inline: false
};
RadioGroup.propTypes = {
  /** The radioGroup children to render */
  children: PropTypes.node.isRequired,

  /** Callback for on radio change */
  onChange: PropTypes.func,

  /** Additional class to radioGroup root */
  className: PropTypes.string,

  /** Additional style to radioGroup root */
  style: PropTypes.shape(),

  /** value will be return when click on this item */
  name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Identifier will be return when click on this element */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** The value of the selected radio  */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** Render group inline or not */
  inline: PropTypes.bool
};
RadioGroup.displayName = 'RadioGroup';
export default RadioGroup;