import React, { useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import { FormProvider } from "../../enums";
import FormContext from "./FormContext";

const scrollToElement = (element, offSet) => {
  const position = element.getBoundingClientRect().top + document.documentElement.scrollTop;
  element.focus({
    preventScroll: true
  });
  window.scrollTo({
    top: position - offSet,
    behavior: 'smooth'
  });
};

export const scrollToFirstError = (formRef, offSet) => {
  const el = formRef && formRef.current && formRef.current.querySelector('.invalid-field');

  if (el) {
    scrollToElement(el, offSet);
  }
};

const Form = ({
  onSubmit,
  children,
  scrollOffset,
  className,
  style,
  provider,
  fieldInstance
}) => {
  const formRef = useRef(null);
  const handleSubmit = useCallback(e => {
    e.preventDefault();
    onSubmit();
    scrollToFirstError(formRef, scrollOffset);
  }, [formRef]);
  return /*#__PURE__*/React.createElement("form", {
    className: className,
    style: style,
    ref: formRef,
    onSubmit: handleSubmit,
    "data-qa": "form"
  }, /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: {
      provider,
      fieldInstance
    }
  }, children));
};

Form.defaultProps = {
  scrollOffset: 50,
  provider: FormProvider.Redux,
  fieldInstance: null
};
Form.propTypes = {
  /** Form field instance to pass */
  fieldInstance: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** String - the form provider to render * */
  provider: PropTypes.oneOf(['redux', 'final']),

  /** Callback function to handle form submit */
  onSubmit: PropTypes.func.isRequired,

  /** Additional scrollOffset from top off the selected element */
  scrollOffset: PropTypes.number,

  /** Form child element to render */
  children: PropTypes.node.isRequired,

  /** Form root level additional class */
  className: PropTypes.string,

  /** Form root level additional style */
  style: PropTypes.shape()
};
export default Form;