import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { CSSTransition as RTGCCTransition } from 'react-transition-group';

var CSSTransition = function CSSTransition(_ref) {
  var _children$props;

  var animation = _ref.animation,
      className = _ref.className,
      timeout = _ref.timeout,
      children = _ref.children,
      show = _ref.show,
      style = _ref.style,
      asGroup = _ref.asGroup,
      props = _objectWithoutProperties(_ref, ["animation", "className", "timeout", "children", "show", "style", "asGroup"]);

  var transitionProps = !asGroup ? _extends({}, props, {
    "in": show
  }) : props;
  return animation ? /*#__PURE__*/React.createElement(RTGCCTransition, _extends({}, transitionProps, {
    classNames: animation,
    timeout: timeout,
    style: style,
    className: cn('css-transition', className, children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.className)
  }), children) : children;
};

CSSTransition.defaultProps = {
  className: '',
  timeout: 255,
  animation: '',
  show: undefined
};
CSSTransition.propTypes = {
  /* boolean flag whether or not to show the children */
  show: PropTypes.bool,

  /* Animation for css transition */
  animation: PropTypes.oneOfType([PropTypes.shape({
    appear: PropTypes.string,
    appearActive: PropTypes.string,
    enter: PropTypes.string.isRequired,
    enterActive: PropTypes.string.isRequired,
    enterDone: PropTypes.string,
    exitActive: PropTypes.string.isRequired,
    exit: PropTypes.string.isRequired,
    exitDone: PropTypes.string
  }), PropTypes.string]),

  /* Additional class name for css transition root */
  className: PropTypes.string,

  /* Child component for css transition */
  children: PropTypes.node.isRequired,

  /* timeout between animations - values: number or {enter, exit} */
  timeout: PropTypes.oneOfType([PropTypes.shape({
    enter: PropTypes.number.isRequired,
    exit: PropTypes.number.isRequired
  }), PropTypes.number])
};
export default CSSTransition;