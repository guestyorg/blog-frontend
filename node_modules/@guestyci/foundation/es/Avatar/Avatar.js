import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
export const useStyles = createStyles(theme => ({
  root: {
    position: 'relative',
    backgroundColor: theme.palette.background.system,
    borderRadius: '50%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  },
  icon: {
    padding: theme.spacer(2),
    textTransform: 'uppercase'
  },
  small: {
    width: 24,
    height: 24,
    '& $icon': {
      padding: theme.spacer(1)
    }
  },
  large: {
    width: 40,
    height: 40
  },
  disabled: {
    opacity: 0.3
  },
  img: {
    objectFit: 'cover',
    width: '100%',
    height: '100%',
    borderRadius: 'inherit'
  }
}), {
  name: 'Avatar'
});
const Avatar = React.forwardRef(function Avatar(_ref, ref) {
  let {
    alt = '',
    src = '',
    children = null,
    className = '',
    style = {},
    jss = {},
    disabled = false,
    size = 'large',
    badge = null
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["alt", "src", "children", "className", "style", "jss", "disabled", "size", "badge"]);

  const classes = useStyles({
    jss
  });
  const showChildren = !src && children;
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn(classes.root, {
      [classes.disabled]: disabled,
      [classes.small]: size === 'small',
      [classes.large]: size === 'large'
    }, className),
    style: style
  }), src && /*#__PURE__*/React.createElement("img", {
    className: classes.img,
    alt: alt,
    src: src
  }), showChildren && /*#__PURE__*/React.createElement("div", {
    className: classes.icon
  }, children), badge && badge);
});
Avatar.propTypes = {
  /** Badge component */
  badge: PropTypes.node,

  /** Avatar size - values: [small , large] */
  size: PropTypes.oneOf(['small', 'large']),

  /** Image alt */
  alt: PropTypes.string,

  /** Image src in case we want to render an image as avatar */
  src: PropTypes.string,

  /** In case we render icon or children components pass them as children */
  children: PropTypes.node,

  /** Additional root level classes */
  className: PropTypes.string,

  /** Additional root level styles */
  style: PropTypes.shape(),

  /** Disabled mode for avatars */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Avatar.displayName = 'Avatar';
export default Avatar;