import React, { useEffect, useRef } from 'react';
import cn from 'classnames';
import { createUseStyles } from 'react-jss';
import PropTypes from 'prop-types';
import Paper from "../Paper";

var calculateDrawerWrapperHeight = function calculateDrawerWrapperHeight(isOpen, overlay) {
  if (overlay) {
    return '100%';
  }

  return isOpen ? '100%' : 0;
};

var useStyles = createUseStyles({
  wrapper: {
    transition: 'width 225ms cubic-bezier(0, 0, 0.2, 1) 0ms, height 220ms cubic-bezier(0, 0, 0.2, 1) 0ms',
    width: function width(_ref) {
      var isOpen = _ref.isOpen,
          _width = _ref.width;
      return isOpen ? _width : 0;
    },
    height: function height(_ref2) {
      var isOpen = _ref2.isOpen,
          overlay = _ref2.overlay;
      return calculateDrawerWrapperHeight(isOpen, overlay);
    },
    overflow: 'hidden'
  },
  drawer: {
    transition: 'transform 225ms cubic-bezier(0, 0, 0.2, 1) 0ms',
    transform: "translateX(".concat(function (_ref3) {
      var isOpen = _ref3.isOpen;
      return isOpen ? 0 : '-100%';
    }, ")"),
    width: function width(_ref4) {
      var _width2 = _ref4.width;
      return _width2;
    }
  }
});

var Drawer = function Drawer(_ref5) {
  var overlay = _ref5.overlay,
      className = _ref5.className,
      style = _ref5.style,
      isOpen = _ref5.isOpen,
      children = _ref5.children,
      width = _ref5.width,
      elevation = _ref5.elevation,
      right = _ref5.right,
      bgColor = _ref5.bgColor,
      containerClassName = _ref5.containerClassName,
      fixed = _ref5.fixed,
      onDrawerTransitionEnd = _ref5.onDrawerTransitionEnd;
  var drawerRef = useRef();
  var classes = useStyles({
    isOpen: isOpen,
    width: width,
    overlay: overlay
  });
  useEffect(function () {
    if (drawerRef.current && overlay) {
      var el = drawerRef.current;
      var parent = el.parentElement;
      parent.classList.toggle('relative');
    }
  }, [overlay]);
  return /*#__PURE__*/React.createElement(Paper, {
    elevation: elevation,
    ref: drawerRef,
    bgColor: bgColor,
    className: cn(classes.wrapper, 'zindex-5 flex-shrink-0', {
      'right-0': overlay && right
    }, {
      absolute: overlay
    }, {
      fixed: fixed
    }, containerClassName),
    style: style,
    onTransitionEnd: onDrawerTransitionEnd,
    "data-qa": "drawer"
  }, /*#__PURE__*/React.createElement("div", {
    className: cn(classes.drawer, 'd-flex-fill h-fill flex-column overyflow-y-auto', className)
  }, children));
};

Drawer.defaultProps = {
  className: '',
  style: {},
  width: 250,
  overlay: false,
  right: false,
  elevation: 1,
  bgColor: '',
  containerClassName: '',
  fixed: false
};
Drawer.propTypes = {
  /** Indicator whether or not to show drawer */
  isOpen: PropTypes.bool.isRequired,

  /** Child elements inside drawer */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** Additional classes to drawer level */
  className: PropTypes.string,

  /** Additional style to root level */
  style: PropTypes.shape(),

  /** drawer width */
  width: PropTypes.number,

  /** indicator whether or not drawer should overlay over content (position absolute) or static
   * *Note - overlay auto toggles parent component with position relative
   * */
  overlay: PropTypes.bool,

  /** Only applicable for overlay = true -
   *  Indicator whether or not we want to open drawer on right - default left
   *  */
  right: PropTypes.bool,

  /** The drawer paper elevation level * */
  elevation: PropTypes.number,

  /** Background color for drawer */
  bgColor: PropTypes.string,

  /** Add class to root level */
  containerClassName: PropTypes.string,

  /** Set drawer as fixed */
  fixed: PropTypes.bool,

  /** Callback hook for the Drawer slide transition end */
  onDrawerTransitionEnd: PropTypes.func
};
export default Drawer;