"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _reduxMockStore = _interopRequireDefault(require("redux-mock-store"));

var _reactRedux = require("react-redux");

var _enzyme = require("enzyme");

/**
 * create the setup for container components(connected to store)
 * @param Comp  {JSX.Element} The component to setup
 * @param initalStore {Object} The inital state of the store
 * @returns {WrappedComponent: function(props: {object}): JSX.Element, componentSetup: function(additionalStore: {Object}, props: {Object}, attachTo: {HTMLElement}): WrappedComponent}
 */
var _default = function _default(Comp) {
  var initalStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    WrappedComponent: function WrappedComponent(props) {
      return _react["default"].createElement(_reactRedux.Provider, {
        store: (0, _reduxMockStore["default"])()(initalStore)
      }, _react["default"].createElement(Comp, props));
    },
    componentSetup: function componentSetup() {
      var additionalStore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var props = arguments.length > 1 ? arguments[1] : undefined;
      var attachTo = arguments.length > 2 ? arguments[2] : undefined;
      var store = (0, _reduxMockStore["default"])()((0, _extends2["default"])({}, initalStore, {}, additionalStore));

      var wrappedComponent = _react["default"].createElement(_reactRedux.Provider, {
        store: store
      }, _react["default"].createElement(Comp, props));

      return (0, _enzyme.mount)(wrappedComponent, attachTo ? {
        attachTo: attachTo
      } : undefined);
    }
  };
};

exports["default"] = _default;