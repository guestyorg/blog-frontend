import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { useMemo, lazy, useCallback } from 'react';
import memoize from 'lodash/memoize';

var useColumnAdapter = function useColumnAdapter(_ref) {
  var configColumns = _ref.configColumns,
      viewColumns = _ref.viewColumns;
  var overridingAdapters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var getCellComponent = useCallback(memoize(function (type) {
    return lazy(function () {
      return new Promise(function (resolve) {
        import("../".concat(type, "Cell")).then(resolve)["catch"](function () {
          return resolve(import("../Cell"));
        });
      });
    });
  }), []);

  var defaultAdapter = function defaultAdapter(_ref2) {
    var _ref2$configColumn = _ref2.configColumn,
        configColumn = _ref2$configColumn === void 0 ? {} : _ref2$configColumn,
        _ref2$viewColumn = _ref2.viewColumn,
        viewColumn = _ref2$viewColumn === void 0 ? {} : _ref2$viewColumn;

    var dataKey = configColumn.id,
        configHeaderProps = configColumn.headerProps,
        configCellProps = configColumn.cellProps,
        cell = configColumn.cell,
        title = configColumn.title,
        configColumnProps = _objectWithoutProperties(configColumn, ["id", "headerProps", "cellProps", "cell", "title"]);

    var _ = viewColumn.id,
        viewHeaderProps = viewColumn.headerProps,
        viewCellProps = viewColumn.cellProps,
        viewColumnProps = _objectWithoutProperties(viewColumn, ["id", "headerProps", "cellProps"]);

    return {
      columnProps: _extends({}, configColumnProps, {}, viewColumnProps, {
        dataKey: dataKey
      }),
      headerProps: _extends({}, configHeaderProps, {}, viewHeaderProps, {
        children: title
      }),
      cellProps: _extends({}, configCellProps, {}, viewCellProps),
      CellComponent: getCellComponent(cell)
    };
  };

  var tableStructure = useMemo(function () {
    if (!configColumns || !viewColumns) return [];
    var adapters = [defaultAdapter].concat(_toConsumableArray(overridingAdapters));
    return viewColumns.map(function (viewColumn) {
      return adapters.reduce(function (acc, currentAdapter) {
        var currentColumnMetaData = currentAdapter({
          configColumn: configColumns[viewColumn.id],
          viewColumn: viewColumn
        });
        return _extends({}, acc, {}, currentColumnMetaData);
      }, {});
    });
  }, [configColumns, viewColumns].concat(_toConsumableArray(overridingAdapters)));
  return tableStructure;
};

export default useColumnAdapter;