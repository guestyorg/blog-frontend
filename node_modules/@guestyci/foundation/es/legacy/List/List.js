import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { createUseStyles } from 'react-jss';
import CSSTransition from "../CSSTransiton";
const useStyles = createUseStyles({
  list: {
    width: '100%',
    overflowX: ({
      row,
      scrollable
    }) => row && scrollable ? 'auto' : 'hidden',
    overflowY: ({
      noScroll,
      scrollable,
      row
    }) => !row && scrollable || !noScroll ? 'auto' : 'hidden',
    padding: 0,
    listStyleType: 'none',
    height: '100%'
  }
});

const List = ({
  children,
  className,
  style,
  maxHeight,
  transition,
  row,
  innerClassName,
  noScroll,
  scrollable,
  id
}) => {
  const classes = useStyles({
    row,
    maxHeight,
    noScroll,
    scrollable
  });
  return /*#__PURE__*/React.createElement("ul", {
    className: cn(classes.list, className, 'mb-0'),
    style: style,
    id: id,
    "data-qa": "list"
  }, /*#__PURE__*/React.createElement("div", {
    className: cn('d-flex-fill', !row ? 'flex-column' : 'flex-row-wrap', innerClassName)
  }, /*#__PURE__*/React.createElement(CSSTransition, {
    animation: transition,
    show: true,
    className: "inherit-all"
  }, children)));
};

List.defaultProps = {
  className: '',
  style: {},
  maxHeight: null,
  transition: null,
  row: false,
  innerClassName: '',
  scrollable: true,
  id: ''
};
List.propTypes = {
  /** List of elements under the list item */
  children: PropTypes.node.isRequired,

  /** Additional class for list component */
  className: PropTypes.string,

  /** Additional style for the list component */
  style: PropTypes.shape(),

  /** Maximum height for the component */
  maxHeight: PropTypes.number,

  /** Transition for add/remove child elements */
  transition: PropTypes.string,

  /** Indicator whether or not we want list as row or column */
  row: PropTypes.bool,

  /** List inner class */
  innerClassName: PropTypes.string,

  /** List id */
  id: PropTypes.string,

  /** Indicator whether or not to allow scroll */
  scrollable: PropTypes.bool
};
/** Work around to fix storybook HOC propTypes bug  - DO NOT IMPORT THIS */

export const ListComponent = List;
export default List;