import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import Popover from "../Popover";
import { OriginDirectionType } from "../enums";
import useHover from "../useHover";
var Tooltip = React.forwardRef(function Tooltip(_ref, ref) {
  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$body = _ref.body,
      body = _ref$body === void 0 ? null : _ref$body,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? OriginDirectionType.Top : _ref$placement,
      delay = _ref.delay,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      _ref$interactive = _ref.interactive,
      interactive = _ref$interactive === void 0 ? false : _ref$interactive,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      props = _objectWithoutProperties(_ref, ["children", "className", "body", "style", "placement", "delay", "fullWidth", "interactive", "jss"]);

  var _useHover = useHover({
    delay: delay
  }),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHoveringBody = _useHover2[0],
      hoverRef = _useHover2[1];

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHoveringTooltip = _useState2[0],
      setHoveringTooltip = _useState2[1];

  var handleTooltipMouseEnter = function handleTooltipMouseEnter() {
    return setHoveringTooltip(true);
  };

  var handleTooltipMouseLeave = function handleTooltipMouseLeave() {
    return setHoveringTooltip(false);
  };

  var isOpen = !!isHoveringBody || interactive && isHoveringTooltip;
  return /*#__PURE__*/React.createElement(Popover, _extends({}, props, {
    ref: ref,
    anchor: hoverRef,
    backdrop: false,
    delay: delay,
    className: className,
    body: body,
    style: style,
    placement: placement,
    fullWidth: fullWidth,
    jss: jss,
    open: isOpen,
    onMouseEnter: handleTooltipMouseEnter,
    onMouseLeave: handleTooltipMouseLeave
  }), children);
});
Tooltip.propTypes = {
  /** Node - the component wrapped by the tooltip */
  children: PropTypes.node.isRequired,

  /** String || React Element - The tooltip body */
  body: PropTypes.node,

  /** onClose  - Function to support the popover toggle */
  onClose: PropTypes.func,

  /** Additional component class */
  className: PropTypes.string,

  /** Additional component style */
  style: PropTypes.shape(),

  /** Tooltip placement supporting:
   *  (top, bottom, left, right, top start, top end, bottom start, bottom end, left start, left end, right start, right end )
   *  */
  placement: PropTypes.string,

  /** Set the popover content to fit to its children full width */
  fullWidth: PropTypes.bool,

  /** Tooltip entry and leave delay */
  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number
  })]),

  /** If true it won't close when the user hovers over the tooltip before the delay.exit is expired. */
  interactive: PropTypes.bool,

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Tooltip.displayName = 'Tooltip';
export default Tooltip;