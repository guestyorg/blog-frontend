import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import withStyle from 'react-jss';
import Icon from "../Icon";
import TextField from "../TextField/TextField";
var styles = {
  badge: {
    minWidth: function minWidth(_ref) {
      var sm = _ref.sm;
      return sm ? 13 : 21;
    },
    height: function height(_ref2) {
      var sm = _ref2.sm;
      return sm ? 13 : 21;
    },
    borderRadius: 10
  },
  value: {
    padding: '3px 7px'
  }
};

var getIconSize = function getIconSize(width, height, sm) {
  return {
    height: height || (sm ? 13 : 21),
    width: width || (sm ? 13 : 21)
  };
};

var Badge = function Badge(_ref3) {
  var _cn;

  var classes = _ref3.classes,
      value = _ref3.value,
      bgColor = _ref3.bgColor,
      color = _ref3.color,
      className = _ref3.className,
      style = _ref3.style,
      borderColor = _ref3.borderColor,
      sm = _ref3.sm,
      icon = _ref3.icon,
      svg = _ref3.svg,
      iconHeight = _ref3.iconHeight,
      iconWidth = _ref3.iconWidth;

  var _getIconSize = getIconSize(iconWidth, iconHeight, sm),
      height = _getIconSize.height,
      width = _getIconSize.width;

  return /*#__PURE__*/React.createElement("div", {
    className: cn('badge-wrapper flex-center', classes.badge, (_cn = {}, _defineProperty(_cn, "bg-".concat(bgColor), bgColor), _defineProperty(_cn, "text-".concat(color, " fill-").concat(color), color), _defineProperty(_cn, "border-".concat(borderColor), borderColor), _defineProperty(_cn, 'b-1', borderColor), _cn), className),
    style: style,
    "data-qa": "badge"
  }, icon || svg ? /*#__PURE__*/React.createElement(Icon, {
    svg: svg,
    icon: icon,
    width: width,
    height: height,
    noFill: true
  }) : /*#__PURE__*/React.createElement(TextField, {
    className: classes.value,
    color: color,
    size: sm ? 'xs' : 'md'
  }, value));
};

Badge.defaultProps = {
  bgColor: 'blue',
  className: '',
  borderColor: '',
  style: {},
  color: 'white',
  sm: false,
  iconHeight: null,
  iconWidth: null,
  icon: null,
  value: null
};
Badge.propTypes = {
  /** Background color for badge root */
  bgColor: PropTypes.string,

  /** Border color for badge root */
  borderColor: PropTypes.string,

  /** Color for badge child */
  color: PropTypes.string,

  /** Additional class for badge */
  className: PropTypes.string,

  /** Additional style for badge */
  style: PropTypes.shape(),

  /** Set badge as small */
  sm: PropTypes.bool,

  /** Icon to locate in badge */
  icon: PropTypes.string,

  /** The svg icon to render */
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /* Width for icon */
  iconWidth: PropTypes.number,

  /* Height for icon */
  iconHeight: PropTypes.number,

  /* Value to put in badge if counter type */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
/** Work around to fix storybook HOC propTypes bug  - DO NOT IMPORT THIS */

export var BadgeComponent = Badge;
export default withStyle(styles)(Badge);