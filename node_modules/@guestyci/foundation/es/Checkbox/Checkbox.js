import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import { uuid } from "../utils/commonUtility";

var BtnCheckboxIndeterminate = function BtnCheckboxIndeterminate(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("g", {
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("rect", {
    width: "15",
    height: "15",
    rx: "2"
  }), /*#__PURE__*/React.createElement("rect", {
    width: "9",
    height: "1.5",
    x: "3",
    y: "6.75",
    fill: "#FFF",
    rx: ".75"
  })));
};

BtnCheckboxIndeterminate.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "15",
  height: "15",
  viewBox: "0 0 15 15"
};

var BtnCheckboxOff = function BtnCheckboxOff(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M12.5 15h-10A2.503 2.503 0 0 1 0 12.5v-10C0 1.122 1.122 0 2.5 0h10C13.879 0 15 1.122 15 2.5v10c0 1.379-1.121 2.5-2.5 2.5zM2.5 1C1.673 1 1 1.673 1 2.5v10c0 .827.673 1.5 1.5 1.5h10c.827 0 1.5-.673 1.5-1.5v-10c0-.827-.673-1.5-1.5-1.5h-10z"
  }));
};

BtnCheckboxOff.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 15 15"
};
import Row from "../Layout/Row";
import IconButton from "../IconButton";
import TextField from "../TextField";
import CheckedIcon from "./CheckedIcon";
import checkboxStyles from "./styles";
import { gray100, gray300 } from "../theme/colors";
export const useStyles = createStyles(theme => _extends({
  root: {
    position: 'relative',
    cursor: 'pointer'
  }
}, checkboxStyles(theme), {
  iconDisabled: {
    fill: gray300,
    backgroundColor: gray100
  },
  indeterminate: {
    fill: theme.palette.primary.default
  },
  disabled: {
    cursor: 'not-allowed',
    color: theme.palette.text.placeholder
  },
  input: {
    cursor: 'inherit',
    position: 'absolute',
    opacity: 0,
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  }
}), {
  name: 'Checkbox'
});
const Checkbox = React.forwardRef(function Checkbox(_ref, ref) {
  let {
    id,
    checked = false,
    indeterminate = false,
    onChange = noop,
    disabled = false,
    value = '',
    name = '',
    style = {},
    className = '',
    checkedIcon = null,
    children = null,
    icon = null,
    jss = {},
    inputProps = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "checked", "indeterminate", "onChange", "disabled", "value", "name", "style", "className", "checkedIcon", "children", "icon", "jss", "inputProps"]);

  const classes = useStyles({
    jss
  });
  const inputId = useMemo(() => id || uuid(), [id]);
  const SvgIcon = useMemo(() => {
    if (indeterminate) return /*#__PURE__*/React.createElement(BtnCheckboxIndeterminate, {
      height: 16,
      width: 16
    });

    if (icon) {
      return checked ? checkedIcon : icon;
    }

    return checked ? /*#__PURE__*/React.createElement(CheckedIcon, {
      height: 16,
      width: 16
    }) : /*#__PURE__*/React.createElement(BtnCheckboxOff, {
      height: 16,
      width: 16
    });
  }, [checked, indeterminate, icon, checkedIcon]);
  return /*#__PURE__*/React.createElement("label", {
    htmlFor: inputId,
    ref: ref
  }, /*#__PURE__*/React.createElement(Row, {
    wrap: false,
    align: "center",
    className: cn(classes.root, {
      [classes.disabled]: disabled
    }, className),
    style: style
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    color: "primary"
  }, props, {
    size: "sm",
    component: "span",
    disabled: disabled
  }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", _extends({}, inputProps, {
    id: inputId,
    type: "checkbox",
    checked: checked,
    disabled: disabled,
    onChange: onChange,
    className: classes.input,
    name: name,
    value: value
  })), React.cloneElement(SvgIcon, {
    className: cn(classes.icon, {
      [classes.uncheckedDefaultBg]: !checked && !icon,
      [classes.checked]: checked,
      [classes.indeterminate]: indeterminate,
      [classes.iconDisabled]: disabled
    })
  }))), children && /*#__PURE__*/React.createElement(TextField, null, children)));
});
Checkbox.propTypes = {
  /** Child element */
  children: PropTypes.node,

  /** Boolean flag used to set the checkbox as checked or not */
  checked: PropTypes.bool,

  /** Boolean flag used to set the checkbox as indeterminate or not */
  indeterminate: PropTypes.bool,

  /** Function to toggle the checkbox */
  onChange: PropTypes.func,

  /** Boolean indicator to toggle disabled for the checkbox */
  disabled: PropTypes.bool,

  /** React icon element for the custom icon */
  icon: PropTypes.node,

  /** React icon element for the custom checked icon */
  checkedIcon: PropTypes.node,

  /** The value to pass on checkbox click */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** Checkbox name */
  name: PropTypes.string,

  /** Additional class to add to the checkbox */
  className: PropTypes.string,

  /** Additional style to add to the checkbox */
  style: PropTypes.shape(),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Input level props */
  inputProps: PropTypes.shape()
};
Checkbox.displayName = 'Checkbox';
export default Checkbox;