import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import { List } from '@guestyci/foundation/List';
import createStyles from '@guestyci/foundation/createStyles';
import { matchPath } from 'react-router-dom';
import NavMenuItem from "./NavMenuItem";
import NavMenuAccordion from "./NavMenuAccordion";
import history from "../utils";
const useStyles = createStyles(() => ({
  root: {
    width: '250px',
    height: '100%'
  }
}));

const isMatchingPath = path => {
  const pathToMatch = path.startsWith('/') ? path : history.getPathName() + path;
  return !!matchPath(history.location().pathname, {
    path: pathToMatch
  });
};

const submenuItemJssOverrides = theme => ({
  content: {
    paddingLeft: theme.spacer(10)
  }
});

const NavMenu = ({
  routeItems = [],
  jss = {},
  onSelect = null,
  onExpandItem = null
}) => {
  const classes = useStyles({
    jss
  });
  const pathToParentIdMap = useMemo(() => {
    const result = new Map();
    routeItems.forEach(routeItem => {
      if (routeItem.subrouteItems instanceof Array && routeItem.subrouteItems.length) {
        return routeItem.subrouteItems.forEach(subrouteItem => result.set(subrouteItem.to, routeItem.id));
      }

      return result.set(routeItem.to);
    });
    return result;
  }, [routeItems]);
  const [selectedRoute, setSelectedRoute] = useState(null);
  const [openedSubmenus, setOpenedSubmenus] = useState(new Set());
  useEffect(() => {
    const flattenRoutes = [...pathToParentIdMap.keys()];
    const currentRoute = flattenRoutes.filter(isMatchingPath)[0] || flattenRoutes[0];
    setSelectedRoute(currentRoute);
    setOpenedSubmenus(new Set([pathToParentIdMap.get(currentRoute)]));
  }, [routeItems]);
  const onMenuItemClick = useCallback(item => {
    const {
      to
    } = item;
    setSelectedRoute(to);
    if (onSelect) onSelect(item);
  }, [onSelect]);

  const onSubmenuOpen = item => {
    const {
      id: submenuId
    } = item;

    if (openedSubmenus.has(submenuId)) {
      openedSubmenus.delete(submenuId);
    } else {
      openedSubmenus.add(submenuId);

      if (onExpandItem) {
        onExpandItem(item);
      }
    }

    return setOpenedSubmenus(new Set(openedSubmenus));
  };

  const shouldRenderAccordion = routeItem => {
    if (routeItem.subrouteItems instanceof Array && routeItem.subrouteItems.length) return true;
    return false;
  };

  return /*#__PURE__*/React.createElement(List, {
    className: classes.root
  }, routeItems.map(item => {
    if (shouldRenderAccordion(item)) {
      const open = openedSubmenus.has(item.id);
      const isSubmenuItemSelected = pathToParentIdMap.get(selectedRoute) === item.id;
      return /*#__PURE__*/React.createElement(NavMenuAccordion, {
        title: item.label,
        icon: item.icon,
        className: open || isSubmenuItemSelected ? 'accordion-opened' : 'accordion-closed',
        onChange: () => onSubmenuOpen(item),
        open: open,
        key: item.id
      }, item.subrouteItems.map(subrouteItem => /*#__PURE__*/React.createElement(NavMenuItem, _extends({}, subrouteItem, {
        jss: submenuItemJssOverrides,
        onClick: () => onMenuItemClick(subrouteItem),
        selected: subrouteItem.to === selectedRoute,
        key: subrouteItem.id
      }), subrouteItem.label)));
    }

    return /*#__PURE__*/React.createElement(NavMenuItem, _extends({}, item, {
      onClick: () => onMenuItemClick(item),
      selected: item.to === selectedRoute,
      key: item.id
    }), item.label);
  }));
};

const routeShape = {
  id: PropTypes.string.isRequired,
  to: PropTypes.string,
  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
  icon: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
NavMenu.propTypes = {
  /** Array of the route objects to serve MenuItem */
  routeItems: PropTypes.arrayOf(PropTypes.shape(_extends({}, routeShape, {
    subroutes: PropTypes.arrayOf(PropTypes.shape(routeShape))
  }))),

  /** Jss override to create custom styles */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Callback function that is called on MenuItem select, accepts 'to' */
  onSelect: PropTypes.func,

  /** Callback function that is called on MenuItem being expanded */
  onExpandItem: PropTypes.func
};
export default NavMenu;