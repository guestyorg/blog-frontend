import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useCallback, useRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import Spinner from "../Spinner";
import { capitalize } from "../utils/commonUtility";
import TouchRipple from "./TouchRipple";
import { gray400, white } from "../theme/colors";
export const useStyles = createStyles(theme => ({
  root: {
    border: 0,
    padding: 0,
    cursor: 'pointer',
    position: 'relative',
    outline: 'none',
    borderRadius: 3,
    transition: theme.transition.create(['background-color', 'box-shadow', 'border']),
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  },
  content: {
    display: 'flex',
    height: '100%',
    width: '100%',
    zIndex: 1,
    justifyContent: 'inherit',
    alignItems: 'inherit'
  },
  cursorDefault: {
    cursor: 'default !important',
    pointerEvents: 'none'
  },
  disabled: {
    cursor: 'not-allowed !important'
  },
  pointerEventsNone: {
    pointerEvents: 'none'
  },
  spinner: {
    position: 'absolute'
  },
  hidden: {
    visibility: 'hidden'
  },
  btnMd: {
    minHeight: 36,
    fontWeight: 'bold',
    padding: '8px 15px'
  },
  btnLg: {
    minHeight: 46,
    padding: '8px 15px',
    fontSize: theme.typography.fontSize.h3
  },
  btnXl: {
    minHeight: 54,
    padding: '7px 15px',
    fontSize: theme.typography.fontSize.h2,
    textTransform: 'uppercase'
  },
  webkitAppearanceNone: {
    appearance: 'none'
  }
}), {
  name: 'Button'
});
const Button = React.forwardRef(function Button(_ref, ref) {
  let {
    children,
    size,
    component,
    isLoading,
    onClick,
    disabled,
    className,
    enableRipple,
    spinnerColor,
    rippleColor,
    onMouseDown,
    onMouseUp,
    type,
    jss
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "size", "component", "isLoading", "onClick", "disabled", "className", "enableRipple", "spinnerColor", "rippleColor", "onMouseDown", "onMouseUp", "type", "jss"]);

  const buttonProps = props;
  const classes = useStyles({
    jss
  });
  const rippleRef = useRef(null);
  const shouldEnableRipple = enableRipple && !isLoading && !disabled;
  const Component = component;
  const isButton = component === 'button';

  if (!isButton) {
    buttonProps.role = 'button';
  }

  const handleMouseDown = useCallback(event => {
    if (onMouseDown) {
      onMouseDown(event);
    }

    const touchRipple = rippleRef.current;

    if (enableRipple && touchRipple) {
      touchRipple.ripple(event);
    }
  }, [enableRipple, onMouseDown, rippleRef]);
  const handleMouseUp = useCallback(event => {
    if (onMouseUp) {
      onMouseUp(event);
    }

    const touchRipple = rippleRef.current;

    if (enableRipple && touchRipple) {
      touchRipple.stop(event);
    }
  }, [enableRipple, onMouseUp, rippleRef]);
  return /*#__PURE__*/React.createElement(Component, _extends({}, buttonProps, {
    disabled: disabled,
    type: type,
    onMouseDown: handleMouseDown,
    onMouseUp: handleMouseUp,
    onClick: onClick,
    className: cn(classes.root, {
      [classes.cursorDefault]: isLoading,
      [classes.disabled]: disabled,
      [classes.pointerEventsNone]: disabled && !isButton,
      [classes.webkitAppearanceNone]: !isButton,
      [classes[`btn${capitalize(size)}`]]: size
    }, className),
    ref: ref
  }), isLoading && /*#__PURE__*/React.createElement(Spinner, {
    className: classes.spinner,
    size: 20,
    strokeWidth: 6,
    color: spinnerColor
  }), /*#__PURE__*/React.createElement("span", {
    className: cn(classes.content, {
      [classes.hidden]: isLoading
    })
  }, children), shouldEnableRipple && /*#__PURE__*/React.createElement(TouchRipple, {
    ref: rippleRef,
    color: rippleColor
  }));
});
Button.defaultProps = {
  onClick: noop,
  isLoading: false,
  disabled: false,
  spinnerColor: white,
  enableRipple: true,
  rippleColor: gray400,
  component: 'button',
  type: 'button'
};
Button.propTypes = {
  /** Child element to locate inside of button */
  children: PropTypes.node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: PropTypes.func,

  /** Indicator whether or not to show loader in button */
  isLoading: PropTypes.bool,

  /** Indicator whether or not to button is disabled */
  disabled: PropTypes.bool,

  /** Color of button spinner - Using old color scheme  */
  spinnerColor: PropTypes.string,

  /** Allow click ripple effect */
  enableRipple: PropTypes.bool,

  /** Set ripple color = defaults gray400 */
  rippleColor: PropTypes.string,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** render component for Button component - used to avoid rendering button inside another button */
  component: PropTypes.string,

  /** Set html button type */
  type: PropTypes.string
};
Button.displayName = 'Button';
export default Button;