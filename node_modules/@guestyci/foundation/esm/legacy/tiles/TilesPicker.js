import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import IconDropdown from "../IconDropdown/IconDropdown";
import TileItemsList from "./TileItemsList";
import { uuid } from "../../utils/commonUtility";

var TilesPicker = /*#__PURE__*/function (_Component) {
  _inherits(TilesPicker, _Component);

  var _super = _createSuper(TilesPicker);

  function TilesPicker(props) {
    var _this;

    _classCallCheck(this, TilesPicker);

    _this = _super.call(this, props);
    _this.state = {
      selectedItemsMap: new Map()
    };
    _this.onAddItem = _this.onAddItem.bind(_assertThisInitialized(_this));
    _this.deleteItem = _this.deleteItem.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(TilesPicker, [{
    key: "onAddItem",
    value: function onAddItem(value) {
      var onChange = this.props.onChange;
      var selectedItemsMap = this.state.selectedItemsMap;
      var optionsMap = this.props.optionsMap;
      var selectedItem = optionsMap[value];
      selectedItemsMap.set(uuid(), selectedItem);
      this.setState({
        selectedItemsMap: selectedItemsMap
      });
      onChange(selectedItemsMap);
    }
  }, {
    key: "getAllItemsArray",
    value: function getAllItemsArray() {
      var maxShownItems = this.props.maxShownItems;
      var selectedItemsMap = this.state.selectedItemsMap;
      var emptyArrayLength = maxShownItems - selectedItemsMap.size;
      var emptyItemsArray = emptyArrayLength > 0 ? _toConsumableArray(Array(emptyArrayLength)) : [];
      var allItemsArray = Array.from(selectedItemsMap).concat(emptyItemsArray);
      return allItemsArray;
    }
  }, {
    key: "deleteItem",
    value: function deleteItem(key) {
      var onChange = this.props.onChange;
      var selectedItemsMap = this.state.selectedItemsMap;
      selectedItemsMap["delete"](key);
      this.setState({
        selectedItemsMap: selectedItemsMap
      });
      onChange(selectedItemsMap);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          options = _this$props.options,
          maxShownItems = _this$props.maxShownItems;
      var allItemsArray = this.getAllItemsArray();
      return /*#__PURE__*/React.createElement("div", {
        className: "flex-space-between-center flex-row w-fit-content b-1 border-gray-light border-radius-2",
        "data-qa": "tiles-picker"
      }, /*#__PURE__*/React.createElement(TileItemsList, {
        tileItems: allItemsArray,
        onDeleteItem: this.deleteItem,
        maxShownItems: maxShownItems
      }), /*#__PURE__*/React.createElement("div", {
        className: "width-100"
      }, /*#__PURE__*/React.createElement(IconDropdown, {
        width: 21,
        height: 21,
        icon: "BtnAdd",
        onSelect: this.onAddItem,
        options: options,
        className: "flex-center bg-white height-90 width-100 bl-1 border-gray-light",
        menuClassName: "mt-0 left-0"
      })));
    }
  }]);

  return TilesPicker;
}(Component);

TilesPicker.defaultProps = {
  maxShownItems: 4
};
TilesPicker.propTypes = {
  // sets the number of tiles what would be rendered
  maxShownItems: PropTypes.number,
  // defines the options to be displayed on the drop menu
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    value: PropTypes.string
  })).isRequired,
  // maps the dropdown values to its tile settings
  optionsMap: PropTypes.objectOf(PropTypes.shape({
    key: PropTypes.shape({
      icon: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number,
      text: PropTypes.string
    })
  })).isRequired,
  // callback to be called when a tile is changed
  onChange: PropTypes.func.isRequired
};
export default TilesPicker;