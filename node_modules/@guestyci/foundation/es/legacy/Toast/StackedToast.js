import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useCallback, useEffect, useRef } from 'react';
import { createUseStyles } from 'react-jss';
import PropTypes from 'prop-types';
import Toast, { VARIANTS_NAMES } from "./Toast";
const slideAndPop = {
  entering: {
    transform: 'translate3d(120%, 0, 0)'
  },
  entered: {
    transform: 'translate3d(0,0,0)'
  },
  exiting: {
    transform: 'scale(0.66)',
    opacity: 0
  },
  exited: {
    transform: 'scale(0.66)',
    opacity: 0
  }
};
const collapse = {
  entering: 'auto',
  // heuristically maximum height a toast could be + margin
  entered: 120,
  exiting: 0,
  exited: 'auto'
};
const useStyles = createUseStyles({
  toast: ({
    transition,
    duration
  }) => _extends({
    transition: `transform ${duration}ms cubic-bezier(0.2, 0, 0, 1), opacity ${duration}ms`
  }, slideAndPop[transition]),
  container: {
    transition: ({
      duration
    }) => `max-height ${duration - 100}ms 100ms`,
    maxHeight: ({
      transition
    }) => collapse[transition]
  }
});

const StackedToast = (_ref) => {
  let {
    variant,
    onDismiss,
    autoHideDelay,
    autoHide,
    transition,
    duration
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["variant", "onDismiss", "autoHideDelay", "autoHide", "transition", "duration"]);

  const timeout = useRef();
  const loadingVariant = variant === 'loading';
  const {
    container,
    toast
  } = useStyles({
    autoHideDelay,
    transition,
    duration
  });
  useEffect(() => {
    if (!loadingVariant && autoHide) {
      timeout.current = setTimeout(onDismiss, autoHideDelay);
      return () => timeout.current && clearTimeout(timeout.current);
    }
  }, [loadingVariant, autoHide]);
  const dismiss = useCallback(() => {
    if (timeout.current) {
      clearTimeout(timeout.current);
    }

    onDismiss();
  }, [onDismiss]);
  return /*#__PURE__*/React.createElement("div", {
    className: container,
    "data-qa": "stacked-toast"
  }, /*#__PURE__*/React.createElement(Toast, _extends({}, rest, {
    onDismiss: dismiss,
    variant: variant,
    className: toast
  })));
};

StackedToast.defaultProps = {
  autoHideDelay: 5000,
  autoHide: true
};
StackedToast.propTypes = {
  variant: PropTypes.oneOf(VARIANTS_NAMES).isRequired,
  onDismiss: PropTypes.func.isRequired,
  autoHideDelay: PropTypes.number,
  autoHide: PropTypes.bool,
  duration: PropTypes.number,
  transition: PropTypes.oneOf(['exited', 'exiting', 'entered', 'entering'])
};
export default StackedToast;