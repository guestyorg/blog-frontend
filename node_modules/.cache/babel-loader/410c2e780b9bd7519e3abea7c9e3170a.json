{"ast":null,"code":"import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from \"redux-thunk\";\nimport { accountDeleteReducer, accountDetailsReducer, accountListReducer, accountRegisterReducer, accountSigninReducer, accountUpdateReducer } from \"./reducers/accountReducers\";\nimport { userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userSigninReducer, userUpdateReducer } from \"./reducers/userReducers\"; ////\n\nimport { blogDeleteReducer, blogDetailsReducer, blogListReducer, blogRegisterReducer, blogSigninReducer, blogUpdateReducer } from \"./reducers/blogReducers\";\nconst initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null\n  },\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\") ? JSON.parse(localStorage.getItem(\"accountInfo\")) : null\n  }\n};\nconst reducer = combineReducers({\n  userRegister: userRegisterReducer,\n  userSignin: userSigninReducer,\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  /////\n  blogRegister: blogRegisterReducer,\n  blogSignin: blogSigninReducer,\n  blogDetails: blogDetailsReducer,\n  blogUpdate: blogUpdateReducer,\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n  /////\n  accountRegister: accountRegisterReducer,\n  accountSignin: accountSigninReducer,\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store; //////////////////////////////////////////////////////\n// import { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\n// import { reducer as formReducer } from \"redux-form\";\n// import thunk from \"redux-thunk\";\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n// ////\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n// // temp reducer to be removed\n// // Once real reducers added you can delete this\n// const tempReducer = (state = {}, action) => {\n//   switch (action.type) {\n//     default:\n//       return state;\n//   }\n// };\n// // shape the state structure\n// const rootReducer = combineReducers({\n//   userRegister: userRegisterReducer,\n//   userSignin: userSigninReducer,\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n//   /////\n//   blogRegister: blogRegisterReducer,\n//   blogSignin: blogSigninReducer,\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n//   /////\n//   accountRegister: accountRegisterReducer,\n//   accountSignin: accountSigninReducer,\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// // Add custom middleware here\n// const featureMiddleware = [];\n// /**\n//  * Initialize the redux store\n//  * Create the store\n//  * Applying extra arguments\n//  * To pass further arguments please config the function\n//  * @param initialState  {Object}  initial state for store\n//  * @param api {Object}  API class for api middleware\n//  * @return {Store<any, AnyAction> & {dispatch: any}}\n//  */\n//  const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// export default (\n//   initialState = {\n//     userSignin: {\n//       userInfo: localStorage.getItem(\"userInfo\")\n//         ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//         : null,\n//     },\n//     accountSignin: {\n//       accountInfo: localStorage.getItem(\"accountInfo\")\n//         ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//         : null,\n//     },\n//   },\n//   api\n// ) =>\n//   createStore(\n//     rootReducer,\n//     initialState,\n//     // composeEnhancer(applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api)))\n//     composeEnhancer(applyMiddleware(thunk))\n//     );","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/store.js"],"names":["createStore","compose","applyMiddleware","combineReducers","reducer","formReducer","thunk","accountDeleteReducer","accountDetailsReducer","accountListReducer","accountRegisterReducer","accountSigninReducer","accountUpdateReducer","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userSigninReducer","userUpdateReducer","blogDeleteReducer","blogDetailsReducer","blogListReducer","blogRegisterReducer","blogSigninReducer","blogUpdateReducer","initialState","userSignin","userInfo","localStorage","getItem","JSON","parse","accountSignin","accountInfo","userRegister","userDetails","userUpdate","userList","userDelete","blogRegister","blogSignin","blogDetails","blogUpdate","blogList","blogDelete","accountRegister","accountDetails","accountUpdate","accountList","accountDelete","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"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","sourcesContent":["import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport { reducer as formReducer } from 'redux-form';\n\nimport thunk from \"redux-thunk\";\n\nimport {\n  accountDeleteReducer,\n  accountDetailsReducer,\n  accountListReducer,\n  accountRegisterReducer,\n  accountSigninReducer,\n  accountUpdateReducer,\n} from \"./reducers/accountReducers\";\n\nimport {\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userSigninReducer,\n  userUpdateReducer,\n} from \"./reducers/userReducers\";\n\n////\n\nimport {\n  blogDeleteReducer,\n  blogDetailsReducer,\n  blogListReducer,\n  blogRegisterReducer,\n  blogSigninReducer,\n  blogUpdateReducer,\n} from \"./reducers/blogReducers\";\n\nconst initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\")\n      ? JSON.parse(localStorage.getItem(\"userInfo\"))\n      : null,\n  },\n\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\")\n      ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n      : null,\n  },\n};\nconst reducer = combineReducers({\n  userRegister: userRegisterReducer,\n\n  userSignin: userSigninReducer,\n\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n\n  /////\n\n  blogRegister: blogRegisterReducer,\n\n  blogSignin: blogSigninReducer,\n\n  blogDetails: blogDetailsReducer,\n  blogUpdate: blogUpdateReducer,\n\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n\n  /////\n\n  accountRegister: accountRegisterReducer,\n\n  accountSignin: accountSigninReducer,\n\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer,\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nexport default store;\n\n//////////////////////////////////////////////////////\n\n// import { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\n// import { reducer as formReducer } from \"redux-form\";\n// import thunk from \"redux-thunk\";\n\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n\n// ////\n\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n\n// // temp reducer to be removed\n// // Once real reducers added you can delete this\n// const tempReducer = (state = {}, action) => {\n//   switch (action.type) {\n//     default:\n//       return state;\n//   }\n// };\n// // shape the state structure\n// const rootReducer = combineReducers({\n//   userRegister: userRegisterReducer,\n\n//   userSignin: userSigninReducer,\n\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n\n//   /////\n\n//   blogRegister: blogRegisterReducer,\n\n//   blogSignin: blogSigninReducer,\n\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n\n//   /////\n\n//   accountRegister: accountRegisterReducer,\n\n//   accountSignin: accountSigninReducer,\n\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n\n// // Add custom middleware here\n// const featureMiddleware = [];\n\n// /**\n//  * Initialize the redux store\n//  * Create the store\n//  * Applying extra arguments\n//  * To pass further arguments please config the function\n//  * @param initialState  {Object}  initial state for store\n//  * @param api {Object}  API class for api middleware\n//  * @return {Store<any, AnyAction> & {dispatch: any}}\n//  */\n//  const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// export default (\n//   initialState = {\n//     userSignin: {\n//       userInfo: localStorage.getItem(\"userInfo\")\n//         ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//         : null,\n//     },\n\n//     accountSignin: {\n//       accountInfo: localStorage.getItem(\"accountInfo\")\n//         ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//         : null,\n//     },\n//   },\n//   api\n// ) =>\n//   createStore(\n//     rootReducer,\n//     initialState,\n//     // composeEnhancer(applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api)))\n//     composeEnhancer(applyMiddleware(thunk))\n\n//     );\n"]},"metadata":{},"sourceType":"module"}