"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.RichTextEditorComponent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _draftJs = require("draft-js");

var _draftConvert = require("draft-convert");

require("draft-js/dist/Draft.css");

var _InputLabel = _interopRequireDefault(require("../InputLabel/InputLabel"));

var _RichTextEditorToolbar = _interopRequireDefault(require("./RichTextEditorToolbar"));

var _withFocus = _interopRequireDefault(require("../../withFocus"));

var _richTextEditorConf = require("./richTextEditorConf");

var _enums = require("../../enums/enums");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var RichTextEditor = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(RichTextEditor, _Component);

  var _super = _createSuper(RichTextEditor);

  function RichTextEditor(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, RichTextEditor);
    _this = _super.call(this, props);

    _this.onChange = function (editorState) {
      var onChange = _this.props.onChange;

      var editorHtmlState = _this.editorStateToHtml(editorState);

      _this.setState({
        editorState: editorState,
        editorHtmlState: editorHtmlState
      });

      onChange(editorHtmlState);
    };

    _this.setEditorState = function (editorState) {
      _this.setState({
        editorState: editorState
      });
    };

    _this.setDraftRef = function (ref) {
      _this.draftjsRef = ref;
    };

    _this.handleKeyCommand = function (command, editorState) {
      var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);

      if (newState) {
        _this.onChange(newState);

        return true;
      }

      return false;
    };

    _this.htmlToEditorState = function (html) {
      var contentState = (0, _draftConvert.convertFromHTML)({
        htmlToStyle: function htmlToStyle(nodeName, node, currentStyle) {
          if (nodeName === 'span') {
            var color = _richTextEditorConf.customStyleConvertMap[node.style.color];
            var font = _richTextEditorConf.customStyleConvertMap[node.style.fontSize];

            if (color) {
              return currentStyle.add(color);
            }

            if (font) {
              return currentStyle.add(font);
            }
          }

          return currentStyle;
        }
      })(html);
      return _draftJs.EditorState.createWithContent(contentState);
    };

    _this.toggleInlineType = function (inlineType) {
      var editorState = _this.state.editorState;

      _this.onChange(_draftJs.RichUtils.toggleInlineStyle(editorState, inlineType));
    };

    _this.toggleBlockType = function (blockType) {
      var editorState = _this.state.editorState;

      _this.onChange(_draftJs.RichUtils.toggleBlockType(editorState, blockType));
    };

    _this.editorStateToHtml = function (state) {
      var contentState = state.getCurrentContent();

      if (!contentState.hasText()) {
        return '';
      }

      var html = (0, _draftConvert.convertToHTML)({
        styleToHTML: function styleToHTML(style) {
          if (_richTextEditorConf.customStyleMap[style]) {
            return /*#__PURE__*/_react["default"].createElement("span", {
              style: _richTextEditorConf.customStyleMap[style]
            });
          }
        },
        blockToHTML: function blockToHTML(block) {
          if (block.type === 'unstyled') {
            if (block.text === ' ' || block.text === '') return /*#__PURE__*/_react["default"].createElement("br", null);
            return /*#__PURE__*/_react["default"].createElement("div", null);
          }
        }
      })(contentState);
      return html;
    };

    _this.state = {
      editorState: props.value ? _this.htmlToEditorState(props.value) : _draftJs.EditorState.createEmpty(),
      editorHtmlState: props.value
    };
    _this.draftRef = null;
    return _this;
  }

  (0, _createClass2["default"])(RichTextEditor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var autoFocus = this.props.autoFocus;

      if (autoFocus) {
        this.draftjsRef.focus();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var newValue = this.props.value;
      var editorHtmlState = this.state.editorHtmlState;
      var oldValue = prevProps.value;

      if (oldValue !== newValue && newValue !== editorHtmlState) {
        this.setEditorState(this.htmlToEditorState(newValue));
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          disabled = _this$props.disabled,
          containerStyle = _this$props.containerStyle,
          placeholder = _this$props.placeholder,
          tooltip = _this$props.tooltip,
          showToolbar = _this$props.showToolbar,
          maxHeight = _this$props.maxHeight,
          onBlur = _this$props.onBlur,
          onFocus = _this$props.onFocus,
          theme = _this$props.theme,
          className = _this$props.className;
      var editorState = this.state.editorState;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "d-flex-fill flex-column input-wrapper",
        "data-qa": "rich-text-editor"
      }, label && /*#__PURE__*/_react["default"].createElement(_InputLabel["default"], {
        label: label,
        tooltip: tooltip
      }), /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('d-flex-fill flex-column b-1', theme === _enums.Theme.Light ? 'border-gray-lightest bg-white' : 'border-gray-light bg-gray-lightest', 'flex-start-center pos-relative', {
          'bg-gray-lighter': disabled
        }, className),
        style: containerStyle
      }, showToolbar && /*#__PURE__*/_react["default"].createElement(_RichTextEditorToolbar["default"], {
        key: 0,
        theme: theme,
        toggleInlineType: this.toggleInlineType,
        toggleBlockType: this.toggleBlockType,
        editorState: editorState
      }), /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('d-flex-fill', 'px-6', 'py-3', (0, _defineProperty2["default"])({}, "max-height-".concat(maxHeight), maxHeight), theme === _enums.Theme.Light ? 'bg-white' : 'bg-gray-lightest', 'overflow-y-auto')
      }, /*#__PURE__*/_react["default"].createElement(_draftJs.Editor, {
        ref: this.setDraftRef,
        placeholder: placeholder,
        editorState: editorState,
        onChange: this.onChange,
        readOnly: disabled,
        handleKeyCommand: this.handleKeyCommand,
        customStyleMap: _richTextEditorConf.customStyleMap,
        onFocus: onFocus,
        onBlur: onBlur
      }))));
    }
  }]);
  return RichTextEditor;
}(_react.Component);

RichTextEditor.defaultProps = {
  value: undefined,
  onChange: _noop["default"],
  placeholder: '',
  label: null,
  tooltip: null,
  disabled: false,
  showToolbar: true,
  className: '',
  maxHeight: 250,
  theme: _enums.Theme.Dark,
  autoFocus: false
};
RichTextEditor.propTypes = {
  /** Initial text value */
  value: _propTypes["default"].string,

  /** On change trigger function to update on text change */
  onChange: _propTypes["default"].func,

  /** TextArea Placeholder */
  placeholder: _propTypes["default"].string,

  /** A label to show on top of the input */
  label: _propTypes["default"].string,

  /** Add tooltip help icon and message - tooltip - String help message */
  tooltip: _propTypes["default"].string,

  /** Indicator for disabled status */
  disabled: _propTypes["default"].bool,

  /** Indicator whether or not to show the toolbar */
  showToolbar: _propTypes["default"].bool,

  /** Classes to add */
  className: _propTypes["default"].string,

  /** Max height for component */
  maxHeight: _propTypes["default"].number,

  /** Set theme for component */
  theme: _propTypes["default"].oneOf([_enums.Theme.Light, _enums.Theme.Dark]),

  /** Boolean to define if should be auto focused */
  autoFocus: _propTypes["default"].bool
};
var RichTextEditorComponent = RichTextEditor;
exports.RichTextEditorComponent = RichTextEditorComponent;

var _default = (0, _withFocus["default"])(RichTextEditor);

exports["default"] = _default;