import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Collapse from "../Collapse/Collapse";
import AccordionTitle from "./AccordionTitle";

class Accordion extends PureComponent {
  constructor(props) {
    super(props);

    this.handleTitleClick = () => {
      this.setState(prevState => ({
        isOpen: !prevState.isOpen
      }), () => {
        const {
          onChange
        } = this.props;
        const {
          isOpen
        } = this.state;

        if (onChange) {
          onChange(isOpen);
        }
      });
    };

    this.state = {
      isOpen: props.isOpen
    };
  }

  componentDidUpdate(prevProps, prevState) {
    this.getIsOpen(prevProps, prevState);
  }

  getIsOpen(prevProps) {
    const {
      isOpen
    } = this.props;
    const {
      isOpen: stateOpen
    } = this.state;

    if (isOpen !== prevProps.isOpen && isOpen !== stateOpen) {
      this.setState({
        isOpen
      });
    }
  }

  render() {
    const {
      children,
      title,
      hasBorderBottom
    } = this.props;
    const {
      isOpen
    } = this.state;
    return /*#__PURE__*/React.createElement("div", {
      className: cn('flex-center d-flex-fill flex-column border-gray-light', {
        'pb-6': isOpen
      }, {
        'bb-1': hasBorderBottom
      }),
      "data-qa": "accordion"
    }, /*#__PURE__*/React.createElement(AccordionTitle, {
      isOpen: isOpen,
      onClick: this.handleTitleClick,
      title: title
    }), /*#__PURE__*/React.createElement(Collapse, {
      isOpen: isOpen
    }, children));
  }

}

Accordion.defaultProps = {
  onChange: null,
  isOpen: false,
  hasBorderBottom: true
};
Accordion.propTypes = {
  /** The accordion component children */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** The accordion title element */
  title: PropTypes.node.isRequired,

  /** CallBack for on click (for controlled mode ) */
  onChange: PropTypes.func,

  /** Indicator whether or not to open accordion (for controlled mode ) */
  isOpen: PropTypes.bool,

  /** Indicator whether or not to have bottom border accordion */
  hasBorderBottom: PropTypes.bool
};
export default Accordion;