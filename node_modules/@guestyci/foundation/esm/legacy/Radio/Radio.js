import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { Label, Input } from 'reactstrap';
import { noop } from 'lodash/noop';

var Radio = /*#__PURE__*/function (_Component) {
  _inherits(Radio, _Component);

  var _super = _createSuper(Radio);

  function Radio() {
    var _this;

    _classCallCheck(this, Radio);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onRadioClick = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          name = _this$props.name,
          id = _this$props.id,
          generatedChildId = _this$props.generatedChildId,
          onChange = _this$props.onChange;
      onChange(value, name, id, generatedChildId);
    };

    return _this;
  }

  _createClass(Radio, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          disabled = _this$props2.disabled,
          checked = _this$props2.checked,
          children = _this$props2.children,
          id = _this$props2.id;
      return /*#__PURE__*/React.createElement("div", {
        className: cn(className, 'radio-wrapper', 'radio-item', 'font-size-md', 'height-25', 'text-gray-dark', 'flex-center', 'pr-4'),
        onClick: this.onRadioButtonClick,
        onKeyDown: this.onRadioButtonClick,
        role: "button",
        disabled: disabled,
        "data-qa": "radio"
      }, /*#__PURE__*/React.createElement(Label, {
        htmlFor: id,
        className: cn('font-size-md m-0 text-capitalize clickable', {
          'text-blue': checked
        })
      }, /*#__PURE__*/React.createElement(Input, {
        type: "radio",
        id: id,
        onChange: this.onRadioClick,
        checked: checked,
        disabled: disabled,
        className: "ml-0"
      }), children));
    }
  }]);

  return Radio;
}(Component);

Radio.defaultProps = {
  children: null,
  disabled: false,
  checked: false,
  name: undefined,
  id: undefined,
  onChange: noop,
  className: ''
};
Radio.propTypes = {
  /** Set radioButton content to show when active */
  children: PropTypes.node,

  /** Indicator whether or not the radioButton is disabled */
  disabled: PropTypes.bool,

  /** The radioButton value to be passed when clicked */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]).isRequired,

  /** Set the radioButton as active manually */
  checked: PropTypes.bool,

  /** will triggered when the value is changed */
  onChange: PropTypes.func,

  /** value will be return when click on this item */
  name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** identifier will be return when click on this element */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** classes to be added to the component */
  className: PropTypes.string
};
export default Radio;