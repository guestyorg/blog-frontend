import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useMemo } from 'react';
import noop from 'lodash/noop';
import cn from 'classnames';
import PropTypes from 'prop-types';
import Row from "../Layout/Row";
import createStyles from "../createStyles";
import Button from "../Button";
import { white } from "../theme/colors";
import useTheme from "../useTheme";
import composeEvent from "../utils/composeEvent";
export const useStyles = createStyles(theme => ({
  root: {
    border: `1px solid ${theme.palette.border}`,
    borderRadius: 2,
    width: 'fit-content'
  },
  button: {
    height: 46,
    width: 46,
    borderRadius: 0,
    background: white,
    color: theme.palette.text.secondary,
    borderRight: `1px solid ${theme.palette.border}`,
    '&:last-child': {
      borderRight: `0px solid ${theme.palette.border}`
    }
  },
  inactive: {
    '&:not([disabled]):hover': {
      backgroundColor: theme.palette.primary.background,
      color: theme.palette.primary.default
    }
  },
  active: {
    backgroundColor: theme.palette.primary.default,
    color: white
  }
}), {
  name: 'DaysPicker'
});
const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
const DaysPicker = React.forwardRef(function DaysPicker(_ref, ref) {
  let {
    disabled = false,
    name = '',
    value = [],
    onChange = noop,
    className = '',
    style = {},
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["disabled", "name", "value", "onChange", "className", "style", "jss"]);

  const classes = useStyles({
    jss
  });
  const theme = useTheme();
  const valueSet = useMemo(() => new Set(value), [value]);

  const handleDayClick = e => {
    const {
      value: clickedValue
    } = e.currentTarget;
    const set = new Set(valueSet);

    if (set.has(clickedValue)) {
      set.delete(clickedValue);
    } else {
      set.add(clickedValue);
    }

    const newEvent = composeEvent(e, {
      name,
      value: Array.from(set)
    });
    onChange(newEvent);
  };

  return /*#__PURE__*/React.createElement(Row, _extends({
    ref: ref,
    style: style,
    wrap: false,
    className: cn(classes.root, className)
  }, props), days.map(day => /*#__PURE__*/React.createElement(Button, {
    disabled: disabled,
    key: day,
    onClick: handleDayClick,
    value: day,
    rippleColor: theme.palette.primary.default,
    className: cn(classes.button, {
      [classes.active]: valueSet.has(day),
      [classes.inactive]: !valueSet.has(day)
    })
  }, day)));
});
DaysPicker.propTypes = {
  /** Array of selected values to pass */
  value: PropTypes.arrayOf(PropTypes.string),

  /** Callback for on item change */
  onChange: PropTypes.func,

  /** Addition class on root */
  className: PropTypes.string,

  /** Addition style on root */
  style: PropTypes.shape(),

  /** jss object override */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** component name */
  name: PropTypes.string,

  /** Indicator for disabled */
  disabled: PropTypes.bool
};
DaysPicker.displayName = 'DaysPicker';
export default DaysPicker;