import React from 'react';
import { shallow } from "../utils";
/**
 * Mock a react hook from the react api
 * @param hook
 * @return {*}
 */

export var mockHook = function mockHook(hook, cb) {
  return jest.spyOn(React, hook).mockImplementation(function (f) {
    return cb() || f();
  });
};
/**
 *  Custom hook
 * @param hook
 * @param cb
 * @return {*}
 */

export var mockCustomHook = function mockCustomHook(hook, cb) {
  return jest.spyOn(hook).mockImplementation(function () {
    return cb();
  });
};

function HookWrapper(_ref) {
  var hook = _ref.hook;
  var hookInstance = hook ? hook() : undefined;
  return React.createElement("div", {
    hook: hookInstance
  });
}
/**
 * Render a custom hook to the DOM
 * @param hook  {Function} Hook to render
 * @param args  {*} Initial values to hook
 * @return {function(): *}
 */


export var renderHook = function renderHook(_hook) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var wrapper = shallow(React.createElement(HookWrapper, {
    hook: function hook() {
      return _hook.apply(void 0, args);
    }
  }));
  return function () {
    return wrapper.prop('hook');
  };
};