"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MultiSelectDropdownComponent = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _DropdownInputField = _interopRequireDefault(require("../baseDropdown/DropdownInputField"));

var _DropdownMenu = _interopRequireDefault(require("../baseDropdown/DropdownMenu"));

var _withDropdown = _interopRequireDefault(require("../baseDropdown/withDropdown"));

var _withMultiSelect = _interopRequireDefault(require("../baseDropdown/withMultiSelect"));

var _MultiSelectDropdownSelectedMenu = _interopRequireDefault(require("./MultiSelectDropdownSelectedMenu"));

var _MultiSelectDropdownMenuItem = _interopRequireDefault(require("./MultiSelectDropdownMenuItem"));

var MultiSelectDropdown = function MultiSelectDropdown(_ref) {
  var toggleCollapse = _ref.toggleCollapse,
      isCollapsed = _ref.isCollapsed,
      name = _ref.name,
      className = _ref.className,
      onSearchChange = _ref.onSearchChange,
      clearQuery = _ref.clearQuery,
      closeDropdown = _ref.closeDropdown,
      style = _ref.style,
      isFetching = _ref.isFetching,
      fetchNextPage = _ref.fetchNextPage,
      pageCount = _ref.pageCount,
      currentPage = _ref.currentPage,
      query = _ref.query,
      placeholder = _ref.placeholder,
      searchInputValue = _ref.searchInputValue,
      clearSelected = _ref.clearSelected,
      unselectedOptions = _ref.unselectedOptions,
      selectedOptions = _ref.selectedOptions,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      emptyStateComponent = _ref.emptyStateComponent;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('d-flex-fill relative flex-column', className),
    style: style,
    name: name,
    "data-qa": "multi-select-dropdown"
  }, /*#__PURE__*/_react["default"].createElement(_DropdownInputField["default"], {
    query: query,
    name: name,
    value: searchInputValue,
    onQueryChange: onSearchChange,
    onIconClick: toggleCollapse,
    isOpen: !isCollapsed,
    searchable: true,
    onClearQuery: clearQuery,
    onClearSelected: clearSelected,
    placeholder: placeholder,
    disabled: disabled
  }), /*#__PURE__*/_react["default"].createElement(_DropdownMenu["default"], {
    pageCount: pageCount,
    onDismiss: closeDropdown,
    isEmptyState: !unselectedOptions.length,
    emptyStateComponent: emptyStateComponent,
    currentPage: currentPage,
    onLoadMore: fetchNextPage,
    isFetching: isFetching,
    isCollapsed: isCollapsed
  }, /*#__PURE__*/_react["default"].createElement(_MultiSelectDropdownSelectedMenu["default"], {
    options: selectedOptions,
    onChange: onChange
  }), unselectedOptions.map(function (option) {
    return /*#__PURE__*/_react["default"].createElement(_MultiSelectDropdownMenuItem["default"], {
      key: option.value,
      checked: false,
      onChange: onChange,
      value: option
    }, option.label);
  })));
};

MultiSelectDropdown.defaultProps = {
  values: [],
  value: [],
  options: [],
  single: 'more',
  plural: 'more',
  className: '',
  id: '',
  name: '',
  onLoadMore: _noop["default"],
  isFetching: false,
  pageCount: 0,
  placeholder: 'Select or type',
  onChange: _noop["default"],
  onSelect: _noop["default"],
  disabled: false,
  emptyStateComponent: 'No results found.'
};
MultiSelectDropdown.propTypes = {
  /** Callback function to be called on input value changed - Deprecated */
  onSelect: _propTypes["default"].func,

  /** Callback function to be called on input value changed */
  onChange: _propTypes["default"].func,

  /** Array to populate the dropdown selected list - DEPRECATED USE VALUE  */
  values: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Array to populate the dropdown selected list  */
  value: _propTypes["default"].arrayOf(_propTypes["default"].string),

  /** Array, current selected values - structure :
   *  { label: 'component' ? name prop is mandatory / 'String'.
   *    value: the value return to the parent */
  options: _propTypes["default"].arrayOf(_propTypes["default"].object),

  /** Callback function to be called on input value changed */
  onSearchQueryChange: _propTypes["default"].func.isRequired,

  /** Callback function to be called on dropdown visibility change */
  onVisibilityChange: _propTypes["default"].func,

  /** String, to display placeholder with 2 values */
  single: _propTypes["default"].string,

  /** String, to display placeholder with more than 2 values */
  plural: _propTypes["default"].string,

  /** String, classes to pass */
  className: _propTypes["default"].string,

  /** String, identifier */
  name: _propTypes["default"].string,

  /** String, identifier */
  id: _propTypes["default"].string,

  /** Callback function to fetch more items - required for infinite scroll */
  onLoadMore: _propTypes["default"].func,

  /** Total page count for pagination - required to allow infinite scroll */
  pageCount: _propTypes["default"].number,

  /** Indicator whether or not we are currently fetching value for infinite scroll */
  isFetching: _propTypes["default"].bool,

  /** Placeholder for multi select dropdown */
  placeholder: _propTypes["default"].string,

  /** Empty state component  to display when there're no results */
  emptyStateComponent: _propTypes["default"].node,

  /** Indicator for disabled status */
  disabled: _propTypes["default"].bool
};
var MultiSelectDropdownComponent = MultiSelectDropdown;
exports.MultiSelectDropdownComponent = MultiSelectDropdownComponent;

var _default = (0, _withDropdown["default"])((0, _withMultiSelect["default"])(MultiSelectDropdown));

exports["default"] = _default;