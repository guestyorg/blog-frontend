import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import Spinner from "../Spinner/Spinner";
const colors = {
  primary: 'blue',
  success: 'green',
  warning: 'yellow',
  danger: 'red',
  secondary: 'plain'
};

const BaseButton = (_ref) => {
  let {
    color,
    children,
    className,
    style,
    variant,
    isLoading,
    disabled,
    loaderColor,
    type,
    childrenClassName
  } = _ref,
      otherProps = _objectWithoutPropertiesLoose(_ref, ["classes", "color", "children", "className", "style", "variant", "isLoading", "disabled", "loaderColor", "type", "childrenClassName"]);

  return /*#__PURE__*/React.createElement("button", _extends({
    type: type,
    className: cn({
      'btn-loading': isLoading
    }, 'transition-all', 'btn base-btn', {
      [`btn-${colors[color]}`]: colors[color]
    }, {
      [`btn-${variant}`]: variant
    }, className)
  }, otherProps, {
    style: style,
    disabled: disabled,
    color: colors[color],
    "data-qa": "base-button"
  }), /*#__PURE__*/React.createElement("div", {
    className: "flex-center h-fill"
  }, /*#__PURE__*/React.createElement("div", {
    className: cn(childrenClassName, 'overflow-ellipsis', {
      invisible: isLoading
    })
  }, children), isLoading && /*#__PURE__*/React.createElement(Spinner, {
    className: "absolute",
    size: 15,
    strokeWidth: 6,
    color: loaderColor
  })));
};

BaseButton.defaultProps = {
  color: 'secondary',
  className: '',
  variant: 'flat',
  isLoading: false,
  disabled: false,
  loaderColor: 'white',
  type: 'button'
};
BaseButton.propTypes = {
  /** children passed to the button - string or Node */
  children: PropTypes.node.isRequired,

  /**  Color for button  - accept (primary, success, warning, danger) */
  color: PropTypes.string,

  /**  Variant of button  - accept (raised, flat, outline, icon) */
  variant: PropTypes.oneOf(['raised', 'flat', 'outline', 'icon']),

  /** Class for button base class */
  className: PropTypes.string,

  /** Indicator for loading to show spinner */
  isLoading: PropTypes.bool,

  /** Indicator whether the button is disabled */
  disabled: PropTypes.bool,

  /** Color for loading spinner */
  loaderColor: PropTypes.string,

  /** The button type */
  type: PropTypes.string
};
export default BaseButton;