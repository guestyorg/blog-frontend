"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _InlineTip = _interopRequireDefault(require("./InlineTip"));

var _MiniTip = _interopRequireDefault(require("./MiniTip"));

var _SideTip = _interopRequireDefault(require("./SideTip"));

var useStyles = (0, _createStyles["default"])(function () {
  return {
    root: {
      width: 'fit-content',
      maxWidth: '100%'
    }
  };
}, {
  name: 'Tip'
});
exports.useStyles = useStyles;
var Tip = (0, _react.forwardRef)(function Tip(_ref, ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'side' : _ref$variant,
      className = _ref.className,
      children = _ref.children,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss;
  var classes = useStyles({
    jss: jss
  });
  var overflowRef = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      forceMini = _useState2[0],
      setForceMini = _useState2[1];

  (0, _react.useLayoutEffect)(function () {
    if (variant === 'side') {
      var _overflowRef$current = overflowRef.current,
          current = _overflowRef$current === void 0 ? {} : _overflowRef$current;
      var clientWidth = current.clientWidth,
          scrollWidth = current.scrollWidth;
      var isOverflow = scrollWidth > clientWidth;

      if (isOverflow) {
        setForceMini(true);
      }
    }
  }, [overflowRef.current]);
  var shouldForceMini = variant === 'side' && forceMini;
  var selectedVariant = shouldForceMini ? 'mini' : variant;
  var TipComponent = {
    inline: _InlineTip["default"],
    side: _SideTip["default"],
    mini: _MiniTip["default"]
  }[selectedVariant];
  return /*#__PURE__*/_react["default"].createElement("div", {
    ref: overflowRef,
    className: (0, _classnames["default"])(classes.root, className)
  }, /*#__PURE__*/_react["default"].createElement(TipComponent, {
    jss: jss,
    ref: ref
  }, children));
});
Tip.displayName = 'Tip';
Tip.propTypes = {
  /** variant -  [ 'side', 'inline', 'mini' ] */
  variant: _propTypes["default"].oneOf(['side', 'inline', 'mini']),

  /** root level class name to add */
  className: _propTypes["default"].string,

  /** text node element */
  children: _propTypes["default"].node.isRequired,

  /** jss override object to customize the jss classes */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func])
};
var _default = Tip;
exports["default"] = _default;