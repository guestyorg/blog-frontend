"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _moment = _interopRequireDefault(require("moment"));

var _memoize = _interopRequireDefault(require("@guestyci/memoize"));

var _localeData = require("../utils/localeData");

var _LocalizationContext = _interopRequireDefault(require("../LocalizationProvider/LocalizationContext"));

var _FormattedDate = _interopRequireDefault(require("../FormattedDate"));

var _FormattedTime = _interopRequireDefault(require("../FormattedTime"));

_moment["default"].updateLocale('en', {
  relativeTime: {
    future: 'in %s',
    past: '%s ago',
    s: 'seconds',
    ss: '%ss',
    m: 'a minute',
    mm: '%dm',
    h: '1h',
    hh: '%dh',
    d: '1d',
    dd: '%dd',
    M: 'a month',
    MM: '%dm',
    y: 'a year',
    yy: '%dy'
  }
});

var dateToFromNow = (0, _memoize["default"])(function (date, isEnglish) {
  if (isEnglish) {
    var diff = (0, _moment["default"])().diff(date, 'days');

    if (Math.abs(diff) !== 1) {
      return (0, _moment["default"])(date).fromNow();
    }

    return diff > 0 ? 'Yesterday' : 'Tomorrow';
  }

  return (0, _moment["default"])(date).fromNow();
});

var Moment = function Moment(_ref) {
  var date = _ref.date,
      format = _ref.format,
      fromNow = _ref.fromNow,
      className = _ref.className,
      style = _ref.style,
      color = _ref.color,
      humanize = _ref.humanize,
      variant = _ref.variant;
  var Tag = variant || _react.Fragment;
  return _react["default"].createElement("div", {
    className: (0, _classnames["default"])('d-flex moment-wrapper', (0, _defineProperty2["default"])({}, "text-".concat(color), color), className),
    style: style
  }, fromNow || humanize ? _react["default"].createElement(_LocalizationContext["default"].Consumer, null, function (_ref2) {
    var isEnglish = _ref2.isEnglish;
    return _react["default"].createElement(Tag, null, dateToFromNow(date, isEnglish));
  }) : _react["default"].createElement(_react["default"].Fragment, null, format === _localeData.MomentFormatTypes.Time ? _react["default"].createElement(_FormattedTime["default"], {
    variant: variant,
    time: date
  }) : _react["default"].createElement(_FormattedDate["default"], {
    variant: variant,
    date: date,
    format: format
  })));
};

Moment.defaultProps = {
  format: _localeData.MomentFormatTypes.Date,
  humanize: false,
  fromNow: false,
  className: '',
  style: {},
  color: 'muted',
  variant: undefined
};
Moment.propTypes = {
  /** Date to process by moment - Unix/ISO/Date */
  date: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].instanceOf(Date)]).isRequired,

  /** Date format to custom show moment (shortDate, date, fullDate, mmmm yyyy, mmm yyyy, time) */
  format: _propTypes["default"].oneOf([_localeData.MomentFormatTypes.ShortDate, _localeData.MomentFormatTypes.Date, _localeData.MomentFormatTypes.FullDate, _localeData.MomentFormatTypes.MMMM_YYYY, _localeData.MomentFormatTypes.MMM_YYYY, _localeData.MomentFormatTypes.Time]),

  /** Indicator whether or not moment should show time from now (humanized)
   * - Deprecated use humanize
   * */
  fromNow: _propTypes["default"].bool,

  /** Indicator whether or not moment should show time from now (humanized) */
  humanize: _propTypes["default"].bool,

  /** Additional class name to root level */
  className: _propTypes["default"].string,

  /** Additional style name to root level */
  style: _propTypes["default"].shape(),

  /** text color for the moment component */
  color: _propTypes["default"].string,

  /** set the moment component to be variant ('div','string'...) in stead of fragment */
  variant: _propTypes["default"].string
};
var _default = Moment;
exports["default"] = _default;