import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { string, bool, shape } from 'prop-types';
import cn from 'classnames';
import Link from '@guestyci/history/Link';
import TextCell from "../TextCell";
import createStyles from "../../../createStyles";
var useStyles = createStyles(function (theme) {
  return {
    link: {
      '&:hover': {
        textDecoration: 'underline'
      },
      '.row-hovered &': {
        color: theme.palette.brand.primary,
        fill: theme.palette.brand.primary
      }
    }
  };
}, {
  name: 'LinkCell'
});

var LinkCell = function LinkCell(_ref) {
  var title = _ref.title,
      href = _ref.href,
      target = _ref.target,
      isLoading = _ref.isLoading,
      className = _ref.className,
      style = _ref.style,
      rest = _objectWithoutProperties(_ref, ["title", "href", "target", "isLoading", "className", "style"]);

  var classes = useStyles();
  return /*#__PURE__*/React.createElement(TextCell, _extends({}, rest, {
    isLoading: isLoading,
    overflowEllipsisTooltip: title,
    className: cn('link-cell', className),
    style: style,
    "data-qa": "link-cell"
  }), /*#__PURE__*/React.createElement(Link, {
    href: href,
    className: classes.link,
    target: target
  }, title));
};

LinkCell.propTypes = {
  /** text of a link */
  title: string,

  /** navigation prop for window location navigation */
  href: string,

  /** target to open link in e.g. _blank */
  target: string,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** class name of cell */
  className: string,

  /** styles applied to a cell */
  style: shape()
};
LinkCell.defaultProps = {
  title: '',
  href: '',
  target: '',
  isLoading: false
};
LinkCell.displayName = 'LinkCell';
export default LinkCell;