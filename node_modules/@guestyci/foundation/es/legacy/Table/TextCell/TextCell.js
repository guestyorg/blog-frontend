import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { string, node, bool, shape } from 'prop-types';
import cn from 'classnames';
import Cell from "../Cell";

const TextCell = (_ref) => {
  let {
    children,
    isLoading,
    overflowEllipsis,
    overflowEllipsisTooltip,
    className,
    contentClassName,
    style,
    Placeholder
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style", "Placeholder"]);

  return /*#__PURE__*/React.createElement(Cell, _extends({}, rest, {
    isLoading: isLoading,
    overflowEllipsis: overflowEllipsis,
    overflowEllipsisTooltip: overflowEllipsisTooltip || children,
    className: cn('text-cell', className),
    contentClassName: contentClassName,
    style: style,
    Placeholder: Placeholder,
    "data-qa": "text-cell"
  }), children);
};

TextCell.propTypes = {
  /** content of a cell */
  children: node,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: node,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape(),

  /** component to be rendered when loading is in progress  */
  Placeholder: node
};
TextCell.defaultProps = {
  children: '',
  overflowEllipsis: true,
  overflowEllipsisTooltip: null
};
export default TextCell;