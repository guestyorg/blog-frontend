import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import withStyles from 'react-jss';
import cn from 'classnames';
import noop from 'lodash/noop';
import isNumber from 'lodash/isNumber';
import ActiveTabBottomBorder from "./ActiveTabBottomBorder";
import ExpandingSearchBar from "../ExpandingSearchBar/ExpandingSearchBar";
import Fade from "../Fade/Fade";
import { isEmpty } from "../../utils";
var styles = {
  expandableSearchBar: {
    top: 2
  }
};
export var shouldRecalculatePosition = function shouldRecalculatePosition(prevChildren, children) {
  if (!children) {
    return false;
  }

  if (!prevChildren && children) {
    return true;
  }

  return prevChildren.length !== children.length;
};

var Tabs = /*#__PURE__*/function (_Component) {
  _inherits(Tabs, _Component);

  var _super = _createSuper(Tabs);

  function Tabs(props) {
    var _this;

    _classCallCheck(this, Tabs);

    _this = _super.call(this, props);

    _this.setControlledPosition = function (value) {
      var tabs = _this.tabsRef.current.getElementsByClassName('tab-item');

      var index = Array.from(tabs).findIndex(function (tab) {
        return tab.value === String(value);
      });

      if (index > -1) {
        _this.setPosition(index);
      }
    };

    _this.setPosition = function (activeTabIndex) {
      _this.setState({
        activeTabIndex: activeTabIndex
      }, function () {
        _this.setBorderWidth();
      });
    };

    _this.setBorderWidth = function () {
      var activeTabIndex = _this.state.activeTabIndex;

      var tabs = _this.tabsRef.current.getElementsByClassName('tab-item');

      var activeChild = tabs[activeTabIndex];

      _this.setState({
        borderWidth: activeChild.offsetWidth,
        position: activeChild.offsetLeft
      });
    };

    _this.initActiveTabIndex = function (children) {
      var activeIndex = 0;
      React.Children.map(children, function (child, index) {
        if (child.props.active && !child.props.disabled) {
          activeIndex = index;
        }
      });
      return activeIndex;
    };

    _this.changeTab = function (activeTabIndex) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _this.setPosition(activeTabIndex);

      var _this$props = _this.props,
          onChange = _this$props.onChange,
          onChangeTab = _this$props.onChangeTab;

      if (onChange || onChangeTab) {
        var tabProps = {
          value: value,
          activeTabIndex: activeTabIndex
        };

        if (onChange) {
          onChange(tabProps);
        }

        if (onChangeTab) {
          onChangeTab(tabProps);
        }
      }
    };

    _this.toggleTabs = function (isSearchOpen) {
      _this.setState({
        showTabs: !isSearchOpen
      });
    };

    _this.isActiveIndex = function (index) {
      var activeTabIndex = _this.state.activeTabIndex;
      return index === activeTabIndex;
    };

    _this.tabsRef = React.createRef();
    _this.state = {
      activeTabIndex: !isEmpty(props.initialValue) ? props.initialValue : _this.initActiveTabIndex(props.children),
      borderWidth: 0,
      position: null,
      showTabs: true
    };
    return _this;
  }

  _createClass(Tabs, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props2 = this.props,
          initialValue = _this$props2.initialValue,
          value = _this$props2.value;

      if (!isEmpty(initialValue) || !isEmpty(value)) {
        this.setControlledPosition(initialValue || value);
      } else {
        setTimeout(function () {
          return _this2.setBorderWidth();
        }, 300);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this3 = this;

      var _this$props3 = this.props,
          value = _this$props3.value,
          children = _this$props3.children;

      if (!isEmpty(value) && value !== prevProps.value) {
        this.setControlledPosition(value);
      }

      if (shouldRecalculatePosition(prevProps.children, children)) {
        setTimeout(function () {
          _this3.setBorderWidth();

          _this3.setControlledPosition(value);
        }, 155);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _children$activeTabIn,
          _children$activeTabIn2,
          _children$props,
          _this4 = this;

      var _this$props4 = this.props,
          children = _this$props4.children,
          className = _this$props4.className,
          style = _this$props4.style,
          onSearchSubmit = _this$props4.onSearchSubmit,
          withSearch = _this$props4.withSearch,
          noBorderBottom = _this$props4.noBorderBottom,
          noBorder = _this$props4.noBorder,
          classes = _this$props4.classes,
          activeTabContentClassName = _this$props4.activeTabContentClassName,
          fullWidth = _this$props4.fullWidth,
          onSearchChange = _this$props4.onSearchChange;
      var _this$state = this.state,
          activeTabIndex = _this$state.activeTabIndex,
          borderWidth = _this$state.borderWidth,
          position = _this$state.position,
          showTabs = _this$state.showTabs;
      var activeTabContent = Array.isArray(children) ? children[activeTabIndex] && ((_children$activeTabIn = children[activeTabIndex]) === null || _children$activeTabIn === void 0 ? void 0 : (_children$activeTabIn2 = _children$activeTabIn.props) === null || _children$activeTabIn2 === void 0 ? void 0 : _children$activeTabIn2.children) : children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.children;
      var borderClass = !(noBorder || noBorderBottom) ? 'bb-2 border-gray-light' : '';
      return /*#__PURE__*/React.createElement("div", {
        className: cn('d-flex-fill', 'flex-column', className),
        ref: this.tabsRef,
        style: style,
        "data-qa": "tabs"
      }, /*#__PURE__*/React.createElement("div", {
        className: cn('d-flex', withSearch && borderClass)
      }, /*#__PURE__*/React.createElement(Fade, {
        mountOnEnter: true,
        show: showTabs,
        className: cn('relative', {
          'w-fill': fullWidth
        })
      }, /*#__PURE__*/React.createElement("div", {
        className: cn('tabs-wrapper d-flex text-uppercase min-height-50 h-fill text-gray-dark', !withSearch && borderClass)
      }, React.Children.map(children, function (child, index) {
        return React.cloneElement(child, {
          onClick: _this4.changeTab,
          className: index !== children.length - 1 ? 'mr-5' : '',
          tabIndex: index,
          isActive: _this4.isActiveIndex(index)
        });
      })), !!(isNumber(activeTabIndex) && isNumber(position)) && /*#__PURE__*/React.createElement(ActiveTabBottomBorder, {
        width: borderWidth,
        style: withSearch ? {
          bottom: -2
        } : null,
        position: position
      })), withSearch && /*#__PURE__*/React.createElement(ExpandingSearchBar, {
        onSubmit: onSearchSubmit,
        containerClassName: classes.expandableSearchBar,
        onToggleSearch: this.toggleTabs,
        onChange: onSearchChange
      })), activeTabContent && /*#__PURE__*/React.createElement("div", {
        className: cn('mt-6', activeTabContentClassName)
      }, activeTabContent));
    }
  }]);

  return Tabs;
}(Component);

Tabs.defaultProps = {
  onChange: noop,
  onChangeTab: noop,
  className: '',
  style: {},
  withSearch: false,
  onSearchSubmit: noop,
  onSearchChange: noop,
  noBorder: false,
  noBorderBottom: false,
  initialValue: null,
  value: null,
  activeTabContentClassName: '',
  fullWidth: false
};
Tabs.propTypes = {
  /** The tabs children array to render */
  children: PropTypes.node.isRequired,

  /** Callback for on tab change payload:{ activeTabIndex, value (as passed in tab) } */
  onChange: PropTypes.func,

  /** Deprecated - user onChange in stead, Callback for tab change */
  onChangeTab: PropTypes.func,

  /** Additional class to tabs root */
  className: PropTypes.string,

  /** Additional style to tabs root */
  style: PropTypes.shape(),

  /** Indicator whether or not we want a search option on the tabs */
  withSearch: PropTypes.bool,

  /** Callback function to apply on search submit */
  onSearchSubmit: PropTypes.func,

  /** Callback function to apply on search input change */
  onSearchChange: PropTypes.func,

  /** Indicator whether or not to show the border for the tabs - DEPRECATED */
  noBorder: PropTypes.bool,

  /** Indicator whether or not to show the bottom line for the tabs */
  noBorderBottom: PropTypes.bool,

  /** initial tab index value to be active */
  initialValue: PropTypes.number,

  /** Controlled value for tab index - setting this will make component controlled */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Additional class to wrapper of children */
  activeTabContentClassName: PropTypes.string,

  /** Boolean indicator for parent full width */
  fullWidth: PropTypes.bool
};
export var TabsComponent = Tabs;
export default withStyles(styles)(Tabs);