"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _useFocus3 = _interopRequireDefault(require("../useFocus"));

var _utils = require("../utils");

var _Input = _interopRequireDefault(require("../Input"));

var _Row = _interopRequireDefault(require("../Layout/Row"));

var _NumberPickerArrows = _interopRequireDefault(require("./NumberPickerArrows"));

var _PickerResetWrapper = _interopRequireDefault(require("../basePicker/PickerResetWrapper"));

var _styles = _interopRequireDefault(require("../Input/styles"));

var affixesContainer = {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  minWidth: '46px',
  height: '44px'
};
var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      height: '46px',
      borderRadius: '2px',
      border: "solid 1px ".concat(theme.palette.border),
      color: "".concat(theme.palette.text.input, " !important"),
      transition: theme.transition.create(),
      '&:hover': _styles["default"].hover(theme)
    },
    focused: _styles["default"].focused(theme),
    disabled: _styles["default"].disabled(theme),
    error: _styles["default"].error(theme),
    input: {
      borderStyle: 'none',
      '&:hover': {
        borderStyle: 'none'
      },
      height: '100%'
    },
    inputWithSuffix: {
      paddingRight: 0
    },
    inputWithPrefix: {
      paddingLeft: 0
    },
    prefixContainer: (0, _extends2["default"])({}, affixesContainer, {
      borderRight: "solid 1px ".concat(theme.palette.border),
      marginRight: theme.spacer(3)
    }),
    suffixContainer: (0, _extends2["default"])({}, affixesContainer, {
      borderLeft: "solid 1px ".concat(theme.palette.border),
      marginLeft: theme.spacer(3)
    })
  };
}, {
  name: 'NumberPicker'
});
exports.useStyles = useStyles;
var inputJssOverride = {
  focused: {
    borderStyle: 'none',
    boxShadow: 'none'
  },
  disabled: {
    cursor: 'not-allowed',
    '&:hover': {
      borderStyle: 'none'
    }
  }
};

var NumberPicker = _react["default"].forwardRef(function NumberPicker(_ref, ref) {
  var name = _ref.name,
      value = _ref.value,
      defaultValue = _ref.defaultValue,
      placeholder = _ref.placeholder,
      step = _ref.step,
      min = _ref.min,
      max = _ref.max,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      resetable = _ref.resetable,
      prefix = _ref.prefix,
      suffix = _ref.suffix,
      jss = _ref.jss,
      error = _ref.error,
      style = _ref.style,
      className = _ref.className,
      otherInputProps = (0, _objectWithoutProperties2["default"])(_ref, ["name", "value", "defaultValue", "placeholder", "step", "min", "max", "onChange", "disabled", "resetable", "prefix", "suffix", "jss", "error", "style", "className"]);
  var classes = useStyles({
    jss: jss
  });

  var _useFocus = (0, _useFocus3["default"])(),
      _useFocus2 = (0, _slicedToArray2["default"])(_useFocus, 2),
      focused = _useFocus2[0],
      focusRef = _useFocus2[1];

  var isValidValue = function isValidValue(v) {
    var numberRegex = RegExp('(^-?([1-9]\\d*|0)?(?:\\.(\\d+)?)?$)');
    return numberRegex.test(v);
  };

  var handleInputChange = function handleInputChange(e) {
    var newValue = e.target.value;

    if (isValidValue(newValue)) {
      onChange(e);
    }
  };

  var manipulateEvent = function manipulateEvent(event, newValue) {
    event.persist();
    Object.defineProperty(event, 'target', {
      value: {
        value: "".concat(newValue),
        name: name
      }
    });
    return event;
  };

  var formatFloat = function formatFloat(n) {
    return parseFloat(n.toFixed(4));
  };

  var getIncValue = function getIncValue() {
    var numericValue = Number(value);

    if ((0, _utils.isEmpty)(value) || Number.isNaN(numericValue)) {
      return Number(defaultValue || 0) + step;
    }

    if (numericValue < min) {
      return min;
    }

    return formatFloat(Math.round(numericValue / step) * step + step);
  };

  var getDecValue = function getDecValue() {
    var numericValue = Number(value);

    if ((0, _utils.isEmpty)(value) || Number.isNaN(numericValue)) {
      return Number(defaultValue || 0) - step;
    }

    if (numericValue > max) {
      return max;
    }

    return formatFloat(Math.round(numericValue / step) * step - step);
  };

  var disableInc = disabled || getIncValue() > max;
  var disableDec = disabled || getDecValue() < min;

  var handleInc = function handleInc(event) {
    return onChange(manipulateEvent(event, getIncValue()));
  };

  var handleDec = function handleDec(event) {
    return onChange(manipulateEvent(event, getDecValue()));
  };

  var handleReset = function handleReset(event) {
    onChange(manipulateEvent(event, defaultValue));
  };

  return /*#__PURE__*/_react["default"].createElement(_Row["default"], {
    fullWidth: true,
    wrap: false,
    align: "center",
    spacing: 0,
    ref: ref,
    className: (0, _classnames["default"])(classes.root, (0, _defineProperty2["default"])({}, classes.focused, focused), (0, _defineProperty2["default"])({}, classes.disabled, disabled), (0, _defineProperty2["default"])({}, classes.error, error), className),
    style: style
  }, /*#__PURE__*/_react["default"].createElement(_PickerResetWrapper["default"], {
    resetable: resetable,
    onReset: handleReset,
    disabled: disabled
  }, /*#__PURE__*/_react["default"].createElement(_Input["default"], (0, _extends2["default"])({
    name: name,
    ref: focusRef,
    prefix: prefix && /*#__PURE__*/_react["default"].createElement("div", {
      className: classes.prefixContainer
    }, prefix),
    suffix: suffix && /*#__PURE__*/_react["default"].createElement("div", {
      className: classes.suffixContainer
    }, suffix),
    className: (0, _classnames["default"])(classes.input, (0, _defineProperty2["default"])({}, classes.inputWithPrefix, prefix), (0, _defineProperty2["default"])({}, classes.inputWithSuffix, suffix)),
    placeholder: placeholder,
    disabled: disabled,
    onChange: handleInputChange,
    value: value,
    jss: inputJssOverride
  }, otherInputProps)), /*#__PURE__*/_react["default"].createElement(_NumberPickerArrows["default"], {
    disableDec: disableDec,
    disableInc: disableInc,
    onInc: handleInc,
    onDec: handleDec
  })));
});

NumberPicker.defaultProps = {
  name: undefined,
  value: undefined,
  defaultValue: '',
  placeholder: undefined,
  step: 1,
  min: undefined,
  max: undefined,
  onChange: _noop["default"],
  disabled: false,
  resetable: false,
  prefix: undefined,
  suffix: undefined,
  error: false,
  jss: undefined,
  style: undefined,
  className: undefined
};
NumberPicker.propTypes = {
  /** Number picker name to be set */
  name: _propTypes["default"].string,

  /** value to be set */
  value: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),

  /** default value to be set - will be used when for reset, and inc/dec while value is not set */
  defaultValue: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].oneOf([''])]),

  /** Input placeholder text */
  placeholder: _propTypes["default"].string,

  /** step that will be applied when incrementing and decrementing */
  step: _propTypes["default"].number,

  /** min value to be set */
  min: _propTypes["default"].number,

  /** max value to be set */
  max: _propTypes["default"].number,

  /** Function to be called on input value change */
  onChange: _propTypes["default"].func,

  /** Disable state in which input interaction is not available */
  disabled: _propTypes["default"].bool,

  /** Define if the value can be reset */
  resetable: _propTypes["default"].bool,

  /** Input class */
  className: _propTypes["default"].string,

  /** String Or React Element to be shown before the input */
  prefix: _propTypes["default"].node,

  /** String Or React Element to be shown after the input */
  suffix: _propTypes["default"].node,

  /** Indicator for form error state  */
  error: _propTypes["default"].bool,

  /** jss override object to customize the jss classes */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** Additional styles */
  style: _propTypes["default"].shape()
};
var _default = NumberPicker;
exports["default"] = _default;