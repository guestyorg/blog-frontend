import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import memoize from 'lodash/memoize';
import Input from "../Input/Input";
import Checkbox from "../Checkbox/Checkbox";
import NumberPicker from "../NumberPicker/NumberPicker";
import TimePicker from "../TimePicker/TimePicker";
import Dropdown from "../Dropdown/Dropdown";
import TextArea from "../TextArea/TextArea";
import Person from "../Person/Person";
import InputLabel from "../InputLabel/InputLabel";
import DatePicker from "../DatePicker/DatePicker";
import { DatePickerType } from "../../enums/enums";

const createPerson = data => /*#__PURE__*/React.createElement(Person, {
  name: data.fullName,
  size: "sm",
  "data-qa": "create-person"
});

const getPersonOptions = (options = []) => options.map(option => ({
  label: createPerson(option),
  value: option._id,
  name: option.fullName
}));

const getOptions = (options = []) => options.map(option => ({
  label: option,
  value: option
}));

const memoizeGetOptions = memoize(getOptions);
const memoizeGetPersonOptions = memoize(getPersonOptions);

const getLabel = (type, label) => type === 'boolean' ? 'A yes no issue' : label;

const getField = props => {
  const {
    type,
    onChange,
    value,
    name,
    id,
    label,
    options,
    onLoadMore,
    pageCount,
    floatingPoint,
    isFetching,
    searchable,
    onSearchQueryChange
  } = props;

  switch (type) {
    case 'boolean':
      return /*#__PURE__*/React.createElement("div", {
        className: "row w-100 pl-3"
      }, /*#__PURE__*/React.createElement(Checkbox, {
        name: name,
        id: id,
        onChange: (val, nameVal) => onChange(!val, nameVal),
        value: value,
        checked: !!value
      }, label));

    case 'number':
      return /*#__PURE__*/React.createElement("div", {
        className: "row w-100 pl-3 d-block"
      }, /*#__PURE__*/React.createElement(NumberPicker, {
        floatingPoint: floatingPoint,
        value: value,
        name: name,
        id: id,
        onChange: onChange
      }));

    case 'time':
      return /*#__PURE__*/React.createElement("div", {
        className: "row w-100 pl-3 d-block"
      }, /*#__PURE__*/React.createElement(TimePicker, {
        onChange: onChange,
        name: name,
        id: id,
        value: value
      }));

    case 'longtext':
      return /*#__PURE__*/React.createElement("div", {
        className: "row w-100 pl-3 d-block"
      }, /*#__PURE__*/React.createElement(TextArea, {
        onChange: onChange,
        name: name,
        id: id,
        value: value
      }));

    case 'enum':
      {
        const dropDownOptions = memoizeGetOptions(options);
        return /*#__PURE__*/React.createElement("div", {
          className: "row w-100 pl-3 d-block"
        }, /*#__PURE__*/React.createElement(Dropdown, {
          options: dropDownOptions,
          onSelect: onChange,
          name: name,
          id: id,
          defaultValue: value,
          onLoadMore: onLoadMore,
          pageCount: pageCount,
          isFetching: isFetching,
          searchable: searchable,
          onSearchQueryChange: onSearchQueryChange
        }));
      }

    case 'user':
    case 'contact':
      {
        const dropDownOptions = memoizeGetPersonOptions(options);
        return /*#__PURE__*/React.createElement("div", {
          className: "row w-100 pl-3 d-block"
        }, /*#__PURE__*/React.createElement(Dropdown, {
          options: dropDownOptions,
          onSelect: onChange,
          name: name,
          id: id,
          defaultValue: value,
          onLoadMore: onLoadMore,
          pageCount: pageCount,
          isFetching: isFetching,
          searchable: searchable,
          onSearchQueryChange: onSearchQueryChange
        }));
      }

    case 'date':
      return /*#__PURE__*/React.createElement(DatePicker, {
        type: DatePickerType.Single,
        value: value,
        onChange: onChange,
        id: id
      });

    case 'text':
    default:
      return /*#__PURE__*/React.createElement("div", {
        className: "row w-100 d-block pl-3"
      }, /*#__PURE__*/React.createElement(Input, {
        value: value,
        name: name,
        id: id,
        onChange: onChange,
        className: "pr-3"
      }));
  }
};

const DynamicField = props => {
  const {
    type,
    label
  } = props;
  const fieldElement = getField(props);
  const inputLabel = getLabel(type, label);
  return /*#__PURE__*/React.createElement("div", {
    className: "form-group-body",
    "data-qa": "dynamic-field"
  }, /*#__PURE__*/React.createElement("div", {
    className: "mb-6 form-field"
  }, /*#__PURE__*/React.createElement(InputLabel, {
    className: "dynamic-field-label",
    label: inputLabel
  }), fieldElement));
};

DynamicField.defaultProps = {
  onChange: noop,
  value: undefined,
  label: undefined,
  options: undefined,
  type: 'text',
  id: undefined,
  name: '',
  pageCount: 0,
  onLoadMore: noop,
  isFetching: false,
  searchable: false,
  onSearchQueryChange: null
};
DynamicField.propTypes = {
  /** Function to be called on value change */
  onChange: PropTypes.func,

  /** Element type to render */
  type: PropTypes.string,

  /** A label to show on top of the input */
  label: PropTypes.string,

  /** Controlled input value to be set to input */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.instanceOf(Date), PropTypes.shape()]),

  /** The dropdown options to show Can be array of strings or Objects Structure ({
   _id: user/contact id,
   fullName: user/contact full Name,
  }) */
  options: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])),

  /** Name indicator for field */
  name: PropTypes.string,

  /** id indicator for field */
  id: PropTypes.string,

  /** Callback to handle pagination fetch more */
  onLoadMore: PropTypes.func,

  /** total pages for pagination  */
  pageCount: PropTypes.number,

  /** Indicator whether, or not we are in fetching mode in pagination */
  isFetching: PropTypes.bool,

  /** Set if or not support dropdown search */
  searchable: PropTypes.bool,

  /** Callback to handle search query change */
  onSearchQueryChange: PropTypes.func
};
export default DynamicField;