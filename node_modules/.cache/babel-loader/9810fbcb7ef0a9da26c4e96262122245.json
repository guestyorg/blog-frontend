{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.decomposeColor = decomposeColor;\nexports.rgbToHex = rgbToHex;\nexports.recomposeColor = recomposeColor;\nexports.hslToRgb = hslToRgb;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Foundation-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  var hashColor = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(hashColor.length / 3, \"}\"), 'g');\n  var colors = hashColor.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(_int) {\n  var hex = _int.toString(16);\n\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{values: number[], type: string}} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Foundation-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  var decomposedColor = decomposeColor(color);\n  var values = color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (decomposedColor.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  var decomposedColor = decomposeColor(color);\n  var absValue = clamp(value);\n\n  if (decomposedColor.type === 'rgb' || decomposedColor.type === 'hsl') {\n    decomposedColor.type += 'a';\n  }\n\n  decomposedColor.values[3] = absValue;\n  return recomposeColor(decomposedColor);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] *= 1 - absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] *= 1 - absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] += (100 - decomposedColor.values[2]) * absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] += (255 - decomposedColor.values[i]) * absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/node_modules/@guestyci/foundation/theme/utils.js"],"names":["Object","defineProperty","exports","value","hexToRgb","decomposeColor","rgbToHex","recomposeColor","hslToRgb","fade","darken","lighten","clamp","min","arguments","length","undefined","max","process","env","NODE_ENV","console","error","concat","Math","color","hashColor","substr","re","RegExp","colors","match","map","n","parseInt","join","intToHex","_int","hex","toString","type","charAt","marker","indexOf","substring","Error","values","split","parseFloat","_decomposeColor","i","decomposedColor","h","s","l","a","f","k","rgb","round","push","absValue","coefficient","absCoefficient"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hexToRgb = hexToRgb;\nexports.decomposeColor = decomposeColor;\nexports.rgbToHex = rgbToHex;\nexports.recomposeColor = recomposeColor;\nexports.hslToRgb = hslToRgb;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Foundation-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  var hashColor = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(hashColor.length / 3, \"}\"), 'g');\n  var colors = hashColor.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(_int) {\n  var hex = _int.toString(16);\n\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {{values: number[], type: string}} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error([\"Foundation-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(function (n) {\n    return intToHex(n);\n  }).join(''));\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Converts a color from hsl format to rgb format.\n *\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  var decomposedColor = decomposeColor(color);\n  var values = color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = function f(n) {\n    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (decomposedColor.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type: type,\n    values: rgb\n  });\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  var decomposedColor = decomposeColor(color);\n  var absValue = clamp(value);\n\n  if (decomposedColor.type === 'rgb' || decomposedColor.type === 'hsl') {\n    decomposedColor.type += 'a';\n  }\n\n  decomposedColor.values[3] = absValue;\n  return recomposeColor(decomposedColor);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] *= 1 - absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] *= 1 - absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  var decomposedColor = decomposeColor(color);\n  var absCoefficient = clamp(coefficient);\n\n  if (decomposedColor.type.indexOf('hsl') !== -1) {\n    decomposedColor.values[2] += (100 - decomposedColor.values[2]) * absCoefficient;\n  } else if (decomposedColor.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      decomposedColor.values[i] += (255 - decomposedColor.values[i]) * absCoefficient;\n    }\n  }\n\n  return recomposeColor(decomposedColor);\n}"]},"metadata":{},"sourceType":"script"}