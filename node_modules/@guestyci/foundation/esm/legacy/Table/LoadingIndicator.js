import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import CellRow from "./CellRow/CellRow";

var LoadingIndicator = function LoadingIndicator(_ref) {
  var show = _ref.show,
      isTableEmpty = _ref.isTableEmpty,
      pageSize = _ref.pageSize,
      multiSelect = _ref.multiSelect,
      checked = _ref.checked,
      className = _ref.className,
      cellComponents = _ref.cellComponents;
  var rowPlaceholdersArray = useMemo(function () {
    var count = isTableEmpty ? pageSize : 4;
    return _toConsumableArray(Array(count).keys());
  }, [isTableEmpty, pageSize]);
  return show ? rowPlaceholdersArray.map(function (key) {
    return /*#__PURE__*/React.createElement(CellRow, {
      key: "placeholder-".concat(key),
      rowId: "placeholder-".concat(key),
      multiSelect: multiSelect,
      className: className,
      data: {},
      checked: checked,
      isLoading: true
    }, cellComponents);
  }) : null;
};

LoadingIndicator.defaultProps = {
  isTableEmpty: true,
  pageSize: 25,
  multiSelect: false,
  checked: false,
  className: undefined,
  cellComponents: undefined
};
LoadingIndicator.propTypes = {
  /** Defines whether to show the indicator */
  show: PropTypes.bool,

  /** Defines whether the table is currently empty */
  isTableEmpty: PropTypes.bool,

  /** Numner of items per page */
  pageSize: PropTypes.number,

  /** Boolean indicator for allowing bulk actions */
  multiSelect: PropTypes.bool,

  /** Boolean indicator the rows to be checked */
  checked: PropTypes.bool,

  /** Optional class name to the cell row */
  className: PropTypes.string,

  /** cell components to be shown in each row  */
  cellComponents: PropTypes.node.isRequired
};
export default LoadingIndicator;