import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Paper from "../Paper";
import useLockBody from "../useLockBody";
import Portal from "../legacy/Portal";
import Fade from "../Fade";
import Backdrop from "../Backdrop";
import createStyles from "../createStyles";
import { white } from "../theme/colors";
import CSSTransition from "../CSSTransition";
import { firstLetterUppercase } from "../utils";
export const useStyles = createStyles(theme => ({
  root: {
    position: 'fixed',
    inset: 0,
    zIndex: theme.zIndex.dialog
  },
  holder: {
    position: 'absolute',
    height: '100%'
  },
  holdLeft: {
    left: 0
  },
  holdRight: {
    right: 0
  },
  content: {
    position: 'relative',
    backgroundColor: white,
    height: '100%',
    overflow: 'auto'
  },
  enterRight: {
    transform: 'translateX(100%)'
  },
  enterLeft: {
    transform: 'translateX(-100%)'
  },
  enterActive: {
    transform: 'translateX(0)',
    transition: `transform ${theme.transition.duration.complex}ms ${theme.transition.easing.easeInOut}`
  },
  enterDone: {
    transform: 'translateX(0)'
  },
  exit: {
    transform: 'translateX(0)'
  },
  exitRightActive: {
    transform: 'translateX(100%)',
    transition: `transform ${theme.transition.duration.complex}ms ${theme.transition.easing.easeInOut}`
  },
  exitLeftActive: {
    transform: 'translateX(-100%)',
    transition: `transform ${theme.transition.duration.complex}ms ${theme.transition.easing.easeInOut}`
  },
  exitLeftDone: {
    transform: 'translateX(-100%)'
  },
  exitRightDone: {
    transform: 'translateX(100%)'
  },
  hideSurface: {
    visibility: 'hidden'
  },
  showSurface: {
    visibility: 'visible'
  }
}), {
  name: 'OverlayDrawer'
});
const OverlayDrawer = React.forwardRef(function OverlayDrawer(_ref, ref) {
  let {
    open = false,
    wrapperClassName = '',
    className = '',
    children = null,
    style,
    jss = {},
    onClose,
    onEnter,
    onExited,
    direction = 'right'
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["open", "wrapperClassName", "className", "children", "style", "jss", "onClose", "onEnter", "onExited", "direction"]);

  const [showSurface, setShowSurface] = useState(false);
  const classes = useStyles({
    jss
  });
  const directionKey = firstLetterUppercase(direction);
  const slideTransition = {
    enter: classes[`enter${directionKey}`],
    enterActive: classes.enterActive,
    enterDone: classes.enterDone,
    exit: classes.exit,
    exitActive: classes[`exit${directionKey}Active`],
    exitDone: classes[`exit${directionKey}Done`]
  };
  useLockBody(open);
  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement("div", {
    className: cn(classes.root, {
      [classes.showSurface]: showSurface
    }, {
      [classes.hideSurface]: !showSurface
    })
  }, /*#__PURE__*/React.createElement(Fade, {
    show: open,
    duration: 300,
    timeout: 300,
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement(Backdrop, {
    onClick: onClose
  })), /*#__PURE__*/React.createElement("div", {
    className: cn(classes.holder, classes[`hold${directionKey}`], wrapperClassName)
  }, /*#__PURE__*/React.createElement(CSSTransition, {
    timeout: 375,
    animation: slideTransition,
    show: open,
    unmountOnExit: true,
    onEnter: () => {
      setShowSurface(true);
      if (onEnter) onEnter();
    },
    onExited: () => {
      setShowSurface(false);
      if (onExited) onExited();
    }
  }, /*#__PURE__*/React.createElement(Paper, _extends({
    ref: ref,
    elevation: 2,
    className: cn(classes.content, className),
    style: style,
    square: true
  }, props), children)))));
});
OverlayDrawer.propTypes = {
  /** Child elements to render inside of the drawer */
  children: PropTypes.node.isRequired,

  /** Boolean flag whether or not to show drawer */
  open: PropTypes.bool,

  /** Custom jss overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Callback function for closing drawer */
  onClose: PropTypes.func,

  /** Callback function when drawer animation enters */
  onEnter: PropTypes.func,

  /** Callback function when drawer animation exited */
  onExited: PropTypes.func,

  /** Additional classes for the paper div parent */
  wrapperClassName: PropTypes.string,

  /** Additional classes for the paper level */
  className: PropTypes.string,

  /** Enum for the drawer anchor [ 'right', 'left' ] */
  direction: PropTypes.oneOf(['right', 'left'])
};
OverlayDrawer.displayName = 'OverlayDrawer';
export default OverlayDrawer;