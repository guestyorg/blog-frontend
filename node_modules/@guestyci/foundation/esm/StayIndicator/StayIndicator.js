import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _tooltips;

import React, { forwardRef, useMemo } from 'react';
import PropTypes from 'prop-types';
import { StayStatus } from "../enums/enums";
import Tooltip from "../Tooltip";
import BaseStayIndicator from "./BaseStayIndicator";
var tooltips = (_tooltips = {}, _defineProperty(_tooltips, StayStatus.Reserved, 'Reserved'), _defineProperty(_tooltips, StayStatus.Planned, 'Upcoming stay'), _defineProperty(_tooltips, StayStatus.Staying, 'Currently staying'), _defineProperty(_tooltips, StayStatus.Complete, 'Checked out'), _tooltips);

var getWrapperStyles = function getWrapperStyles(_ref) {
  var vertical = _ref.vertical,
      fullWidth = _ref.fullWidth;
  var fullLengthStyles = vertical ? {
    height: '100%'
  } : {
    width: '100%'
  };
  return fullWidth ? fullLengthStyles : null;
};

var StayIndicator = forwardRef(function (_ref2, ref) {
  var _ref2$status = _ref2.status,
      status = _ref2$status === void 0 ? StayStatus.Planned : _ref2$status,
      className = _ref2.className,
      jss = _ref2.jss,
      dark = _ref2.dark,
      id = _ref2.id,
      fullWidth = _ref2.fullWidth,
      vertical = _ref2.vertical;
  var wrapperStyles = useMemo(function () {
    return getWrapperStyles({
      vertical: vertical,
      fullWidth: fullWidth
    });
  }, [vertical, fullWidth]);
  return /*#__PURE__*/React.createElement("span", {
    style: wrapperStyles
  }, /*#__PURE__*/React.createElement(Tooltip, {
    body: tooltips[status],
    placement: "top start",
    id: id
  }, /*#__PURE__*/React.createElement(BaseStayIndicator, {
    dark: dark,
    status: status,
    className: className,
    fullWidth: fullWidth,
    vertical: vertical,
    ref: ref,
    jss: jss
  })));
});
StayIndicator.displayName = 'StayIndicator';
StayIndicator.propTypes = {
  /** Id for the tooltip body container */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Stay status - Enum (StayStatus- [Reserved, Planned, Staying, Complete,]) */
  status: PropTypes.oneOf([StayStatus.Planned, StayStatus.Staying, StayStatus.Complete, StayStatus.Reserved]),

  /** Additional class to add to StayIndicator */
  className: PropTypes.string,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Set orientation as vertical(default is horizontal) */
  vertical: PropTypes.bool,

  /** Set theme to dark */
  dark: PropTypes.bool,

  /** Set the stay indicator to fill space */
  fullWidth: PropTypes.bool,

  /** reference that will be applied to Row container */
  ref: PropTypes.shape()
};
export default StayIndicator;