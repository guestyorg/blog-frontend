import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import cn from 'classnames';
import Icon from "../legacy/Icon";

var BtnArrowUp = function BtnArrowUp(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M4.529 0a.474.474 0 0 0-.357.137L.137 4.172a.488.488 0 0 0 .69.689L4.53 1.156l3.705 3.705a.488.488 0 0 0 .69-.69L4.89.138A.477.477 0 0 0 4.53 0z"
  }));
};

BtnArrowUp.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 9.0618038 4.9977479"
};
import createStyles from "../createStyles";
import Row from "../Layout/Row";
import TextField from "../TextField";
import { isEmpty } from "../utils";
import DropdownInputSelectedValue from "./DropdownInputSelectedValue";
export const useStyles = createStyles(theme => ({
  root: {
    transition: theme.transition.create('color'),
    color: theme.palette.secondary.default
  },
  icon: {
    fill: 'currentColor',
    transition: theme.transition.create('transform')
  },
  active: {
    color: theme.palette.primary.default
  },
  rotate: {
    transform: 'rotate(180deg)'
  }
}));
const DropdownLabelInput = React.forwardRef(function DropdownLabelInput(_ref, ref) {
  let {
    value,
    className,
    open,
    renderSelected,
    placeholder,
    renderComponent,
    variant
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "className", "open", "renderSelected", "placeholder", "renderComponent", "dataKey", "variant"]);

  const classes = useStyles();
  const renderValueComponent = renderSelected || renderComponent || null;
  return /*#__PURE__*/React.createElement(Row, _extends({
    ref: ref,
    fullWidth: true,
    wrap: false,
    className: cn(classes.root, className),
    align: "center",
    justify: "between",
    spacing: 2
  }, props), /*#__PURE__*/React.createElement(Row, {
    className: cn({
      [classes.active]: !isEmpty(value)
    })
  }, /*#__PURE__*/React.createElement(DropdownInputSelectedValue, {
    value: value,
    variant: variant,
    renderValue: renderValueComponent
  }), isEmpty(value) && /*#__PURE__*/React.createElement(TextField, null, " ", placeholder)), /*#__PURE__*/React.createElement(Icon, {
    svg: BtnArrowUp,
    className: cn(classes.icon, {
      [classes.rotate]: !open,
      [classes.active]: open
    }),
    width: 10,
    height: 10
  }));
});
DropdownLabelInput.displayName = 'DropdownLabelInput';
export default DropdownLabelInput;