import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import Button from "../Button";
import composeEvent from "../utils/composeEvent";
export const useStyles = createStyles(theme => ({
  root: {
    display: 'flex',
    justifyContent: 'flex-start',
    alignItems: 'center',
    width: '100%',
    padding: `0px ${theme.spacer(4)}px`,
    transition: theme.transition.create('background-color'),
    '&:last-child': {
      marginBottom: '0 !important'
    }
  },
  hover: {
    '&:hover': {
      borderRadius: 0,
      backgroundColor: theme.palette.action.selected
    }
  },
  height: {
    minHeight: 45
  },
  selected: {
    color: theme.palette.primary.default,
    backgroundColor: theme.palette.action.selected
  }
}), {
  name: 'ListItem'
});
const ListItem = React.forwardRef(function ListItem(_ref, ref) {
  let {
    className = '',
    style = {},
    children,
    onClick = noop,
    selected = false,
    variant = 'li',
    value,
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "style", "children", "onClick", "selected", "variant", "value", "jss"]);

  const classes = useStyles({
    jss
  });
  const isButton = variant === 'button';
  let listItemProps = {};
  const Component = isButton ? Button : 'li';

  const handleMenuItemClick = e => {
    composeEvent(e, {
      value
    });
    onClick(e, value);
  };

  if (isButton) {
    listItemProps = {
      onClick: handleMenuItemClick,
      value,
      component: 'span'
    };
  }

  return /*#__PURE__*/React.createElement(Component, _extends({}, props, listItemProps, {
    ref: ref,
    className: cn(classes.root, classes.height, {
      [classes.hover]: isButton,
      [classes.selected]: isButton && selected
    }, className),
    style: style
  }), children);
});
ListItem.propTypes = {
  /** The list item inner component to render */
  children: PropTypes.node.isRequired,

  /** Additional class to add to the list item component */
  className: PropTypes.string,

  /** Additional style to add to the list item component */
  style: PropTypes.shape(),

  /** Value to pass on list click (only relevant for clickable list items) */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** CB for handling list item click event */
  onClick: PropTypes.func,

  /** Indicator whether or not the list item is selected */
  selected: PropTypes.bool,

  /** Set the type of menu item - values = ['li', 'button'] */
  variant: PropTypes.oneOf(['li', 'button']),

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
ListItem.displayName = 'ListItem';
export default ListItem;