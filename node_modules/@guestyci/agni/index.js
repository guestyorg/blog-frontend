"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.createProxy = exports.create = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _axios = _interopRequireDefault(require("axios"));

var _envUtils = require("./env-utils");

var _permissions = require("./permissions");

var _configs = require("./configs");

var createConfig = function createConfig(env, isDevelopment) {
  return (0, _extends2["default"])({}, (0, _configs.airbnb)(env), (0, _configs.featureToggle)(env), (0, _configs.general)(env, isDevelopment), (0, _configs.overrides)(env));
};

var defaultOptions = {
  version: 'mailer',
  domain: undefined,
  isPublic: false
};

var buildURL = function buildURL(_ref) {
  var version = _ref.version,
      domain = _ref.domain,
      isPublic = _ref.isPublic,
      config = _ref.config;

  if (isPublic && !domain) {
    console.warn('Error while creating Resource. No domain supplied to isPublic, reverting to api/v2');
  }

  var API_GATEWAY = config.API_GATEWAY,
      API_GATEWAY_PUBLIC = config.API_GATEWAY_PUBLIC,
      PROXY_URL = config.PROXY_URL,
      MAILER_URL = config.MAILER_URL;

  if (version === 'v3') {
    var gateway = isPublic ? API_GATEWAY_PUBLIC : API_GATEWAY;

    if (domain[0] === '/') {
      return "".concat(gateway).concat(domain);
    }

    return "".concat(gateway, "/").concat(domain);
  }

  if (version === 'proxy') {
    return PROXY_URL;
  }

  return MAILER_URL;
};

var getVersion = function getVersion(options) {
  var domain = options.domain;

  if (typeof options === 'string' || domain) {
    return 'v3';
  }

  return 'mailer';
};

var baseURLForOptions = function baseURLForOptions(options) {
  var baseURL = options.baseURL,
      version = options.version,
      domain = options.domain,
      isPublic = options.isPublic,
      config = options.config;
  return baseURL || buildURL({
    version: version,
    domain: domain,
    isPublic: isPublic,
    config: config
  });
};

var create = function create() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;
  var token = options.token || (0, _envUtils.getToken)();

  var _parseToken = (0, _envUtils.parseToken)(token),
      parsedEnv = _parseToken.parsedEnv,
      userRoles = _parseToken.userRoles;

  var env = options.env || parsedEnv || 'staging';
  var version = options.version || getVersion(options);
  var development = options.development || window.location.hostname === 'localhost';
  var config = createConfig(env, development);
  var urlOptions = typeof options === 'string' ? {
    domain: options
  } : options;
  var baseURL = baseURLForOptions((0, _extends2["default"])({}, urlOptions, {
    config: config,
    version: version,
    env: env
  }));

  var http = _axios["default"].create(options);

  http.defaults.baseURL = baseURL; // adding CSRF header to all requests

  http.defaults.headers.common['g-aid-cs'] = 'G-89C7E-9FB65-B6F69';
  http.defaults.headers.common.Authorization = "Bearer ".concat(token);
  http.defaults.headers['post']['Content-Type'] = 'application/json';
  http.defaults.headers['put']['Content-Type'] = 'application/json';
  http.defaults.headers['patch']['Content-Type'] = 'application/json';

  if (env === 'production') {
    http.interceptors.response.use(function (response) {
      return response;
    }, function (error) {
      var _error$response = error.response;
      _error$response = _error$response === void 0 ? {} : _error$response;
      var status = _error$response.status;
      if (status === 401) window.location.replace('/auth/logout');
      return Promise.reject(error);
    });
  }

  var roles = (0, _permissions.createRoles)(userRoles);
  return {
    config: config,
    env: env,
    development: development,
    version: version,
    api: http,
    roles: roles
  };
};

exports.create = create;

var createProxy = function createProxy(options) {
  var newOptions = (0, _extends2["default"])({}, options, {
    version: 'proxy'
  });
  return create(newOptions);
};

exports.createProxy = createProxy;
var _default = {
  create: create,
  createProxy: createProxy
};
exports["default"] = _default;