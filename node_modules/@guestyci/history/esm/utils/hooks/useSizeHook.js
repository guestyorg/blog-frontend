import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useState, useCallback, useLayoutEffect } from 'react';

var getSize = function getSize(el) {
  return {
    width: (el === null || el === void 0 ? void 0 : el.offsetWidth) || 0,
    height: (el === null || el === void 0 ? void 0 : el.offsetHeight) || 0
  };
};

export default (function (ref, isActive) {
  var _useState = useState(getSize(ref === null || ref === void 0 ? void 0 : ref.current)),
      _useState2 = _slicedToArray(_useState, 2),
      size = _useState2[0],
      setSize = _useState2[1];

  var resizeTimer;
  var handleResize = useCallback(function () {
    if ((ref === null || ref === void 0 ? void 0 : ref.current) && isActive) {
      if (resizeTimer) clearTimeout(resizeTimer);
      resizeTimer = setTimeout(function () {
        setSize(getSize(ref.current));
      }, 300);
    }
  }, [ref, isActive]);
  useLayoutEffect(function () {
    var _window;

    if (!(ref === null || ref === void 0 ? void 0 : ref.current) || !isActive) {
      return;
    }

    handleResize();

    if (typeof ((_window = window) === null || _window === void 0 ? void 0 : _window.ResizeObserver) === 'function') {
      var resizeObserver = new window.ResizeObserver(function () {
        handleResize();
      });
      resizeObserver.observe(ref.current);
      return function () {
        resizeObserver.disconnect(ref.current);
        resizeObserver = null;
      };
    }

    window.addEventListener('resize', handleResize);
    return function () {
      if ((ref === null || ref === void 0 ? void 0 : ref.current) && isActive && resizeTimer) {
        clearTimeout(resizeTimer);
      }

      window.removeEventListener('resize', handleResize);
    };
  }, [ref.current, isActive]);
  return size;
});