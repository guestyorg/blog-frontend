import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import React, { useContext, useMemo } from 'react';
import PropTypes from 'prop-types';
import memoize from '@guestyci/memoize';
import FormFieldComponent from "./FormFieldComponent";
import { required as requiredFn } from "../validators";
import { FormProvider } from "../enums";
import FormContext from "../Form/FormContext";
var buildValidators = memoize(function (validations, required) {
  return required ? [requiredFn].concat(_toConsumableArray(validations)) : validations;
});
var composeValidators = memoize(function (validators) {
  return function (value) {
    return validators.reduce(function (error, validator) {
      return error || validator(value);
    }, undefined);
  };
});
export var getFormFieldValidation = function getFormFieldValidation(validations, required, provider) {
  return provider === FormProvider.Redux ? buildValidators(validations, required) : composeValidators(required ? [requiredFn].concat(_toConsumableArray(validations)) : validations);
};

var FormField = function FormField(_ref) {
  var name = _ref.name,
      label = _ref.label,
      info = _ref.info,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      validate = _ref.validate,
      field = _ref.field,
      required = _ref.required,
      props = _objectWithoutProperties(_ref, ["name", "label", "info", "children", "className", "style", "validate", "field", "required"]);

  var _useContext = useContext(FormContext),
      provider = _useContext.provider,
      fieldInstance = _useContext.fieldInstance;

  var Field = field || fieldInstance;
  var validations = useMemo(function () {
    return getFormFieldValidation(validate, required, provider);
  }, [provider, validate, required]);
  return /*#__PURE__*/React.createElement(Field, _extends({
    name: name,
    style: style,
    className: className,
    validate: validations,
    component: FormFieldComponent,
    required: required,
    label: label,
    info: info
  }, props, {
    "data-qa": "form-field"
  }), children);
};

FormField.defaultProps = {
  label: null,
  info: null,
  className: '',
  field: undefined,
  style: {},
  validate: [],
  required: false
};
FormField.propTypes = {
  /** form field name to validate accordingly */
  name: PropTypes.string.isRequired,

  /** the redux form field props - required due to redux-form limitations */
  field: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Form field level validations to run - to use required, use the boolean required prop - Must be an Array */
  validate: PropTypes.arrayOf(PropTypes.func),

  /** Form element to render */
  children: PropTypes.node.isRequired,

  /** form field label */
  label: PropTypes.string,

  /** form field Info description */
  info: PropTypes.string,

  /** Form field root level additional class */
  className: PropTypes.string,

  /** Form field root level additional class */
  style: PropTypes.shape(),

  /** Form field component level additional class */
  required: PropTypes.bool
};
export var FieldComponent = FormField;
export default FormField;