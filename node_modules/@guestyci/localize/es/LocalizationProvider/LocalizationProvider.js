import React, { Component } from 'react';
import PropTypes from 'prop-types';
import moment from 'moment';
import memoize from '@guestyci/memoize';
import { intl, warningHandler, locales } from "../utils/i18nUtility";
import LocalizationContext from "./LocalizationContext";
const lang = window.localStorage.getItem('lang') || 'en-US';

class LocalizationProvider extends Component {
  constructor(props) {
    super(props);
    this.getIsEnglish = memoize((language = '') => language.split('-')[0] === 'en');
    this.state = {
      isLocalizationReady: false
    };
  }

  componentDidMount() {
    const {
      language
    } = this.props;
    this.loadLocales(language || lang);
    moment.locale(language || lang);
  }

  componentDidUpdate(prevProps) {
    const {
      language
    } = this.props;

    if (prevProps.language !== language) {
      this.loadLocales(language || lang);
      moment.locale(language || lang);
    }
  }

  loadLocales(language) {
    this.setState({
      isLocalizationReady: false
    });
    intl.init({
      currentLocale: language,
      locales,
      warningHandler,
      fallbackLocale: 'en-US'
    }).then(() => {
      this.setState({
        isLocalizationReady: true
      });
    });
  }

  render() {
    const {
      children,
      language
    } = this.props;
    const {
      isLocalizationReady
    } = this.state;
    const isEnglish = this.getIsEnglish(language || lang);
    return React.createElement(LocalizationContext.Provider, {
      value: {
        language: language || lang,
        isEnglish
      }
    }, isLocalizationReady && children);
  }

}

LocalizationProvider.defaultProps = {
  language: undefined
};
LocalizationProvider.propTypes = {
  language: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]).isRequired
};
export default LocalizationProvider;