import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';

function isInRect(ref, event) {
  const {
    top,
    bottom,
    left,
    right
  } = ref.getBoundingClientRect();
  const {
    clientX,
    clientY
  } = event;
  return clientX >= left && clientX <= right && clientY >= top && clientY <= bottom;
}
/**
 * Create a wrapper compose to support click outside functionality functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


const ClickOutsideListener = ({
  onClickOutside = null,
  className = '',
  children,
  style = {}
}) => {
  const clickOutsideRef = useRef(null);
  useEffect(() => {
    if (onClickOutside) {
      const handleClickOutside = event => {
        const isCurrentTarget = clickOutsideRef.current.contains(event.target);

        if (clickOutsideRef && !isCurrentTarget && !isInRect(clickOutsideRef.current, event)) {
          onClickOutside();
        }
      };

      document.addEventListener('mousedown', handleClickOutside);
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [onClickOutside]);
  return onClickOutside ? /*#__PURE__*/React.createElement("span", {
    ref: clickOutsideRef,
    className: className,
    style: style
  }, children) : children;
};

ClickOutsideListener.propTypes = {
  children: PropTypes.node.isRequired,
  onClickOutside: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.shape()
};
export default ClickOutsideListener;