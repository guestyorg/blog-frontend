import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _extends from "@babel/runtime/helpers/esm/extends";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { uuid } from "../../utils/commonUtility";

function initUUIDsForChildren(children) {
  return children.map(function () {
    return uuid();
  });
}

function initOptions(children, isMulti) {
  var uuids = initUUIDsForChildren(children);
  var checkedFlag = false;
  var childrenStructure = new Map(children.map(function (child, index) {
    if (child.props.checked) {
      checkedFlag = true;
    }

    return [uuids[index], {
      child: child,
      checked: child.props.checked,
      uid: uuids[index]
    }];
  }));

  if (!isMulti && !checkedFlag && childrenStructure.size !== 0) {
    childrenStructure.set(childrenStructure.keys().next().value, _extends({}, childrenStructure.values().next().value, {
      checked: true
    }));
  }

  return childrenStructure;
}

function selectedKeyOnInit(data) {
  var children = Array.from(data.values());

  if (!children.length) {
    return null;
  }

  var child = children.find(function (val) {
    return val.checked;
  });

  if (!child) {
    return children[0].uid;
  }

  return child.uid;
}
/**
 * When the user passes a child you'll get it as an
 * object and not as array of objects, this function fix the structure.
 * @param children
 * @returns {*[]}
 */


function checkChildrenSize(children) {
  return Array.isArray(children) ? children : [children];
}
/**
 * Create a wrapper compose to support multiple selection functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


var withSelectionGroup = function withSelectionGroup(ComposedComponent) {
  var _temp;

  return _temp = /*#__PURE__*/function (_Component) {
    _inherits(_temp, _Component);

    var _super = _createSuper(_temp);

    function _temp(props) {
      var _this;

      _classCallCheck(this, _temp);

      _this = _super.call(this, props);

      _this.getNumberOfChecked = function () {
        var options = _this.state.options;
        var isMulti = _this.props.isMulti;
        var checkedItems = [];

        if (isMulti) {
          options.forEach(function (value) {
            if (value.checked) {
              checkedItems.push(value.child.props.value);
            }
          });
        }

        return checkedItems.length > 0 ? checkedItems : undefined;
      };

      _this.handleOptionClick = function (optionId) {
        var _this$state = _this.state,
            options = _this$state.options,
            lastChecked = _this$state.lastChecked;
        var _this$props$isMulti = _this.props.isMulti,
            isMulti = _this$props$isMulti === void 0 ? false : _this$props$isMulti;

        if (!isMulti) {
          options.set(lastChecked, _extends({}, options.get(lastChecked), {
            checked: false
          }));
          options.set(optionId, _extends({}, options.get(optionId), {
            checked: true
          }));
        } else {
          var state = options.get(optionId).checked;
          options.set(optionId, _extends({}, options.get(optionId), {
            checked: !state
          }));
        }

        _this.setState({
          options: options,
          lastChecked: optionId
        });
      };

      var data = initOptions(checkChildrenSize(props.children), props.isMulti);
      _this.state = {
        options: data,
        lastChecked: props.isMulti ? '' : selectedKeyOnInit(data)
      };
      return _this;
    }

    _createClass(_temp, [{
      key: "render",
      value: function render() {
        var options = this.state.options;
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
          options: options,
          onOptionClicked: this.handleOptionClick,
          selectedCheckboxesWhenMulti: this.getNumberOfChecked()
        })));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var newState = null;

        if (props.children && props.children.length > 0 && state.options.size !== props.children.length) {
          newState = {
            options: initOptions(checkChildrenSize(props.children), props.isMulti)
          };
        }

        return newState;
      }
    }]);

    return _temp;
  }(Component), _temp;
};

export default withSelectionGroup;