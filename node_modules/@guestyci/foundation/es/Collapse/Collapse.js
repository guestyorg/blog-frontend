import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";

/* eslint no-param-reassign: 0 */
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Transition from 'react-transition-group/Transition';
import createStyles from "../createStyles";
const useStyles = createStyles(() => ({
  content: {
    width: '100%',
    overflow: 'hidden',
    height: '0px'
  }
}), {
  name: 'Collapse'
});
const Collapse = React.forwardRef(function Collapse(_ref, ref) {
  let {
    children,
    show,
    className = '',
    duration = 200,
    onEntered,
    onExited
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "show", "className", "duration", "onEntered", "onExited"]);

  const classes = useStyles();

  const handleEnter = (node, isAppearing) => {
    if (isAppearing) {
      node.style.height = 'auto';
    } else {
      node.style.height = 0;
    }
  };

  const handleEntering = node => {
    const height = node.scrollHeight;
    node.style.transitionDuration = `${duration}ms`;
    node.style.height = `${height}px`;
  };

  const handleEntered = (node, isAppearing) => {
    node.style.height = 'auto';

    if (onEntered) {
      onEntered(node, isAppearing);
    }
  };

  const handleExit = node => {
    const height = node.scrollHeight;
    node.style.height = `${height}px`;
  };

  const handleExiting = node => {
    setTimeout(() => {
      node.style.transitionDuration = `${duration}ms`;
      node.style.height = 0;
    }, 0);
  };

  return /*#__PURE__*/React.createElement(Transition, _extends({
    in: show,
    ref: ref,
    appear: true,
    timeout: duration,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onExit: handleExit,
    onExiting: handleExiting,
    onEntered: handleEntered,
    onExited: onExited
  }, props), /*#__PURE__*/React.createElement("div", {
    className: cn(classes.content, className)
  }, children));
});
Collapse.propTypes = {
  /** Indicator whether or not collapse should be open */
  show: PropTypes.bool.isRequired,

  /** Children to render when collapse is open */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** Duration of the animation */
  duration: PropTypes.number,

  /** Function to be executed when the collapse is opened
   * (node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /** Function to be executed when the collapse is closed
   * (node: HtmlElement, isAppearing: bool) -> void
   */
  onExited: PropTypes.func,

  /** Additional class for root level */
  className: PropTypes.string
};
Collapse.displayName = 'Collapse';
export default Collapse;