import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
/**
 * Create a wrapper compose to support Accordion functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */

var withCollapse = function withCollapse(ComposedComponent) {
  var _temp;

  return _temp = /*#__PURE__*/function (_Component) {
    _inherits(_temp, _Component);

    var _super = _createSuper(_temp);

    function _temp(props) {
      var _this;

      _classCallCheck(this, _temp);

      _this = _super.call(this, props);

      _this.closeCollapse = function () {
        var onVisibilityChange = _this.props.onVisibilityChange;

        _this.setState({
          show: false
        });

        onVisibilityChange(false);
      };

      _this.openCollapse = function (event) {
        var onVisibilityChange = _this.props.onVisibilityChange;

        if (event) {
          event.stopPropagation();
        }

        _this.setState({
          show: true
        });

        onVisibilityChange(true);
      };

      _this.toggleCollapse = function (event) {
        var onVisibilityChange = _this.props.onVisibilityChange;
        var show = _this.state.show;

        if (event) {
          event.stopPropagation();
        }

        onVisibilityChange(!show);

        _this.setState(function (prevState) {
          return {
            show: !prevState.show
          };
        });
      };

      _this.state = {
        show: false
      };
      return _this;
    }

    _createClass(_temp, [{
      key: "render",
      value: function render() {
        var show = this.state.show;
        return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
          isCollapsed: !show,
          closeCollapse: this.closeCollapse,
          openCollapse: this.openCollapse,
          toggleCollapse: this.toggleCollapse
        }));
      }
    }]);

    return _temp;
  }(Component), _temp;
};

Component.propTypes = {
  onVisibilityChange: PropTypes.func
};
Component.defaultProps = {
  onVisibilityChange: noop
};
export default withCollapse;