"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Popper = _interopRequireDefault(require("../legacy/Popper"));

var _Paper = _interopRequireDefault(require("../Paper"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _colors = require("../theme/colors");

var _enums = require("../enums");

var _ClickOutsideListener = _interopRequireDefault(require("../ClickOutsideListener"));

var _useComposeRefs = _interopRequireDefault(require("../useComposeRefs"));

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    enter: {
      opacity: 0.01,
      transform: 'scale(.85)'
    },
    enterActive: {
      transform: 'scale(1)',
      opacity: 1,
      transition: theme.transition.create('all', {
        duration: 200
      })
    },
    enterDone: {
      transform: 'scale(1)',
      opacity: 1
    },
    exit: {
      opacity: 1,
      transform: 'scale(1)'
    },
    exitDone: {
      opacity: 0,
      transform: 'scale(.85)'
    },
    exitActive: {
      transform: 'scale(.85)',
      opacity: 0.01,
      transition: theme.transition.create('all', {
        duration: 200
      })
    },
    content: {
      padding: theme.spacer(2),
      borderRadius: 3,
      backgroundColor: theme.palette.secondary["default"],
      color: _colors.white
    },
    maxWidth: {
      maxWidth: 350
    }
  };
}, {
  name: 'Popover'
});
exports.useStyles = useStyles;

var Popover = _react["default"].forwardRef(function Popover(_ref, ref) {
  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$body = _ref.body,
      body = _ref$body === void 0 ? null : _ref$body,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? _enums.OriginDirectionType.Top : _ref$placement,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? _noop["default"] : _ref$onClose,
      _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      anchor = _ref.anchor,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? 15 : _ref$offset,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      _ref$backdrop = _ref.backdrop,
      backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$popperProps = _ref.popperProps,
      popperProps = _ref$popperProps === void 0 ? {} : _ref$popperProps,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "className", "body", "style", "placement", "onClose", "open", "anchor", "offset", "fullWidth", "backdrop", "jss", "popperProps"]);
  var popoverRef = (0, _react.useRef)();
  var composedRef = (0, _react.useCallback)((0, _useComposeRefs["default"])(anchor, popoverRef), []);
  var classes = useStyles({
    jss: jss
  });

  var _placement$split = placement.split(' '),
      _placement$split2 = (0, _slicedToArray2["default"])(_placement$split, 2),
      originDirection = _placement$split2[0],
      _placement$split2$ = _placement$split2[1],
      anchorDirection = _placement$split2$ === void 0 ? 'center' : _placement$split2$;

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("span", {
    ref: composedRef
  }, children), body && /*#__PURE__*/_react["default"].createElement(_Popper["default"], (0, _extends2["default"])({}, popperProps, {
    offset: offset,
    trigger: open,
    backdrop: backdrop,
    transition: {
      enter: classes.enter,
      enterActive: classes.enterActive,
      enterDone: classes.enterActive,
      exit: classes.exit,
      exitActive: classes.exitActive,
      exitDone: classes.exitDone
    },
    anchorDirection: anchorDirection,
    originDirection: originDirection,
    anchor: popoverRef
  }), /*#__PURE__*/_react["default"].createElement(_ClickOutsideListener["default"], {
    delay: 250,
    onClickOutside: onClose
  }, /*#__PURE__*/_react["default"].createElement(_Paper["default"], (0, _extends2["default"])({
    ref: ref
  }, props, {
    elevation: 2,
    className: (0, _classnames["default"])(classes.content, (0, _defineProperty2["default"])({}, classes.maxWidth, !fullWidth), className),
    style: style
  }), body))));
});

Popover.propTypes = {
  /** Control option for anchor in popover */
  anchor: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node, _propTypes["default"].shape({
    current: _propTypes["default"].object
  })]),

  /** Add backdrop to Popover */
  backdrop: _propTypes["default"].bool,

  /** Bool - Boolean defining whether or not to toggle the popover */
  open: _propTypes["default"].bool.isRequired,

  /** Node - the component wrapped by the tooltip */
  children: _propTypes["default"].node.isRequired,

  /** String || React Element - The tooltip body */
  body: _propTypes["default"].node,

  /** onClose  - Function to support the popover toggle */
  onClose: _propTypes["default"].func,

  /** Additional component class */
  className: _propTypes["default"].string,

  /** Additional component style */
  style: _propTypes["default"].shape(),

  /** Popover placement supporting:
   *  (top, bottom, left, right, top start, top end, bottom start, bottom end, left start, left end, right start, right end )
   *  */
  placement: _propTypes["default"].string,

  /** Set the popover content to fit to its children full width */
  fullWidth: _propTypes["default"].bool,

  /** JSS overrides */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** Additional Popper props */
  popperProps: _propTypes["default"].shape(),

  /** offset position from anchor */
  offset: _propTypes["default"].number
};
Popover.displayName = 'Popover';
var _default = Popover;
exports["default"] = _default;