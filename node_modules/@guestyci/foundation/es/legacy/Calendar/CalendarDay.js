import _extends from "@babel/runtime/helpers/esm/extends";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import isEmpty from 'lodash/isEmpty';
import { checkReservationDetails, formatCalendarDay, formatCalendarMonth, getReservationTitle, getStayDateTime, isInvalidPlannedDate } from "./calendarHelper";
import withHover from "../../withHover/withHover";
import Tooltip from "../Tooltip/Tooltip";
import { CalendarDayStatus } from "../../enums/enums";
import { link as linkTo } from "../../utils/commonUtility";
import CalendarTooltip from "./CalendarTooltip";
import CalendarDaySMBody from "./CalendarDaySMBody";
import CalendarDayLGBody from "./CalendarDayLGBody";

class CalendarDay extends PureComponent {
  constructor(props) {
    super(props);

    this.goToLink = () => {
      const {
        calendarDayData
      } = this.state;

      if ((calendarDayData.dayStatus === CalendarDayStatus.Booked || calendarDayData.dayStatus === CalendarDayStatus.Reserved || calendarDayData.blocks && (calendarDayData.blocks.sr || calendarDayData.blocks.o)) && calendarDayData.link) {
        linkTo(calendarDayData.link);
      }
    };

    this.serializeReservationData = (reservation, status, isReserved, isOwner, isSR) => {
      const data = _extends({}, reservation);

      if (!isEmpty(data)) {
        data.plannedArrival = getStayDateTime(data.checkIn, data.plannedArrival);

        if (isReserved) {
          data.title = getReservationTitle(data.confirmationCode, data.source, isOwner, isSR);
        }

        data.plannedDeparture = getStayDateTime(data.checkOut, data.plannedDeparture);
        data.isValidCheckIn = isInvalidPlannedDate(data.plannedArrival, data.checkIn);
        data.isValidCheckOut = isInvalidPlannedDate(data.checkOut, data.plannedDeparture);
      }

      return data;
    };

    this.showTooltip = (sm, cost, availableNotes, unavailableBlocks, isReserved) => sm && !isEmpty(cost) || !isEmpty(availableNotes) || !isEmpty(unavailableBlocks) || isReserved;

    this.renderCalendarTooltip = () => {
      const {
        calendarDayData
      } = this.state;
      const {
        sm
      } = this.props;
      const {
        cost,
        availableNotes,
        dayStatus,
        isReserved,
        unavailableBlocks,
        isOwner,
        isSR,
        reservation
      } = calendarDayData;
      const data = this.serializeReservationData(reservation, dayStatus, isReserved, isOwner, isSR);

      if (this.showTooltip(sm, cost, availableNotes, unavailableBlocks, isReserved)) {
        return /*#__PURE__*/React.createElement(CalendarTooltip, {
          data: data,
          blocks: unavailableBlocks,
          isReserved: isReserved,
          price: sm ? cost : undefined,
          note: availableNotes
        });
      }

      return null;
    };

    this.state = {
      d: formatCalendarDay(props.day, true),
      m: formatCalendarMonth(props.day, true),
      calendarDayData: {}
    };
  }

  componentDidMount() {
    const {
      calendar,
      day,
      activeDates
    } = this.props;
    this.initCalendarDay(calendar, day, activeDates);
  }

  componentDidUpdate(prevProps) {
    const {
      calendar,
      day,
      activeDates
    } = this.props;

    if (isEmpty(prevProps.calendar) && !isEmpty(calendar) || prevProps.day !== day) {
      this.initCalendarDay(calendar, day, activeDates);
    }
  }

  initCalendarDay(calendar, day, activeDates) {
    const calendarDayData = checkReservationDetails(calendar, day, activeDates);
    this.setState({
      calendarDayData
    });
  }

  render() {
    const {
      onHoverEnter,
      onHoverLeave,
      isHovering,
      sm,
      isFetching,
      tooltipBoundariesElement
    } = this.props;
    const {
      d,
      m,
      calendarDayData
    } = this.state;
    const {
      availableNotes,
      startStyles,
      endStyles,
      endOpacity,
      startOpacity,
      startOfBlock,
      color,
      link,
      guest,
      showPrice,
      cost,
      isAvailable,
      showAvatar
    } = calendarDayData;
    return /*#__PURE__*/React.createElement("div", {
      className: cn('DayPicker-Day--wrap', {
        lg: !sm
      }),
      "data-qa": "calendar-day"
    }, !isFetching && startStyles && /*#__PURE__*/React.createElement("div", {
      className: cn('DayPicker-Day--range', startStyles),
      style: {
        opacity: startOpacity
      }
    }), !isFetching && endStyles && /*#__PURE__*/React.createElement("div", {
      className: cn('DayPicker-Day--range', endStyles),
      style: {
        opacity: endOpacity
      }
    }), /*#__PURE__*/React.createElement(Tooltip, {
      boundariesElement: tooltipBoundariesElement,
      id: `cell-${sm ? 'sm' : 'lg'}-${d}-${m}`,
      containerClassName: "w-fill h-fill",
      body: this.renderCalendarTooltip(),
      delay: {
        show: 300,
        hide: 250
      }
    }, /*#__PURE__*/React.createElement("div", {
      role: "presentation",
      onClick: this.goToLink,
      onMouseEnter: onHoverEnter,
      onMouseLeave: onHoverLeave,
      className: cn('flex-center flex-column font-size-xs calendar-day-content w-fill h-fill', {
        'text-hover-blue': isAvailable
      }, `text-${color}`, {
        clickable: link
      })
    }, sm ? /*#__PURE__*/React.createElement(CalendarDaySMBody, {
      isHovering: isAvailable && isHovering,
      hasNote: availableNotes,
      day: isFetching ? '-' : d
    }) : /*#__PURE__*/React.createElement(CalendarDayLGBody, {
      isHovering: isAvailable && isHovering,
      hasNote: availableNotes,
      day: isFetching ? '-' : d,
      price: showPrice ? cost : undefined,
      personOpacity: startOpacity,
      startOfBlock: startOfBlock,
      guest: guest,
      showAvatar: showAvatar
    }))));
  }

}

CalendarDay.defaultProps = {
  isFetching: false,
  sm: false,
  tooltipBoundariesElement: undefined
};
CalendarDay.propTypes = {
  day: PropTypes.instanceOf(Date).isRequired,
  calendar: PropTypes.shape().isRequired,
  activeDates: PropTypes.shape().isRequired,
  sm: PropTypes.bool,
  isFetching: PropTypes.bool,
  tooltipBoundariesElement: PropTypes.string
};
export default withHover(CalendarDay);