import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { uuid } from "../../utils/commonUtility";
import Row from "../Row/Row";
import TextField from "../TextField/TextField";

var Switch = /*#__PURE__*/function (_Component) {
  _inherits(Switch, _Component);

  var _super = _createSuper(Switch);

  function Switch(props) {
    var _this;

    _classCallCheck(this, Switch);

    _this = _super.call(this, props);

    _this.toggle = function (_ref) {
      var target = _ref.target;
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          id = _this$props.id,
          name = _this$props.name;
      onChange(target.checked, id || name);
    };

    _this.state = {
      id: props.id || uuid()
    };
    return _this;
  }

  _createClass(Switch, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          label = _this$props2.label,
          textClassName = _this$props2.textClassName,
          on = _this$props2.on,
          isDisabled = _this$props2.isDisabled,
          className = _this$props2.className,
          disabled = _this$props2.disabled;
      var id = this.state.id;
      return /*#__PURE__*/React.createElement(Row, {
        spacing: "sm",
        className: cn('switch w-inherit', className),
        "data-qa": "switch"
      }, /*#__PURE__*/React.createElement("label", {
        htmlFor: id,
        className: cn('switch', {
          disabled: disabled || isDisabled
        })
      }, /*#__PURE__*/React.createElement("input", {
        id: id,
        type: "checkbox",
        disabled: disabled || isDisabled,
        onChange: this.toggle,
        checked: on
      }), /*#__PURE__*/React.createElement("span", {
        className: "slider"
      })), label && /*#__PURE__*/React.createElement(TextField, {
        color: on ? 'blue' : 'muted',
        className: cn('switch-label', textClassName)
      }, label));
    }
  }]);

  return Switch;
}(Component);

Switch.propTypes = {
  label: PropTypes.string,

  /** Switch status if it's on or off */
  on: PropTypes.bool.isRequired,

  /** classes to provide for the component */
  className: PropTypes.string,

  /** callback function to call when switch state change */
  onChange: PropTypes.func.isRequired,

  /** String, class for the text */
  textClassName: PropTypes.string,

  /** name for component */
  name: PropTypes.string,

  /** id for component */
  id: PropTypes.string,

  /** Indicator whether or not is disabled */
  disabled: PropTypes.bool,

  /** Indicator whether or not switch is disabled - Deprecated - use disabled */
  isDisabled: PropTypes.bool
};
Switch.defaultProps = {
  className: '',
  label: null,
  textClassName: '',
  name: '',
  id: undefined,
  disabled: false,
  isDisabled: false
};
export default Switch;