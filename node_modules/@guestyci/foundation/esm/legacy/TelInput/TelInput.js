import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import isObject from 'lodash/isObject';
import cn from 'classnames';
import InputStarDeleteActionAddOn from "../baseInput/InputStarDeleteActionAddon";
import withHover from "../../withHover";
import IntlTelInputWrapperLazy from "./IntlTelInputWrapperLazy";

var TelInput = /*#__PURE__*/function (_Component) {
  _inherits(TelInput, _Component);

  var _super = _createSuper(TelInput);

  function TelInput(_props) {
    var _this;

    _classCallCheck(this, TelInput);

    _this = _super.call(this, _props);

    _this.onChangePhoneNumber = function (isPhoneNumberValid, newValue, object, formatted) {
      if (_this.isComponentMounted) {
        var _this$props = _this.props,
            id = _this$props.id,
            name = _this$props.name,
            onChange = _this$props.onChange;

        _this.setState({
          value: newValue,
          formatted: formatted
        });

        onChange({
          value: formatted,
          isTelInput: true,
          isValid: isPhoneNumberValid
        }, id || name);
      }
    };

    _this.onSelectFlag = function (value, object, formatted, isPhoneNumberValid) {
      var _this$props2 = _this.props,
          id = _this$props2.id,
          name = _this$props2.name,
          onChange = _this$props2.onChange;
      onChange({
        value: formatted,
        isTelInput: true,
        isValid: isPhoneNumberValid
      }, id || name);
    };

    _this.getInitialValue = function (props) {
      if (props.defaultValue) {
        return isObject(props.defaultValue) ? props.defaultValue.value : props.defaultValue;
      }

      return isObject(props.value) ? props.value.value : props.value;
    };

    _this.customPlaceholder = function (placeholder) {
      return "e.g. ".concat(placeholder);
    };

    var value = _this.getInitialValue(_props);

    _this.state = {
      value: value,
      formatted: value
    };
    _this.isComponentMounted = false; // control onChange callback before component init

    _this.onIntlTelInputMount = _this.onIntlTelInputMount.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(TelInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var value = this.props.value;
      var _this$state = this.state,
          formatted = _this$state.formatted,
          stateValue = _this$state.value;
      var prevVal = !isObject(prevProps.value) ? prevProps.value : prevProps.value.value;
      var val = !isObject(value) ? value : value.value;

      if (val !== prevVal && val !== formatted && val !== stateValue) {
        this.setPhoneNumber(val);
      }
    }
  }, {
    key: "onIntlTelInputMount",
    value: function onIntlTelInputMount() {
      if (!this.isComponentMounted) {
        this.isComponentMounted = true;
      }
    }
  }, {
    key: "setPhoneNumber",
    value: function setPhoneNumber(val) {
      this.setState({
        formatted: val,
        value: val
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          className = _this$props3.className,
          style = _this$props3.style,
          withActions = _this$props3.withActions,
          onTrashClick = _this$props3.onTrashClick,
          onStarClick = _this$props3.onStarClick,
          isPrimary = _this$props3.isPrimary,
          inputClassName = _this$props3.inputClassName,
          onHoverEnter = _this$props3.onHoverEnter,
          onHoverLeave = _this$props3.onHoverLeave,
          isHovering = _this$props3.isHovering,
          disabled = _this$props3.disabled,
          name = _this$props3.name,
          id = _this$props3.id;
      var value = this.state.value;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('d-flex', 'action-input height-46', className),
        onMouseEnter: onHoverEnter,
        onMouseLeave: onHoverLeave,
        style: style,
        "data-qa": "tel-input"
      }, /*#__PURE__*/React.createElement(IntlTelInputWrapperLazy, {
        onIntlTelInputMount: this.onIntlTelInputMount,
        fieldId: id,
        fieldName: name,
        disabled: disabled,
        value: value,
        onSelectFlag: this.onSelectFlag,
        containerClassName: "intl-tel-input w-fill",
        inputClassName: cn('flex-1 h-100', inputClassName, {
          'action-input': withActions
        }, 'form-control', 'w-fill'),
        onPhoneNumberChange: this.onChangePhoneNumber,
        formatOnInit: false,
        customPlaceholder: this.customPlaceholder,
        format: true
      }), /*#__PURE__*/React.createElement(InputStarDeleteActionAddOn, {
        isPrimary: isPrimary,
        disabled: disabled,
        show: withActions && isHovering,
        onStar: onStarClick,
        onTrash: onTrashClick,
        name: name,
        id: id
      }));
    }
  }]);

  return TelInput;
}(Component);

TelInput.defaultProps = {
  onChange: function onChange() {},
  onTrashClick: function onTrashClick() {},
  onStarClick: function onStarClick() {},
  onBlur: function onBlur() {},
  withActions: false,
  isPrimary: false,
  className: '',
  inputClassName: '',
  style: {},
  disabled: false,
  value: '',
  defaultValue: ''
};
TelInput.propTypes = {
  /** Cb for input change - params: {value: String, isValid: Boolean}, id|name {String | number} */
  onChange: PropTypes.func,

  /**  Cb for clicking on the trash icon */
  onTrashClick: PropTypes.func,

  /** Cb for clicking on the star (set primary) icon */
  onStarClick: PropTypes.func,

  /** Indicator whether to show the star/trash actions */
  withActions: PropTypes.bool,

  /** Boolean setting the email as primary */
  isPrimary: PropTypes.bool,

  /** Additional class to the top component level */
  className: PropTypes.string,

  /** Input level addition class */
  inputClassName: PropTypes.string,

  /** Additional style to the top component level */
  style: PropTypes.shape(),

  /** Boolean disable/enable component */
  disabled: PropTypes.bool,

  /** on Blur call back function */
  onBlur: PropTypes.func,

  /** value for controlled component */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /** default value for component */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()])
};
/** Work around to fix storybook HOC propTypes bug  - DO NOT IMPORT THIS */

export var TelComponent = TelInput;
export default withHover(TelInput);