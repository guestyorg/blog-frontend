"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _Placeholder = _interopRequireDefault(require("../../Placeholder"));

var _Tooltip = _interopRequireDefault(require("../../Tooltip"));

var _commonUtility = require("../../../utils/commonUtility");

var _useOverflowBoundaries = _interopRequireDefault(require("../../../useOverflowBoundaries"));

var _createStyles = _interopRequireDefault(require("../../../createStyles"));

var _TextField = _interopRequireDefault(require("../../../TextField"));

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      backgroundColor: 'inherit',
      display: 'table-cell',
      overflow: 'none',
      verticalAlign: 'middle',
      borderBottom: "1px solid ".concat(theme.palette.border)
    },
    cellContent: {
      padding: theme.spacer(3)
    }
  };
}, {
  name: 'Cell'
});

var Cell = _react["default"].forwardRef(function Cell(_ref, ref) {
  var children = _ref.children,
      isLoading = _ref.isLoading,
      overflowEllipsis = _ref.overflowEllipsis,
      overflowEllipsisTooltip = _ref.overflowEllipsisTooltip,
      className = _ref.className,
      contentClassName = _ref.contentClassName,
      style = _ref.style,
      width = _ref.width,
      positionLeft = _ref.positionLeft,
      positionRight = _ref.positionRight,
      Placeholder = _ref.Placeholder,
      jss = _ref.jss,
      tooltipId = _ref.tooltipId,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style", "width", "positionLeft", "positionRight", "Placeholder", "jss", "tooltipId"]);
  var classes = useStyles({
    jss: jss
  });

  var _useOverflowBoundarie = (0, _useOverflowBoundaries["default"])(),
      _useOverflowBoundarie2 = (0, _slicedToArray2["default"])(_useOverflowBoundarie, 2),
      isOverflowed = _useOverflowBoundarie2[0],
      overflowRef = _useOverflowBoundarie2[1];

  var tooltipBody = overflowEllipsis && isOverflowed ? overflowEllipsisTooltip : null;
  var layoutStyles = (0, _extends2["default"])({}, (0, _commonUtility.isNumber)(positionRight) && {
    right: "".concat(positionRight, "px")
  }, {}, (0, _commonUtility.isNumber)(positionLeft) && {
    left: "".concat(positionLeft, "px")
  }, {}, (0, _commonUtility.isNumber)(width) && {
    width: "".concat(width, "px")
  });
  return /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({}, props, {
    ref: ref,
    className: (0, _classnames["default"])('cell', classes.root, className),
    style: (0, _extends2["default"])({}, style, {}, layoutStyles)
  }), /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
    id: tooltipId,
    body: tooltipBody
  }, /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
    overflowEllipsis: overflowEllipsis,
    className: (0, _classnames["default"])('cell-content', classes.cellContent, contentClassName),
    ref: overflowRef
  }, isLoading ? Placeholder : children)));
});

Cell.propTypes = {
  /** content of a cell */
  children: _propTypes.node,

  /** indicator that cell is yet to receive data */
  isLoading: _propTypes.bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: _propTypes.bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: _propTypes.node,

  /** class name of cell */
  className: _propTypes.string,

  /** class name of cell content wrapper */
  contentClassName: _propTypes.string,

  /** styles applied to a cell */
  style: (0, _propTypes.shape)(),

  /** component to be rendered when loading is in progress  */
  Placeholder: _propTypes.node
};
Cell.defaultProps = {
  children: null,
  className: '',
  contentClassName: '',
  style: {},
  overflowEllipsis: false,
  overflowEllipsisTooltip: null,
  isLoading: false,
  Placeholder: /*#__PURE__*/_react["default"].createElement(_Placeholder["default"], {
    className: "cell-placeholder height-10 w-fill"
  })
};
Cell.displayName = 'Cell';
var _default = Cell;
exports["default"] = _default;