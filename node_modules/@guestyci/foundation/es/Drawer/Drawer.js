import React, { forwardRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import Col from "../Layout/Col";
import Paper from "../Paper";
import createStyles from "../createStyles";

const calculateDrawerWrapperHeight = (open, overlay) => {
  if (overlay) {
    return '100%';
  }

  return open ? '100%' : 0;
};

export const useStyles = createStyles(theme => ({
  root: {
    transition: 'width 225ms cubic-bezier(0, 0, 0.2, 1) 0ms, height 220ms cubic-bezier(0, 0, 0.2, 1) 0ms !important',
    height: ({
      open,
      overlay
    }) => `${calculateDrawerWrapperHeight(open, overlay)}`,
    overflow: 'hidden !important',
    zIndex: 5,
    flexShrink: 0
  },
  drawer: {
    transition: 'transform 225ms cubic-bezier(0, 0, 0.2, 1) 0ms !important',
    transform: ({
      open
    }) => `translateX(${open ? 0 : '-100%'})`,
    width: ({
      width
    }) => width,
    overflowY: 'auto !important',
    padding: theme.spacer(2)
  },
  open: {
    width: ({
      width
    }) => `${width}px !important`
  },
  close: {
    width: '0px !important'
  },
  overlay: {
    position: 'absolute'
  },
  right: {
    right: 0
  },
  fixed: {
    position: 'fixed'
  }
}), {
  name: 'Drawer'
});
const Drawer = forwardRef(function Drawer({
  className = '',
  overlay = false,
  style = {},
  open,
  children,
  width = 250,
  elevation = 1,
  right = false,
  bgColor = '',
  jss,
  fixed = false,
  onDrawerTransitionEnd
}, ref) {
  const classes = useStyles({
    open,
    width,
    overlay,
    jss
  });
  return /*#__PURE__*/React.createElement(Paper, {
    elevation: elevation,
    ref: ref,
    bgColor: bgColor,
    className: cn(classes.root, {
      [classes.open]: open
    }, {
      [classes.close]: !open
    }, {
      [classes.right]: overlay && right
    }, {
      [classes.overlay]: overlay
    }, {
      [classes.fixed]: fixed
    }, className),
    style: style,
    onTransitionEnd: onDrawerTransitionEnd
  }, /*#__PURE__*/React.createElement(Col, {
    fullWidth: true,
    className: classes.drawer
  }, children));
});
Drawer.propTypes = {
  /** Additional classname  */
  className: PropTypes.string,

  /** Indicator whether or not to show drawer */
  open: PropTypes.bool.isRequired,

  /** Child elements inside drawer */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** Additional style to root level */
  style: PropTypes.shape(),

  /** drawer width */
  width: PropTypes.number,

  /** indicator whether or not drawer should overlay over content (position absolute) or static
   * *Note - overlay auto toggles parent component with position relative
   * */
  overlay: PropTypes.bool,

  /** Only applicable for overlay = true -
   *  Indicator whether or not we want to open drawer on right - default left
   *  */
  right: PropTypes.bool,

  /** The drawer paper elevation level * */
  elevation: PropTypes.number,

  /** Background color for drawer */
  bgColor: PropTypes.string,

  /** Jss override to create custom styles */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Set drawer as fixed */
  fixed: PropTypes.bool,

  /** Callback hook for the Drawer slide transition end */
  onDrawerTransitionEnd: PropTypes.func
};
Drawer.displayName = 'Drawer';
export default Drawer;