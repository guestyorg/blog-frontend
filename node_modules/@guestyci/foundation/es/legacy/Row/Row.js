import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
const spacer = {
  sm: 7,
  md: 20,
  lg: 45
};
const useStyles = createUseStyles({
  row: {
    '& > * ': {
      marginRight: ({
        spacing
      }) => spacer[spacing]
    },
    '& > *:last-child': {
      marginRight: 0,
      marginLeft: ({
        pushLastChildToEnd
      }) => pushLastChildToEnd ? 'auto' : 'initial'
    }
  }
});
const Row = React.forwardRef(function Row(_ref, ref) {
  let {
    className,
    style,
    children,
    dense,
    fullWidth,
    spacing,
    pushLastChildToEnd,
    align,
    justify,
    wrap,
    onClick
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "style", "children", "dense", "fullWidth", "spacing", "pushLastChildToEnd", "align", "justify", "wrap", "onClick"]);

  const classes = useStyles({
    spacing,
    pushLastChildToEnd
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    role: "presentation",
    onClick: onClick,
    className: cn({
      clickable: onClick
    }, 'd-flex', {
      [`row-wrapper ${classes.row}`]: !dense
    }, {
      'w-fill': fullWidth
    }, {
      [`align-items-${align}`]: align
    }, {
      [`justify-content-${justify}`]: justify
    }, {
      'flex-row-wrap': wrap
    }, className),
    style: style
  }), children);
});
Row.defaultProps = {
  className: '',
  spacing: 'md',
  style: {},
  children: null,
  onClick: null,
  dense: false,
  fullWidth: false,
  align: 'inherit',
  justify: 'inherit',
  wrap: false,
  pushLastChildToEnd: false
};
Row.propTypes = {
  /** Additional classes for row */
  className: PropTypes.string,

  /** Additional classes for row */
  align: PropTypes.string,

  /** Additional classes for row */
  justify: PropTypes.string,

  /** Additional styles for row */
  style: PropTypes.shape(),

  /** Children for row wrapper */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /** Boolean whether or not we are in dense (no margins) mode */
  dense: PropTypes.bool,

  /** Boolean whether or not we are in full width mode */
  fullWidth: PropTypes.bool,

  /** Amount of spacing between child elements -
   *  sm - 7 md - 20. By default in forms 20 is enforced.
   *  generally:
   *  sm - used for spacing inner components
   *  md - used for default spacing structures
   *  lg - used for spacing larger structures
   *  md is set by default
   */
  spacing: PropTypes.oneOf(['sm', 'md', 'lg']),

  /** Set row as wrap to fit content */
  wrap: PropTypes.bool,

  /** Push the last row child to the end of the row */
  pushLastChildToEnd: PropTypes.bool,

  /** handle click event for Col */
  onClick: PropTypes.func
}; // Hack for withInfo plugin

Row.displayName = 'Row';
export default Row;