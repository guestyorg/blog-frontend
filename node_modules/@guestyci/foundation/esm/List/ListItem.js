import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import Button from "../Button";
import composeEvent from "../utils/composeEvent";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      width: '100%',
      padding: "0px ".concat(theme.spacer(4), "px"),
      transition: theme.transition.create('background-color'),
      '&:last-child': {
        marginBottom: '0 !important'
      }
    },
    hover: {
      '&:hover': {
        borderRadius: 0,
        backgroundColor: theme.palette.action.selected
      }
    },
    height: {
      minHeight: 45
    },
    selected: {
      color: theme.palette.primary["default"],
      backgroundColor: theme.palette.action.selected
    }
  };
}, {
  name: 'ListItem'
});
var ListItem = React.forwardRef(function ListItem(_ref, ref) {
  var _cn;

  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      children = _ref.children,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'li' : _ref$variant,
      value = _ref.value,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      props = _objectWithoutProperties(_ref, ["className", "style", "children", "onClick", "selected", "variant", "value", "jss"]);

  var classes = useStyles({
    jss: jss
  });
  var isButton = variant === 'button';
  var listItemProps = {};
  var Component = isButton ? Button : 'li';

  var handleMenuItemClick = function handleMenuItemClick(e) {
    composeEvent(e, {
      value: value
    });
    onClick(e, value);
  };

  if (isButton) {
    listItemProps = {
      onClick: handleMenuItemClick,
      value: value,
      component: 'span'
    };
  }

  return /*#__PURE__*/React.createElement(Component, _extends({}, props, listItemProps, {
    ref: ref,
    className: cn(classes.root, classes.height, (_cn = {}, _defineProperty(_cn, classes.hover, isButton), _defineProperty(_cn, classes.selected, isButton && selected), _cn), className),
    style: style
  }), children);
});
ListItem.propTypes = {
  /** The list item inner component to render */
  children: PropTypes.node.isRequired,

  /** Additional class to add to the list item component */
  className: PropTypes.string,

  /** Additional style to add to the list item component */
  style: PropTypes.shape(),

  /** Value to pass on list click (only relevant for clickable list items) */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** CB for handling list item click event */
  onClick: PropTypes.func,

  /** Indicator whether or not the list item is selected */
  selected: PropTypes.bool,

  /** Set the type of menu item - values = ['li', 'button'] */
  variant: PropTypes.oneOf(['li', 'button']),

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
ListItem.displayName = 'ListItem';
export default ListItem;