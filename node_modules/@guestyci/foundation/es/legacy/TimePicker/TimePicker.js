import _extends from "@babel/runtime/helpers/esm/extends";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import moment from 'moment';
import MenuAutoPosition from "../Menu/MenuAutoPosition";
import Menu from "../Menu/Menu";
import ItemSelector from "./ItemSelector";
import withCollapse from "../Collapse/withCollapse";
import TimePickerInputField from "./TimePickerInputField";
import ClickOutsideListener from "../../ClickOutsideListener/ClickOutsideListener";

const paddNumber = num => {
  if (num < 10) {
    return `0${num}`;
  }

  return num;
};

const HOURS12 = [...Array(12).keys()].map(i => i + 1);
const MINUTES = [...Array(60).keys()];
const AMPM = ['AM', 'PM'];

class TimePicker extends PureComponent {
  constructor(props) {
    super(props);

    this.onChange = (hours = HOURS12[11], minutes = MINUTES[0], ampm = AMPM[0]) => {
      const {
        id,
        name,
        onChange
      } = this.props;
      this.setState({
        hours,
        minutes,
        ampm
      }, () => {
        onChange(this.getTimeStr(hours, minutes, ampm), id || name);
      });
    };

    this.onHoursChange = hour => {
      const {
        minutes,
        ampm
      } = this.state;
      const hours = HOURS12[hour];
      this.onChange(hours, minutes || MINUTES[0], ampm || AMPM[0]);
    };

    this.onMinutesChange = minute => {
      const minutes = MINUTES[minute];
      const {
        hours,
        ampm
      } = this.state;
      this.onChange(hours || HOURS12[11], minutes, ampm || AMPM[0]);
    };

    this.onAmpmChange = ampm => {
      const {
        hours,
        minutes
      } = this.state;
      const _ampm = AMPM[ampm];
      this.onChange(hours || HOURS12[11], minutes || MINUTES[0], _ampm);
    };

    this.getHours = time => {
      const timeHour = time.hour();

      if (timeHour === 12 || timeHour === 0 && time.format('A') === 'AM') {
        return 12;
      }

      return time.hour() % 12;
    };

    this.getTimeObj = timeStr => {
      if (!timeStr) {
        return {};
      }

      let time = moment(timeStr, 'hh:mm A');

      if (!time.isValid()) {
        time = moment(`01-01-1970 ${timeStr}`, 'MM-DD-YYYY hh:mm A');
      }

      return {
        hours: this.getHours(time),
        minutes: time.minute(),
        ampm: time.format('A')
      };
    };

    this.getTimeStr = (h, m, ampm) => {
      if (h === undefined || h === null) {
        return '';
      }

      return `${paddNumber(h)}:${paddNumber(m)} ${ampm}`;
    };

    this.clearTime = () => {
      this.setState({
        hours: null,
        minutes: null,
        ampm: null
      });
      this.onChange(null, null, null);
    };

    this.reset = () => {
      const {
        defaultValue
      } = this.props;
      const time = this.getTimeObj(defaultValue);
      this.setState(_extends({}, time));
      this.onChange(time.hours, time.minutes, time.ampm);
    };

    const initialValue = props.value || props.defaultValue;
    const {
      hours: _hours,
      minutes: _minutes,
      ampm: _ampm2
    } = this.getTimeObj(initialValue);
    this.state = {
      minutes: _minutes,
      hours: _hours,
      ampm: _ampm2
    };
  }

  componentDidMount() {
    const {
      defaultValue,
      value
    } = this.props;
    const {
      hours,
      minutes,
      ampm
    } = this.state;

    if (defaultValue || value) {
      this.onChange(hours, minutes, ampm);
    }
  }

  render() {
    const {
      disabled,
      placeholder,
      className,
      style,
      resetable,
      toggleCollapse,
      isCollapsed,
      defaultValue,
      minutesStep,
      name,
      noClear,
      closeCollapse,
      id
    } = this.props;
    const {
      ampm,
      hours,
      minutes
    } = this.state;
    const hoursIndex = hours ? hours - 1 : 11;
    return /*#__PURE__*/React.createElement("div", {
      className: cn('flex-end relative d-flex-fill', className),
      style: style,
      "data-qa": "time-picker"
    }, /*#__PURE__*/React.createElement(TimePickerInputField, {
      onClick: toggleCollapse,
      onClear: this.clearTime,
      onReset: this.reset,
      name: name,
      id: id,
      isOpen: !isCollapsed,
      resetable: resetable,
      defaultValue: defaultValue,
      disabled: disabled,
      placeholder: placeholder,
      value: this.getTimeStr(hours, minutes, ampm),
      noClear: noClear || resetable
    }), /*#__PURE__*/React.createElement(MenuAutoPosition, {
      trigger: !isCollapsed
    }, /*#__PURE__*/React.createElement(ClickOutsideListener, {
      onClickOutside: closeCollapse
    }, /*#__PURE__*/React.createElement(Menu, {
      className: "bg-white p-3 flex-center",
      collapse: isCollapsed,
      row: true,
      dense: true
    }, /*#__PURE__*/React.createElement(ItemSelector, {
      index: hoursIndex,
      values: HOURS12,
      onChange: this.onHoursChange,
      renderValue: paddNumber
    }), /*#__PURE__*/React.createElement(ItemSelector, {
      index: minutes,
      values: MINUTES,
      step: minutesStep,
      onChange: this.onMinutesChange,
      renderValue: paddNumber
    }), /*#__PURE__*/React.createElement(ItemSelector, {
      index: ampm === 'PM' ? 1 : 0,
      values: ['AM', 'PM'],
      onChange: this.onAmpmChange
    })))));
  }

}

TimePicker.defaultProps = {
  value: '',
  disabled: false,
  defaultValue: '',
  placeholder: 'Select',
  className: '',
  style: {},
  resetable: false,
  minutesStep: 1,
  showError: false,
  noClear: false,
  name: '',
  id: ''
};
TimePicker.propTypes = {
  /** Controlled value to be set - format 'hh:mm A' */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Indicator whether or not the input is disabled */
  disabled: PropTypes.bool,

  /** CallBack for on value change */
  onChange: PropTypes.func.isRequired,

  /** Callback function to be called on dropdown visibility change */
  onVisibilityChange: PropTypes.func,

  /** Default value for input (also resets to value) - format 'hh:mm A' */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Placeholder for input level */
  placeholder: PropTypes.string,

  /** Additional class for root level */
  className: PropTypes.string,

  /** additional style for root level */
  style: PropTypes.shape(),

  /** Show the reset option for the input (resets to defaultValue) */
  resetable: PropTypes.bool,

  /** define the increacment/decreacment step on the minutes selector */
  minutesStep: PropTypes.number,

  /** Show error icon */
  showError: PropTypes.bool,

  /** Indicator whether or not we are disabling the clear button */
  noClear: PropTypes.bool,

  /** Input level name */
  name: PropTypes.string,

  /** Input level id */
  id: PropTypes.string
};
export const TimePickerComponent = TimePicker;
export default withCollapse(TimePicker);