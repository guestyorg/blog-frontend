import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import useInfiniteScroll from "../useInfiniteScroll";
import useComposeRefs from "../useComposeRefs";
import createStyles from "../createStyles";
import Spinner from "../Spinner";
import Row from "../Layout/Row";
var useStyles = createStyles({
  root: {
    display: 'block',
    height: 'inherit',
    maxHeight: 'inherit',
    overflow: 'auto'
  },
  loader: {}
}, {
  name: 'InfiniteScroll'
});
var InfiniteScroll = React.forwardRef(function InfiniteScroll(_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$loader = _ref.loader,
      loader = _ref$loader === void 0 ? /*#__PURE__*/React.createElement(Spinner, null) : _ref$loader,
      _ref$component = _ref.component,
      component = _ref$component === void 0 ? 'span' : _ref$component,
      isLoading = _ref.isLoading,
      totalCount = _ref.totalCount,
      _ref$onLoadMore = _ref.onLoadMore,
      onLoadMore = _ref$onLoadMore === void 0 ? noop : _ref$onLoadMore,
      skip = _ref.skip,
      _ref$scrollOffset = _ref.scrollOffset,
      scrollOffset = _ref$scrollOffset === void 0 ? 200 : _ref$scrollOffset,
      pageSize = _ref.pageSize,
      jss = _ref.jss,
      props = _objectWithoutProperties(_ref, ["children", "className", "loader", "component", "isLoading", "totalCount", "onLoadMore", "skip", "scrollOffset", "pageSize", "jss"]);

  var scrollableRef = useInfiniteScroll({
    onLoadMore: onLoadMore,
    skip: skip,
    pageSize: pageSize,
    scrollOffset: scrollOffset,
    isLoading: isLoading,
    totalCount: totalCount
  });
  var infiniteScrollRef = useComposeRefs(scrollableRef, ref);
  var classes = useStyles({
    jss: jss
  });
  var Tag = component || 'span';
  return totalCount ? /*#__PURE__*/React.createElement(Tag, _extends({
    className: cn(classes.root, className),
    ref: infiniteScrollRef
  }, props), children, isLoading && /*#__PURE__*/React.createElement(Row, {
    className: classes.loader,
    justify: "center",
    align: "center"
  }, loader)) : children;
});
InfiniteScroll.propTypes = {
  /** child elements to render into the infinite scroll */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]).isRequired,

  /** Custom loader component */
  loader: PropTypes.node,

  /** Custom root component to render */
  component: PropTypes.node,

  /** loading state of the data */
  isLoading: PropTypes.bool,

  /** total count of the data entries */
  totalCount: PropTypes.number,

  /** Scroll offset, from the bottom, from which loading the next chunk should be triggered */
  scrollOffset: PropTypes.number,

  /** index of the first item in the current chunk */
  skip: PropTypes.number,

  /** cb function handle loading more data */
  onLoadMore: PropTypes.func,

  /** number of rows per page */
  pageSize: PropTypes.number,

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
InfiniteScroll.displayName = 'InfiniteScroll';
export default InfiniteScroll;