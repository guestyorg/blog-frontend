import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import PropTypes from 'prop-types';
import React, { Component } from 'react';
import withStyles from 'react-jss';
import ActionButton from "../ActionButton";
import RichTextEditorToolbarItem from "./RichTextEditorToolbarItem";
import { grayDark, grayLight, grayLightest, white } from "../../theme/colors";
import { Theme } from "../../enums/enums";

var getBackgroundColorFromProps = function getBackgroundColorFromProps(props) {
  var active = props.active,
      theme = props.theme;

  if (active) {
    return theme === Theme.Light ? grayLightest : grayLight;
  }

  return theme === Theme.Light ? white : grayLightest;
};

var getBorderFromProps = function getBorderFromProps(props) {
  return "1px solid ".concat(props.theme === Theme.Light ? grayLightest : grayLight);
};

var styles = {
  actionButton: {
    width: 25,
    height: 25,
    border: 'none',
    backgroundColor: getBackgroundColorFromProps,
    padding: '0',
    '&:hover': {
      border: getBorderFromProps
    }
  },
  actionButtonIcon: {
    fill: grayDark
  }
};

var RichTextEditorToolbarActionButton = /*#__PURE__*/function (_Component) {
  _inherits(RichTextEditorToolbarActionButton, _Component);

  var _super = _createSuper(RichTextEditorToolbarActionButton);

  function RichTextEditorToolbarActionButton() {
    var _this;

    _classCallCheck(this, RichTextEditorToolbarActionButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleOnMouseDown = function (e) {
      e.preventDefault();
      var _this$props = _this.props,
          type = _this$props.type,
          onToggle = _this$props.onToggle;
      onToggle(type);
    };

    return _this;
  }

  _createClass(RichTextEditorToolbarActionButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          svg = _this$props2.svg,
          iconWidth = _this$props2.iconWidth,
          iconHeight = _this$props2.iconHeight,
          classes = _this$props2.classes;
      return /*#__PURE__*/React.createElement(RichTextEditorToolbarItem, {
        "data-qa": "rich-text-editor-toolbar-action-button"
      }, /*#__PURE__*/React.createElement(ActionButton, {
        className: classes.actionButton,
        icon: icon,
        svg: svg,
        onMouseDown: this.handleOnMouseDown,
        iconWidth: iconWidth,
        iconHeight: iconHeight,
        iconClassName: classes.actionButtonIcon
      }));
    }
  }]);

  return RichTextEditorToolbarActionButton;
}(Component);

RichTextEditorToolbarActionButton.defaultProps = {
  iconWidth: 20,
  iconHeight: 20
};
RichTextEditorToolbarActionButton.propTypes = {
  icon: PropTypes.string,
  svg: PropTypes.func,
  onClick: PropTypes.func.isRequired,
  iconHeight: PropTypes.number,
  iconWidth: PropTypes.number,
  editorState: PropTypes.shape().isRequired,
  type: PropTypes.string.isRequired,
  theme: PropTypes.string.isRequired
};
export default withStyles(styles)(RichTextEditorToolbarActionButton);