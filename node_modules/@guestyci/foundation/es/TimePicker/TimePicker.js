import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo, useRef, useState, useEffect } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { Menu } from "../Menu";
import TextField from "../TextField";
import MenuItem from "../Menu/MenuItem";
import composeEvent from "../utils/composeEvent";
import createStyles from "../createStyles";
import TimePickerInput from "./TimePickerInput";
import { timePickerStyles } from "./styles";
export const useStyles = createStyles(theme => _extends({}, timePickerStyles(theme)), {
  name: 'TimePicker'
});

const generateOptions = interval => {
  const itemCount = 24 * 60 / interval;

  const padTime = (t, padCb = () => `0${t}`) => t < 10 ? padCb(t) : t;

  let minutes = 0;
  return [...Array(Math.round(itemCount))].map(() => {
    const hours = Math.floor(minutes / 60);
    const isAM = hours < 12;
    const result = `${padTime(hours % 12, t => t === 0 ? '12' : `0${t}`)} : ${padTime(minutes % 60)} ${isAM ? 'AM' : 'PM'}`;
    minutes += interval;
    return result;
  });
};

const menuItemjssOverrides = theme => ({
  selected: {
    color: theme.palette.brand.primary
  }
});

const TimePicker = React.forwardRef(function TimePicker(_ref, ref) {
  let {
    value,
    onChange,
    className,
    style,
    name,
    defaultValue,
    resetable,
    disabled,
    jss,
    interval,
    error
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "onChange", "className", "style", "name", "defaultValue", "resetable", "disabled", "jss", "interval", "error"]);

  const classes = useStyles({
    jss
  });
  const anchorRef = useRef();
  const selectedItemRef = useRef();
  const [open, setOpen] = useState(false);
  useEffect(() => {
    const {
      current: selectedItem
    } = selectedItemRef;

    if (open && selectedItem) {
      const parent = selectedItem.parentElement;

      if (parent) {
        parent.scroll(0, selectedItem.offsetTop - parent.clientHeight / 2);
      }
    }
  }, [open]);

  const handleInputClick = () => {
    setOpen(!open);
  };

  const handleTimePickerClose = () => {
    setOpen(false);
  };

  const handleInputChange = (e, inputValue) => {
    // work around to solve - see https://github.com/guestyorg/foundation-ui/issues/284
    Object.assign(e.target, {
      name,
      value: inputValue
    });
    onChange(e);
    handleTimePickerClose();
  };

  const handleItemClick = (e, selectedValue) => {
    composeEvent(e, {
      name,
      value: selectedValue
    });
    onChange(e);
    handleTimePickerClose();
  };

  const handleClearClick = e => {
    e.stopPropagation();
    composeEvent(e, {
      name
    });
    onChange(e);
  };

  const options = useMemo(() => generateOptions(interval), [interval]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn(classes.root, className),
    style: style
  }, props), /*#__PURE__*/React.createElement(TimePickerInput, {
    ref: anchorRef,
    onClick: handleInputClick,
    onChange: handleInputChange,
    onClear: handleClearClick,
    open: open,
    disabled: disabled,
    defaultValue: defaultValue,
    resetable: resetable,
    value: value,
    error: error
  }), /*#__PURE__*/React.createElement(Menu, {
    anchorDirection: "start",
    open: open,
    className: classes.menu,
    onClose: handleTimePickerClose,
    variant: "menu",
    fitAnchor: true,
    anchor: anchorRef
  }, options.map(option => /*#__PURE__*/React.createElement(MenuItem, {
    key: option,
    value: option,
    onClick: handleItemClick,
    selected: value === option,
    ref: value === option ? selectedItemRef : undefined,
    jss: menuItemjssOverrides
  }, /*#__PURE__*/React.createElement(TextField, null, option)))));
});
TimePicker.defaultProps = {
  interval: 15,
  className: '',
  style: {},
  name: '',
  value: undefined,
  jss: {},
  disabled: false,
  resetable: false,
  defaultValue: undefined
};
TimePicker.propTypes = {
  /** Callback function to be called on value changed - arguments - (event) */
  onChange: PropTypes.func.isRequired,

  /** Additional class for timepicker root */
  className: PropTypes.string,

  /** Additional style for timepicker root */
  style: PropTypes.shape(),

  /** form element name */
  name: PropTypes.string,

  /** Controlled value to set to the time picker */
  value: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** The interval leaps for the picker items in minutes */
  interval: PropTypes.number,

  /** JSS overrides for TimePicker */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** default value to reset to */
  defaultValue: PropTypes.string,

  /** indicator whether or not to allow reset */
  resetable: PropTypes.bool
};
TimePicker.displayName = 'TimePicker';
export default TimePicker;