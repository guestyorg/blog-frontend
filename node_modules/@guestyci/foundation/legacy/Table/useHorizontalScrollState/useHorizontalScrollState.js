"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var useHorizontalScrollState = function useHorizontalScrollState(_ref) {
  var _ref$current;

  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      shouldUseHorizontalScrollState = _ref2[0],
      ref = _ref2[1];

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      showStart = _useState2[0],
      setShowStart = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      showEnd = _useState4[0],
      setShowEnd = _useState4[1];

  var onScroll = (0, _react.useMemo)(function () {
    var throttled = (0, _throttle["default"])(function (_ref3) {
      var scrollLeft = _ref3.scrollLeft,
          scrollWidth = _ref3.scrollWidth,
          offsetWidth = _ref3.offsetWidth;
      setShowStart(scrollLeft > 0);
      setShowEnd(scrollLeft + offsetWidth < scrollWidth);
    }, 100);

    var handler = function handler(e) {
      var _e$target = e.target,
          _e$target$offsetHeigh = _e$target.offsetHeight,
          offsetHeight = _e$target$offsetHeigh === void 0 ? 0 : _e$target$offsetHeigh,
          _e$target$scrollHeigh = _e$target.scrollHeight,
          scrollHeight = _e$target$scrollHeigh === void 0 ? 0 : _e$target$scrollHeigh,
          _e$target$scrollWidth = _e$target.scrollWidth,
          scrollWidth = _e$target$scrollWidth === void 0 ? 0 : _e$target$scrollWidth,
          _e$target$scrollLeft = _e$target.scrollLeft,
          scrollLeft = _e$target$scrollLeft === void 0 ? 0 : _e$target$scrollLeft,
          _e$target$scrollTop = _e$target.scrollTop,
          scrollTop = _e$target$scrollTop === void 0 ? 0 : _e$target$scrollTop,
          _e$target$offsetWidth = _e$target.offsetWidth,
          offsetWidth = _e$target$offsetWidth === void 0 ? 0 : _e$target$offsetWidth;
      throttled({
        scrollTop: scrollTop,
        scrollLeft: scrollLeft,
        scrollWidth: scrollWidth,
        scrollHeight: scrollHeight,
        offsetWidth: offsetWidth,
        offsetHeight: offsetHeight
      });
    };

    return shouldUseHorizontalScrollState ? handler : null;
  }, [shouldUseHorizontalScrollState, setShowStart, setShowEnd]);
  (0, _react.useEffect)(function () {
    if ((ref === null || ref === void 0 ? void 0 : ref.current) && shouldUseHorizontalScrollState && typeof onScroll === 'function') onScroll({
      target: ref.current
    });
  }, [shouldUseHorizontalScrollState, ref, onScroll, ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.scrollWidth]);
  return [showStart, showEnd, onScroll];
};

var _default = useHorizontalScrollState;
exports["default"] = _default;