import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useState } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import Row from "../Layout/Row";
import createStyles from "../createStyles";
import InputStyles from "./styles";
export const useStyles = createStyles(theme => ({
  root: _extends({}, theme.typography.primary, {}, InputStyles.shared(theme), {
    '&:hover': InputStyles.hover(theme),
    height: '46px'
  }),
  input: {
    border: 'none',
    height: '100%',
    width: '100%',
    backgroundColor: 'transparent',
    '&::placeholder': InputStyles.placeholder(theme)
  },
  disabled: InputStyles.disabled(theme),
  focused: InputStyles.focused(theme),
  error: InputStyles.error(theme),
  prefix: {
    height: '100%',
    display: 'flex',
    alignItems: 'center'
  },
  suffix: {
    height: '100%',
    display: 'flex',
    alignItems: 'center'
  }
}), {
  name: 'Input'
});
const Input = React.forwardRef(function Input(_ref, ref) {
  let {
    name,
    value,
    placeholder,
    disabled,
    onChange,
    className,
    suffix,
    prefix,
    onFocus,
    onBlur,
    error,
    jss
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["name", "value", "placeholder", "disabled", "onChange", "className", "style", "suffix", "prefix", "onFocus", "onBlur", "error", "jss"]);

  const classes = useStyles({
    jss
  });
  const [focused, setFocused] = useState(false);

  const onInputFocus = (...args) => {
    setFocused(true);

    if (onFocus) {
      onFocus(...args);
    }
  };

  const onInputBlur = (...args) => {
    setFocused(false);

    if (onBlur) {
      onBlur(...args);
    }
  };

  return /*#__PURE__*/React.createElement(Row, {
    wrap: false,
    justify: "between",
    align: "center",
    className: cn(classes.root, {
      [classes.disabled]: disabled,
      [classes.focused]: focused,
      [classes.error]: error
    }, className)
  }, prefix && /*#__PURE__*/React.createElement("span", {
    className: classes.prefix
  }, prefix), /*#__PURE__*/React.createElement("input", _extends({
    onChange: onChange,
    onFocus: onInputFocus,
    onBlur: onInputBlur,
    name: name,
    value: value,
    className: cn(classes.input),
    disabled: disabled,
    placeholder: placeholder,
    ref: ref
  }, props)), suffix && /*#__PURE__*/React.createElement("span", {
    className: classes.suffix
  }, suffix));
});
Input.defaultProps = {
  name: '',
  value: '',
  onChange: noop,
  placeholder: '',
  className: '',
  style: undefined,
  suffix: null,
  disabled: false
};
Input.propTypes = {
  /** Input name to be set */
  name: PropTypes.string,

  /** Input value to be set */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Input placeholder text */
  placeholder: PropTypes.string,

  /** Disable state in which input interaction is not available */
  disabled: PropTypes.bool,

  /** Function to be called on input value change */
  onChange: PropTypes.func,

  /** Input class */
  className: PropTypes.string,

  /** Input style */
  style: PropTypes.shape(),

  /** String Or React Element to be shown before the input */
  prefix: PropTypes.node,

  /** String Or React Element to be shown after the input */
  suffix: PropTypes.node,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Input.displayName = 'Input';
export default Input;