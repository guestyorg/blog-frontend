import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
/**
 * Create a wrapper compose to support focus functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */

function withFocus(ComposedComponent) {
  var FocusWrapper = /*#__PURE__*/function (_Component) {
    _inherits(FocusWrapper, _Component);

    var _super = _createSuper(FocusWrapper);

    function FocusWrapper(props) {
      var _this;

      _classCallCheck(this, FocusWrapper);

      _this = _super.call(this, props);

      _this.onBlur = function () {
        _this.setState({
          isFocus: false
        });
      };

      _this.onFocus = function () {
        _this.setState({
          isFocus: true
        });
      };

      _this.state = {
        isFocus: false
      };
      return _this;
    }

    _createClass(FocusWrapper, [{
      key: "render",
      value: function render() {
        var isFocus = this.state.isFocus;
        return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
          isFocused: isFocus,
          onBlur: this.onBlur,
          onFocus: this.onFocus,
          "data-qa": "focus-wrapper"
        }));
      }
    }]);

    return FocusWrapper;
  }(Component);

  return FocusWrapper;
}

export default withFocus;