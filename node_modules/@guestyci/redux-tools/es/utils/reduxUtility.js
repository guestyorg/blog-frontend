import isEmpty from 'lodash.isempty'; // For only thunk MIDDLEWARE

export const API_SUCCESS = 'SUCCESS';
export const API_FAILURE = 'FAILURE';
export const API_REQUEST = 'REQUEST'; // For working with API MIDDLEWARE

export const SUCCESS = 'SUCCESS';
export const FAILURE = 'FAILURE';
export const REQUEST = 'REQUEST';

const _trim = payload => {
  if (!payload) {
    return ['payload'];
  }

  return payload.split(',').map(item => item.trim());
};
/**
 * Create a simple action creator according to the type and payload structure
 * @param type  {String}  The type to dispatch
 * @param argNames  {String}  Spread of strings to pass (each argument must be string)
 * @returns {function(...[*]): {type: *}} The action creator function to be called : if argsName passed,
 * will create the structure according to the desired argNames. Other will only accept and object and set it as payload
 */


export function makeActionCreator(type, ...argNames) {
  return (...args) => {
    const action = {
      type
    };

    if (!isEmpty(argNames)) {
      argNames.forEach((arg, index) => {
        if (!isEmpty(arg)) {
          action[argNames[index]] = args[index];
        }
      });
    } else {
      const [payload] = args;
      action.payload = payload;
    }

    return action;
  };
}
/**
 * Create the normalized action creators for a specific flow
 * @param type {String} The type to dispatch to -
 * success, failure, request will be added automatically
 * @param successPayload {String} the structure of the success payload -
 * separated by comma if multiple - defaults to payload
 * @param errorPayload {String} the structure of the error payload -
 * separated by comma if multiple - defaults to payload
 * @param requestPayload {String} the structure of the request payload -
 * separated by comma if multiple - defaults to payload
 * @returns {{success: {function(...[*])}, failure: {function(...[*])}, request: {function(...[*])}}
 */

export function makeAsyncActionCreator(type, successPayload = '', errorPayload = '', requestPayload = '') {
  const sPayload = _trim(successPayload);

  const ePayload = _trim(errorPayload);

  const rPayload = _trim(requestPayload);

  return {
    success: makeActionCreator(`${type} ${API_SUCCESS}`, ...sPayload),
    failure: makeActionCreator(`${type} ${API_FAILURE}`, ...ePayload),
    request: makeActionCreator(`${type} ${API_REQUEST}`, ...rPayload)
  };
}