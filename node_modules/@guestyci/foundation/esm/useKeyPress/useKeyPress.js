import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useEffect, useState } from 'react';

function useKeyPress(targetKey) {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      keyPressed = _useState2[0],
      setKeyPressed = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      pressedEvent = _useState4[0],
      setPressedEvent = _useState4[1];

  function downHandler(e) {
    e.preventDefault();
    var key = e.key;

    if (key === targetKey) {
      setKeyPressed(true);
      setPressedEvent(e);
    }
  }

  var upHandler = function upHandler(e) {
    e.preventDefault();
    var key = e.key;

    if (key === targetKey) {
      setKeyPressed(false);
      setPressedEvent({});
    }
  };

  useEffect(function () {
    window.addEventListener('keydown', downHandler);
    window.addEventListener('keyup', upHandler);
    return function () {
      window.removeEventListener('keydown', downHandler);
      window.removeEventListener('keyup', upHandler);
    };
  }, []);
  return [keyPressed, pressedEvent];
}

export default useKeyPress;