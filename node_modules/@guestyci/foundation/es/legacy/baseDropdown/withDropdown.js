import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { Component } from 'react';
import isEmpty from 'lodash/isEmpty';
import isUndefined from 'lodash/isUndefined';
import isObject from 'lodash/isObject';
import debounce from 'lodash/debounce';
import get from 'lodash/get';
import cn from 'classnames';
import withCollapse from "../Collapse/withCollapse";

const isEqualValue = (prevValue, value) => {
  if (isObject(prevValue) && isObject(value)) {
    return prevValue.value === value.value;
  }

  return prevValue === value;
};
/**
 * Create a wrapper compose to support dropdown functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


const withDropdown = ComposedComponent => {
  class DropdownWrapper extends Component {
    constructor(props) {
      super(props);
      this.handleSearchQueryChange = debounce((val, identifier) => {
        const {
          onSearchQueryChange
        } = this.props;
        onSearchQueryChange(val, identifier);
      }, 500);

      this.setSelectedItemControlledValue = (defaultValue, options = []) => {
        let value = {};

        if (!isUndefined(defaultValue)) {
          if (!isObject(defaultValue) && !isEmpty(options)) {
            value = options.find(option => option.value === defaultValue) || {
              label: undefined,
              value: defaultValue
            };
          } else {
            value = defaultValue;
          }
        }

        this.setSelectedItem(value);
      };

      this.handleClickOutside = () => {
        const {
          isCollapsed,
          closeCollapse
        } = this.props;
        const {
          query
        } = this.state;

        if (!isCollapsed) {
          closeCollapse();

          if (!isEmpty(query)) {
            this.searchQueryChange('');
          }
        }
      };

      this.handleLoadMore = page => {
        const {
          onLoadMore
        } = this.props;
        const {
          query
        } = this.state;
        this.setState({
          currentPage: page
        });
        onLoadMore(page, query);
      };

      this.handleSelectedItemChange = value => {
        const {
          id,
          name,
          onSelect,
          onChange
        } = this.props;

        if (onSelect) {
          onSelect(value, id || name);
        } else if (onChange) {
          onChange(value, id || name);
        }
      };

      this.handleSelectItem = (item = {}) => {
        const {
          closeCollapse
        } = this.props;
        closeCollapse();
        this.setSelectedItem(item);
        this.handleSelectedItemChange(item.value);
      };

      this.clearSelectedItem = () => {
        this.handleSelectedItemChange('');
        this.setSelectedItem({});
      };

      this.clearQuery = () => {
        this.searchQueryChange('');
      };

      this.handleSearchChange = e => {
        const query = e.currentTarget.value;
        const {
          isCollapsed,
          openCollapse
        } = this.props;

        if (isCollapsed) {
          openCollapse();
        }

        this.searchQueryChange(query);
      };

      this.dropdownRef = React.createRef();
      this.state = {
        selectedItem: {},
        query: '',
        currentPage: props.intialPage || 0,
        searchInputValue: ''
      };
    }

    componentDidMount() {
      const {
        value,
        defaultValue,
        options
      } = this.props;
      this.setSelectedItemControlledValue(value || defaultValue, options);
    }

    componentDidUpdate(prevProps) {
      const {
        defaultValue,
        options,
        value
      } = this.props;
      const {
        selectedItem
      } = this.state;

      if (!isEqualValue(prevProps.defaultValue, defaultValue) && isEmpty(selectedItem)) {
        this.setSelectedItemControlledValue(defaultValue, options);
      }

      if (!isEqualValue(prevProps.value, value) && !isEqualValue(value, selectedItem)) {
        this.setSelectedItemControlledValue(value, options);
      }

      if (options.length !== prevProps.options.length && !selectedItem.label) {
        this.setSelectedItemControlledValue(selectedItem.value, options);
      }
    }

    setSelectedItem(item = {}) {
      this.setState({
        selectedItem: item || {},
        searchInputValue: isObject(get(item, 'label')) ? item.name : get(item, 'label')
      });
    }

    searchQueryChange(val) {
      const {
        id,
        name,
        onSearchQueryChange
      } = this.props;
      this.setState({
        query: val,
        currentPage: 0
      });

      if (onSearchQueryChange) {
        this.handleSearchQueryChange(val, id || name);
      }
    }

    render() {
      const _this$props = this.props,
            {
        containerClassName
      } = _this$props,
            props = _objectWithoutPropertiesLoose(_this$props, ["containerClassName", "onChange"]);

      return /*#__PURE__*/React.createElement("div", {
        ref: this.dropdownRef,
        className: cn('d-flex w-inherit dropdown-wrapper', containerClassName),
        "data-qa": "dropdown-wrapper"
      }, /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, props, this.state, {
        onSearchChange: this.handleSearchChange,
        clearSelectedItem: this.clearSelectedItem,
        onSelectItem: this.handleSelectItem,
        onChange: this.handleSelectedItemChange,
        fetchNextPage: this.handleLoadMore,
        clearQuery: this.clearQuery,
        closeDropdown: this.handleClickOutside
      })));
    }

  }

  return withCollapse(DropdownWrapper);
};

export default withDropdown;