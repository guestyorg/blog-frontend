{"ast":null,"code":"import Axios from \"axios\";\nimport { BLOG_DETAILS_FAIL, BLOG_DETAILS_REQUEST, BLOG_DETAILS_SUCCESS ////////////\n, POST_DETAILS_FAIL, POST_DETAILS_REQUEST, POST_DETAILS_SUCCESS ////////////////\n, BLOG_REGISTER_FAIL, BLOG_REGISTER_REQUEST, BLOG_REGISTER_SUCCESS, BLOG_ADD_FAIL, BLOG_ADD_REQUEST, BLOG_ADD_SUCCESS, POST_ADD_FAIL, POST_ADD_REQUEST, POST_ADD_SUCCESS, BLOG_SIGNIN_FAIL, BLOG_SIGNIN_REQUEST, BLOG_SIGNIN_SUCCESS, BLOG_SIGNOUT, BLOG_UPDATE_PROFILE_FAIL, BLOG_UPDATE_PROFILE_REQUEST, BLOG_UPDATE_PROFILE_SUCCESS /////\n, POST_UPDATE_REQUEST, POST_UPDATE_SUCCESS, POST_UPDATE_FAIL ///////\n, BLOG_LIST_REQUEST, BLOG_LIST_SUCCESS, BLOG_LIST_FAIL, BLOG_DELETE_REQUEST, BLOG_DELETE_SUCCESS, BLOG_DELETE_FAIL, POST_DELETE_REQUEST, POST_DELETE_SUCCESS, POST_DELETE_FAIL ////\n, BLOG_UPDATE_REQUEST, BLOG_UPDATE_SUCCESS, BLOG_UPDATE_FAIL, BLOG_ADD_PREPROD_FAIL, BLOG_ADD_PREPROD_SUCCESS, BLOG_ADD_PREPROD_REQUEST } from \"../constants/blogConstants\";\nimport Resource from \"@guestyci/agni\";\nimport { makeDataForTable } from \"../utils\"; // const { api, env, config } = Resource.create();\n\nconst temp = Resource.create(\"user\");\ntemp.api.defaults.baseURL = `http://localhost:9999/api/blogs`;\nconst blogApi = temp.api;\nconst {\n  api,\n  env,\n  config\n} = Resource.create();\nexport const listBlogs = view => async (dispatch, getState) => {\n  dispatch({\n    type: BLOG_LIST_REQUEST\n  });\n  console.log(\"BLOG_LIST_REQUEST\");\n  const {\n    accountSignin: {\n      accountInfo\n    }\n  } = getState();\n\n  try {\n    // console.log('accountInfo:', accountInfo,view)\n    const {\n      data\n    } = await blogApi.post(\"/\", {\n      accountInfo,\n      view\n    }); // const temp = Resource.create('tasks');\n    // temp.api.defaults.baseURL = `http://localhost:9999/tasks`;\n    // export const tasksApi = temp.api;\n    // const data = await blogApi.get(); // will go to `${config.MAILER_URL}/blogs`\n    // console.log(\"data:\", data);\n    // let counter = 1;\n\n    let arr = makeDataForTable(data);\n    console.log(\"arr: \", arr); //  setData(response.data.results)\n\n    dispatch({\n      type: BLOG_LIST_SUCCESS,\n      payload: arr\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_LIST_FAIL,\n      payload: message\n    });\n  }\n}; //////////////////////ideal list blogs///////////////\n// export const listBlogs = () => async (dispatch) => {\n//   dispatch({ type: BLOG_LIST_REQUEST });\n//   console.log(\"BLOG_LIST_REQUEST\");\n//   try {\n//     const { data } = await blogApi.get();\n//     // const temp = Resource.create('tasks');\n//     // temp.api.defaults.baseURL = `http://localhost:9999/tasks`;\n//     // export const tasksApi = temp.api;\n//     // const data = await blogApi.get(); // will go to `${config.MAILER_URL}/blogs`\n//     console.log(\"data:\", data);\n//     // let counter = 1;\n//     const arr = [];\n//     let blogs = data;\n//     for (let i = 0; i < blogs.length; i++) {\n//       // console.log(\"blogs[i]: \", blogs[i]);\n//       const arrBlog = Object.entries(blogs[i]);\n//       console.log(\"arrBlog:\", arrBlog);\n//       //  title: {\n//       //   children: 'John',\n//       // },\n//       const bigObj = {};\n//       for (let j = 0; j < arrBlog.length; j++) {\n//         const obj = {};\n//         // console.log(\"arrBlog[j]: \", arrBlog[j]);\n//         // console.log(\"arrBlog[0]: \",arrBlog[j][0]);\n//         // console.log(\"arrBlog[1]: \",arrBlog[j][1]);\n//         // console.log(\"obj:\", obj);\n//         if (arrBlog[j][0] === \"_id\") {\n//           obj.children = arrBlog[j][1];\n//           //         obj= {children: '613e616d7ab4e566768e79d5'}\n//           bigObj.id = obj;\n//           //    bigObj= {id: {children: '613e616d7ab4e566768e79d5'}}\n//           bigObj._id = arrBlog[j][1];\n//           //   bigObj= {_id: '613e616d7ab4e566768e79d5'}\n//         } else if (\n//           arrBlog[j][0] === \"createdAt\" ||\n//           arrBlog[j][0] === \"updatedAt\"\n//         ) {\n//           // ['createdAt', '2021-09-13T08:46:49.849Z']\n//           obj.children = new Date(arrBlog[j][1]).toLocaleString();\n//           // {children: '9/13/2021, 11:46:49 AM'}\n//           bigObj[arrBlog[j][0]] = obj;\n//           // {createdAt: {children: '9/13/2021, 11:46:49 AM'}}\n//         } else if (arrBlog[j][0] === \"userId\") {\n//           // console.log(\"arrBlog:\", arrBlog);\n//           // ['userId',  {_id: '613e1486e5218626969838f0', name: 'Karamba'}]\n//           obj.children = `${arrBlog[j][1].firstName} ${arrBlog[j][1].lastName}`;\n//           // {children: 'Karamba'}\n//           let emailObj = {};\n//           emailObj.children = arrBlog[j][1].email;\n//           bigObj[\"admin\"] = obj;\n//           bigObj[\"email\"] = emailObj;\n//           let accountObj = {};\n//           accountObj.children = arrBlog[j][1].accountId.name;\n//           bigObj[\"account\"] = accountObj;\n//           //{ accountId: {children: 'Karamba'}}\n//         } else {\n//           // ['firstName', 'miki']\n//           obj.children = arrBlog[j][1];\n//           // {children: 'miki'}\n//           bigObj[arrBlog[j][0]] = obj;\n//           // firstName: {children: 'miki'}\n//         }\n//         // console.log(\"bigObj:\", bigObj);\n//         // arr.push( `${arrBlog[j][0]}: {children: '${arrBlog[j][1]}',}`)\n//       }\n//       // arr.push({gilad:1,...blogs[i]})\n//       arr.push({ ...bigObj });\n//       // arr.push({ _id: `${counter}`, ...bigObj });\n//       // counter++;\n//     }\n//     console.log(\"arr: \", arr);\n//     //  setData(response.data.results)\n//     dispatch({ type: BLOG_LIST_SUCCESS, payload: arr });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: BLOG_LIST_FAIL, payload: message });\n//   }\n// };\n////////////////////////////////////////\n\nexport const add = (title, userId, accountId) => async dispatch => {\n  dispatch({\n    type: BLOG_ADD_REQUEST,\n    payload: {\n      title,\n      userId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.post(\"/create\", {\n      title,\n      userId,\n      accountId\n    });\n    dispatch({\n      type: BLOG_ADD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOG_ADD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const addBlogPreprod = title => async dispatch => {\n  dispatch({\n    type: BLOG_ADD_PREPROD_REQUEST,\n    payload: {\n      title\n    }\n  });\n\n  try {\n    async function sendDataWithAccount() {\n      console.log(\"sendDataWithAccount\");\n      const {\n        data: accountData\n      } = await api.get(\"/accounts/me\"); // will go to `${config.MAILER_URL}/users`\n\n      const {\n        name: accountName\n      } = accountData;\n      const {\n        data\n      } = await blogApi.post(\"/create/preprod\", {\n        title,\n        accountName\n      });\n      dispatch({\n        type: BLOG_ADD_PREPROD_SUCCESS,\n        payload: data\n      });\n    }\n\n    sendDataWithAccount();\n  } catch (error) {\n    dispatch({\n      type: BLOG_ADD_PREPROD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listBlogsPreprod = view => async dispatch => {\n  dispatch({\n    type: BLOG_LIST_REQUEST\n  });\n  console.log(\"BLOG_LIST_REQUEST\");\n\n  try {\n    const {\n      data\n    } = await blogApi.post(\"/preprod/list\", {\n      view\n    });\n    let arr = makeDataForTable(data);\n    console.log(\"arr: \", arr); //  setData(response.data.results)\n\n    dispatch({\n      type: BLOG_LIST_SUCCESS,\n      payload: arr\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const register = (title, lastName, email, userId) => async dispatch => {\n  dispatch({\n    type: BLOG_REGISTER_REQUEST,\n    payload: {\n      title,\n      lastName,\n      email,\n      userId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.post(\"/create\", {\n      title,\n      lastName,\n      email,\n      userId\n    });\n    dispatch({\n      type: BLOG_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: BLOG_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"blogInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: BLOG_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signin = email => async dispatch => {\n  dispatch({\n    type: BLOG_SIGNIN_REQUEST,\n    payload: {\n      email\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.post(\"/signin\", {\n      email\n    });\n    dispatch({\n      type: BLOG_SIGNIN_SUCCESS,\n      payload: data\n    }); // dispatch(emailBlog(email));\n\n    localStorage.setItem(\"blogInfo\", JSON.stringify(data));\n  } catch (error) {\n    // console.log(\"error :\", error);\n    dispatch({\n      type: BLOG_SIGNIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signoutBlog = () => dispatch => {\n  localStorage.removeItem(\"blogInfo\");\n  dispatch({\n    type: BLOG_SIGNOUT\n  }); // document.location.href = \"/signin\";\n};\nexport const deleteBlog = blogId => async dispatch => {\n  console.log(\"blogId:\", blogId);\n  console.log(\"deleteBlog\");\n  dispatch({\n    type: BLOG_DELETE_REQUEST,\n    payload: blogId\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.delete(`/${blogId}`);\n    console.log(\"data:\", data);\n    dispatch({\n      type: BLOG_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"error\");\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_DELETE_FAIL,\n      payload: message\n    });\n  }\n}; /////////////////\n\nexport const deletePost = (postId, blogId) => async dispatch => {\n  console.log(\"postId:\", postId);\n  console.log(\"deletePost\");\n  dispatch({\n    type: POST_DELETE_REQUEST,\n    payload: {\n      blogId,\n      postId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.delete(`/${blogId}/posts/${postId}`);\n    console.log(\"data:\", data);\n    dispatch({\n      type: POST_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"error\");\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: POST_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const detailsBlog = blogId => async dispatch => {\n  dispatch({\n    type: BLOG_DETAILS_REQUEST,\n    payload: blogId\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.get(`/${blogId}`);\n    dispatch({\n      type: BLOG_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_DETAILS_FAIL,\n      payload: message\n    });\n  }\n}; ///////\n\nexport const detailsPost = (blogId, postId) => async dispatch => {\n  dispatch({\n    type: POST_DETAILS_REQUEST,\n    payload: {\n      blogId,\n      postId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.get(`/${blogId}/posts/${postId}`);\n    dispatch({\n      type: POST_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: POST_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateBlog = blog => async dispatch => {\n  // console.log(\"blog:\", blog.id);\n  dispatch({\n    type: BLOG_UPDATE_REQUEST,\n    payload: blog\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.patch(`/${blog.id}`, blog);\n    dispatch({\n      type: BLOG_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_UPDATE_FAIL,\n      payload: message\n    });\n  }\n}; /////////\n\nexport const updatePost = ({\n  blogId,\n  postId,\n  title,\n  content\n}) => async dispatch => {\n  dispatch({\n    type: POST_UPDATE_REQUEST,\n    payload: {\n      blogId,\n      postId,\n      title,\n      content\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.patch(`/${blogId}/posts/${postId}`, {\n      title,\n      content\n    });\n    dispatch({\n      type: POST_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: POST_UPDATE_FAIL,\n      payload: message\n    });\n  }\n}; /////\n/////post actions\n////-------get\n// router.route('/:id/posts/:postId').get\n// await blogApi.get(`/${blog.id}/posts`);\n//---------create\n// router.route('/:id/posts').post(async (req, res, next)\n// await blogApi.post(`/${blog.id}/posts`, post);\n\nexport const addPost = (title, content, userId, blogId) => async dispatch => {\n  dispatch({\n    type: POST_ADD_REQUEST,\n    payload: {\n      title,\n      content,\n      userId,\n      blogId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.post(`/${blogId}/posts/create`, {\n      title,\n      content,\n      userId,\n      blogId\n    });\n    dispatch({\n      type: POST_ADD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ADD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; ///--------- update\n// router.route('/:id/posts/:postId').patch\n// await blogApi.patch(`/${blog.id}/posts/${postId}`, post)\n////-----------delete\n//router.route('/:id/posts/:postId').delete\n// await blogApi.delete(`/${blog.id}/posts/${postId}`)\n///////preprod\n\nexport const deleteBlogPreprod = blogId => async dispatch => {\n  // console.log(\"blogId:\", blogId);\n  console.log(\"deleteBlogPreprod\");\n  dispatch({\n    type: BLOG_DELETE_REQUEST,\n    payload: blogId\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.delete(`/${blogId}/preprod`); // console.log(\"data:\", data);\n\n    dispatch({\n      type: BLOG_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"error\");\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const detailsPreprodBlog = blogId => async dispatch => {\n  dispatch({\n    type: BLOG_DETAILS_REQUEST,\n    payload: blogId\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.get(`/${blogId}/preprod`);\n    dispatch({\n      type: BLOG_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateBlogPreprod = blog => async dispatch => {\n  // console.log(\"blog:\", blog.id);\n  dispatch({\n    type: BLOG_UPDATE_REQUEST,\n    payload: blog\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.patch(`/${blog.id}/preprod`, blog);\n    dispatch({\n      type: BLOG_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BLOG_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const addPostPreprod = (title, content, blogId) => async dispatch => {\n  dispatch({\n    type: POST_ADD_REQUEST,\n    payload: {\n      title,\n      content,\n      blogId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await blogApi.post(`/${blogId}/posts/create/preprod`, {\n      title,\n      content,\n      blogId\n    });\n    dispatch({\n      type: POST_ADD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ADD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/actions/blogActions.js"],"names":["Axios","BLOG_DETAILS_FAIL","BLOG_DETAILS_REQUEST","BLOG_DETAILS_SUCCESS","POST_DETAILS_FAIL","POST_DETAILS_REQUEST","POST_DETAILS_SUCCESS","BLOG_REGISTER_FAIL","BLOG_REGISTER_REQUEST","BLOG_REGISTER_SUCCESS","BLOG_ADD_FAIL","BLOG_ADD_REQUEST","BLOG_ADD_SUCCESS","POST_ADD_FAIL","POST_ADD_REQUEST","POST_ADD_SUCCESS","BLOG_SIGNIN_FAIL","BLOG_SIGNIN_REQUEST","BLOG_SIGNIN_SUCCESS","BLOG_SIGNOUT","BLOG_UPDATE_PROFILE_FAIL","BLOG_UPDATE_PROFILE_REQUEST","BLOG_UPDATE_PROFILE_SUCCESS","POST_UPDATE_REQUEST","POST_UPDATE_SUCCESS","POST_UPDATE_FAIL","BLOG_LIST_REQUEST","BLOG_LIST_SUCCESS","BLOG_LIST_FAIL","BLOG_DELETE_REQUEST","BLOG_DELETE_SUCCESS","BLOG_DELETE_FAIL","POST_DELETE_REQUEST","POST_DELETE_SUCCESS","POST_DELETE_FAIL","BLOG_UPDATE_REQUEST","BLOG_UPDATE_SUCCESS","BLOG_UPDATE_FAIL","BLOG_ADD_PREPROD_FAIL","BLOG_ADD_PREPROD_SUCCESS","BLOG_ADD_PREPROD_REQUEST","Resource","makeDataForTable","temp","create","api","defaults","baseURL","blogApi","env","config","listBlogs","view","dispatch","getState","type","console","log","accountSignin","accountInfo","data","post","arr","payload","error","message","response","add","title","userId","accountId","addBlogPreprod","sendDataWithAccount","accountData","get","name","accountName","listBlogsPreprod","register","lastName","email","localStorage","setItem","JSON","stringify","signin","signoutBlog","removeItem","deleteBlog","blogId","delete","deletePost","postId","detailsBlog","detailsPost","updateBlog","blog","patch","id","updatePost","content","addPost","deleteBlogPreprod","detailsPreprodBlog","updateBlogPreprod","addPostPreprod"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport {\n  BLOG_DETAILS_FAIL,\n  BLOG_DETAILS_REQUEST,\n  BLOG_DETAILS_SUCCESS,\n  ////////////\n  POST_DETAILS_FAIL,\n  POST_DETAILS_REQUEST,\n  POST_DETAILS_SUCCESS,\n\n  ////////////////\n  BLOG_REGISTER_FAIL,\n  BLOG_REGISTER_REQUEST,\n  BLOG_REGISTER_SUCCESS,\n  BLOG_ADD_FAIL,\n  BLOG_ADD_REQUEST,\n  BLOG_ADD_SUCCESS,\n  POST_ADD_FAIL,\n  POST_ADD_REQUEST,\n  POST_ADD_SUCCESS,\n  BLOG_SIGNIN_FAIL,\n  BLOG_SIGNIN_REQUEST,\n  BLOG_SIGNIN_SUCCESS,\n  BLOG_SIGNOUT,\n  BLOG_UPDATE_PROFILE_FAIL,\n  BLOG_UPDATE_PROFILE_REQUEST,\n  BLOG_UPDATE_PROFILE_SUCCESS,\n  /////\n  POST_UPDATE_REQUEST,\n  POST_UPDATE_SUCCESS,\n  POST_UPDATE_FAIL,\n\n  ///////\n  BLOG_LIST_REQUEST,\n  BLOG_LIST_SUCCESS,\n  BLOG_LIST_FAIL,\n  BLOG_DELETE_REQUEST,\n  BLOG_DELETE_SUCCESS,\n  BLOG_DELETE_FAIL,\n  POST_DELETE_REQUEST,\n  POST_DELETE_SUCCESS,\n  POST_DELETE_FAIL,\n  ////\n  BLOG_UPDATE_REQUEST,\n  BLOG_UPDATE_SUCCESS,\n  BLOG_UPDATE_FAIL,\n  BLOG_ADD_PREPROD_FAIL,\n  BLOG_ADD_PREPROD_SUCCESS,\n  BLOG_ADD_PREPROD_REQUEST,\n} from \"../constants/blogConstants\";\nimport Resource from \"@guestyci/agni\";\nimport { makeDataForTable } from \"../utils\";\n// const { api, env, config } = Resource.create();\nconst temp = Resource.create(\"user\");\ntemp.api.defaults.baseURL = `http://localhost:9999/api/blogs`;\n\nconst blogApi = temp.api;\nconst { api, env, config } = Resource.create();\n\nexport const listBlogs = (view) => async (dispatch, getState) => {\n  dispatch({ type: BLOG_LIST_REQUEST });\n  console.log(\"BLOG_LIST_REQUEST\");\n  const {\n    accountSignin: { accountInfo },\n  } = getState();\n  try {\n    // console.log('accountInfo:', accountInfo,view)\n    const { data } = await blogApi.post(\"/\", { accountInfo, view });\n\n    // const temp = Resource.create('tasks');\n    // temp.api.defaults.baseURL = `http://localhost:9999/tasks`;\n    // export const tasksApi = temp.api;\n\n    // const data = await blogApi.get(); // will go to `${config.MAILER_URL}/blogs`\n\n    // console.log(\"data:\", data);\n\n    // let counter = 1;\n\n    let arr = makeDataForTable(data);\n\n    console.log(\"arr: \", arr);\n    //  setData(response.data.results)\n\n    dispatch({ type: BLOG_LIST_SUCCESS, payload: arr });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_LIST_FAIL, payload: message });\n  }\n};\n\n//////////////////////ideal list blogs///////////////\n\n// export const listBlogs = () => async (dispatch) => {\n//   dispatch({ type: BLOG_LIST_REQUEST });\n//   console.log(\"BLOG_LIST_REQUEST\");\n//   try {\n//     const { data } = await blogApi.get();\n\n//     // const temp = Resource.create('tasks');\n//     // temp.api.defaults.baseURL = `http://localhost:9999/tasks`;\n//     // export const tasksApi = temp.api;\n\n//     // const data = await blogApi.get(); // will go to `${config.MAILER_URL}/blogs`\n\n//     console.log(\"data:\", data);\n\n//     // let counter = 1;\n//     const arr = [];\n\n//     let blogs = data;\n\n//     for (let i = 0; i < blogs.length; i++) {\n//       // console.log(\"blogs[i]: \", blogs[i]);\n\n//       const arrBlog = Object.entries(blogs[i]);\n//       console.log(\"arrBlog:\", arrBlog);\n\n//       //  title: {\n//       //   children: 'John',\n//       // },\n\n//       const bigObj = {};\n\n//       for (let j = 0; j < arrBlog.length; j++) {\n//         const obj = {};\n//         // console.log(\"arrBlog[j]: \", arrBlog[j]);\n//         // console.log(\"arrBlog[0]: \",arrBlog[j][0]);\n//         // console.log(\"arrBlog[1]: \",arrBlog[j][1]);\n\n//         // console.log(\"obj:\", obj);\n\n//         if (arrBlog[j][0] === \"_id\") {\n//           obj.children = arrBlog[j][1];\n//           //         obj= {children: '613e616d7ab4e566768e79d5'}\n\n//           bigObj.id = obj;\n//           //    bigObj= {id: {children: '613e616d7ab4e566768e79d5'}}\n\n//           bigObj._id = arrBlog[j][1];\n\n//           //   bigObj= {_id: '613e616d7ab4e566768e79d5'}\n//         } else if (\n//           arrBlog[j][0] === \"createdAt\" ||\n//           arrBlog[j][0] === \"updatedAt\"\n//         ) {\n//           // ['createdAt', '2021-09-13T08:46:49.849Z']\n\n//           obj.children = new Date(arrBlog[j][1]).toLocaleString();\n//           // {children: '9/13/2021, 11:46:49 AM'}\n\n//           bigObj[arrBlog[j][0]] = obj;\n\n//           // {createdAt: {children: '9/13/2021, 11:46:49 AM'}}\n//         } else if (arrBlog[j][0] === \"userId\") {\n//           // console.log(\"arrBlog:\", arrBlog);\n\n//           // ['userId',  {_id: '613e1486e5218626969838f0', name: 'Karamba'}]\n//           obj.children = `${arrBlog[j][1].firstName} ${arrBlog[j][1].lastName}`;\n\n//           // {children: 'Karamba'}\n\n//           let emailObj = {};\n\n//           emailObj.children = arrBlog[j][1].email;\n\n//           bigObj[\"admin\"] = obj;\n\n//           bigObj[\"email\"] = emailObj;\n\n//           let accountObj = {};\n\n//           accountObj.children = arrBlog[j][1].accountId.name;\n\n//           bigObj[\"account\"] = accountObj;\n\n//           //{ accountId: {children: 'Karamba'}}\n//         } else {\n//           // ['firstName', 'miki']\n\n//           obj.children = arrBlog[j][1];\n\n//           // {children: 'miki'}\n\n//           bigObj[arrBlog[j][0]] = obj;\n\n//           // firstName: {children: 'miki'}\n//         }\n\n//         // console.log(\"bigObj:\", bigObj);\n\n//         // arr.push( `${arrBlog[j][0]}: {children: '${arrBlog[j][1]}',}`)\n//       }\n//       // arr.push({gilad:1,...blogs[i]})\n//       arr.push({ ...bigObj });\n//       // arr.push({ _id: `${counter}`, ...bigObj });\n\n//       // counter++;\n//     }\n\n//     console.log(\"arr: \", arr);\n//     //  setData(response.data.results)\n\n//     dispatch({ type: BLOG_LIST_SUCCESS, payload: arr });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: BLOG_LIST_FAIL, payload: message });\n//   }\n// };\n\n////////////////////////////////////////\n\nexport const add = (title, userId, accountId) => async (dispatch) => {\n  dispatch({\n    type: BLOG_ADD_REQUEST,\n    payload: { title, userId },\n  });\n  try {\n    const { data } = await blogApi.post(\"/create\", {\n      title,\n      userId,\n      accountId,\n    });\n\n    dispatch({ type: BLOG_ADD_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: BLOG_ADD_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const addBlogPreprod = (title) => async (dispatch) => {\n  dispatch({\n    type: BLOG_ADD_PREPROD_REQUEST,\n    payload: { title },\n  });\n  try {\n    async function sendDataWithAccount() {\n      console.log(\"sendDataWithAccount\");\n      const { data: accountData } = await api.get(\"/accounts/me\"); // will go to `${config.MAILER_URL}/users`\n\n      const { name: accountName } = accountData;\n\n      const { data } = await blogApi.post(\"/create/preprod\", {\n        title,\n        accountName,\n      });\n\n      dispatch({\n        type: BLOG_ADD_PREPROD_SUCCESS,\n        payload: data,\n      });\n    }\n    sendDataWithAccount();\n  } catch (error) {\n    dispatch({\n      type: BLOG_ADD_PREPROD_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const listBlogsPreprod = (view) => async (dispatch) => {\n  dispatch({ type: BLOG_LIST_REQUEST });\n  console.log(\"BLOG_LIST_REQUEST\");\n\n  try {\n    const { data } = await blogApi.post(\"/preprod/list\", { view });\n\n    let arr = makeDataForTable(data);\n\n    console.log(\"arr: \", arr);\n    //  setData(response.data.results)\n\n    dispatch({ type: BLOG_LIST_SUCCESS, payload: arr });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_LIST_FAIL, payload: message });\n  }\n};\n\nexport const register =\n  (title, lastName, email, userId) => async (dispatch) => {\n    dispatch({\n      type: BLOG_REGISTER_REQUEST,\n      payload: { title, lastName, email, userId },\n    });\n    try {\n      const { data } = await blogApi.post(\"/create\", {\n        title,\n        lastName,\n        email,\n        userId,\n      });\n\n      dispatch({ type: BLOG_REGISTER_SUCCESS, payload: data });\n\n      dispatch({ type: BLOG_SIGNIN_SUCCESS, payload: data });\n      localStorage.setItem(\"blogInfo\", JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: BLOG_REGISTER_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n\nexport const signin = (email) => async (dispatch) => {\n  dispatch({ type: BLOG_SIGNIN_REQUEST, payload: { email } });\n  try {\n    const { data } = await blogApi.post(\"/signin\", { email });\n    dispatch({ type: BLOG_SIGNIN_SUCCESS, payload: data });\n    // dispatch(emailBlog(email));\n\n    localStorage.setItem(\"blogInfo\", JSON.stringify(data));\n  } catch (error) {\n    // console.log(\"error :\", error);\n    dispatch({\n      type: BLOG_SIGNIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const signoutBlog = () => (dispatch) => {\n  localStorage.removeItem(\"blogInfo\");\n\n  dispatch({ type: BLOG_SIGNOUT });\n  // document.location.href = \"/signin\";\n};\n\nexport const deleteBlog = (blogId) => async (dispatch) => {\n  console.log(\"blogId:\", blogId);\n  console.log(\"deleteBlog\");\n  dispatch({ type: BLOG_DELETE_REQUEST, payload: blogId });\n\n  try {\n    const { data } = await blogApi.delete(`/${blogId}`);\n    console.log(\"data:\", data);\n    dispatch({ type: BLOG_DELETE_SUCCESS, payload: data });\n  } catch (error) {\n    console.log(\"error\");\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_DELETE_FAIL, payload: message });\n  }\n};\n\n/////////////////\nexport const deletePost = (postId, blogId) => async (dispatch) => {\n  console.log(\"postId:\", postId);\n  console.log(\"deletePost\");\n  dispatch({ type: POST_DELETE_REQUEST, payload: { blogId, postId } });\n\n  try {\n    const { data } = await blogApi.delete(`/${blogId}/posts/${postId}`);\n    console.log(\"data:\", data);\n    dispatch({ type: POST_DELETE_SUCCESS, payload: data });\n  } catch (error) {\n    console.log(\"error\");\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: POST_DELETE_FAIL, payload: message });\n  }\n};\n\nexport const detailsBlog = (blogId) => async (dispatch) => {\n  dispatch({ type: BLOG_DETAILS_REQUEST, payload: blogId });\n\n  try {\n    const { data } = await blogApi.get(`/${blogId}`);\n    dispatch({ type: BLOG_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_DETAILS_FAIL, payload: message });\n  }\n};\n\n///////\nexport const detailsPost = (blogId, postId) => async (dispatch) => {\n  dispatch({ type: POST_DETAILS_REQUEST, payload: { blogId, postId } });\n\n  try {\n    const { data } = await blogApi.get(`/${blogId}/posts/${postId}`);\n    dispatch({ type: POST_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: POST_DETAILS_FAIL, payload: message });\n  }\n};\n\nexport const updateBlog = (blog) => async (dispatch) => {\n  // console.log(\"blog:\", blog.id);\n  dispatch({ type: BLOG_UPDATE_REQUEST, payload: blog });\n  try {\n    const { data } = await blogApi.patch(`/${blog.id}`, blog);\n    dispatch({ type: BLOG_UPDATE_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_UPDATE_FAIL, payload: message });\n  }\n};\n\n/////////\nexport const updatePost =\n  ({ blogId, postId, title, content }) =>\n  async (dispatch) => {\n    dispatch({\n      type: POST_UPDATE_REQUEST,\n      payload: { blogId, postId, title, content },\n    });\n    try {\n      const { data } = await blogApi.patch(`/${blogId}/posts/${postId}`, {\n        title,\n        content,\n      });\n      dispatch({ type: POST_UPDATE_SUCCESS, payload: data });\n    } catch (error) {\n      const message =\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message;\n      dispatch({ type: POST_UPDATE_FAIL, payload: message });\n    }\n  };\n\n/////\n\n/////post actions\n\n////-------get\n\n// router.route('/:id/posts/:postId').get\n\n// await blogApi.get(`/${blog.id}/posts`);\n\n//---------create\n\n// router.route('/:id/posts').post(async (req, res, next)\n\n// await blogApi.post(`/${blog.id}/posts`, post);\n\nexport const addPost = (title, content, userId, blogId) => async (dispatch) => {\n  dispatch({\n    type: POST_ADD_REQUEST,\n    payload: { title, content, userId, blogId },\n  });\n  try {\n    const { data } = await blogApi.post(`/${blogId}/posts/create`, {\n      title,\n      content,\n      userId,\n      blogId,\n    });\n\n    dispatch({ type: POST_ADD_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: POST_ADD_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n///--------- update\n\n// router.route('/:id/posts/:postId').patch\n\n// await blogApi.patch(`/${blog.id}/posts/${postId}`, post)\n\n////-----------delete\n\n//router.route('/:id/posts/:postId').delete\n\n// await blogApi.delete(`/${blog.id}/posts/${postId}`)\n\n\n\n///////preprod\n\nexport const deleteBlogPreprod = (blogId) => async (dispatch) => {\n  // console.log(\"blogId:\", blogId);\n  console.log(\"deleteBlogPreprod\");\n  dispatch({ type: BLOG_DELETE_REQUEST, payload: blogId });\n\n  try {\n    const { data } = await blogApi.delete(`/${blogId}/preprod`);\n    // console.log(\"data:\", data);\n    dispatch({ type: BLOG_DELETE_SUCCESS, payload: data });\n  } catch (error) {\n    console.log(\"error\");\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_DELETE_FAIL, payload: message });\n  }\n};\n\n\n\n\nexport const detailsPreprodBlog = (blogId) => async (dispatch) => {\n  dispatch({ type: BLOG_DETAILS_REQUEST, payload: blogId });\n\n  try {\n    const { data } = await blogApi.get(`/${blogId}/preprod`);\n    dispatch({ type: BLOG_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_DETAILS_FAIL, payload: message });\n  }\n};\n\n\n\n\nexport const updateBlogPreprod = (blog) => async (dispatch) => {\n  // console.log(\"blog:\", blog.id);\n  dispatch({ type: BLOG_UPDATE_REQUEST, payload: blog });\n  try {\n    const { data } = await blogApi.patch(`/${blog.id}/preprod`, blog);\n    dispatch({ type: BLOG_UPDATE_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BLOG_UPDATE_FAIL, payload: message });\n  }\n};\n\nexport const addPostPreprod = (title, content, blogId) => async (dispatch) => {\n  dispatch({\n    type: POST_ADD_REQUEST,\n    payload: { title, content, blogId },\n  });\n  try {\n    const { data } = await blogApi.post(`/${blogId}/posts/create/preprod`, {\n      title,\n      content,\n      blogId,\n    });\n\n    dispatch({ type: POST_ADD_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: POST_ADD_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}