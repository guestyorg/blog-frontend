const createActiveFieldDecorator = fieldFocusListener => formApi => {
  let unsubscribeToField;
  let previousValue;
  let isFirstRun = true;

  function unsubscribeToActiveField() {
    if (unsubscribeToField) {
      unsubscribeToField();
      unsubscribeToField = undefined;
      previousValue = undefined;
      isFirstRun = true;
    }
  }

  const unsubscribe = formApi.subscribe(({
    active: fieldName
  }) => {
    unsubscribeToActiveField();

    if (!fieldName) {
      return;
    }

    const onValueChange = ({
      value: currentValue
    }) => {
      if (isFirstRun) {
        isFirstRun = false;
        return;
      }

      if (previousValue !== currentValue) {
        const activeField = formApi.getFieldState(fieldName);
        fieldFocusListener({
          value: currentValue,
          field: activeField
        });
      }

      previousValue = currentValue;
    };

    unsubscribeToField = formApi.registerField(fieldName, onValueChange, {
      value: true
    });
  }, {
    active: true
  });
  return () => {
    if (unsubscribeToField) {
      unsubscribeToField();
    }

    unsubscribe();
  };
};

export default createActiveFieldDecorator;