import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
import Paper from "../Paper";
import { AnchorDirectionType, OriginDirectionType } from "../enums";
import Popper from "../legacy/Popper";
import ClickOutsideListener from "../ClickOutsideListener";
import { white } from "../theme/colors";
export const useStyles = createStyles(theme => ({
  root: {
    width: '100%',
    overflowX: 'hidden',
    overflowY: 'auto',
    padding: 0,
    marginBottom: 0,
    listStyleType: 'none'
  },
  menu: {
    maxHeight: 260
  },
  list: {
    overflowY: 'hidden',
    maxHeight: 'auto'
  },
  enter: {
    opacity: 0.01,
    transform: 'scaleY(0)'
  },
  enterActive: {
    transform: 'scaleY(1)',
    opacity: 1,
    transition: theme.transition.create('all', {
      duration: 200
    })
  },
  enterDone: {
    transform: 'scaleY(1)',
    opacity: 1
  },
  exit: {
    opacity: 1,
    transform: 'scaleY(1)'
  },
  exitDone: {
    opacity: 0,
    transform: 'scaleY(0)'
  },
  exitActive: {
    transform: 'scaleY(0)',
    opacity: 0.01,
    transition: theme.transition.create('all', {
      duration: 200
    })
  }
}), {
  name: 'Menu'
});
const Menu = React.forwardRef(function Menu(_ref, ref) {
  let {
    children,
    className = '',
    anchor,
    variant = 'list',
    bgColor = white,
    style = {},
    anchorDirection = AnchorDirectionType.Start,
    originDirection = OriginDirectionType.Bottom,
    open = false,
    jss = {},
    onClose,
    transition,
    fitAnchor,
    menuWidth,
    backdrop = true
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "className", "anchor", "variant", "bgColor", "style", "anchorDirection", "originDirection", "open", "jss", "onClose", "transition", "fitAnchor", "menuWidth", "backdrop"]);

  const classes = useStyles({
    jss
  });

  const defaultMenuTransition = _objectWithoutPropertiesLoose(classes, ["list", "menu", "root"]);

  const Component = variant === 'menu' ? Popper : Fragment;
  let wrapperProps = {};

  if (variant === 'menu') {
    wrapperProps = {
      width: menuWidth,
      anchor,
      transition: transition || defaultMenuTransition,
      trigger: open,
      fitAnchor,
      backdrop,
      anchorDirection,
      originDirection
    };
  }

  return /*#__PURE__*/React.createElement(Component, wrapperProps, /*#__PURE__*/React.createElement(ClickOutsideListener, {
    delay: 250,
    onClickOutside: onClose
  }, /*#__PURE__*/React.createElement(Paper, {
    elevation: 2,
    bgColor: bgColor
  }, /*#__PURE__*/React.createElement("ul", _extends({}, props, {
    role: "listbox",
    tabIndex: -1,
    ref: ref,
    className: cn(classes.root, {
      [classes[variant]]: variant
    }, className),
    style: style
  }), children))));
});
Menu.propTypes = {
  /** Indicator whether or not to open menu when variant = menu */
  open: PropTypes.bool,

  /** Anchor element to append menu type Menu */
  anchor: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.shape()]),

  /** Child items in the menu component */
  children: PropTypes.node.isRequired,

  /** Additional class for root level */
  className: PropTypes.string,

  /** Additional style for root level */
  style: PropTypes.shape(),

  /** variant to set the menu style - values - [menu, dropdown] */
  variant: PropTypes.oneOf(['menu', 'list']),

  /* Menu transition prop for css transition */
  transition: PropTypes.oneOfType([PropTypes.shape({
    appear: PropTypes.string,
    appearActive: PropTypes.string,
    enter: PropTypes.string.isRequired,
    enterActive: PropTypes.string.isRequired,
    enterDone: PropTypes.string,
    exitActive: PropTypes.string.isRequired,
    exit: PropTypes.string.isRequired,
    exitDone: PropTypes.string
  }), PropTypes.string]),

  /** Background color to set to the menu */
  bgColor: PropTypes.string,

  /** Direction to open the content relative to anchor (center, end ,start) */
  anchorDirection: PropTypes.oneOf([AnchorDirectionType.Center, AnchorDirectionType.Start, AnchorDirectionType.End]),

  /** Direction to open the content relative to origin (Top bottom left right) */
  originDirection: PropTypes.oneOf([OriginDirectionType.Top, OriginDirectionType.Bottom, OriginDirectionType.Left, OriginDirectionType.Right]),

  /** In case variant is menu - set the menu content width manually - by default it will resolve to the larger of the input width or the content width */
  menuWidth: PropTypes.number,

  /** Control the backdrop for the popper element in variant = menu, defaults to true */
  backdrop: PropTypes.bool
};
Menu.displayName = 'Menu';
export default Menu;