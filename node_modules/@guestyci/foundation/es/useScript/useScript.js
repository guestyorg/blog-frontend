import { useEffect, useState } from 'react';
const cachedScripts = new Set();

function useScript(src) {
  const [loaded, setLoaded] = useState(false);
  const [error, setError] = useState(false);
  useEffect(() => {
    const script = document.createElement('script');

    const loadScript = () => {
      script.src = src;
      script.async = true;
      return new Promise((resolve, reject) => {
        script.addEventListener('load', () => resolve(src));
        script.addEventListener('error', e => reject(e));
        document.body.appendChild(script);
      }).catch(e => {
        throw e;
      });
    };

    const processRequestedScript = () => {
      if (cachedScripts.has(src)) {
        setError(false);
        setLoaded(true);
      } else {
        const promise = loadScript();
        promise.catch(() => {
          cachedScripts.delete(src);
          setError(true);
          setLoaded(false);
        }).then(() => {
          cachedScripts.add(src);
          setError(false);
          setLoaded(true);
        });
      }
    };

    processRequestedScript();
  }, [src]);
  return [loaded, error];
}

export default useScript;