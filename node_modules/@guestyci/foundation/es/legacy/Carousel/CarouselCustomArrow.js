import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import IconButton from "../IconButton";
import { Theme } from "../../enums/enums";

var BtnRight = function BtnRight(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M.849.146L5.854 5.15a.497.497 0 0 1 0 .703L.85 10.86a.497.497 0 1 1-.703-.703l4.653-4.654L.146.849A.497.497 0 1 1 .849.146z"
  }));
};

BtnRight.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 6 11.0054388"
};

var BtnLeft = function BtnLeft(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M5.854.146a.497.497 0 0 1 0 .703L1.201 5.503l4.653 4.654a.497.497 0 1 1-.703.703L.146 5.854a.497.497 0 0 1 0-.703L5.15.146a.497.497 0 0 1 .703 0z"
  }));
};

BtnLeft.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 6 11.0054388"
};
const arrowDistanceFromBorder = '10px';
const useStyles = createUseStyles({
  fadeStyle: {
    display: 'block',
    opacity: '0.75',
    width: '20%',
    position: 'absolute',
    mixBlendMode: 'multiply',
    top: '0',
    height: '100%',
    zIndex: 1
  },
  leftFade: {
    left: 0,
    backgroundImage: `linear-gradient(
            to right,
            rgba(89, 84, 87, 0.75) 0%,
            rgba(89, 84, 87, 0.74) 8%,
            rgba(89, 84, 87, 0.714) 15.2%,
            rgba(89, 84, 87, 0.672) 21.7%,
            rgba(89, 84, 87, 0.618) 27.8%,
            rgba(89, 84, 87, 0.556) 33.5%,
            rgba(89, 84, 87, 0.486) 38.9%,
            rgba(89, 84, 87, 0.412) 44.3%,
            rgba(89, 84, 87, 0.338) 49.7%,
            rgba(89, 84, 87, 0.264) 55.3%,
            rgba(89, 84, 87, 0.194) 61.2%,
            rgba(89, 84, 87, 0.132) 67.5%,
            rgba(89, 84, 87, 0.078) 74.4%,
            rgba(89, 84, 87, 0.036) 82.1%,
            rgba(89, 84, 87, 0.01) 90.5%,
            rgba(89, 84, 87, 0) 100%)`
  },
  rightFade: {
    right: 0,
    backgroundImage: `linear-gradient(
            to left,
            rgba(89, 84, 87, 0.75) 0%,
            rgba(89, 84, 87, 0.74) 8%,
            rgba(89, 84, 87, 0.714) 15.2%,
            rgba(89, 84, 87, 0.672) 21.7%,
            rgba(89, 84, 87, 0.618) 27.8%,
            rgba(89, 84, 87, 0.556) 33.5%,
            rgba(89, 84, 87, 0.486) 38.9%,
            rgba(89, 84, 87, 0.412) 44.3%,
            rgba(89, 84, 87, 0.338) 49.7%,
            rgba(89, 84, 87, 0.264) 55.3%,
            rgba(89, 84, 87, 0.194) 61.2%,
            rgba(89, 84, 87, 0.132) 67.5%,
            rgba(89, 84, 87, 0.078) 74.4%,
            rgba(89, 84, 87, 0.036) 82.1%,
            rgba(89, 84, 87, 0.01) 90.5%,
            rgba(89, 84, 87, 0) 100%)`
  },
  arrowStyle: {
    position: 'absolute !important',
    top: '50%',
    transform: 'translate(0, -50%)'
  },
  leftArrow: {
    left: arrowDistanceFromBorder
  },
  rightArrow: {
    right: arrowDistanceFromBorder
  },
  disabled: {
    display: 'none'
  }
});

function CarouselCustomArrow({
  direction,
  onClick,
  showArrowsOnHover,
  fade,
  theme,
  className
}) {
  const classes = useStyles();
  const isDisabled = useMemo(() => className.includes('slick-disabled'), [className]);
  return /*#__PURE__*/React.createElement("div", {
    className: cn({
      [classes.disabled]: isDisabled
    }),
    "data-qa": "carousel-custom-arrow"
  }, /*#__PURE__*/React.createElement("div", {
    className: cn({
      'hide-on-hover': showArrowsOnHover
    }, classes.fadeStyle, {
      [classes.rightFade]: direction === 'right',
      [classes.leftFade]: direction === 'left',
      [classes.disabled]: !fade
    })
  }), /*#__PURE__*/React.createElement(IconButton, {
    className: cn(classes.arrowStyle, {
      'hide-on-hover': showArrowsOnHover,
      [classes.rightArrow]: direction === 'right',
      [classes.leftArrow]: direction === 'left'
    }),
    onClick: onClick,
    theme: theme,
    svg: direction === 'right' ? BtnRight : BtnLeft,
    iconWidth: 10,
    iconHeight: 18
  }));
}

CarouselCustomArrow.defaultProps = {
  className: '',
  fade: false,
  theme: Theme.Dark,
  showArrowsOnHover: false
};
CarouselCustomArrow.propTypes = {
  /** direction of the arrow */
  direction: PropTypes.oneOf(['right', 'left']).isRequired,

  /** additional class name */
  className: PropTypes.string,

  /** add fade around the arrows */
  fade: PropTypes.bool,

  /** Set theme for component */
  theme: PropTypes.oneOf([Theme.Light, Theme.Dark]),

  /** Display arrows only when hovering */
  showArrowsOnHover: PropTypes.bool
};
export default CarouselCustomArrow;