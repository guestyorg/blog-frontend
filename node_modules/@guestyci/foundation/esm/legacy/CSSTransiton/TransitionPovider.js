import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import CSSTransition from "./CSSTransition";
import CSSTransitionGroup from "./CSSTransitionGroup";
import { isEmpty } from "../../utils";

var TransitionProvider = function TransitionProvider(_ref) {
  var animation = _ref.animation,
      timeout = _ref.timeout,
      children = _ref.children,
      props = _objectWithoutProperties(_ref, ["animation", "timeout", "children"]);

  var transitionTimeout = isEmpty(timeout) ? 225 : timeout;

  if (isEmpty(animation)) {
    return children;
  }

  if (isEmpty(children)) {
    return null;
  }

  return Array.isArray(children) ? /*#__PURE__*/React.createElement(CSSTransitionGroup, _extends({}, props, {
    animation: animation,
    timeout: transitionTimeout
  }), children) : /*#__PURE__*/React.createElement(CSSTransition, _extends({}, props, {
    animation: animation,
    timeout: transitionTimeout
  }), children);
};

CSSTransition.defaultProps = {
  className: '',
  children: null,
  timeout: 0,
  animation: ''
};
CSSTransition.propTypes = {
  /* Animation for css transition from animation scss */
  animation: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /* Additional class name for css transition root */
  className: PropTypes.string,

  /* Child components for css transition */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /* timeout between animations */
  timeout: PropTypes.oneOfType([PropTypes.shape({
    enter: PropTypes.number.isRequired,
    exit: PropTypes.number.isRequired
  }), PropTypes.number])
};
export default TransitionProvider;