{"ast":null,"code":"import _escapeRegExp from 'lodash/escapeRegExp';\nimport decode from 'jwt-decode';\nimport isNil from 'lodash/isNil';\nimport isFinite from 'lodash/isFinite';\nimport _isNumber from 'lodash/isNumber';\nimport _isEmpty from 'lodash/isEmpty';\nimport currencySymbolsMapper from \"../constants/currencySymbols\";\n/**\n * Generate a GUID\n * @returns {string}\n */\n\nexport var uuid = function uuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return \"\".concat(s4() + s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4()).concat(s4()).concat(s4());\n};\n/**\n * Set a name to a pair on initials\n * @param input {String} The name to manipulate\n * @returns {String}\n */\n\nexport function nameToInitials(input) {\n  var name = isNil(input) ? '' : input.toUpperCase();\n  return name && name.replace(/[\\W_][ ]+/g, '').split(' ').slice(0, 2).map(function (word) {\n    return word.charAt(0);\n  }).join('');\n}\n/**\n * Check if string value is a valid number\n * @param str {String | Number}  The string to test\n * @returns {Boolean}\n */\n\nexport function isNumber() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (_isNumber(str)) {\n    return true;\n  }\n\n  if (_isEmpty(str)) {\n    return false;\n  }\n\n  if (str.length === 1) {\n    return RegExp(/^[0-9.]+$/).test(str);\n  }\n\n  return isFinite(+str);\n}\n/**\n * Convert a string into Number (float)\n * @param str {String|Number}  The value to parse\n * @param catchValue {String | Number} value to return if cast to number fails, defaults to NaN\n * @returns {number} Number if valid number string otherwise NaN\n */\n\nexport function parseNumber(str) {\n  var catchValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;\n\n  if (isNumber(str)) {\n    return +str;\n  }\n\n  return Number(str) || catchValue;\n}\n/**\n * Convert and array to a Map\n * @param array {Array} an array to map\n * @param key {*} the value to key by\n * @returns {Map} a new map\n */\n\nexport function toMap() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var key = arguments.length > 1 ? arguments[1] : undefined;\n  return new Map(array.map(function (item) {\n    return [item[key] || item, item];\n  }));\n}\n/**\n * Create a delay mechanism\n * @param ms  {Number}  Milliseconds to delay\n * @return {Promise<any>}\n */\n\nexport var sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\n/**\n * Escape string for RegExp\n * uses lodash escapeRegExp util\n * @param str  {String}  string to escape\n * @return {String}\n */\n\nexport var escapeRegExp = function escapeRegExp(str) {\n  return _escapeRegExp(str);\n};\n/**\n * First letter to uppercase\n * @param text {String}  string to manipulate\n * @return {String}\n */\n\nexport var firstLetterUppercase = function firstLetterUppercase(text) {\n  return text.slice(0, 1).toUpperCase() + text.slice(1, text.length);\n};\n/**\n * Capitalize first letter\n * @param text {String}  string to manipulate\n * @return {String}\n */\n\nexport var capitalize = function capitalize() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return text.slice(0, 1).toUpperCase() + text.slice(1, text.length);\n};\n/**\n * Currency symbols mapper\n */\n\nexport var currencySymbols = currencySymbolsMapper;\n/**\n * Perform async debounce\n * @param f {Function}  Function to debounce\n * @param interval  {Number}  Milliseconds to interval\n * @return {function(...[*]=): Promise<any>}\n */\n\nexport function asyncDebounce(f, interval) {\n  var timer = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    return new Promise(function (resolve) {\n      timer = setTimeout(function () {\n        return resolve(f.apply(void 0, args));\n      }, interval);\n    });\n  };\n}\n/**\n * Get the user data from the JWT token\n * @returns {Object || null} The decoded token data\n */\n\nexport function getUserData() {\n  var token = JSON.parse(window.localStorage.getItem('token'));\n\n  if (token) {\n    try {\n      return decode(token);\n    } catch (err) {\n      console.error('getUserData Failed to fetch userData from token', err.stack);\n      return null;\n    }\n  }\n}\n/**\n * Bullet proof is empty to also check numbers\n * @param value\n * @return {boolean}\n */\n\nexport function isEmpty(value) {\n  return !_isNumber(value) && _isEmpty(value);\n}\n/**\n * Link to url\n * @param location  {String}  The full path for the link\n * @param isNewTab  {Boolean} Indicator whether or not to show in new tab ( auto - true)\n */\n\nexport function link(location) {\n  var isNewTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (isNewTab) {\n    window.open(location, '_blank');\n  } else {\n    window.location.replace(location);\n  }\n}\nexport var snakeToCamel = function snakeToCamel(str) {\n  return str.replace(/([-][a-z])/g, function (group) {\n    return group.toUpperCase().replace('-', '');\n  });\n};","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/node_modules/@guestyci/foundation/esm/utils/commonUtility.js"],"names":["_escapeRegExp","decode","isNil","isFinite","_isNumber","_isEmpty","currencySymbolsMapper","uuid","s4","Math","floor","random","toString","substring","concat","nameToInitials","input","name","toUpperCase","replace","split","slice","map","word","charAt","join","isNumber","str","arguments","length","undefined","RegExp","test","parseNumber","catchValue","NaN","Number","toMap","array","key","Map","item","sleep","ms","Promise","resolve","setTimeout","escapeRegExp","firstLetterUppercase","text","capitalize","currencySymbols","asyncDebounce","f","interval","timer","_len","args","Array","_key","clearTimeout","apply","getUserData","token","JSON","parse","window","localStorage","getItem","err","console","error","stack","isEmpty","value","link","location","isNewTab","open","snakeToCamel","group"],"mappings":"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","sourcesContent":["import _escapeRegExp from 'lodash/escapeRegExp';\nimport decode from 'jwt-decode';\nimport isNil from 'lodash/isNil';\nimport isFinite from 'lodash/isFinite';\nimport _isNumber from 'lodash/isNumber';\nimport _isEmpty from 'lodash/isEmpty';\nimport currencySymbolsMapper from \"../constants/currencySymbols\";\n/**\n * Generate a GUID\n * @returns {string}\n */\n\nexport var uuid = function uuid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return \"\".concat(s4() + s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4(), \"-\").concat(s4()).concat(s4()).concat(s4());\n};\n/**\n * Set a name to a pair on initials\n * @param input {String} The name to manipulate\n * @returns {String}\n */\n\nexport function nameToInitials(input) {\n  var name = isNil(input) ? '' : input.toUpperCase();\n  return name && name.replace(/[\\W_][ ]+/g, '').split(' ').slice(0, 2).map(function (word) {\n    return word.charAt(0);\n  }).join('');\n}\n/**\n * Check if string value is a valid number\n * @param str {String | Number}  The string to test\n * @returns {Boolean}\n */\n\nexport function isNumber() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (_isNumber(str)) {\n    return true;\n  }\n\n  if (_isEmpty(str)) {\n    return false;\n  }\n\n  if (str.length === 1) {\n    return RegExp(/^[0-9.]+$/).test(str);\n  }\n\n  return isFinite(+str);\n}\n/**\n * Convert a string into Number (float)\n * @param str {String|Number}  The value to parse\n * @param catchValue {String | Number} value to return if cast to number fails, defaults to NaN\n * @returns {number} Number if valid number string otherwise NaN\n */\n\nexport function parseNumber(str) {\n  var catchValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;\n\n  if (isNumber(str)) {\n    return +str;\n  }\n\n  return Number(str) || catchValue;\n}\n/**\n * Convert and array to a Map\n * @param array {Array} an array to map\n * @param key {*} the value to key by\n * @returns {Map} a new map\n */\n\nexport function toMap() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var key = arguments.length > 1 ? arguments[1] : undefined;\n  return new Map(array.map(function (item) {\n    return [item[key] || item, item];\n  }));\n}\n/**\n * Create a delay mechanism\n * @param ms  {Number}  Milliseconds to delay\n * @return {Promise<any>}\n */\n\nexport var sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\n/**\n * Escape string for RegExp\n * uses lodash escapeRegExp util\n * @param str  {String}  string to escape\n * @return {String}\n */\n\nexport var escapeRegExp = function escapeRegExp(str) {\n  return _escapeRegExp(str);\n};\n/**\n * First letter to uppercase\n * @param text {String}  string to manipulate\n * @return {String}\n */\n\nexport var firstLetterUppercase = function firstLetterUppercase(text) {\n  return text.slice(0, 1).toUpperCase() + text.slice(1, text.length);\n};\n/**\n * Capitalize first letter\n * @param text {String}  string to manipulate\n * @return {String}\n */\n\nexport var capitalize = function capitalize() {\n  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return text.slice(0, 1).toUpperCase() + text.slice(1, text.length);\n};\n/**\n * Currency symbols mapper\n */\n\nexport var currencySymbols = currencySymbolsMapper;\n/**\n * Perform async debounce\n * @param f {Function}  Function to debounce\n * @param interval  {Number}  Milliseconds to interval\n * @return {function(...[*]=): Promise<any>}\n */\n\nexport function asyncDebounce(f, interval) {\n  var timer = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    clearTimeout(timer);\n    return new Promise(function (resolve) {\n      timer = setTimeout(function () {\n        return resolve(f.apply(void 0, args));\n      }, interval);\n    });\n  };\n}\n/**\n * Get the user data from the JWT token\n * @returns {Object || null} The decoded token data\n */\n\nexport function getUserData() {\n  var token = JSON.parse(window.localStorage.getItem('token'));\n\n  if (token) {\n    try {\n      return decode(token);\n    } catch (err) {\n      console.error('getUserData Failed to fetch userData from token', err.stack);\n      return null;\n    }\n  }\n}\n/**\n * Bullet proof is empty to also check numbers\n * @param value\n * @return {boolean}\n */\n\nexport function isEmpty(value) {\n  return !_isNumber(value) && _isEmpty(value);\n}\n/**\n * Link to url\n * @param location  {String}  The full path for the link\n * @param isNewTab  {Boolean} Indicator whether or not to show in new tab ( auto - true)\n */\n\nexport function link(location) {\n  var isNewTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (isNewTab) {\n    window.open(location, '_blank');\n  } else {\n    window.location.replace(location);\n  }\n}\nexport var snakeToCamel = function snakeToCamel(str) {\n  return str.replace(/([-][a-z])/g, function (group) {\n    return group.toUpperCase().replace('-', '');\n  });\n};"]},"metadata":{},"sourceType":"module"}