"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.RoundedCheckboxComponent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _withHover = _interopRequireDefault(require("../../withHover/withHover"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var styles = {
  button: {
    padding: 0,
    '&:active': {
      border: 'none',
      boxShadow: 'inset 0 1px 3px 0 rgba(39, 43, 45, 0.2)'
    }
  },
  size: function size(_ref) {
    var lg = _ref.lg;
    return {
      width: lg ? 36 : 27,
      height: lg ? 36 : 27
    };
  },
  shadow: {
    'box-shadow': 'inset 0 1px 3px 0 rgba(39, 43, 45, 0.2)'
  }
};

var RoundedIconCheckbox = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2["default"])(RoundedIconCheckbox, _PureComponent);

  var _super = _createSuper(RoundedIconCheckbox);

  function RoundedIconCheckbox(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, RoundedIconCheckbox);
    _this = _super.call(this, props);

    _this.onChange = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          id = _this$props.id,
          onChange = _this$props.onChange,
          name = _this$props.name;
      var isChecked = _this.state.isChecked;
      onChange(value || !isChecked, id || name, !isChecked);

      _this.setState({
        isChecked: !isChecked
      });
    };

    _this.state = {
      isChecked: props.checked || false
    };
    return _this;
  }

  (0, _createClass2["default"])(RoundedIconCheckbox, [{
    key: "changeIconColor",
    value: function changeIconColor() {
      var isChecked = this.state.isChecked;
      var isHovering = this.props.isHovering;

      if (isHovering && isChecked) {
        return 'muted';
      }

      if (isChecked || isHovering) {
        return 'blue';
      }

      return 'muted';
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          svg = _this$props2.svg,
          onHoverLeave = _this$props2.onHoverLeave,
          onHoverEnter = _this$props2.onHoverEnter,
          _this$props2$classes = _this$props2.classes,
          button = _this$props2$classes.button,
          size = _this$props2$classes.size,
          shadow = _this$props2$classes.shadow,
          className = _this$props2.className,
          iconHeight = _this$props2.iconHeight,
          iconWidth = _this$props2.iconWidth;
      var isChecked = this.state.isChecked;
      return /*#__PURE__*/_react["default"].createElement("button", {
        type: "button",
        className: (0, _classnames["default"])('flex-center', 'border-radius-4', 'border-gray-light', 'clickable', isChecked ? 'bg-gray-light' : 'bg-gray-lightest', (0, _defineProperty2["default"])({}, shadow, isChecked), button, size, className),
        onClick: this.onChange,
        onMouseEnter: onHoverEnter,
        onMouseLeave: onHoverLeave,
        "data-qa": "rounded-icon-checkbox"
      }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        icon: icon,
        svg: svg,
        height: iconHeight,
        width: iconWidth,
        color: this.changeIconColor()
      }));
    }
  }]);
  return RoundedIconCheckbox;
}(_react.PureComponent);

RoundedIconCheckbox.defaultProps = {
  className: '',
  id: undefined,
  value: '',
  name: '',
  iconHeight: 20,
  iconWidth: 20,
  checked: false,
  lg: false
};
RoundedIconCheckbox.propTypes = {
  /** A specified Icon from the Guesty Icons bank */
  icon: _propTypes["default"].string,

  /** The svg icon to render */
  svg: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** Function to toggle the check box click the cb is (value, id || name, state) */
  onChange: _propTypes["default"].func.isRequired,

  /** A unique id */
  id: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** An indicator */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** A name */
  name: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** Additional class to add to the checkbox */
  className: _propTypes["default"].string,

  /** Icon Height */
  iconHeight: _propTypes["default"].number,

  /** Icon Width */
  iconWidth: _propTypes["default"].number,

  /** checked indicator */
  checked: _propTypes["default"].bool,

  /** Indicator whether to use large size - 36px or md -25px */
  lg: _propTypes["default"].bool
};
var RoundedCheckboxComponent = RoundedIconCheckbox;
exports.RoundedCheckboxComponent = RoundedCheckboxComponent;

var _default = (0, _withHover["default"])((0, _reactJss["default"])(styles)(RoundedIconCheckbox));

exports["default"] = _default;