import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { TransitionGroup } from 'react-transition-group';
import isEmpty from 'lodash/isEmpty';
import CSSTransition from "../CSSTransition";

var CSSTransitionGroup = function CSSTransitionGroup(_ref) {
  var animation = _ref.animation,
      className = _ref.className,
      timeout = _ref.timeout,
      children = _ref.children,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["animation", "className", "timeout", "children", "style"]);

  var transitionChildren = children.filter(function (child) {
    return Boolean(child);
  });

  if (isEmpty(animation)) {
    return children;
  }

  return /*#__PURE__*/React.createElement(TransitionGroup, {
    component: null,
    className: cn('css-transition-group', className),
    style: style,
    "data-qa": "css-transition-group"
  }, React.Children.map(transitionChildren, function (child) {
    return /*#__PURE__*/React.createElement(CSSTransition, _extends({
      key: child === null || child === void 0 ? void 0 : child.key,
      asGroup: true,
      unmountOnExit: true,
      animation: animation,
      timeout: timeout
    }, props), child);
  }));
};

CSSTransitionGroup.defaultProps = {
  className: '',
  timeout: 225,
  animation: ''
};
CSSTransitionGroup.propTypes = {
  /* Animation for css transition */
  animation: PropTypes.oneOfType([PropTypes.shape({
    appear: PropTypes.string,
    appearActive: PropTypes.string,
    enter: PropTypes.string.isRequired,
    enterActive: PropTypes.string.isRequired,
    enterDone: PropTypes.string,
    exitActive: PropTypes.string.isRequired,
    exit: PropTypes.string.isRequired,
    exitDone: PropTypes.string
  }), PropTypes.string]),

  /* Additional class name for css transition root */
  className: PropTypes.string,

  /* Child components for css transition */
  children: PropTypes.arrayOf(PropTypes.node).isRequired,

  /* timeout between animations - values: number or {enter, exit} */
  timeout: PropTypes.oneOfType([PropTypes.shape({
    enter: PropTypes.number.isRequired,
    exit: PropTypes.number.isRequired
  }), PropTypes.number])
};
export default CSSTransitionGroup;