"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _ActionButton = _interopRequireDefault(require("../ActionButton"));

var _RichTextEditorToolbarItem = _interopRequireDefault(require("./RichTextEditorToolbarItem"));

var _colors = require("../../theme/colors");

var _enums = require("../../enums/enums");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var getBackgroundColorFromProps = function getBackgroundColorFromProps(props) {
  var active = props.active,
      theme = props.theme;

  if (active) {
    return theme === _enums.Theme.Light ? _colors.grayLightest : _colors.grayLight;
  }

  return theme === _enums.Theme.Light ? _colors.white : _colors.grayLightest;
};

var getBorderFromProps = function getBorderFromProps(props) {
  return "1px solid ".concat(props.theme === _enums.Theme.Light ? _colors.grayLightest : _colors.grayLight);
};

var styles = {
  actionButton: {
    width: 25,
    height: 25,
    border: 'none',
    backgroundColor: getBackgroundColorFromProps,
    padding: '0',
    '&:hover': {
      border: getBorderFromProps
    }
  },
  actionButtonIcon: {
    fill: _colors.grayDark
  }
};

var RichTextEditorToolbarActionButton = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(RichTextEditorToolbarActionButton, _Component);

  var _super = _createSuper(RichTextEditorToolbarActionButton);

  function RichTextEditorToolbarActionButton() {
    var _this;

    (0, _classCallCheck2["default"])(this, RichTextEditorToolbarActionButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleOnMouseDown = function (e) {
      e.preventDefault();
      var _this$props = _this.props,
          type = _this$props.type,
          onToggle = _this$props.onToggle;
      onToggle(type);
    };

    return _this;
  }

  (0, _createClass2["default"])(RichTextEditorToolbarActionButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          svg = _this$props2.svg,
          iconWidth = _this$props2.iconWidth,
          iconHeight = _this$props2.iconHeight,
          classes = _this$props2.classes;
      return /*#__PURE__*/_react["default"].createElement(_RichTextEditorToolbarItem["default"], {
        "data-qa": "rich-text-editor-toolbar-action-button"
      }, /*#__PURE__*/_react["default"].createElement(_ActionButton["default"], {
        className: classes.actionButton,
        icon: icon,
        svg: svg,
        onMouseDown: this.handleOnMouseDown,
        iconWidth: iconWidth,
        iconHeight: iconHeight,
        iconClassName: classes.actionButtonIcon
      }));
    }
  }]);
  return RichTextEditorToolbarActionButton;
}(_react.Component);

RichTextEditorToolbarActionButton.defaultProps = {
  iconWidth: 20,
  iconHeight: 20
};
RichTextEditorToolbarActionButton.propTypes = {
  icon: _propTypes["default"].string,
  svg: _propTypes["default"].func,
  onClick: _propTypes["default"].func.isRequired,
  iconHeight: _propTypes["default"].number,
  iconWidth: _propTypes["default"].number,
  editorState: _propTypes["default"].shape().isRequired,
  type: _propTypes["default"].string.isRequired,
  theme: _propTypes["default"].string.isRequired
};

var _default = (0, _reactJss["default"])(styles)(RichTextEditorToolbarActionButton);

exports["default"] = _default;