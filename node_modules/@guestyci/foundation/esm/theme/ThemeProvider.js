import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo, useEffect } from 'react';
import { jss, SheetsRegistry } from 'react-jss';
import PropTypes from 'prop-types';
import ThemeContext from "./ThemeContext";
import useTheme from "../useTheme/useTheme";
import defaultTheme from "./defaultTheme";

var mergeThemes = function mergeThemes() {
  var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var outerTheme = arguments.length > 1 ? arguments[1] : undefined;

  if (typeof theme === 'function') {
    var mergedTheme = theme(outerTheme);
    return mergedTheme;
  }

  return _extends({}, outerTheme, {}, theme);
};

var setupJssGlobals = function setupJssGlobals(theme) {
  var _theme$typography, _theme$typography2, _theme$palette, _theme$palette$text;

  var sheetsRegistry = new SheetsRegistry();
  var globalStyleSheet = jss.createStyleSheet({
    '@global': {
      html: {
        fontSize: theme === null || theme === void 0 ? void 0 : (_theme$typography = theme.typography) === null || _theme$typography === void 0 ? void 0 : _theme$typography.htmlFontSize
      },
      body: _extends({}, theme === null || theme === void 0 ? void 0 : (_theme$typography2 = theme.typography) === null || _theme$typography2 === void 0 ? void 0 : _theme$typography2.running, {
        color: theme === null || theme === void 0 ? void 0 : (_theme$palette = theme.palette) === null || _theme$palette === void 0 ? void 0 : (_theme$palette$text = _theme$palette.text) === null || _theme$palette$text === void 0 ? void 0 : _theme$palette$text["default"]
      })
    }
  }).attach();
  sheetsRegistry.add(globalStyleSheet);
  return sheetsRegistry;
};

var ThemeProvider = function ThemeProvider(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,
      children = _ref.children;
  var outerTheme = useTheme();
  var customTheme = useMemo(function () {
    return mergeThemes(theme, outerTheme);
  }, [theme, outerTheme]);
  useEffect(function () {
    setupJssGlobals(customTheme);
  }, [customTheme]);
  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: customTheme,
    "data-qa": "theme-provider"
  }, children);
};

ThemeProvider.propTypes = {
  /** Children to render under the theme */
  children: PropTypes.node.isRequired,

  /** New theme to extend the outer theme */
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func])
};
export default ThemeProvider;