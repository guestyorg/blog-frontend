import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import { List } from '@guestyci/foundation/List';
import createStyles from '@guestyci/foundation/createStyles';
import { matchPath } from 'react-router-dom';
import NavMenuItem from "./NavMenuItem";
import NavMenuAccordion from "./NavMenuAccordion";
import history from "../utils";
var useStyles = createStyles(function () {
  return {
    root: {
      width: '250px',
      height: '100%'
    }
  };
});

var isMatchingPath = function isMatchingPath(path) {
  var pathToMatch = path.startsWith('/') ? path : history.getPathName() + path;
  return !!matchPath(history.location().pathname, {
    path: pathToMatch
  });
};

var submenuItemJssOverrides = function submenuItemJssOverrides(theme) {
  return {
    content: {
      paddingLeft: theme.spacer(10)
    }
  };
};

var NavMenu = function NavMenu(_ref) {
  var _ref$routeItems = _ref.routeItems,
      routeItems = _ref$routeItems === void 0 ? [] : _ref$routeItems,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$onSelect = _ref.onSelect,
      onSelect = _ref$onSelect === void 0 ? null : _ref$onSelect,
      _ref$onExpandItem = _ref.onExpandItem,
      onExpandItem = _ref$onExpandItem === void 0 ? null : _ref$onExpandItem;
  var classes = useStyles({
    jss: jss
  });
  var pathToParentIdMap = useMemo(function () {
    var result = new Map();
    routeItems.forEach(function (routeItem) {
      if (routeItem.subrouteItems instanceof Array && routeItem.subrouteItems.length) {
        return routeItem.subrouteItems.forEach(function (subrouteItem) {
          return result.set(subrouteItem.to, routeItem.id);
        });
      }

      return result.set(routeItem.to);
    });
    return result;
  }, [routeItems]);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      selectedRoute = _useState2[0],
      setSelectedRoute = _useState2[1];

  var _useState3 = useState(new Set()),
      _useState4 = _slicedToArray(_useState3, 2),
      openedSubmenus = _useState4[0],
      setOpenedSubmenus = _useState4[1];

  useEffect(function () {
    var flattenRoutes = _toConsumableArray(pathToParentIdMap.keys());

    var currentRoute = flattenRoutes.filter(isMatchingPath)[0] || flattenRoutes[0];
    setSelectedRoute(currentRoute);
    setOpenedSubmenus(new Set([pathToParentIdMap.get(currentRoute)]));
  }, [routeItems]);
  var onMenuItemClick = useCallback(function (item) {
    var to = item.to;
    setSelectedRoute(to);
    if (onSelect) onSelect(item);
  }, [onSelect]);

  var onSubmenuOpen = function onSubmenuOpen(item) {
    var submenuId = item.id;

    if (openedSubmenus.has(submenuId)) {
      openedSubmenus["delete"](submenuId);
    } else {
      openedSubmenus.add(submenuId);

      if (onExpandItem) {
        onExpandItem(item);
      }
    }

    return setOpenedSubmenus(new Set(openedSubmenus));
  };

  var shouldRenderAccordion = function shouldRenderAccordion(routeItem) {
    if (routeItem.subrouteItems instanceof Array && routeItem.subrouteItems.length) return true;
    return false;
  };

  return /*#__PURE__*/React.createElement(List, {
    className: classes.root
  }, routeItems.map(function (item) {
    if (shouldRenderAccordion(item)) {
      var open = openedSubmenus.has(item.id);
      var isSubmenuItemSelected = pathToParentIdMap.get(selectedRoute) === item.id;
      return /*#__PURE__*/React.createElement(NavMenuAccordion, {
        title: item.label,
        icon: item.icon,
        className: open || isSubmenuItemSelected ? 'accordion-opened' : 'accordion-closed',
        onChange: function onChange() {
          return onSubmenuOpen(item);
        },
        open: open,
        key: item.id
      }, item.subrouteItems.map(function (subrouteItem) {
        return /*#__PURE__*/React.createElement(NavMenuItem, _extends({}, subrouteItem, {
          jss: submenuItemJssOverrides,
          onClick: function onClick() {
            return onMenuItemClick(subrouteItem);
          },
          selected: subrouteItem.to === selectedRoute,
          key: subrouteItem.id
        }), subrouteItem.label);
      }));
    }

    return /*#__PURE__*/React.createElement(NavMenuItem, _extends({}, item, {
      onClick: function onClick() {
        return onMenuItemClick(item);
      },
      selected: item.to === selectedRoute,
      key: item.id
    }), item.label);
  }));
};

var routeShape = {
  id: PropTypes.string.isRequired,
  to: PropTypes.string,
  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
  icon: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
NavMenu.propTypes = {
  /** Array of the route objects to serve MenuItem */
  routeItems: PropTypes.arrayOf(PropTypes.shape(_extends({}, routeShape, {
    subroutes: PropTypes.arrayOf(PropTypes.shape(routeShape))
  }))),

  /** Jss override to create custom styles */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Callback function that is called on MenuItem select, accepts 'to' */
  onSelect: PropTypes.func,

  /** Callback function that is called on MenuItem being expanded */
  onExpandItem: PropTypes.func
};
export default NavMenu;