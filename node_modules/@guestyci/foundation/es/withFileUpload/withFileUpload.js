import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { Component } from 'react';
import { CLOUDINARY_URL } from "../constants/constants";
import { openUploadWidget } from "../utils/fileUploadUtility";

const getScript = src => {
  const scripts = document.querySelectorAll(`script[src="${src}"]`);

  if (scripts) {
    return scripts[0];
  }

  return null;
};
/**
 * Create a wrapper compose to support upload functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


function withFileUpload(ComposedComponent) {
  let script = getScript(CLOUDINARY_URL);

  class FileUploadWrapper extends Component {
    constructor(props) {
      super(props);

      this.onScriptLoad = () => {
        this.setState({
          loaded: true
        });
      };

      this.loadScript = () => {
        console.log(script);

        if (!script) {
          script = document.createElement('script');
          script.src = CLOUDINARY_URL;
          script.async = true;
          script.addEventListener('load', this.onScriptLoad);
          document.body.appendChild(script);
        }
      };

      this.open = (_ref) => {
        let {
          onSuccess,
          onFailure
        } = _ref,
            rest = _objectWithoutPropertiesLoose(_ref, ["onSuccess", "onFailure"]);

        const {
          loaded
        } = this.state;

        if (loaded && window.cloudinary) {
          openUploadWidget({
            onSuccess,
            onFailure,
            rest
          });
        }
      };

      this.state = {
        loaded: false
      };
    }

    componentDidMount() {
      this.loadScript();
    }

    componentWillUnmount() {
      script.removeEventListener('load', this.onScriptLoad);
    }

    render() {
      return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        open: this.open,
        "data-qa": "file-upload-wrapper"
      }));
    }

  }

  return FileUploadWrapper;
}

export default withFileUpload;