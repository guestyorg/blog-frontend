"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _commonUtility = require("../../utils/commonUtility");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function initUUIDsForChildren(children) {
  return children.map(function () {
    return (0, _commonUtility.uuid)();
  });
}

function initOptions(children, isMulti) {
  var uuids = initUUIDsForChildren(children);
  var checkedFlag = false;
  var childrenStructure = new Map(children.map(function (child, index) {
    if (child.props.checked) {
      checkedFlag = true;
    }

    return [uuids[index], {
      child: child,
      checked: child.props.checked,
      uid: uuids[index]
    }];
  }));

  if (!isMulti && !checkedFlag && childrenStructure.size !== 0) {
    childrenStructure.set(childrenStructure.keys().next().value, (0, _extends2["default"])({}, childrenStructure.values().next().value, {
      checked: true
    }));
  }

  return childrenStructure;
}

function selectedKeyOnInit(data) {
  var children = Array.from(data.values());

  if (!children.length) {
    return null;
  }

  var child = children.find(function (val) {
    return val.checked;
  });

  if (!child) {
    return children[0].uid;
  }

  return child.uid;
}
/**
 * When the user passes a child you'll get it as an
 * object and not as array of objects, this function fix the structure.
 * @param children
 * @returns {*[]}
 */


function checkChildrenSize(children) {
  return Array.isArray(children) ? children : [children];
}
/**
 * Create a wrapper compose to support multiple selection functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


var withSelectionGroup = function withSelectionGroup(ComposedComponent) {
  var _temp;

  return _temp = /*#__PURE__*/function (_Component) {
    (0, _inherits2["default"])(_temp, _Component);

    var _super = _createSuper(_temp);

    function _temp(props) {
      var _this;

      (0, _classCallCheck2["default"])(this, _temp);
      _this = _super.call(this, props);

      _this.getNumberOfChecked = function () {
        var options = _this.state.options;
        var isMulti = _this.props.isMulti;
        var checkedItems = [];

        if (isMulti) {
          options.forEach(function (value) {
            if (value.checked) {
              checkedItems.push(value.child.props.value);
            }
          });
        }

        return checkedItems.length > 0 ? checkedItems : undefined;
      };

      _this.handleOptionClick = function (optionId) {
        var _this$state = _this.state,
            options = _this$state.options,
            lastChecked = _this$state.lastChecked;
        var _this$props$isMulti = _this.props.isMulti,
            isMulti = _this$props$isMulti === void 0 ? false : _this$props$isMulti;

        if (!isMulti) {
          options.set(lastChecked, (0, _extends2["default"])({}, options.get(lastChecked), {
            checked: false
          }));
          options.set(optionId, (0, _extends2["default"])({}, options.get(optionId), {
            checked: true
          }));
        } else {
          var state = options.get(optionId).checked;
          options.set(optionId, (0, _extends2["default"])({}, options.get(optionId), {
            checked: !state
          }));
        }

        _this.setState({
          options: options,
          lastChecked: optionId
        });
      };

      var data = initOptions(checkChildrenSize(props.children), props.isMulti);
      _this.state = {
        options: data,
        lastChecked: props.isMulti ? '' : selectedKeyOnInit(data)
      };
      return _this;
    }

    (0, _createClass2["default"])(_temp, [{
      key: "render",
      value: function render() {
        var options = this.state.options;
        return /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(ComposedComponent, (0, _extends2["default"])({}, this.props, {
          options: options,
          onOptionClicked: this.handleOptionClick,
          selectedCheckboxesWhenMulti: this.getNumberOfChecked()
        })));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var newState = null;

        if (props.children && props.children.length > 0 && state.options.size !== props.children.length) {
          newState = {
            options: initOptions(checkChildrenSize(props.children), props.isMulti)
          };
        }

        return newState;
      }
    }]);
    return _temp;
  }(_react.Component), _temp;
};

var _default = withSelectionGroup;
exports["default"] = _default;