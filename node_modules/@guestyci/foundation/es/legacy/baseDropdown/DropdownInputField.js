import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import { createUseStyles } from 'react-jss';
import IconButton from "../IconButton";
import ActionButton from "../ActionButton";
import withFocus from "../../withFocus/withFocus";
import Fade from "../Fade";

var BtnDelete = function BtnDelete(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M8.485.707L7.778 0 4.243 3.536.707 0 0 .707l3.536 3.536L0 7.778l.707.707L4.243 4.95l3.535 3.535.707-.707L4.95 4.243z"
  }));
};

BtnDelete.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 8.4854 8.4854"
};

var BtnArrowDown = function BtnArrowDown(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M4.533 4.997c.13.006.26-.039.357-.136L8.925.826a.488.488 0 0 0-.69-.69L4.532 3.843.826.137a.488.488 0 0 0-.69.69L4.172 4.86c.097.097.23.143.362.136z"
  }));
};

BtnArrowDown.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 9.0618038 4.9977479"
};
const useStyles = createUseStyles({
  input: {
    '&:focus': {
      borderColor: 'transparent',
      borderRadius: 0,
      boxShadow: 'none'
    }
  },
  selectedValueContainer: {
    minWidth: 0
  },
  dropDownInputField: {
    '&.disabled-lite': {
      cursor: 'not-allowed'
    }
  },
  ellipsisActionBtn: {
    minWidth: '45px'
  }
});

const DropdownInputField = ({
  onQueryChange,
  placeholder,
  onIconClick,
  noAction,
  inputClassName,
  onClearQuery,
  isOpen,
  searchable,
  value,
  onClearSelected,
  query,
  className,
  name,
  onFocus,
  onBlur,
  isFocused,
  noClear,
  disabled,
  ellipsis
}) => {
  const classes = useStyles();
  return /*#__PURE__*/React.createElement("div", {
    className: cn('b-1 border-gray-light flex-start-center pos-relative font-size-md d-flex border-radius-2', className, classes.dropDownInputField, {
      'bg-white': !disabled
    }, {
      'bg-gray-lighter': disabled
    }, {
      'text-muted': disabled
    }, {
      'disabled-lite': disabled
    }),
    "data-qa": "dropdown-input-field"
  }, searchable && /*#__PURE__*/React.createElement("input", {
    value: isFocused ? query : value,
    onFocus: onFocus,
    onBlur: onBlur,
    type: "text",
    name: name,
    placeholder: placeholder,
    onChange: onQueryChange,
    className: cn('input-element pl-4 flex-1 height-46 border-0 b-0 bg-transparent border-gray-light br-1', classes._input, classes.selectedValueContainer, inputClassName, {
      'overflow-ellipsis': ellipsis
    }),
    disabled: disabled
  }), !searchable && /*#__PURE__*/React.createElement("div", {
    className: cn('flex-1 px-4 font-size-md', classes.selectedValueContainer, {
      'text-gray-dark': !value,
      'overflow-ellipsis': ellipsis
    }),
    name: name
  }, value || placeholder), (!noClear || searchable && isFocused) && /*#__PURE__*/React.createElement(Fade, {
    show: !!value || !!query,
    speed: "quick",
    mountOnEnter: true
  }, /*#__PURE__*/React.createElement(IconButton, {
    className: "mr-3",
    onClick: query ? onClearQuery : onClearSelected,
    svg: BtnDelete,
    iconHeight: 10,
    iconWidth: 10
  })), !noAction && /*#__PURE__*/React.createElement(ActionButton, {
    className: cn('bl-1 b-0 p-0 flex-shrink-0', {
      [classes.ellipsisActionBtn]: ellipsis
    }),
    iconClassName: cn('transition-transform', {
      'transform-180': isOpen
    }),
    svg: BtnArrowDown,
    iconWidth: 9,
    iconHeight: 9,
    iconColor: isOpen ? 'blue' : 'gray-dark',
    onClick: onIconClick,
    disabled: disabled
  }));
};

DropdownInputField.defaultProps = {
  placeholder: 'Select',
  value: '',
  searchable: false,
  onClearQuery: noop,
  onClearSelected: noop,
  onIconClick: noop,
  query: '',
  noAction: false,
  isOpen: false,
  className: '',
  inputClassName: '',
  name: '',
  noClear: false,
  disabled: false,
  ellipsis: false
};
DropdownInputField.propTypes = {
  /** Function to be called on input value changed */
  onQueryChange: PropTypes.func.isRequired,

  /** String to populate the placeholder */
  placeholder: PropTypes.string,

  /** Function to be called when clicking the input side icon */
  onIconClick: PropTypes.func,

  /** Boolean to control the dropdown list state */
  isOpen: PropTypes.bool,

  /** String, search value or input */
  value: PropTypes.string,

  /** Indicator whether or not the input field is searchable */
  searchable: PropTypes.bool,

  /** Callback for clear field query */
  onClearQuery: PropTypes.func,

  /** Callback for clear field selected value */
  onClearSelected: PropTypes.func,

  /** The query search for input */
  query: PropTypes.string,

  /** Remove action button from input field */
  noAction: PropTypes.bool,

  /** Indicator whether or not we are disabling the clear button */
  noClear: PropTypes.bool,

  /** Additional class for root level */
  className: PropTypes.string,

  /** Additional class for input level */
  inputClassName: PropTypes.string,

  /** item name */
  name: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** Indicator whether or not selected value is one line & with ellipsis text */
  ellipsis: PropTypes.bool
};
export default withFocus(DropdownInputField);