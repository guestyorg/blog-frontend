"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locales = exports.intl = exports.init = exports.getLanguage = exports.warningHandler = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _querystring = _interopRequireDefault(require("querystring"));

var _reactIntl = _interopRequireDefault(require("../react-intl"));

/* eslint-disable global-require */
var localeDataURL = function localeDataURL(lang) {
  return "https://d2g7j5hs6q3xyb.cloudfront.net/production/atomic-design/localesInit/scripts/".concat(lang, ".js");
};

var localeJsonURL = function localeJsonURL(lang) {
  return "https://d2g7j5hs6q3xyb.cloudfront.net/production/atomic-design/localesInit/locales1/".concat(lang, ".json");
};

var warningHandler = console.warn.bind(console);
exports.warningHandler = warningHandler;

var getLanguage = function getLanguage() {
  var query = window.location.search.split('?');
  var queryLang;

  if (query.length >= 2) {
    var params = _querystring["default"].parse(query[1]);

    queryLang = params && params.lang ? params.lang : undefined;
  }

  return queryLang || window.localStorage.getItem('lang') || 'en-US';
};

exports.getLanguage = getLanguage;
var get = _reactIntl["default"].get,
    getHTML = _reactIntl["default"].getHTML,
    formatHTMLMessage = _reactIntl["default"].formatHTMLMessage,
    formatMessage = _reactIntl["default"].formatMessage,
    determineLocale = _reactIntl["default"].determineLocale,
    load = _reactIntl["default"].load,
    loadRemoteScript = _reactIntl["default"].loadRemoteScript,
    getLocaleFromCookie = _reactIntl["default"].getLocaleFromCookie,
    getDescendantProp = _reactIntl["default"].getDescendantProp,
    getLocaleFromURL = _reactIntl["default"].getLocaleFromURL,
    getLocaleFromBrowser = _reactIntl["default"].getLocaleFromBrowser;

var init = function init(options) {
  var _options$fallbackLoca, fallbackLocale, locale, _options$debug, debug, langs, promises, responses, _locales;

  return _regenerator["default"].async(function init$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _options$fallbackLoca = options.fallbackLocale, fallbackLocale = _options$fallbackLoca === void 0 ? 'en-US' : _options$fallbackLoca, locale = options.currentLocale, _options$debug = options.debug, debug = _options$debug === void 0 ? false : _options$debug;
          langs = (0, _toConsumableArray2["default"])(new Set([locale, fallbackLocale]));
          _context.prev = 2;
          promises = langs.map(function (lang) {
            return fetch(localeJsonURL(lang)).then(function (response) {
              return response.json();
            });
          });
          _context.next = 6;
          return _regenerator["default"].awrap(Promise.all(promises));

        case 6:
          responses = _context.sent;
          _locales = langs.reduce(function (acc, lang, index) {
            acc[lang] = responses[index];
            return acc;
          }, {});
          console.log({
            locales: _locales
          });
          return _context.abrupt("return", _reactIntl["default"].init({
            locales: _locales,
            warningHandler: warningHandler,
            fallbackLocale: fallbackLocale,
            currentLocale: locale,
            debug: debug,
            commonLocaleDataUrls: langs.reduce(function (acc, lang) {
              var shortLang = lang.split('-')[0].split('_')[0];
              acc[shortLang] = localeDataURL(shortLang);
              return acc;
            }, {})
          }));

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](2);
          console.warn('[i18n] Warning: Could not load locales, please validate language files');
          return _context.abrupt("return", _context.t0);

        case 16:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 12]]);
};

exports.init = init;
var intl = {
  init: init,
  get: get.bind(_reactIntl["default"]),
  getHTML: getHTML.bind(_reactIntl["default"]),
  formatHTMLMessage: formatHTMLMessage.bind(_reactIntl["default"]),
  formatMessage: formatMessage.bind(_reactIntl["default"]),
  determineLocale: determineLocale.bind(_reactIntl["default"]),
  load: load.bind(_reactIntl["default"]),
  loadRemoteScript: loadRemoteScript.bind(_reactIntl["default"]),
  getLocaleFromCookie: getLocaleFromCookie.bind(_reactIntl["default"]),
  getDescendantProp: getDescendantProp.bind(_reactIntl["default"]),
  getLocaleFromURL: getLocaleFromURL.bind(_reactIntl["default"]),
  getLocaleFromBrowser: getLocaleFromBrowser.bind(_reactIntl["default"])
};
exports.intl = intl;
var locales = {};
exports.locales = locales;