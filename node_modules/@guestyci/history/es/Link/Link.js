import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import isEmpty from 'lodash/isEmpty';
import cn from 'classnames';
import createStyles from '@guestyci/foundation/createStyles';
import history from "../utils";
const useStyles = createStyles({
  a: {
    '&:hover': {
      color: 'inherit',
      textDecoration: 'inherit'
    },
    color: 'inherit'
  }
});

const resolvePathName = (path = '', currentPath = '/') => {
  const serializedPath = path.startsWith('/') ? path.substr(1) : path;

  if (currentPath.endsWith('/')) {
    return `${currentPath}${serializedPath}`;
  }

  const currentPathArray = currentPath.split('/');

  if (currentPathArray.length) {
    currentPathArray.pop();
    const currentPathWithoutLastItem = currentPathArray.join('/');
    return `${currentPathWithoutLastItem}/${serializedPath}`;
  }

  return `/${serializedPath}`;
};

const Link = (_ref) => {
  let {
    to,
    href,
    children,
    className,
    onClick
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["to", "href", "children", "className", "onClick"]);

  const classes = useStyles();
  const {
    target
  } = rest;
  const aHref = useMemo(() => {
    if (!isEmpty(href)) {
      return href;
    }

    let location = to;

    if (typeof to === 'string') {
      const locationFromPath = history.parsePath(to);
      locationFromPath.pathname = resolvePathName(locationFromPath.pathname, history.location().pathname);
      location = locationFromPath;
    }

    return location ? history.createHref(location) : '';
  }, [href, to]);
  const onLinkClick = useCallback(e => {
    if (!target || target === '_self') {
      e.preventDefault();

      if (e.ctrlKey || e.metaKey) {
        history.link(aHref, true);
      } else if (!isEmpty(to)) {
        history.push(to);
      } else {
        history.link(href, false);
      }
    }

    if (target === '_none') {
      e.preventDefault();
    }

    if (onClick) {
      onClick(e);
    }
  }, [href, to, target, onClick, history]);
  return /*#__PURE__*/React.createElement("a", _extends({
    href: aHref,
    className: cn(classes.a, className),
    onClick: onLinkClick
  }, rest), children);
};

Link.defaultProps = {
  className: '',
  to: '',
  href: ''
};
Link.propTypes = {
  /** Navigation prop for react route navigation */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /** Navigation prop for window location navigation */
  href: PropTypes.string,

  /** Custom classes to style Link component */
  className: PropTypes.string
};
export default Link;