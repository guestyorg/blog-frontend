import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { fade } from "../theme/utils";
import { white, gray400 } from "../theme/colors";
import createStyles from "../createStyles";
import Button from "../Button";
export const useStyles = createStyles(theme => ({
  root: {
    minWidth: 95
  },
  secondary: {
    color: theme.palette.secondary.default,
    boxShadow: '0 0 3px 0 rgba(0, 2, 3, 0.25)',
    background: white,
    '&:hover': {
      color: theme.palette.primary.default
    },
    '&:disabled': {
      color: fade(theme.palette.secondary.default, 0.3)
    }
  },
  error: {
    color: white,
    backgroundColor: theme.palette.error.default,
    '&:not([disabled]):hover': {
      backgroundColor: ({
        isLoading
      }) => fade(theme.palette.error.default, isLoading ? 1 : 0.85)
    },
    '&:disabled': {
      backgroundColor: fade(theme.palette.error.default, 0.7),
      color: fade(white, 0.8)
    }
  },
  success: {
    color: white,
    backgroundColor: theme.palette.success.default,
    '&:not([disabled]):hover': {
      backgroundColor: ({
        isLoading
      }) => fade(theme.palette.success.default, isLoading ? 1 : 0.85)
    },
    '&:disabled': {
      backgroundColor: fade(theme.palette.success.default, 0.7),
      color: fade(white, 0.8)
    }
  }
}), {
  name: 'FlatButton'
});
const FlatButton = React.forwardRef(function FlatButton(_ref, ref) {
  let {
    children,
    size,
    isLoading,
    onClick,
    disabled,
    type,
    className,
    jss
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "size", "isLoading", "onClick", "disabled", "type", "className", "jss"]);

  const classes = useStyles({
    isLoading,
    jss
  });
  const spinnerColor = type !== null ? 'white' : 'blue';
  const rippleColor = type !== null ? white : gray400;
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    disabled: disabled,
    isLoading: isLoading,
    onClick: onClick,
    size: size,
    rippleColor: rippleColor,
    spinnerColor: spinnerColor,
    className: cn(classes.root, {
      [classes[type]]: type !== null,
      [classes.secondary]: type === null
    }, className),
    ref: ref
  }), children);
});
FlatButton.defaultProps = {
  size: 'md',
  type: null,
  onClick: noop,
  isLoading: false,
  disabled: false
};
FlatButton.propTypes = {
  /** Child element to locate inside of button */
  children: PropTypes.node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: PropTypes.func,

  /** Button size - values =['md', 'lg', 'xl'] */
  size: PropTypes.oneOf(['md', 'lg', 'xl']),

  /** Button type- values =['primary', 'secondary'] */
  type: PropTypes.oneOf(['error', 'success']),

  /** Indicator whether or not to show loader in button */
  isLoading: PropTypes.bool,

  /** Indicator whether or not to button is disabled */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
FlatButton.displayName = 'FlatButton';
export default FlatButton;