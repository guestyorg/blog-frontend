import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import InputLabel from "../InputLabel/InputLabel";
var containerStyle = {
  height: 46,
  borderRadius: 2,
  outline: 'none'
};

var Input = /*#__PURE__*/function (_Component) {
  _inherits(Input, _Component);

  var _super = _createSuper(Input);

  function Input() {
    var _this;

    _classCallCheck(this, Input);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleInputChange = function (e) {
      var target = e.target;
      var _this$props = _this.props,
          id = _this$props.id,
          name = _this$props.name,
          onChange = _this$props.onChange;

      if (onChange) {
        onChange(target.value, id || name);
      }
    };

    return _this;
  }

  _createClass(Input, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          value = _this$props2.value,
          className = _this$props2.className,
          style = _this$props2.style,
          placeholder = _this$props2.placeholder,
          disabled = _this$props2.disabled,
          suffix = _this$props2.suffix,
          containerClassName = _this$props2.containerClassName,
          label = _this$props2.label,
          tooltip = _this$props2.tooltip,
          type = _this$props2.type,
          onChange = _this$props2.onChange,
          required = _this$props2.required,
          props = _objectWithoutProperties(_this$props2, ["value", "className", "style", "placeholder", "disabled", "suffix", "containerClassName", "label", "tooltip", "type", "onChange", "required"]);

      return /*#__PURE__*/React.createElement("div", {
        className: "d-flex-fill flex-column input-wrapper",
        "data-qa": "input"
      }, label && /*#__PURE__*/React.createElement(InputLabel, {
        label: label,
        tooltip: tooltip
      }), /*#__PURE__*/React.createElement("div", {
        className: cn('d-flex-fill flex-start-center border-gray-lighter b-1', "bg-gray-".concat(disabled ? 'lighter' : 'lightest'), containerClassName),
        style: containerStyle
      }, /*#__PURE__*/React.createElement("input", _extends({
        onChange: this.handleInputChange,
        type: type,
        value: value,
        className: cn('py-2', 'px-4', 'd-flex-fill', 'bg-transparent', 'b-0', 'font-size-md', className),
        disabled: disabled,
        style: style,
        placeholder: placeholder
      }, props)), suffix && /*#__PURE__*/React.createElement("div", {
        className: "font-size-md input-suffix cursor-regular pr-4 h-fill flex-center"
      }, suffix)));
    }
  }]);

  return Input;
}(Component);

Input.defaultProps = {
  onChange: noop,
  value: undefined,
  placeholder: '',
  className: '',
  style: undefined,
  suffix: null,
  label: undefined,
  tooltip: undefined,
  type: 'text',
  disabled: false,
  containerClassName: ''
};
Input.propTypes = {
  /** Controlled input value to be set to input */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Function to be called on input value change -
   params value: {String}, id|name :{String|number}
   */
  onChange: PropTypes.func,

  /** Input type */
  type: PropTypes.string,

  /** Input Placeholder */
  placeholder: PropTypes.string,

  /** Input class */
  className: PropTypes.string,

  /** Input style */
  style: PropTypes.shape(),

  /** String to be shown after the input */
  suffix: PropTypes.node,

  /** A label to show on top of the input */
  label: PropTypes.string,

  /** Add tooltip help icon and message - tooltip - String help message */
  tooltip: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** Additional class for input wrapper level */
  containerClassName: PropTypes.string
};
export default Input;