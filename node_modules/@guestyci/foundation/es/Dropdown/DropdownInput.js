import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
import InputStyles from "../Input/styles";
import Row from "../Layout/Row";
import DropdownArrowButton from "./DropdownArrowButton";
import Button from "../Button";
import DropdownClearButton from "./DropdownClearButton";
import TextField from "../TextField";
import { isEmpty } from "../utils";
import DropdownInputSelectedValue from "./DropdownInputSelectedValue";
export const useStyles = createStyles(theme => ({
  root: _extends({}, theme.typography.primary, {}, InputStyles.shared(theme), {
    paddingRight: 0,
    '&:not([disabled]):hover': _extends({}, InputStyles.hover(theme), {
      '& .dropdown-arrow-button': {
        fill: theme.palette.primary.default
      }
    }),
    height: '46px',
    '&::placeholder': InputStyles.placeholder(theme)
  }),
  input: {
    flex: 1,
    overflowX: 'auto',
    height: '100%'
  },
  ellipsis: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  clearIcon: {
    color: theme.palette.secondary.default,
    '&:hover': {
      color: theme.palette.primary.default
    }
  },
  row: {
    height: '100%'
  },
  disabled: InputStyles.disabled(theme),
  focus: InputStyles.focused(theme),
  error: InputStyles.error(theme)
}));
const DropdownInput = React.forwardRef(function DropdownInput(_ref, ref) {
  let {
    value,
    onClick,
    open,
    renderComponent = null,
    renderSelected = null,
    name = '',
    className,
    style,
    disabled,
    onClear,
    noClear,
    jss,
    variant,
    error,
    placeholder
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "onClick", "open", "renderComponent", "renderSelected", "name", "className", "style", "disabled", "onClear", "noClear", "jss", "dataKey", "variant", "error", "placeholder"]);

  const classes = useStyles({
    jss
  });
  const renderValueComponent = renderSelected || renderComponent || null;
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: cn(classes.root, {
      [classes.disabled]: disabled,
      [classes.focus]: open,
      [classes.error]: error
    }, className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/React.createElement(Row, {
    fullWidth: true,
    wrap: false,
    justify: "between",
    align: "center",
    className: classes.row
  }, /*#__PURE__*/React.createElement(Row, {
    fullWidth: true,
    align: "center",
    className: cn(classes.input)
  }, /*#__PURE__*/React.createElement(DropdownInputSelectedValue, {
    renderValue: renderValueComponent,
    value: value,
    variant: variant
  }), isEmpty(value) && /*#__PURE__*/React.createElement(TextField, null, " ", placeholder)), !noClear && /*#__PURE__*/React.createElement(DropdownClearButton, {
    show: !isEmpty(value),
    onClick: onClear
  }), /*#__PURE__*/React.createElement(DropdownArrowButton, {
    disabled: disabled,
    active: open
  })));
});
DropdownInput.propTypes = {
  /** Selected value to pass to the input */
  value: PropTypes.oneOfType([PropTypes.shape(), PropTypes.array, PropTypes.string, PropTypes.number]),
  onClick: PropTypes.func,
  onClear: PropTypes.func,

  /** Prop to remove clear button if exists */
  noClear: PropTypes.bool,

  /** Disabled boolean indicator */
  disabled: PropTypes.bool,

  /** variant for the type of dropdown we want to render - values [single, multiselect, chip] */
  variant: PropTypes.oneOf(['single', 'multiselect', 'chip']),

  /** Additional className */
  className: PropTypes.string,

  /** Additional style */
  style: PropTypes.shape(),

  /** form level name */
  name: PropTypes.string,

  /** Indicator whether or not the dropdown is open */
  open: PropTypes.bool,

  /** Deprecated - use renderValue  */
  renderComponent: PropTypes.func,

  /** Custom node element to render as the value of the input  */
  renderValue: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),

  /** jss override  */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Identifier key when passing complex structurs as value, defaults to value */
  dataKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
};
DropdownInput.displayName = 'DropdownInput';
export default DropdownInput;