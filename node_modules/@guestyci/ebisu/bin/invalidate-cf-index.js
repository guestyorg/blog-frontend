const aws = require('aws-sdk');
const ora = require('ora');
const files = require('../util/files');

const getInvalidationPath = () => {
  const addWildcard = path => path.replace(/(?<=.)\/?$/, '*');
  const removeParam = path => path.replace(/:.*/, '');

  const manifest = files.getManifest();
  if (manifest) {
    const path =
      (manifest.microApp && manifest.microApp.iframeSrc) || manifest.path;
    if (path) {
      return addWildcard(removeParam(path));
    }
  }
};

const run = async ({
  AWS_ACCESS_KEY_ID,
  AWS_SECRET_ACCESS_KEY,
  AWS_CF_APP_DISTRIBUTION_ID,
  AWS_CF_WAIT_FOR_INVALIDATION_COMPLETION = false,
  CALLER_REFERENCE,
}) => {
  const invalidationPath = getInvalidationPath();
  if (!invalidationPath) {
    throw new Error('Could not get application path');
  }

  const spinner = ora();
  const cloudfront = new aws.CloudFront({
    accessKeyId: AWS_ACCESS_KEY_ID,
    secretAccessKey: AWS_SECRET_ACCESS_KEY,
  });

  spinner.start(`Invalidating cache for ${invalidationPath}`);

  const data = await cloudfront
    .createInvalidation({
      DistributionId: AWS_CF_APP_DISTRIBUTION_ID,
      InvalidationBatch: {
        CallerReference: CALLER_REFERENCE,
        Paths: {
          Quantity: 1,
          Items: [invalidationPath],
        },
      },
    })
    .promise();

  spinner.succeed();
  const id = data.Invalidation.Id;
  console.log(`invalidation id: ${id}`);
  const shouldWait = AWS_CF_WAIT_FOR_INVALIDATION_COMPLETION === 'true';
  if (shouldWait) {
    spinner.start(
      'Waiting for invalidation to complete. This might take a while'
    );
    await cloudfront
      .waitFor('invalidationCompleted', {
        DistributionId: AWS_CF_APP_DISTRIBUTION_ID,
        Id: id,
      })
      .promise();
    spinner.succeed();
  }
};

module.exports = run;
