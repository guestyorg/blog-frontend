import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { firstLetterUppercase as capitalize } from "../utils/commonUtility";
import createStyles from "../createStyles";
export const useStyles = createStyles(theme => ({
  h1: _extends({}, theme.typography.h1, {
    color: theme.palette.text.dark
  }),
  h2: _extends({}, theme.typography.h2, {
    color: theme.palette.text.dark
  }),
  h3: _extends({}, theme.typography.h3, {
    color: theme.palette.text.dark
  }),
  h4: theme.typography.h4,
  h5: theme.typography.h5,
  h6: _extends({}, theme.typography.h6, {
    color: theme.palette.text.link
  }),
  h7: theme.typography.h7,
  h8: _extends({}, theme.typography.h8, {
    color: theme.palette.text.dark
  }),
  // deprecated
  running: theme.typography.running,
  // deprecated
  secondary: theme.typography.secondary,
  bold: {
    fontWeight: theme.typography.fontWeight.bold
  },
  italic: {
    fontStyle: theme.typography.fontStyle.italic
  },
  colorInput: {
    color: theme.palette.text.input
  },
  colorWhite: {
    color: theme.palette.text.white
  },
  colorDark: {
    color: theme.palette.text.dark
  },
  colorSecondary: {
    color: theme.palette.text.secondary
  },
  colorLink: {
    color: theme.palette.text.link
  },
  colorError: {
    color: theme.palette.error.text
  },
  colorSuccess: {
    color: theme.palette.success.text
  },
  colorAlert: {
    color: theme.palette.alert.text
  },
  colorInfo: {
    color: theme.palette.info.text
  },
  colorDefault: {
    color: theme.palette.text.default
  },
  colorLight: {
    color: theme.palette.text.light
  },
  colorPlaceholder: {
    color: theme.palette.text.placeholder
  },
  colorInherit: {
    color: 'inherit'
  },
  overflowEllipsis: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  displayBlock: {
    display: 'block'
  },
  displayInline: {
    display: 'inline'
  },
  textCenter: {
    textAlign: 'center'
  },
  textRight: {
    textAlign: 'right'
  },
  textLeft: {
    textAlign: 'left'
  },
  textJustify: {
    textAlign: 'justify'
  }
}), {
  name: 'TextField'
});
const TextField = React.forwardRef(function TextField(_ref, ref) {
  let {
    color = 'initial',
    children,
    className = '',
    bold = false,
    italic = false,
    style = {},
    variant = 'inherit',
    overflowEllipsis = false,
    display = 'initial',
    align = 'inherit',
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["color", "children", "className", "bold", "italic", "style", "variant", "overflowEllipsis", "display", "align", "jss"]);

  const classes = useStyles({
    jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn({
      [classes.overflowEllipsis]: overflowEllipsis,
      [classes.bold]: bold,
      [classes.italic]: italic,
      [classes[`color${capitalize(color)}`]]: color !== 'initial',
      [classes[variant]]: variant !== 'inherit',
      [classes[`text${capitalize(align)}`]]: align !== 'inherit',
      [classes[`display${capitalize(display)}`]]: display !== 'initial'
    }, 'text-field-wrapper', className),
    style: style
  }, props), children);
});
TextField.propTypes = {
  /** Text field text color - value = [
   'default',
   'light',
   'white',
   'dark',
   'input',
   'secondary',
   'link',
   'error',
   'success',
   'info',
   'alert',
   'inherit',
   'initial'
   'placeholder'
   ] */
  color: PropTypes.oneOf(['default', 'light', 'white', 'dark', 'input', 'placeholder', 'secondary', 'link', 'error', 'success', 'info', 'alert', 'inherit', 'initial']),

  /** Indicator whether or not to make font bold */
  bold: PropTypes.bool,

  /** Wherever to use to use font-style italic or not */
  italic: PropTypes.bool,

  /** Text field inner children  - Node element */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** root level class name to add */
  className: PropTypes.string,

  /** root level style name to add */
  style: PropTypes.shape(),

  /** typography variant -  [
   'h1',
   'h2',
   'h3',
   'h4',
   'h5',
   'h6',
   'h7',
   'h8',
   'inherit',
   ] */
  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'inherit']),

  /** Boolean flag to indicate whether or not to truncate text on overflow */
  overflowEllipsis: PropTypes.bool,

  /** Set the display type */
  display: PropTypes.oneOf(['initial', 'block', 'inline']),

  /** Set the text alignment on component */
  align: PropTypes.oneOf(['inherit', 'left', 'right', 'center', 'justify']),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
}; // Hack for withInfo plugin

TextField.displayName = 'TextField';
export default TextField;