import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { forwardRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import memoize from '@guestyci/memoize';
import { Row, Col } from "../Layout";
import { gray300 } from "../theme/colors";
import { StayStatus } from "../enums/enums";
import createStyles from "../createStyles";
import IndicatorCircle from "./IndicatorCircle";
import IndicatorLine from "./IndicatorLine";
import { componentThickness, componentMinLength } from "./helpers";
var Complete = StayStatus.Complete,
    Reserved = StayStatus.Reserved,
    Staying = StayStatus.Staying;
export var getColorBasedStyles = memoize(function (status, isDark, classes) {
  var backgroundSuccess = classes.backgroundSuccess,
      borderSuccess = classes.borderSuccess,
      borderWarning = classes.borderWarning,
      borderDark = classes.borderDark,
      borderGrey = classes.borderGrey;

  switch (status) {
    case Complete:
      return {
        left: [backgroundSuccess, borderSuccess],
        right: [backgroundSuccess, borderSuccess]
      };

    case Reserved:
      return {
        left: [borderWarning],
        right: [borderWarning]
      };

    case Staying:
      return {
        left: [backgroundSuccess, borderSuccess],
        right: [isDark ? borderDark : borderGrey]
      };

    default:
      return {
        left: [isDark ? borderDark : borderGrey],
        right: [isDark ? borderDark : borderGrey]
      };
  }
});
export var useStyles = createStyles(function (theme) {
  return {
    indicatorLineSize: {
      flexGrow: 1
    },
    indicatorCircle: {
      fill: theme.palette.background.white
    },
    indicatorCircleSize: {
      width: componentThickness,
      height: componentThickness
    },
    backgroundSuccess: {
      fill: theme.palette.success["default"]
    },
    borderSuccess: {
      stroke: theme.palette.success["default"]
    },
    borderWarning: {
      stroke: theme.palette.alert["default"]
    },
    borderDark: {
      stroke: theme.palette.text.primary
    },
    borderGrey: {
      stroke: gray300
    },
    rootHorizontal: {
      minWidth: componentMinLength
    },
    rootVertical: {
      minHeight: componentMinLength
    },
    rootHorizontalSmall: {
      width: componentMinLength,
      height: componentThickness
    },
    rootHorizontalFullWidth: {
      width: '100%'
    },
    rootVerticalSmall: {
      height: componentMinLength,
      width: componentThickness
    },
    rootVerticalFullWidth: {
      height: '100%'
    },
    indicatorLine: {},
    root: {}
  };
});
var BaseStayIndicator = forwardRef(function (_ref, ref) {
  var _cn;

  var _ref$status = _ref.status,
      status = _ref$status === void 0 ? StayStatus.Planned : _ref$status,
      className = _ref.className,
      dark = _ref.dark,
      jss = _ref.jss,
      fullWidth = _ref.fullWidth,
      vertical = _ref.vertical;
  var classes = useStyles({
    jss: jss
  });
  var Wrapper = vertical ? Col : Row;
  return /*#__PURE__*/React.createElement(Wrapper, {
    className: cn((_cn = {}, _defineProperty(_cn, classes.rootHorizontal, !vertical), _defineProperty(_cn, classes.rootVertical, vertical), _defineProperty(_cn, classes.rootHorizontalSmall, !vertical), _defineProperty(_cn, classes.rootHorizontalFullWidth, !vertical && fullWidth), _defineProperty(_cn, classes.rootVerticalSmall, vertical), _defineProperty(_cn, classes.rootVerticalFullWidth, vertical && fullWidth), _cn), classes.root, className),
    ref: ref
  }, /*#__PURE__*/React.createElement(IndicatorCircle, {
    className: cn.apply(void 0, ['stay-indicator-circle-1', classes.indicatorCircle, classes.indicatorCircleSize].concat(_toConsumableArray(getColorBasedStyles(status, dark, classes).left)))
  }), /*#__PURE__*/React.createElement(IndicatorLine, {
    vertical: vertical,
    className: cn.apply(void 0, ['stay-indicator-line-1', classes.indicatorLine, classes.indicatorLineSize].concat(_toConsumableArray(getColorBasedStyles(status, dark, classes).left)))
  }), /*#__PURE__*/React.createElement(IndicatorLine, {
    vertical: vertical,
    className: cn.apply(void 0, ['stay-indicator-line-2', classes.indicatorLine, classes.indicatorLineSize].concat(_toConsumableArray(getColorBasedStyles(status, dark, classes).right)))
  }), /*#__PURE__*/React.createElement(IndicatorCircle, {
    className: cn.apply(void 0, ['stay-indicator-circle-2', classes.indicatorCircle, classes.indicatorCircleSize].concat(_toConsumableArray(getColorBasedStyles(status, dark, classes).right)))
  }));
});
BaseStayIndicator.displayName = 'BaseStayIndicator';
BaseStayIndicator.propTypes = {
  /** Stay status - Enum (StayStatus- [Reserved, Planned, Staying, Complete,]) */
  status: PropTypes.oneOf([StayStatus.Planned, StayStatus.Staying, StayStatus.Complete, StayStatus.Reserved]),

  /** Additional class to add to StayIndicator */
  className: PropTypes.string,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Set orientation as vertical(default is horizontal) */
  vertical: PropTypes.bool,

  /** Set theme to dark */
  dark: PropTypes.bool,

  /** Set the stay indicator to fill space */
  fullWidth: PropTypes.bool,

  /** reference that will be applied to Row container */
  ref: PropTypes.shape()
};
export default BaseStayIndicator;