import React, { useMemo, forwardRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
export const useStyles = createStyles({
  root: {
    minWidth: props => props.width,
    minHeight: props => props.height
  },
  fillInherit: {
    fill: 'currentColor'
  },
  fill: {
    fill: ({
      fillColor
    }) => fillColor || 'currentColor'
  },
  stroke: {
    strokeColor: ({
      strokeColor
    }) => strokeColor || 'initial'
  }
}, {
  name: 'Icon'
});
const Icon = forwardRef(function Icon({
  width,
  height,
  fillColor,
  strokeColor,
  className,
  svg,
  style,
  jss
}, ref) {
  const classes = useStyles({
    width,
    height,
    fillColor,
    strokeColor,
    jss
  });
  const Svg = useMemo(() => svg, [svg]);
  return /*#__PURE__*/React.createElement(Svg, {
    ref: ref,
    width: width,
    height: height,
    style: style,
    className: cn(classes.root, {
      [classes.fillInherit]: !fillColor,
      [classes.fill]: fillColor,
      [classes.stroke]: strokeColor
    }, className)
  });
});
Icon.defaultProps = {
  fillColor: '',
  strokeColor: '',
  width: 20,
  height: 20,
  className: '',
  style: {}
};
Icon.propTypes = {
  /** Icon width in pixels */
  width: PropTypes.number,

  /** Icon height in pixels */
  height: PropTypes.number,

  /** Icon fill color - see style guide colors for options */
  fillColor: PropTypes.string,

  /** Icon stroke color - see style guide colors for options */
  strokeColor: PropTypes.string,

  /** Class to add to the Icon component */
  className: PropTypes.string,

  /** Style to add to Icon component */
  style: PropTypes.shape(),

  /** The svg icon to render */
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]).isRequired,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
}; // Hack for withInfo plugin

Icon.displayName = 'Icon';
export default Icon;