"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

/* eslint-disable */

/**
 * This script will extract the internationalization messages from all components
 and package them in the translation json files in the translations file.
 */
var fs = require('fs');

var nodeGlob = require('glob');

var transform = require('babel-core').transform;

var animateProgress = require("./helpers/progress");

var addCheckmark = require("./helpers/checkmark");

var pkg = require("../../package.json");

var presets = pkg.babel.presets;
var plugins = pkg.babel.plugins || [];
/* @CHANGE_TO_FIT_YOUR_FOLDERS */

var i18n = require("../../src/i18n");

var DEFAULT_LOCALE = 'en';
/* @CHANGE_TO_FIT_YOUR_FOLDERS */

var PATH_TO_TRANSLATIONS = 'src/locales';

require('shelljs/global'); // Glob to match all js files except test files


var FILES_TO_PARSE = 'src/**/!(*.test).js?(x)';
var locales = i18n.SUPPORTED_LOCALES;

var newLine = function newLine() {
  return process.stdout.write('\n');
}; // Progress Logger


var progress;

var task = function task(message) {
  progress = animateProgress(message);
  process.stdout.write(message);
  return function (error) {
    if (error) {
      process.stderr.write(error);
    }

    clearTimeout(progress);
    return addCheckmark(function () {
      return newLine();
    });
  };
}; // Wrap async functions below into a promise


var glob = function glob(pattern) {
  return new Promise(function (resolve, reject) {
    nodeGlob(pattern, function (error, value) {
      return error ? reject(error) : resolve(value);
    });
  });
};

var readFile = function readFile(fileName) {
  return new Promise(function (resolve, reject) {
    fs.readFile(fileName, function (error, value) {
      return error ? reject(error) : resolve(value);
    });
  });
};

var writeFile = function writeFile(fileName, data) {
  return new Promise(function (resolve, reject) {
    fs.writeFile(fileName, data, function (error, value) {
      return error ? reject(error) : resolve(value);
    });
  });
}; // Store existing translations into memory


var oldLocaleMappings = [];
var localeMappings = []; // Loop to run once per locale

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = locales[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var locale = _step.value;
    oldLocaleMappings[locale] = {};
    localeMappings[locale] = {}; // File to store translation messages into

    var translationFileName = "".concat(PATH_TO_TRANSLATIONS, "/").concat(locale, ".json");

    try {
      // Parse the old translation message JSON files
      var messages = JSON.parse(fs.readFileSync(translationFileName));
      var messageKeys = Object.keys(messages);

      for (var _i = 0, _messageKeys = messageKeys; _i < _messageKeys.length; _i++) {
        var messageKey = _messageKeys[_i];
        oldLocaleMappings[locale][messageKey] = messages[messageKey];
      }
    } catch (error) {
      if (error.code !== 'ENOENT') {
        process.stderr.write("There was an error loading this translation file: ".concat(translationFileName, "\n        \n").concat(error));
      }
    }
  }
  /* push `react-intl` plugin to the existing plugins that are already configured in `package.json`
     Example:
     ```
    "babel": {
      "plugins": [
        ["transform-object-rest-spread", { "useBuiltIns": true }]
      ],
      "presets": [
        "latest",
        "react"
      ]
    }
    ```
  */

  /* @CHANGE_TO_FIT_YOUR_FOLDERS packagename for defineMessages*/

} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

plugins.push(['react-intl', {
  moduleSourceName: 'define-messages'
}]);

var extractFromFile = function extractFromFile(fileName) {
  var code, _ref, result, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, message, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, locale, oldLocaleMapping, newMsg;

  return _regenerator["default"].async(function extractFromFile$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return _regenerator["default"].awrap(readFile(fileName));

        case 3:
          code = _context.sent;
          _context.next = 6;
          return _regenerator["default"].awrap(transform(code, {
            presets: presets,
            plugins: plugins
          }));

        case 6:
          _ref = _context.sent;
          result = _ref.metadata;
          // object-shorthand
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context.prev = 11;
          _iterator2 = result['react-intl'].messages[Symbol.iterator]();

        case 13:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context.next = 37;
            break;
          }

          message = _step2.value;
          _iteratorNormalCompletion3 = true;
          _didIteratorError3 = false;
          _iteratorError3 = undefined;
          _context.prev = 18;

          for (_iterator3 = locales[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            locale = _step3.value;
            oldLocaleMapping = oldLocaleMappings[locale][message.id]; // Merge old translations into the babel extracted instances where react-intl is used

            newMsg = locale === DEFAULT_LOCALE ? message.defaultMessage : '';
            localeMappings[locale][message.id] = oldLocaleMapping ? oldLocaleMapping : newMsg;
          }

          _context.next = 26;
          break;

        case 22:
          _context.prev = 22;
          _context.t0 = _context["catch"](18);
          _didIteratorError3 = true;
          _iteratorError3 = _context.t0;

        case 26:
          _context.prev = 26;
          _context.prev = 27;

          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }

        case 29:
          _context.prev = 29;

          if (!_didIteratorError3) {
            _context.next = 32;
            break;
          }

          throw _iteratorError3;

        case 32:
          return _context.finish(29);

        case 33:
          return _context.finish(26);

        case 34:
          _iteratorNormalCompletion2 = true;
          _context.next = 13;
          break;

        case 37:
          _context.next = 43;
          break;

        case 39:
          _context.prev = 39;
          _context.t1 = _context["catch"](11);
          _didIteratorError2 = true;
          _iteratorError2 = _context.t1;

        case 43:
          _context.prev = 43;
          _context.prev = 44;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 46:
          _context.prev = 46;

          if (!_didIteratorError2) {
            _context.next = 49;
            break;
          }

          throw _iteratorError2;

        case 49:
          return _context.finish(46);

        case 50:
          return _context.finish(43);

        case 51:
          _context.next = 56;
          break;

        case 53:
          _context.prev = 53;
          _context.t2 = _context["catch"](0);
          process.stderr.write("Error transforming file: ".concat(fileName, "\n").concat(_context.t2));

        case 56:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[0, 53], [11, 39, 43, 51], [18, 22, 26, 34], [27,, 29, 33], [44,, 46, 50]]);
};

(function main() {
  var memoryTaskDone, files, extractTaskDone, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _loop, _iterator4, _step4;

  return _regenerator["default"].async(function main$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          memoryTaskDone = task('Storing language files in memory');
          _context3.next = 3;
          return _regenerator["default"].awrap(glob(FILES_TO_PARSE));

        case 3:
          files = _context3.sent;
          memoryTaskDone();
          extractTaskDone = task('Run extraction on all files'); // Run extraction on all files that match the glob on line 16

          _context3.next = 8;
          return _regenerator["default"].awrap(Promise.all(files.map(function (fileName) {
            return extractFromFile(fileName);
          })));

        case 8:
          extractTaskDone(); // Make the directory if it doesn't exist, especially for first run

          mkdir('-p', "".concat(PATH_TO_TRANSLATIONS));
          _iteratorNormalCompletion4 = true;
          _didIteratorError4 = false;
          _iteratorError4 = undefined;
          _context3.prev = 13;

          _loop = function _loop() {
            var locale, translationFileName, _localeTaskDone, messages, prettified;

            return _regenerator["default"].async(function _loop$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    locale = _step4.value;
                    translationFileName = "".concat(PATH_TO_TRANSLATIONS, "/").concat(locale, ".json");
                    _context2.prev = 2;
                    _localeTaskDone = task("Writing translation messages for ".concat(locale, " to: ").concat(translationFileName)); // Sort the translation JSON file so that git diffing is easier
                    // Otherwise the translation messages will jump around every time we extract

                    messages = {};
                    Object.keys(localeMappings[locale]).sort().forEach(function (key) {
                      messages[key] = localeMappings[locale][key];
                    }); // Write to file the JSON representation of the translation messages

                    prettified = "".concat(JSON.stringify(messages, null, 2), "\n");
                    _context2.next = 9;
                    return _regenerator["default"].awrap(writeFile(translationFileName, prettified));

                  case 9:
                    _localeTaskDone();

                    _context2.next = 15;
                    break;

                  case 12:
                    _context2.prev = 12;
                    _context2.t0 = _context2["catch"](2);
                    localeTaskDone("There was an error saving this translation file: ".concat(translationFileName, "\n        \n").concat(_context2.t0));

                  case 15:
                  case "end":
                    return _context2.stop();
                }
              }
            }, null, null, [[2, 12]]);
          };

          _iterator4 = locales[Symbol.iterator]();

        case 16:
          if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
            _context3.next = 22;
            break;
          }

          _context3.next = 19;
          return _regenerator["default"].awrap(_loop());

        case 19:
          _iteratorNormalCompletion4 = true;
          _context3.next = 16;
          break;

        case 22:
          _context3.next = 28;
          break;

        case 24:
          _context3.prev = 24;
          _context3.t0 = _context3["catch"](13);
          _didIteratorError4 = true;
          _iteratorError4 = _context3.t0;

        case 28:
          _context3.prev = 28;
          _context3.prev = 29;

          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }

        case 31:
          _context3.prev = 31;

          if (!_didIteratorError4) {
            _context3.next = 34;
            break;
          }

          throw _iteratorError4;

        case 34:
          return _context3.finish(31);

        case 35:
          return _context3.finish(28);

        case 36:
          process.exit();

        case 37:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[13, 24, 28, 36], [29,, 31, 35]]);
})();