import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import { DropdownButtonColors } from "../../enums/enums";
import withDropdown from "../baseDropdown/withDropdown";
import DropdownMenu from "../baseDropdown/DropdownMenu";
import MenuItem from "../Menu/MenuItem";
import DropdownButtonField from "./DropdownButtonField";

var ButtonDropdown = function ButtonDropdown(_ref) {
  var options = _ref.options,
      toggleCollapse = _ref.toggleCollapse,
      isCollapsed = _ref.isCollapsed,
      selectedItem = _ref.selectedItem,
      name = _ref.name,
      className = _ref.className,
      style = _ref.style,
      onSelectItem = _ref.onSelectItem,
      isFetching = _ref.isFetching,
      fetchNextPage = _ref.fetchNextPage,
      pageCount = _ref.pageCount,
      currentPage = _ref.currentPage,
      type = _ref.type,
      title = _ref.title,
      disabled = _ref.disabled,
      inDialog = _ref.inDialog,
      closeDropdown = _ref.closeDropdown;
  return /*#__PURE__*/React.createElement("div", {
    className: cn('d-flex-fill relative flex-column', className),
    style: style,
    name: name,
    "data-qa": "button-dropdown"
  }, /*#__PURE__*/React.createElement(DropdownButtonField, {
    toggleCollapse: toggleCollapse,
    type: type,
    title: title,
    inDialog: inDialog,
    disabled: disabled,
    isCollapsed: isCollapsed,
    className: "dropdown-btn"
  }), /*#__PURE__*/React.createElement(DropdownMenu, {
    pageCount: pageCount,
    isEmptyState: !options.length,
    currentPage: currentPage,
    onLoadMore: fetchNextPage,
    isFetching: isFetching,
    isCollapsed: isCollapsed,
    onDismiss: closeDropdown
  }, options.map(function (item) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: item.value,
      value: item,
      isSelected: item.value === selectedItem.value,
      onClick: onSelectItem
    }, item.label);
  })));
};

ButtonDropdown.defaultProps = {
  className: '',
  style: {},
  name: '',
  onLoadMore: noop,
  isFetching: false,
  pageCount: 0,
  type: 'plain',
  disabled: false,
  value: undefined,
  inDialog: false,
  onChange: noop,
  onSelect: noop
};
ButtonDropdown.propTypes = {
  /** The dropdown options to show - Structure ({
   label: {Node} - the label to present,
   value: {String|number} - unique value to be sent to the server,
  name: {String} - required if value to present if label is component-shown in input once selected,
  })
   */
  options: PropTypes.arrayOf(PropTypes.object).isRequired,

  /** Callback function to be called on value changed - Deprecated */
  onSelect: PropTypes.func,

  /** Callback function to be called on value changed */
  onChange: PropTypes.func,

  /** Callback function to be called on dropdown visibility change */
  onVisibilityChange: PropTypes.func,

  /** Additional class for dropdown root */
  className: PropTypes.string,

  /** Additional style for dropdown root */
  style: PropTypes.shape(),

  /** form element name */
  name: PropTypes.string,

  /** Callback function to fetch more items - required for infinite scroll */
  onLoadMore: PropTypes.func,

  /** Total page count for pagination - required to allow infinite scroll */
  pageCount: PropTypes.number,

  /** Indicator whether or not we are currently fetching value for infinite scroll */
  isFetching: PropTypes.bool,

  /** button type (sets the color) */
  type: PropTypes.oneOf(Object.keys(DropdownButtonColors)),

  /** button title */
  title: PropTypes.string.isRequired,

  /** button disable indicator */
  disabled: PropTypes.bool,

  /** button disable indicator */
  inDialog: PropTypes.bool,

  /** Value to set for the dropdown to make controlled */
  value: PropTypes.oneOfType([PropTypes.shape(), PropTypes.string, PropTypes.number])
};
export var ButtonDropdownComponent = ButtonDropdown;
export default withDropdown(ButtonDropdown);