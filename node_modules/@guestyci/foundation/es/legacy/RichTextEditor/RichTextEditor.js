import cn from 'classnames';
import noop from 'lodash/noop';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import { Editor, EditorState, RichUtils } from 'draft-js';
import { convertToHTML, convertFromHTML } from 'draft-convert';
import 'draft-js/dist/Draft.css';
import InputLabel from "../InputLabel/InputLabel";
import RichTextEditorToolbar from "./RichTextEditorToolbar";
import withFocus from "../../withFocus";
import { customStyleMap, customStyleConvertMap } from "./richTextEditorConf";
import { Theme } from "../../enums/enums";

class RichTextEditor extends Component {
  constructor(props) {
    super(props);

    this.onChange = editorState => {
      const {
        onChange
      } = this.props;
      const editorHtmlState = this.editorStateToHtml(editorState);
      this.setState({
        editorState,
        editorHtmlState
      });
      onChange(editorHtmlState);
    };

    this.setEditorState = editorState => {
      this.setState({
        editorState
      });
    };

    this.setDraftRef = ref => {
      this.draftjsRef = ref;
    };

    this.handleKeyCommand = (command, editorState) => {
      const newState = RichUtils.handleKeyCommand(editorState, command);

      if (newState) {
        this.onChange(newState);
        return true;
      }

      return false;
    };

    this.htmlToEditorState = html => {
      const contentState = convertFromHTML({
        htmlToStyle: (nodeName, node, currentStyle) => {
          if (nodeName === 'span') {
            const color = customStyleConvertMap[node.style.color];
            const font = customStyleConvertMap[node.style.fontSize];

            if (color) {
              return currentStyle.add(color);
            }

            if (font) {
              return currentStyle.add(font);
            }
          }

          return currentStyle;
        }
      })(html);
      return EditorState.createWithContent(contentState);
    };

    this.toggleInlineType = inlineType => {
      const {
        editorState
      } = this.state;
      this.onChange(RichUtils.toggleInlineStyle(editorState, inlineType));
    };

    this.toggleBlockType = blockType => {
      const {
        editorState
      } = this.state;
      this.onChange(RichUtils.toggleBlockType(editorState, blockType));
    };

    this.editorStateToHtml = state => {
      const contentState = state.getCurrentContent();

      if (!contentState.hasText()) {
        return '';
      }

      const html = convertToHTML({
        styleToHTML: style => {
          if (customStyleMap[style]) {
            return /*#__PURE__*/React.createElement("span", {
              style: customStyleMap[style]
            });
          }
        },
        blockToHTML: block => {
          if (block.type === 'unstyled') {
            if (block.text === ' ' || block.text === '') return /*#__PURE__*/React.createElement("br", null);
            return /*#__PURE__*/React.createElement("div", null);
          }
        }
      })(contentState);
      return html;
    };

    this.state = {
      editorState: props.value ? this.htmlToEditorState(props.value) : EditorState.createEmpty(),
      editorHtmlState: props.value
    };
    this.draftRef = null;
  }

  componentDidMount() {
    const {
      autoFocus
    } = this.props;

    if (autoFocus) {
      this.draftjsRef.focus();
    }
  }

  componentDidUpdate(prevProps) {
    const {
      value: newValue
    } = this.props;
    const {
      editorHtmlState
    } = this.state;
    const {
      value: oldValue
    } = prevProps;

    if (oldValue !== newValue && newValue !== editorHtmlState) {
      this.setEditorState(this.htmlToEditorState(newValue));
    }
  }

  render() {
    const {
      label,
      disabled,
      containerStyle,
      placeholder,
      tooltip,
      showToolbar,
      maxHeight,
      onBlur,
      onFocus,
      theme,
      className
    } = this.props;
    const {
      editorState
    } = this.state;
    return /*#__PURE__*/React.createElement("div", {
      className: "d-flex-fill flex-column input-wrapper",
      "data-qa": "rich-text-editor"
    }, label && /*#__PURE__*/React.createElement(InputLabel, {
      label: label,
      tooltip: tooltip
    }), /*#__PURE__*/React.createElement("div", {
      className: cn('d-flex-fill flex-column b-1', theme === Theme.Light ? 'border-gray-lightest bg-white' : 'border-gray-light bg-gray-lightest', 'flex-start-center pos-relative', {
        'bg-gray-lighter': disabled
      }, className),
      style: containerStyle
    }, showToolbar && /*#__PURE__*/React.createElement(RichTextEditorToolbar, {
      key: 0,
      theme: theme,
      toggleInlineType: this.toggleInlineType,
      toggleBlockType: this.toggleBlockType,
      editorState: editorState
    }), /*#__PURE__*/React.createElement("div", {
      className: cn('d-flex-fill', 'px-6', 'py-3', {
        [`max-height-${maxHeight}`]: maxHeight
      }, theme === Theme.Light ? 'bg-white' : 'bg-gray-lightest', 'overflow-y-auto')
    }, /*#__PURE__*/React.createElement(Editor, {
      ref: this.setDraftRef,
      placeholder: placeholder,
      editorState: editorState,
      onChange: this.onChange,
      readOnly: disabled,
      handleKeyCommand: this.handleKeyCommand,
      customStyleMap: customStyleMap,
      onFocus: onFocus,
      onBlur: onBlur
    }))));
  }

}

RichTextEditor.defaultProps = {
  value: undefined,
  onChange: noop,
  placeholder: '',
  label: null,
  tooltip: null,
  disabled: false,
  showToolbar: true,
  className: '',
  maxHeight: 250,
  theme: Theme.Dark,
  autoFocus: false
};
RichTextEditor.propTypes = {
  /** Initial text value */
  value: PropTypes.string,

  /** On change trigger function to update on text change */
  onChange: PropTypes.func,

  /** TextArea Placeholder */
  placeholder: PropTypes.string,

  /** A label to show on top of the input */
  label: PropTypes.string,

  /** Add tooltip help icon and message - tooltip - String help message */
  tooltip: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** Indicator whether or not to show the toolbar */
  showToolbar: PropTypes.bool,

  /** Classes to add */
  className: PropTypes.string,

  /** Max height for component */
  maxHeight: PropTypes.number,

  /** Set theme for component */
  theme: PropTypes.oneOf([Theme.Light, Theme.Dark]),

  /** Boolean to define if should be auto focused */
  autoFocus: PropTypes.bool
};
export const RichTextEditorComponent = RichTextEditor;
export default withFocus(RichTextEditor);