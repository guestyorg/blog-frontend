import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";

const generateBoxShadowClasses = elevations => elevations.reduce((acc, el, index) => {
  acc[`boxShadow${index}`] = {
    'box-shadow': el
  };
  return acc;
}, {});

export const useStyles = createStyles(theme => _extends({
  root: {
    borderRadius: 2,
    width: 'auto',
    transition: theme.transition.create('box-shadow')
  },
  bgColor: {
    backgroundColor: ({
      bgColor
    }) => bgColor
  },
  square: {
    borderRadius: 0
  },
  box: {
    border: `1px solid ${theme.palette.border}`
  }
}, generateBoxShadowClasses(theme.boxShadow)), {
  name: 'Paper'
});
const Paper = React.forwardRef(function Paper(_ref, ref) {
  let {
    className = '',
    bgColor,
    style = {},
    elevation = 1,
    children,
    jss = {},
    box = false,
    square = false
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "bgColor", "style", "elevation", "children", "jss", "box", "square"]);

  const classes = useStyles({
    bgColor,
    jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn(classes.root, {
      [classes.bgColor]: bgColor,
      [classes.box]: box,
      [classes[`boxShadow${elevation}`]]: !box,
      [classes.square]: square
    }, className),
    style: style
  }, props), children);
});
Paper.propTypes = {
  /** Paper inner content */
  children: PropTypes.node.isRequired,

  /** Paper background color - from our theme colors */
  bgColor: PropTypes.string,

  /** Paper box shadow elevation - values 0-5 */
  elevation: PropTypes.oneOf([0, 1, 2, 3, 4, 5]),

  /** Paper additional classes */
  className: PropTypes.string,

  /** Paper additional styles */
  style: PropTypes.shape(),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Create Paper as a card box */
  box: PropTypes.bool,

  /** Set paper border radius to 0 */
  square: PropTypes.bool
}; // Hack for withInfo plugin

Paper.displayName = 'Paper';
export default Paper;