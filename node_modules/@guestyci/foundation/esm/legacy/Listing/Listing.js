import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import withStyles from 'react-jss';
import isFunction from 'lodash/isFunction';
import Avatar from "../Avatar/Avatar";
import TextField from "../TextField/TextField";
import Row from "../Row/Row";
import Col from "../Col/Col";
var styles = {
  text: {
    width: function width(_ref) {
      var size = _ref.size;
      return "calc(100% - ".concat(size === 'sm' ? 30 : 45, "px)");
    }
  }
};

var Listing = /*#__PURE__*/function (_Component) {
  _inherits(Listing, _Component);

  var _super = _createSuper(Listing);

  function Listing() {
    var _this;

    _classCallCheck(this, Listing);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleListingClick = function () {
      var _this$props = _this.props,
          disabled = _this$props.disabled,
          onClick = _this$props.onClick,
          name = _this$props.name;

      if (isFunction(onClick) && !disabled) {
        onClick(name);
      }
    };

    return _this;
  }

  _createClass(Listing, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          img = _this$props2.img,
          _this$props2$title = _this$props2.title,
          title = _this$props2$title === void 0 ? '' : _this$props2$title,
          subTitle = _this$props2.subTitle,
          size = _this$props2.size,
          className = _this$props2.className,
          style = _this$props2.style,
          onClick = _this$props2.onClick,
          disabled = _this$props2.disabled,
          isMultiUnit = _this$props2.isMultiUnit,
          classes = _this$props2.classes;
      return /*#__PURE__*/React.createElement("div", {
        role: "presentation",
        className: cn('flex-start-center w-inherit transition-color', className, {
          'text-hover-blue clickable': !disabled && isFunction(onClick)
        }, {
          'disabled-light': disabled
        }),
        style: style,
        onClick: this.handleListingClick,
        "data-qa": "listing"
      }, /*#__PURE__*/React.createElement(Row, {
        align: "center",
        fullWidth: true,
        justify: "start",
        spacing: "sm"
      }, /*#__PURE__*/React.createElement(Avatar, {
        listing: true,
        bordered: isMultiUnit,
        src: img,
        size: size
      }), /*#__PURE__*/React.createElement(Col, {
        dense: true,
        className: classes.text
      }, /*#__PURE__*/React.createElement(TextField, {
        size: size === 'md' ? 'lg' : 'md',
        className: "overflow-ellipsis"
      }, title), subTitle && /*#__PURE__*/React.createElement(TextField, {
        size: size,
        className: "listing-subtitle  overflow-ellipsis"
      }, subTitle))));
    }
  }]);

  return Listing;
}(Component);

Listing.defaultProps = {
  img: '',
  subTitle: '',
  size: 'md',
  className: '',
  style: {},
  onClick: null,
  disabled: false,
  isMultiUnit: false
};
Listing.propTypes = {
  /** Image url for listing */
  img: PropTypes.string,

  /** Listing full name */
  title: PropTypes.string.isRequired,

  /** Listing address */
  subTitle: PropTypes.string,

  /** avatar icon size */
  size: PropTypes.oneOf(['sm', 'md']),

  /** Additional class name for listing */
  className: PropTypes.string,

  /** Additional style for listing */
  style: PropTypes.shape(),

  /** CB function for listing click */
  onClick: PropTypes.func,

  /** Indicator whether or not the listing component is disabled */
  disabled: PropTypes.bool,

  /** Indicator whether or not we are in multi unit */
  isMultiUnit: PropTypes.bool
};
export var ListingComponent = Listing;
export default withStyles(styles)(Listing);