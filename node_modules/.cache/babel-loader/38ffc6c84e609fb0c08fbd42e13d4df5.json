{"ast":null,"code":"import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk'; // temp reducer to be removed\n// Once real reducers added you can delete this\n\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}; // shape the state structure\n\n\nconst rootReducer = combineReducers({\n  tempReducer,\n  form: formReducer\n}); // Add custom middleware here\n\nconst featureMiddleware = [];\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\n\nexport default ((initialState = {}, api) => createStore(rootReducer, initialState, applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))));","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/store.js"],"names":["applyMiddleware","combineReducers","createStore","reducer","formReducer","thunk","tempReducer","state","action","type","rootReducer","form","featureMiddleware","initialState","api","withExtraArgument"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,QAA8D,OAA9D;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACE;AACE,aAAOF,KAAP;AAFJ;AAID,CALD,C,CAMA;;;AACA,MAAMG,WAAW,GAAGT,eAAe,CAAC;AAClCK,EAAAA,WADkC;AAElCK,EAAAA,IAAI,EAAEP;AAF4B,CAAD,CAAnC,C,CAKA;;AACA,MAAMQ,iBAAiB,GAAG,EAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,gBAAe,CAACC,YAAY,GAAG,EAAhB,EAAoBC,GAApB,KACbZ,WAAW,CACTQ,WADS,EAETG,YAFS,EAGTb,eAAe,CAAC,GAAGY,iBAAJ,EAAuBP,KAAK,CAACU,iBAAN,CAAwBD,GAAxB,CAAvB,CAHN,CADb","sourcesContent":["import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport thunk from 'redux-thunk';\n\n// temp reducer to be removed\n// Once real reducers added you can delete this\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n// shape the state structure\nconst rootReducer = combineReducers({\n  tempReducer,\n  form: formReducer,\n});\n\n// Add custom middleware here\nconst featureMiddleware = [];\n\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\nexport default (initialState = {}, api) =>\n  createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n  );\n"]},"metadata":{},"sourceType":"module"}