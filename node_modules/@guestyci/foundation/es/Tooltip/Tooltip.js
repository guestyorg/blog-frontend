import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import Popover from "../Popover";
import { OriginDirectionType } from "../enums";
import useHover from "../useHover";
const Tooltip = React.forwardRef(function Tooltip(_ref, ref) {
  let {
    children,
    className = '',
    body = null,
    style = {},
    placement = OriginDirectionType.Top,
    delay,
    fullWidth = false,
    interactive = false,
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "className", "body", "style", "placement", "delay", "fullWidth", "interactive", "jss"]);

  const [isHoveringBody, hoverRef] = useHover({
    delay
  });
  const [isHoveringTooltip, setHoveringTooltip] = useState(false);

  const handleTooltipMouseEnter = () => setHoveringTooltip(true);

  const handleTooltipMouseLeave = () => setHoveringTooltip(false);

  const isOpen = !!isHoveringBody || interactive && isHoveringTooltip;
  return /*#__PURE__*/React.createElement(Popover, _extends({}, props, {
    ref: ref,
    anchor: hoverRef,
    backdrop: false,
    delay: delay,
    className: className,
    body: body,
    style: style,
    placement: placement,
    fullWidth: fullWidth,
    jss: jss,
    open: isOpen,
    onMouseEnter: handleTooltipMouseEnter,
    onMouseLeave: handleTooltipMouseLeave
  }), children);
});
Tooltip.propTypes = {
  /** Node - the component wrapped by the tooltip */
  children: PropTypes.node.isRequired,

  /** String || React Element - The tooltip body */
  body: PropTypes.node,

  /** onClose  - Function to support the popover toggle */
  onClose: PropTypes.func,

  /** Additional component class */
  className: PropTypes.string,

  /** Additional component style */
  style: PropTypes.shape(),

  /** Tooltip placement supporting:
   *  (top, bottom, left, right, top start, top end, bottom start, bottom end, left start, left end, right start, right end )
   *  */
  placement: PropTypes.string,

  /** Set the popover content to fit to its children full width */
  fullWidth: PropTypes.bool,

  /** Tooltip entry and leave delay */
  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({
    enter: PropTypes.number,
    exit: PropTypes.number
  })]),

  /** If true it won't close when the user hovers over the tooltip before the delay.exit is expired. */
  interactive: PropTypes.bool,

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Tooltip.displayName = 'Tooltip';
export default Tooltip;