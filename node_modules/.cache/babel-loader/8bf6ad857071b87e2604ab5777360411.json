{"ast":null,"code":"// import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from \"redux-thunk\";\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n// ////\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n// const initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n//   accountSignin: {\n//     accountInfo: localStorage.getItem(\"accountInfo\")\n//       ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//       : null,\n//   },\n// };\n// const reducer = combineReducers({\n//   userRegister: userRegisterReducer,\n//   userSignin: userSigninReducer,\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n//   /////\n//   blogRegister: blogRegisterReducer,\n//   blogSignin: blogSigninReducer,\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n//   /////\n//   accountRegister: accountRegisterReducer,\n//   accountSignin: accountSigninReducer,\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   reducer,\n//   initialState,\n//   composeEnhancer(applyMiddleware(thunk))\n// );\n// export default store;\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport thunk from \"redux-thunk\";\nimport { accountDeleteReducer, accountDetailsReducer, accountListReducer, accountRegisterReducer, accountSigninReducer, accountUpdateReducer } from \"./reducers/accountReducers\";\nimport { userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userAddReducer, userSigninReducer, userUpdateReducer, userDataReducer } from \"./reducers/userReducers\";\nimport { blogDeleteReducer, postDeleteReducer, blogDetailsReducer, postDetailsReducer, blogListReducer, blogRegisterReducer, blogAddReducer, blogPreprodAddReducer, postAddReducer, blogSigninReducer, blogUpdateReducer, postUpdateReducer } from \"./reducers/blogReducers\";\nconst initialState = {\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\") ? JSON.parse(localStorage.getItem(\"accountInfo\")) : null\n  },\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null\n  },\n  userInfoData: localStorage.getItem(\"userInfoData\") ? JSON.parse(localStorage.getItem(\"userInfoData\")) : null,\n  accountData: localStorage.getItem(\"accountData\") ? JSON.parse(localStorage.getItem(\"accountData\")) : null\n}; // temp reducer to be removed\n// Once real reducers added you can delete this\n\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}; // shape the state structure\n\n\nconst rootReducer = combineReducers({\n  userData: userDataReducer,\n  userRegister: userRegisterReducer,\n  userAdd: userAddReducer,\n  userSignin: userSigninReducer,\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  blogRegister: blogRegisterReducer,\n  blogAdd: blogAddReducer,\n  blogPreprodAdd: blogPreprodAddReducer,\n  postAdd: postAddReducer,\n  blogSignin: blogSigninReducer,\n  blogDetails: blogDetailsReducer,\n  postDetails: postDetailsReducer,\n  blogUpdate: blogUpdateReducer,\n  postUpdate: postUpdateReducer,\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n  postDelete: postDeleteReducer,\n  accountRegister: accountRegisterReducer,\n  accountSignin: accountSigninReducer,\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer\n}); // Add custom middleware here\n\nconst featureMiddleware = [];\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // (initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n// }),\n//   api;\n\nexport default (() => {\n  // console.log('initialState:', initialState)\n  const store = createStore(rootReducer, initialState, // composeEnhancer(\n  //   applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n  // )\n  composeEnhancer(applyMiddleware(thunk)));\n  return store;\n});","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/store.js"],"names":["applyMiddleware","combineReducers","createStore","compose","reducer","formReducer","thunk","accountDeleteReducer","accountDetailsReducer","accountListReducer","accountRegisterReducer","accountSigninReducer","accountUpdateReducer","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userAddReducer","userSigninReducer","userUpdateReducer","userDataReducer","blogDeleteReducer","postDeleteReducer","blogDetailsReducer","postDetailsReducer","blogListReducer","blogRegisterReducer","blogAddReducer","blogPreprodAddReducer","postAddReducer","blogSigninReducer","blogUpdateReducer","postUpdateReducer","initialState","accountSignin","accountInfo","localStorage","getItem","JSON","parse","userSignin","userInfo","userInfoData","accountData","tempReducer","state","action","type","rootReducer","userData","userRegister","userAdd","userDetails","userUpdate","userList","userDelete","blogRegister","blogAdd","blogPreprodAdd","postAdd","blogSignin","blogDetails","postDetails","blogUpdate","postUpdate","blogList","blogDelete","postDelete","accountRegister","accountDetails","accountUpdate","accountList","accountDelete","featureMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"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","sourcesContent":["// import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\n// import { reducer as formReducer } from 'redux-form';\n\n// import thunk from \"redux-thunk\";\n\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n\n// ////\n\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n\n// const initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n\n//   accountSignin: {\n//     accountInfo: localStorage.getItem(\"accountInfo\")\n//       ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//       : null,\n//   },\n// };\n// const reducer = combineReducers({\n//   userRegister: userRegisterReducer,\n\n//   userSignin: userSigninReducer,\n\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n\n//   /////\n\n//   blogRegister: blogRegisterReducer,\n\n//   blogSignin: blogSigninReducer,\n\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n\n//   /////\n\n//   accountRegister: accountRegisterReducer,\n\n//   accountSignin: accountSigninReducer,\n\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   reducer,\n//   initialState,\n//   composeEnhancer(applyMiddleware(thunk))\n// );\n\n// export default store;\n\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport thunk from \"redux-thunk\";\n\nimport {\n  accountDeleteReducer,\n  accountDetailsReducer,\n  accountListReducer,\n  accountRegisterReducer,\n  accountSigninReducer,\n  accountUpdateReducer,\n} from \"./reducers/accountReducers\";\n\nimport {\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userAddReducer,\n  userSigninReducer,\n  userUpdateReducer,\n  userDataReducer,\n} from \"./reducers/userReducers\";\n\nimport {\n  blogDeleteReducer,\n  postDeleteReducer,\n  blogDetailsReducer,\n  postDetailsReducer,\n  blogListReducer,\n  blogRegisterReducer,\n  blogAddReducer,\n  blogPreprodAddReducer,\n  postAddReducer,\n  blogSigninReducer,\n  blogUpdateReducer,\n  postUpdateReducer,\n} from \"./reducers/blogReducers\";\n\nconst initialState = {\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\")\n      ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n      : null,\n  },\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\")\n      ? JSON.parse(localStorage.getItem(\"userInfo\"))\n      : null,\n  },\n\n  userInfoData: localStorage.getItem(\"userInfoData\")\n    ? JSON.parse(localStorage.getItem(\"userInfoData\"))\n    : null,\n  accountData: localStorage.getItem(\"accountData\")\n    ? JSON.parse(localStorage.getItem(\"accountData\"))\n    : null,\n};\n\n// temp reducer to be removed\n// Once real reducers added you can delete this\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n// shape the state structure\nconst rootReducer = combineReducers({\n  userData: userDataReducer,\n\n  userRegister: userRegisterReducer,\n\n  userAdd: userAddReducer,\n\n  userSignin: userSigninReducer,\n\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n\n  blogRegister: blogRegisterReducer,\n\n  blogAdd: blogAddReducer,\n\n  blogPreprodAdd: blogPreprodAddReducer,\n\n  postAdd: postAddReducer,\n\n  blogSignin: blogSigninReducer,\n\n  blogDetails: blogDetailsReducer,\n\n  postDetails: postDetailsReducer,\n\n  blogUpdate: blogUpdateReducer,\n\n  postUpdate: postUpdateReducer,\n\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n\n  postDelete: postDeleteReducer,\n\n  accountRegister: accountRegisterReducer,\n\n  accountSignin: accountSigninReducer,\n\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer,\n});\n\n// Add custom middleware here\nconst featureMiddleware = [];\n\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// (initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n// }),\n//   api;\n\nexport default () => {\n  // console.log('initialState:', initialState)\n  const store = createStore(\n    rootReducer,\n    initialState,\n    // composeEnhancer(\n    //   applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n    // )\n    composeEnhancer(applyMiddleware(thunk))\n  );\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}