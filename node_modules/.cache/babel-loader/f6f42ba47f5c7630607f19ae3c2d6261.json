{"ast":null,"code":"import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userSigninReducer, userUpdateReducer } from \"./reducers/userReducers\";\nconst initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null\n  }\n};\nconst reducer = combineReducers({\n  userRegister: userRegisterReducer,\n  userSignin: userSigninReducer,\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store; // import { applyMiddleware, combineReducers, createStore } from 'redux';\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from 'redux-thunk';\n// // temp reducer to be removed\n// // Once real reducers added you can delete this\n// const tempReducer = (state = {}, action) => {\n//   switch (action.type) {\n//     default:\n//       return state;\n//   }\n// };\n// // shape the state structure\n// const rootReducer = combineReducers({\n//   tempReducer,\n//   form: formReducer,\n// });\n// // Add custom middleware here\n// const featureMiddleware = [];\n// /**\n//  * Initialize the redux store\n//  * Create the store\n//  * Applying extra arguments\n//  * To pass further arguments please config the function\n//  * @param initialState  {Object}  initial state for store\n//  * @param api {Object}  API class for api middleware\n//  * @return {Store<any, AnyAction> & {dispatch: any}}\n//  */\n// export default (initialState = {}, api) =>\n//   createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n//   );","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/store.js"],"names":["createStore","compose","applyMiddleware","combineReducers","thunk","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userSigninReducer","userUpdateReducer","initialState","userSignin","userInfo","localStorage","getItem","JSON","parse","reducer","userRegister","userDetails","userUpdate","userList","userDelete","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,mBAJF,EAKEC,iBALF,EAMEC,iBANF,QAOO,yBAPP;AASA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACNC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADM,GAEN;AAHM;AADO,CAArB;AAOA,MAAMG,OAAO,GAAGf,eAAe,CAAC;AAC9BgB,EAAAA,YAAY,EAAEX,mBADgB;AAG9BI,EAAAA,UAAU,EAAEH,iBAHkB;AAK9BW,EAAAA,WAAW,EAAEd,kBALiB;AAM9Be,EAAAA,UAAU,EAAEX,iBANkB;AAQ9BY,EAAAA,QAAQ,EAAEf,eARoB;AAS9BgB,EAAAA,UAAU,EAAElB;AATkB,CAAD,CAA/B;AAWA,MAAMmB,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+CzB,OAAvE;AACA,MAAM0B,KAAK,GAAG3B,WAAW,CACvBkB,OADuB,EAEvBP,YAFuB,EAGvBa,eAAe,CAACtB,eAAe,CAACE,KAAD,CAAhB,CAHQ,CAAzB;AAMA,eAAeuB,KAAf,C,CAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport {\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userSigninReducer,\n  userUpdateReducer,\n} from \"./reducers/userReducers\";\n\nconst initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\")\n      ? JSON.parse(localStorage.getItem(\"userInfo\"))\n      : null,\n  },\n};\nconst reducer = combineReducers({\n  userRegister: userRegisterReducer,\n\n  userSignin: userSigninReducer,\n\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nexport default store;\n\n\n\n\n\n\n\n\n\n// import { applyMiddleware, combineReducers, createStore } from 'redux';\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from 'redux-thunk';\n\n// // temp reducer to be removed\n// // Once real reducers added you can delete this\n// const tempReducer = (state = {}, action) => {\n//   switch (action.type) {\n//     default:\n//       return state;\n//   }\n// };\n// // shape the state structure\n// const rootReducer = combineReducers({\n//   tempReducer,\n//   form: formReducer,\n// });\n\n// // Add custom middleware here\n// const featureMiddleware = [];\n\n// /**\n//  * Initialize the redux store\n//  * Create the store\n//  * Applying extra arguments\n//  * To pass further arguments please config the function\n//  * @param initialState  {Object}  initial state for store\n//  * @param api {Object}  API class for api middleware\n//  * @return {Store<any, AnyAction> & {dispatch: any}}\n//  */\n// export default (initialState = {}, api) =>\n//   createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n//   );\n"]},"metadata":{},"sourceType":"module"}