"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = require("prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _TextCell = _interopRequireDefault(require("../TextCell"));

function TagsCell(_ref) {
  var tags = _ref.tags,
      separator = _ref.separator,
      isLoading = _ref.isLoading,
      overflowEllipsis = _ref.overflowEllipsis,
      className = _ref.className,
      contentClassName = _ref.contentClassName,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["tags", "separator", "isLoading", "overflowEllipsis", "className", "contentClassName", "style"]);
  var displayTags = (0, _react.useMemo)(function () {
    return tags.join(separator);
  }, [tags, separator]);
  return /*#__PURE__*/_react["default"].createElement(_TextCell["default"], (0, _extends2["default"])({}, rest, {
    isLoading: isLoading,
    overflowEllipsis: overflowEllipsis,
    className: (0, _classnames["default"])('tags-cell', className),
    contentClassName: contentClassName,
    style: style,
    "data-qa": "tags-cell"
  }), displayTags);
}

TagsCell.propTypes = {
  /** list of string tags */
  tags: (0, _propTypes.arrayOf)(_propTypes.string),

  /** separator between tag values */
  separator: _propTypes.string,

  /** indicator that cell is yet to receive data */
  isLoading: _propTypes.bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: _propTypes.bool,

  /** class name of cell */
  className: _propTypes.string,

  /** class name of cell content wrapper */
  contentClassName: _propTypes.string,

  /** styles applied to a cell */
  style: (0, _propTypes.shape)()
};
TagsCell.defaultProps = {
  tags: [],
  separator: ', '
};
var _default = TagsCell;
exports["default"] = _default;