import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import useHover from "../../../useHover";
import { white } from "../../../theme/colors";
import CheckboxCell from "../CheckboxCell";
import createStyles from "../../../createStyles";
const useStyles = createStyles(theme => ({
  root: {
    display: 'table-row',
    minHeight: 45,
    backgroundColor: white,
    '&:hover': {
      backgroundColor: theme.palette.action.selected,
      transform: 'scale(1)',
      boxShadow: '3px 2px 13px 0 rgba(0, 0, 0, 0.08)'
    },
    '& .checkbox-cell': {
      borderLeftColor: 'transparent !important',
      borderLeftWidth: 3,
      '&.checked': {
        borderLeftColor: `${theme.palette.brand.primary} !important`
      }
    }
  },
  child: {
    zIndex: 5
  },
  checkboxCell: {
    left: 0,
    borderBottom: `1px solid ${theme.palette.border}`
  }
}), {
  name: 'CellRow'
});
const CellRow = React.memo(function CellRow({
  children,
  className = '',
  data,
  style = {},
  onClick = noop,
  rowId,
  onCheckboxChange = noop,
  multiSelect = false,
  checked = false,
  isLoading = false
}) {
  const fixedLeft = children[0]?.props?.fixed === 'left';
  const classes = useStyles({});
  const [isHovering, hoverRef] = useHover();
  const handleRowClick = useCallback(e => {
    e.stopPropagation();

    if (onClick) {
      onClick(_extends({}, data, {
        rowId
      }));
    }
  }, [onClick, data, rowId]);
  const cells = useMemo(() => React.Children.map(children, child => {
    const {
      dataKey,
      className: cellClassName
    } = child.props;
    return React.cloneElement(child, _extends({
      className: cn(classes.child, cellClassName),
      isLoading
    }, data[dataKey]));
  }), [children, data, isLoading]);
  return /*#__PURE__*/React.createElement("div", {
    role: "presentation",
    ref: hoverRef,
    className: cn('cell-row', classes.root, {
      [classes.checked]: checked
    }, {
      clickable: onClick
    }, {
      'row-hovered': isHovering
    }, className),
    style: style,
    onClick: handleRowClick
  }, multiSelect && /*#__PURE__*/React.createElement(CheckboxCell, {
    className: cn(classes.checkboxCell, classes.child, {
      checked
    }),
    fixed: fixedLeft,
    value: rowId,
    checked: checked,
    onChange: onCheckboxChange
  }), cells);
});
CellRow.propTypes = {
  children: PropTypes.node.isRequired,
  rowId: PropTypes.string.isRequired,
  data: PropTypes.shape().isRequired,
  onClick: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.shape(),
  multiSelect: PropTypes.bool,
  onCheckboxChange: PropTypes.func,
  checked: PropTypes.bool
};
CellRow.displayName = 'CellRow';
export default CellRow;