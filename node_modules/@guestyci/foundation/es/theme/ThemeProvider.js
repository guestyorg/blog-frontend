import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo, useEffect } from 'react';
import { jss, SheetsRegistry } from 'react-jss';
import PropTypes from 'prop-types';
import ThemeContext from "./ThemeContext";
import useTheme from "../useTheme/useTheme";
import defaultTheme from "./defaultTheme";

const mergeThemes = (theme = {}, outerTheme) => {
  if (typeof theme === 'function') {
    const mergedTheme = theme(outerTheme);
    return mergedTheme;
  }

  return _extends({}, outerTheme, {}, theme);
};

const setupJssGlobals = theme => {
  const sheetsRegistry = new SheetsRegistry();
  const globalStyleSheet = jss.createStyleSheet({
    '@global': {
      html: {
        fontSize: theme?.typography?.htmlFontSize
      },
      body: _extends({}, theme?.typography?.running, {
        color: theme?.palette?.text?.default
      })
    }
  }).attach();
  sheetsRegistry.add(globalStyleSheet);
  return sheetsRegistry;
};

const ThemeProvider = ({
  theme = defaultTheme,
  children
}) => {
  const outerTheme = useTheme();
  const customTheme = useMemo(() => mergeThemes(theme, outerTheme), [theme, outerTheme]);
  useEffect(() => {
    setupJssGlobals(customTheme);
  }, [customTheme]);
  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {
    value: customTheme,
    "data-qa": "theme-provider"
  }, children);
};

ThemeProvider.propTypes = {
  /** Children to render under the theme */
  children: PropTypes.node.isRequired,

  /** New theme to extend the outer theme */
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func])
};
export default ThemeProvider;