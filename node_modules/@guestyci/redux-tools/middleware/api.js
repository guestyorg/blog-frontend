"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apiMiddleware = void 0;

var _agni = _interopRequireDefault(require("@guestyci/agni"));

var _api = require("../actions/api");

// eslint-disable-next-line import/prefer-default-export
var apiMiddleware = function apiMiddleware(_ref) {
  var dispatch = _ref.dispatch;
  return function (next) {
    return function (action) {
      next(action);

      if (action.type.includes(_api.API_REQUEST)) {
        var _action$meta = action.meta,
            url = _action$meta.url,
            method = _action$meta.method,
            feature = _action$meta.feature;
        var body = action.payload;

        var _Resource$create = _agni["default"].create(),
            api = _Resource$create.api;

        switch (method) {
          case 'GET':
            api.get(url, body).then(function (response) {
              return response.data;
            }).then(function (response) {
              return dispatch((0, _api.apiSuccess)({
                response: response,
                feature: feature
              }));
            })["catch"](function (error, response) {
              return dispatch((0, _api.apiError)({
                error: error,
                response: response,
                feature: feature
              }));
            });
            break;

          case 'DELETE':
            api["delete"](url).then(function (response) {
              return response.data;
            }).then(function (response) {
              return dispatch((0, _api.apiSuccess)({
                response: response,
                feature: feature
              }));
            })["catch"](function (error, response) {
              return dispatch((0, _api.apiError)({
                error: error,
                response: response,
                feature: feature
              }));
            });
            break;

          case 'POST':
            api.post(url, body).then(function (response) {
              return response.data;
            }).then(function (response) {
              return dispatch((0, _api.apiSuccess)({
                response: response,
                feature: feature
              }));
            })["catch"](function (error, response) {
              return dispatch((0, _api.apiError)({
                error: error,
                response: response,
                feature: feature
              }));
            });
            break;

          case 'PUT':
            api.put(url, body).then(function (response) {
              return response.data;
            }).then(function (response) {
              return dispatch((0, _api.apiSuccess)({
                response: response,
                feature: feature
              }));
            })["catch"](function (error, response) {
              return dispatch((0, _api.apiError)({
                error: error,
                response: response,
                feature: feature
              }));
            });
            break;

          case 'PATCH':
            api.patch(url, body).then(function (response) {
              return response.data;
            }).then(function (response) {
              return dispatch((0, _api.apiSuccess)({
                response: response,
                feature: feature
              }));
            })["catch"](function (error, response) {
              return dispatch((0, _api.apiError)({
                error: error,
                response: response,
                feature: feature
              }));
            });
            break;

          default:
            throw new Error('apiMiddleware - method is mandatory');
        }
      }
    };
  };
};

exports.apiMiddleware = apiMiddleware;