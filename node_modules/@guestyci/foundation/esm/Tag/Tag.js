import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import TextField from "../TextField";
import createStyles from "../createStyles";
import Paper from "../Paper";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      padding: "2px ".concat(theme.spacer(1), "px"),
      minWidth: 37
    },
    bgDefault: {
      backgroundColor: theme.palette.background.system
    },
    bgBold: {
      backgroundColor: theme.palette.background.secondary
    }
  };
}, {
  name: 'Tag'
});
var Tag = React.forwardRef(function Tag(_ref, ref) {
  var _cn;

  var children = _ref.children,
      _ref$bold = _ref.bold,
      bold = _ref$bold === void 0 ? false : _ref$bold,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      props = _objectWithoutProperties(_ref, ["children", "bold", "jss", "className"]);

  var classes = useStyles({
    jss: jss
  });
  return /*#__PURE__*/React.createElement(Paper, _extends({
    elevation: 0,
    ref: ref,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.bgBold, bold), _defineProperty(_cn, classes.bgDefault, !bold), _cn), className)
  }, props), /*#__PURE__*/React.createElement(TextField, {
    variant: "h5",
    overflowEllipsis: true,
    align: "center"
  }, children));
});
Tag.propTypes = {
  /** Child component to render */
  children: PropTypes.node,

  /** Jss override to create custom styles */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Boolean indicator whether or not to render in emphasized mode  */
  bold: PropTypes.bool,

  /** Additional classname  */
  className: PropTypes.string
};
Tag.displayName = 'Tag';
export default Tag;