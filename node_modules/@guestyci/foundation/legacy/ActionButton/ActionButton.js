"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = require("react-jss");

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _useHover3 = _interopRequireDefault(require("../../useHover"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var useStyles = (0, _reactJss.createUseStyles)({
  actionButton: {
    width: 45,
    borderBottomRightRadius: 2,
    borderTopRightRadius: 2,
    height: 45,
    '&:disabled': {
      opacity: 1,
      cursor: 'not-allowed'
    }
  }
});

var getIconColor = function getIconColor(disabled, isHovering, iconColor) {
  if (disabled) {
    return 'gray-light';
  }

  return isHovering ? 'blue' : iconColor;
};

var ActionButton = function ActionButton(_ref) {
  var disabled = _ref.disabled,
      iconColor = _ref.iconColor,
      className = _ref.className,
      onClick = _ref.onClick,
      onMouseDown = _ref.onMouseDown,
      icon = _ref.icon,
      svg = _ref.svg,
      iconWidth = _ref.iconWidth,
      id = _ref.id,
      iconHeight = _ref.iconHeight,
      style = _ref.style,
      iconClassName = _ref.iconClassName,
      tooltip = _ref.tooltip,
      tooltipPlacement = _ref.tooltipPlacement,
      children = _ref.children;
  var classes = useStyles();

  var _useHover = (0, _useHover3["default"])(),
      _useHover2 = (0, _slicedToArray2["default"])(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var _useState = (0, _react.useState)(iconColor),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      actionButtonIconColor = _useState2[0],
      setActionButtonIconColor = _useState2[1];

  (0, _react.useEffect)(function () {
    return setActionButtonIconColor(getIconColor(disabled, isHovering, iconColor));
  }, [disabled, isHovering, iconColor]);
  return /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
    body: tooltip,
    placement: tooltipPlacement,
    id: id,
    "data-qa": "action-button"
  }, /*#__PURE__*/_react["default"].createElement("button", {
    ref: hoverRef,
    className: (0, _classnames["default"])('border-gray-light', 'flex-center', 'p-6-10', 'b-1', 'clickable', 'transition-opacity', classes.actionButton, className),
    disabled: disabled,
    onMouseDown: onMouseDown,
    onClick: onClick,
    style: style,
    type: "button"
  }, icon || svg ? /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    icon: icon,
    svg: svg,
    height: iconHeight,
    width: iconWidth,
    color: actionButtonIconColor,
    className: iconClassName
  }) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children)));
};

ActionButton.defaultProps = {
  className: '',
  disabled: false,
  iconWidth: 20,
  iconHeight: 20,
  iconColor: 'gray-dark',
  iconClassName: '',
  children: null,
  style: {},
  tooltip: null,
  tooltipPlacement: 'top',
  id: undefined
};
ActionButton.propTypes = {
  className: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  onClick: _propTypes["default"].func.isRequired,
  icon: _propTypes["default"].string,
  svg: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),
  iconWidth: _propTypes["default"].number,
  iconHeight: _propTypes["default"].number,
  iconColor: _propTypes["default"].string,
  style: _propTypes["default"].shape(),
  iconClassName: _propTypes["default"].string,
  tooltip: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string, _propTypes["default"].number]),
  tooltipPlacement: _propTypes["default"].string,
  id: _propTypes["default"].string,
  children: _propTypes["default"].node
};
var _default = ActionButton;
exports["default"] = _default;