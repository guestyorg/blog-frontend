"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var useInfiniteScroll = function useInfiniteScroll(_ref) {
  var scrollOffset = _ref.scrollOffset,
      skip = _ref.skip,
      totalCount = _ref.totalCount,
      onLoadMore = _ref.onLoadMore,
      isLoading = _ref.isLoading,
      pageSize = _ref.pageSize;
  var scrollableRef = (0, _react.useRef)(null);
  var hasReachedBottom = (0, _react.useCallback)(function (scrollHeight, clientHeight, scrollTop) {
    return scrollHeight - clientHeight - scrollTop <= scrollOffset;
  }, [scrollOffset]);
  var scrollHandler = (0, _react.useCallback)(function (e) {
    var nextSkip = skip + pageSize;

    if (nextSkip < totalCount) {
      var scrollableEl = scrollableRef.current;
      var _e$target = e.target,
          scrollHeight = _e$target.scrollHeight,
          scrollTop = _e$target.scrollTop,
          clientHeight = _e$target.clientHeight;

      if (hasReachedBottom(scrollHeight, clientHeight, scrollTop)) {
        scrollableEl.removeEventListener('scroll', scrollHandler);
        onLoadMore(nextSkip, pageSize);
      }
    }
  }, [skip, pageSize, totalCount, onLoadMore, hasReachedBottom]);
  (0, _react.useEffect)(function () {
    if (!isLoading && totalCount) {
      var scrollableEl = scrollableRef.current;

      if (scrollableEl) {
        scrollableEl.addEventListener('scroll', scrollHandler);
        return function () {
          return scrollableEl.removeEventListener('scroll', scrollHandler);
        };
      }
    }
  }, [scrollHandler, isLoading, totalCount]);
  return scrollableRef;
};

var _default = useInfiniteScroll;
exports["default"] = _default;