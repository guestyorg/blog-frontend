"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _useHover3 = _interopRequireDefault(require("../../../useHover"));

var _colors = require("../../../theme/colors");

var _CheckboxCell = _interopRequireDefault(require("../CheckboxCell"));

var _createStyles = _interopRequireDefault(require("../../../createStyles"));

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: {
      display: 'table-row',
      minHeight: 45,
      backgroundColor: _colors.white,
      '&:hover': {
        backgroundColor: theme.palette.action.selected,
        transform: 'scale(1)',
        boxShadow: '3px 2px 13px 0 rgba(0, 0, 0, 0.08)'
      },
      '& .checkbox-cell': {
        borderLeftColor: 'transparent !important',
        borderLeftWidth: 3,
        '&.checked': {
          borderLeftColor: "".concat(theme.palette.brand.primary, " !important")
        }
      }
    },
    child: {
      zIndex: 5
    },
    checkboxCell: {
      left: 0,
      borderBottom: "1px solid ".concat(theme.palette.border)
    }
  };
}, {
  name: 'CellRow'
});

var CellRow = _react["default"].memo(function CellRow(_ref) {
  var _children$, _children$$props;

  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      data = _ref.data,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? _noop["default"] : _ref$onClick,
      rowId = _ref.rowId,
      _ref$onCheckboxChange = _ref.onCheckboxChange,
      onCheckboxChange = _ref$onCheckboxChange === void 0 ? _noop["default"] : _ref$onCheckboxChange,
      _ref$multiSelect = _ref.multiSelect,
      multiSelect = _ref$multiSelect === void 0 ? false : _ref$multiSelect,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;
  var fixedLeft = ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : (_children$$props = _children$.props) === null || _children$$props === void 0 ? void 0 : _children$$props.fixed) === 'left';
  var classes = useStyles({});

  var _useHover = (0, _useHover3["default"])(),
      _useHover2 = (0, _slicedToArray2["default"])(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var handleRowClick = (0, _react.useCallback)(function (e) {
    e.stopPropagation();

    if (onClick) {
      onClick((0, _extends2["default"])({}, data, {
        rowId: rowId
      }));
    }
  }, [onClick, data, rowId]);
  var cells = (0, _react.useMemo)(function () {
    return _react["default"].Children.map(children, function (child) {
      var _child$props = child.props,
          dataKey = _child$props.dataKey,
          cellClassName = _child$props.className;
      return _react["default"].cloneElement(child, (0, _extends2["default"])({
        className: (0, _classnames["default"])(classes.child, cellClassName),
        isLoading: isLoading
      }, data[dataKey]));
    });
  }, [children, data, isLoading]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    role: "presentation",
    ref: hoverRef,
    className: (0, _classnames["default"])('cell-row', classes.root, (0, _defineProperty2["default"])({}, classes.checked, checked), {
      clickable: onClick
    }, {
      'row-hovered': isHovering
    }, className),
    style: style,
    onClick: handleRowClick
  }, multiSelect && /*#__PURE__*/_react["default"].createElement(_CheckboxCell["default"], {
    className: (0, _classnames["default"])(classes.checkboxCell, classes.child, {
      checked: checked
    }),
    fixed: fixedLeft,
    value: rowId,
    checked: checked,
    onChange: onCheckboxChange
  }), cells);
});

CellRow.propTypes = {
  children: _propTypes["default"].node.isRequired,
  rowId: _propTypes["default"].string.isRequired,
  data: _propTypes["default"].shape().isRequired,
  onClick: _propTypes["default"].func,
  className: _propTypes["default"].string,
  style: _propTypes["default"].shape(),
  multiSelect: _propTypes["default"].bool,
  onCheckboxChange: _propTypes["default"].func,
  checked: _propTypes["default"].bool
};
CellRow.displayName = 'CellRow';
var _default = CellRow;
exports["default"] = _default;