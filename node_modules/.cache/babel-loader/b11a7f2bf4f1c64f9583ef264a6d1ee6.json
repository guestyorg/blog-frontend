{"ast":null,"code":"var _jsxFileName = \"/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/screens/Post/PostEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Resource from \"@guestyci/agni\";\nimport RaisedButton from \"@guestyci/foundation/RaisedButton\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport Form from \"@guestyci/foundation/Form\";\nimport Input from \"@guestyci/foundation/Input\";\nimport DateRangePicker from \"@guestyci/foundation/DatePicker/DateRangePicker\";\nimport SingleDatePicker from \"@guestyci/foundation/DatePicker/SingleDatePicker\";\nimport NumberPicker from \"@guestyci/foundation/NumberPicker\";\nimport EmailInput from \"@guestyci/foundation/EmailInput\";\nimport Dropdown, { Option } from \"@guestyci/foundation/Dropdown\";\nimport TextField from \"@guestyci/foundation/TextField\";\nimport TextArea from \"@guestyci/foundation/TextArea\";\nimport Col from \"@guestyci/foundation/Layout/Col\";\nimport Section from \"@guestyci/foundation/Layout/Section\";\nimport DurationPicker from \"@guestyci/foundation/DurationPicker\";\nimport TimePicker from \"@guestyci/foundation/TimePicker\";\nimport FormField from \"@guestyci/foundation/FormField\";\nimport FormGroup from \"@guestyci/foundation/FormGroup\";\nimport { FormProvider } from \"@guestyci/foundation/enums\"; // import { email } from \"@guestyci/foundation/validators\";\n\nimport createStyles from \"@guestyci/foundation/createStyles\";\nimport FlatButton from \"@guestyci/foundation/FlatButton\";\nimport { Row } from \"@guestyci/foundation/Layout\";\nimport { ReactComponent as BtnTrash } from \"@svgr/webpack?-svgo,+titleProp,+ref!@guestyci/foundation/icons/BtnTrash.svg\";\nimport Icon from \"@guestyci/foundation/Icon\";\nimport { useToast } from \"@guestyci/foundation/Toast\";\nimport { deletePost, detailsPost, updatePost } from \"../../actions/blogActions\";\nimport { POST_DELETE_RESET, POST_DETAILS_RESET // POST_UPDATE_RESET,\n} from \"../../constants/blogConstants\";\nimport PostList from \"../../components/PostList\";\nimport { blogAddReducer } from \"../../reducers/blogReducers\"; // posts\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = createStyles(theme => ({\n  app: {\n    backgroundColor: \"white\"\n  }\n}));\nexport default function PostEditScreen(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    addToast\n  } = useToast(); // const { api, env, config } = Resource.create();\n\n  const {\n    blogId,\n    postId\n  } = useParams(); // console.log(\"id:\", id);\n\n  const [title, setTitle] = useState();\n  const [error, setError] = useState(false);\n  const errorMessage = \"There was a problem edit the post.\"; // useSelector\n\n  const postDetails = useSelector(state => state.postDetails);\n  const {\n    loading,\n    error: errorPostDetails,\n    post\n  } = postDetails;\n  const postUpdate = useSelector(state => state.postUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = postUpdate;\n  const postDelete = useSelector(state => state.postDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete\n  } = postDelete; // useDispatch\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (successDelete) {\n      dispatch({\n        type: POST_DELETE_RESET\n      });\n      dispatch({\n        type: POST_DETAILS_RESET\n      });\n      props.history.push(`/blog/edit/${blogId}`);\n      addToast.success(`the post ${title} was delete`);\n    } else if (errorDelete) {\n      addToast.danger(\"error edit the post\");\n    } // if (successUpdate) {\n    //   dispatch({ type: POST_UPDATE_RESET });\n    //   dispatch({ type: POST_DETAILS_RESET });\n    //   // props.history.push(\"/post/list\");\n    //   addToast.success(`the post ${title} was edit`);\n    // } else if (errorUpdate) {\n    //   addToast.danger(\"error edit the post\");\n    // }\n\n\n    if (!post) {\n      dispatch(detailsPost(blogId, postId));\n    } else {\n      setTitle(post.title);\n    }\n  }, [dispatch, props.history, successUpdate, successDelete, post, blogId, postId]);\n\n  const onSubmit = e => {// e.preventDefault();\n    // dispatch update post\n    // dispatch(updatePost({  blogId,postId, title }));\n  };\n\n  const handleDelete = async () => {\n    console.log(\"handleDelete\");\n\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deletePost(blogId, postId));\n    }\n  };\n\n  const closeError = () => {\n    setError(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"fdsfdsfdsf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(PostEditScreen, \"vgbyv02bp5Dj4k2Vg1DysoXcVsw=\", false, function () {\n  return [useStyles, useToast, useParams, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = PostEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostEditScreen\");","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/screens/Post/PostEditScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useParams","Resource","RaisedButton","Form","FinalForm","Field","Input","DateRangePicker","SingleDatePicker","NumberPicker","EmailInput","Dropdown","Option","TextField","TextArea","Col","Section","DurationPicker","TimePicker","FormField","FormGroup","FormProvider","createStyles","FlatButton","Row","Icon","useToast","deletePost","detailsPost","updatePost","POST_DELETE_RESET","POST_DETAILS_RESET","PostList","blogAddReducer","useStyles","theme","app","backgroundColor","PostEditScreen","props","classes","addToast","blogId","postId","title","setTitle","error","setError","errorMessage","postDetails","state","loading","errorPostDetails","post","postUpdate","loadingUpdate","errorUpdate","success","successUpdate","postDelete","loadingDelete","errorDelete","successDelete","dispatch","type","history","push","danger","onSubmit","e","handleDelete","console","log","window","confirm","closeError"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport Resource from \"@guestyci/agni\";\n\nimport RaisedButton from \"@guestyci/foundation/RaisedButton\";\n\nimport { Form as FinalForm, Field } from \"react-final-form\";\n\nimport Form from \"@guestyci/foundation/Form\";\nimport Input from \"@guestyci/foundation/Input\";\nimport DateRangePicker from \"@guestyci/foundation/DatePicker/DateRangePicker\";\nimport SingleDatePicker from \"@guestyci/foundation/DatePicker/SingleDatePicker\";\nimport NumberPicker from \"@guestyci/foundation/NumberPicker\";\nimport EmailInput from \"@guestyci/foundation/EmailInput\";\nimport Dropdown, { Option } from \"@guestyci/foundation/Dropdown\";\nimport TextField from \"@guestyci/foundation/TextField\";\nimport TextArea from \"@guestyci/foundation/TextArea\";\nimport Col from \"@guestyci/foundation/Layout/Col\";\nimport Section from \"@guestyci/foundation/Layout/Section\";\nimport DurationPicker from \"@guestyci/foundation/DurationPicker\";\nimport TimePicker from \"@guestyci/foundation/TimePicker\";\n\nimport FormField from \"@guestyci/foundation/FormField\";\nimport FormGroup from \"@guestyci/foundation/FormGroup\";\nimport { FormProvider } from \"@guestyci/foundation/enums\";\n// import { email } from \"@guestyci/foundation/validators\";\nimport createStyles from \"@guestyci/foundation/createStyles\";\n\nimport FlatButton from \"@guestyci/foundation/FlatButton\";\nimport { Row } from \"@guestyci/foundation/Layout\";\nimport { ReactComponent as BtnTrash } from \"@guestyci/foundation/icons/BtnTrash.svg\";\nimport Icon from \"@guestyci/foundation/Icon\";\n\nimport { useToast } from \"@guestyci/foundation/Toast\";\nimport { deletePost, detailsPost, updatePost } from \"../../actions/blogActions\";\nimport {\n  POST_DELETE_RESET,\n  POST_DETAILS_RESET,\n  // POST_UPDATE_RESET,\n} from \"../../constants/blogConstants\";\nimport PostList from \"../../components/PostList\";\nimport { blogAddReducer } from \"../../reducers/blogReducers\";\n\n// posts\n\nconst useStyles = createStyles((theme) => ({\n  app: {\n    backgroundColor: \"white\",\n  },\n}));\n\nexport default function PostEditScreen(props) {\n  const classes = useStyles();\n\n  const { addToast } = useToast();\n\n  // const { api, env, config } = Resource.create();\n\n  const { blogId ,postId } = useParams();\n  // console.log(\"id:\", id);\n\n  const [title, setTitle] = useState();\n\n  const [error, setError] = useState(false);\n\n  const errorMessage = \"There was a problem edit the post.\";\n\n  // useSelector\n  const postDetails = useSelector((state) => state.postDetails);\n  const { loading, error: errorPostDetails, post } = postDetails;\n\n  const postUpdate = useSelector((state) => state.postUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = postUpdate;\n\n  const postDelete = useSelector((state) => state.postDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete,\n  } = postDelete;\n\n  // useDispatch\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (successDelete) {\n      dispatch({ type: POST_DELETE_RESET });\n      dispatch({ type: POST_DETAILS_RESET });\n      props.history.push(`/blog/edit/${blogId}`);\n      addToast.success(`the post ${title} was delete`);\n    } else if (errorDelete) {\n      addToast.danger(\"error edit the post\");\n    }\n    // if (successUpdate) {\n    //   dispatch({ type: POST_UPDATE_RESET });\n    //   dispatch({ type: POST_DETAILS_RESET });\n\n    //   // props.history.push(\"/post/list\");\n    //   addToast.success(`the post ${title} was edit`);\n    // } else if (errorUpdate) {\n    //   addToast.danger(\"error edit the post\");\n    // }\n    if (!post) {\n      dispatch(detailsPost(blogId,postId));\n    } else {\n      setTitle(post.title);\n    }\n  }, [dispatch, props.history, successUpdate, successDelete, post, blogId,postId]);\n\n  const onSubmit = (e) => {\n    // e.preventDefault();\n    // dispatch update post\n    // dispatch(updatePost({  blogId,postId, title }));\n  };\n\n  const handleDelete = async () => {\n    console.log(\"handleDelete\");\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deletePost(blogId,postId));\n    }\n  };\n\n  const closeError = () => {\n    setError(false);\n  };\n\n  return (\n    <>\n\n    <h1>fdsfdsfdsf</h1>\n      {/* <Section className={classes.app} justify=\"center\">\n        <Col spacing={6} span={6}>\n          <TextField variant=\"h2\">\n            Edit the Post:\n            {title}\n          </TextField>\n          <FinalForm\n            onSubmit={onSubmit}\n            initialValues={{}}\n            render={({ handleSubmit }) => (\n              <Form\n                title=\"Edit Post\"\n                onSubmit={handleSubmit}\n                provider={FormProvider.Final}\n                fieldInstance={Field}\n              >\n                <FormGroup>\n                  <FormGroup>\n                    <FormField\n                      label=\"First Name\"\n                      name=\"title\"\n                      //   info=\"Drama, Action etc.\"\n                    >\n                      <Input\n                        name=\"title\"\n                        value={title}\n                        placeholder={title}\n                        onChange={(e) => setTitle(e.target.value)}\n                      />\n                    </FormField>\n                  </FormGroup>\n\n                  <RaisedButton type=\"submit\">Edit Post</RaisedButton>\n\n                  <FlatButton type=\"error\" onClick={handleDelete}>\n                    <Row align=\"center\" spacing={2}>\n                      <Icon svg={BtnTrash} />\n                      <TextField> Delete Post</TextField>\n                    </Row>\n                  </FlatButton>\n\n                  {error && (\n                    <ErrorBanner\n                      show={error}\n                      errorMessage={errorMessage}\n                      onClick={closeError}\n                      actionText=\"Try again\"\n                    />\n                  )}\n                </FormGroup>\n              </Form>\n            )}\n          />\n        </Col>\n      </Section>\n\n      /////////////////////// posts////////////////// */}\n\n      {/* <PostList postId={id} /> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}