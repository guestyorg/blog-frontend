import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useCallback, useRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import useHover from "../../../useHover";
import useComposeRefs from "../../../useComposeRefs";
import Row from "../../../Layout/Row";
import Fade from "../../../Fade";
import Icon from "../../../Icon";
import TextField from "../../../TextField";
import Divider from "../../../Divider";
import SortIndicator from "./SortIndicator";

var IcoDraggable = function IcoDraggable(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("g", {
    fill: "#707070",
    fillRule: "evenodd",
    opacity: ".53"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "1.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "5.5",
    cy: "1.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "5.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "5.5",
    cy: "5.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "9.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "5.5",
    cy: "9.5",
    r: "1.5"
  })));
};

IcoDraggable.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "7",
  height: "11",
  viewBox: "0 0 7 11"
};
import useDrag from "../../../useDrag";
import useResize from "../../../useResize";
import Popover from "../../Popover";
import { capitalize } from "../../../utils/commonUtility";
import createStyles from "../../../createStyles";
import { white } from "../../../theme/colors";

var getHeaderCursor = function getHeaderCursor(draggable, isDragging, sortable) {
  if (isDragging) return 'grabbing';
  if (draggable || sortable) return 'pointer';
  return 'default';
};

var useStyles = createStyles(function (theme) {
  return {
    root: {
      borderBottom: "1px solid ".concat(theme.palette.text.primary),
      paddingTop: theme.spacer(2),
      paddingBottom: theme.spacer(2),
      textTransform: 'uppercase',
      backgroundColor: white,
      display: 'table-cell',
      transition: theme.transition.create('color'),
      zIndex: 10,
      color: theme.palette.placeholder,
      position: 'sticky',
      top: 0,
      width: function width(_ref) {
        var resizedWidth = _ref.resizedWidth;
        return resizedWidth;
      },
      left: function left(_ref2) {
        var positionLeft = _ref2.positionLeft;
        return positionLeft;
      },
      right: function right(_ref3) {
        var positionRight = _ref3.positionRight;
        return positionRight;
      },
      cursor: function cursor(_ref4) {
        var draggable = _ref4.draggable,
            isDragging = _ref4.isDragging,
            sortable = _ref4.sortable;
        return getHeaderCursor(draggable, isDragging, sortable);
      }
    },
    hint: {
      '&:hover': {
        color: theme.palette.text.secondary
      }
    },
    fixedCell: {
      borderTop: "1px solid ".concat(theme.palette.border),
      zIndex: 15
    },
    alignCenter: {
      textAlign: 'center'
    },
    alignLeft: {
      textAlign: 'left'
    },
    alignRight: {
      textAlign: 'right'
    },
    active: {
      color: theme.palette.text.primary
    },
    draggableIcon: {
      marginBottom: 3
    },
    resizable: {
      cursor: 'col-resize'
    },
    contentWrapper: {
      paddingLeft: theme.spacer(3),
      height: 30
    },
    popover: {
      width: '100%',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    },
    divider: {
      transition: theme.transition.create('border-color')
    },
    draggable: {
      borderColor: theme.palette.text.primary
    },
    title: {
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    }
  };
}, {
  name: 'HeaderCell'
});

var HeaderCell = function HeaderCell(_ref5) {
  var _contentRef$current, _cn, _cn2;

  var children = _ref5.children,
      id = _ref5.id,
      width = _ref5.width,
      align = _ref5.align,
      fixed = _ref5.fixed,
      className = _ref5.className,
      positionLeft = _ref5.positionLeft,
      positionRight = _ref5.positionRight,
      draggable = _ref5.draggable,
      onSort = _ref5.onSort,
      sortable = _ref5.sortable,
      sortDirection = _ref5.sortDirection,
      style = _ref5.style,
      onDragDrop = _ref5.onDragDrop,
      resizable = _ref5.resizable,
      onResize = _ref5.onResize;

  var _useHover = useHover(),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var contentRef = useRef(null);

  var _useResize = useResize({
    startWidth: width,
    isResizable: resizable,
    id: id,
    onResizeEnd: onResize
  }),
      _useResize2 = _slicedToArray(_useResize, 2),
      resizedWidth = _useResize2[0],
      resizeRef = _useResize2[1];

  var _useDrag = useDrag(id, onDragDrop, draggable),
      _useDrag2 = _slicedToArray(_useDrag, 2),
      isDragging = _useDrag2[0].isDragging,
      dragRef = _useDrag2[1];

  var classes = useStyles({
    positionLeft: positionLeft,
    positionRight: positionRight,
    draggable: draggable,
    isDragging: isDragging,
    resizedWidth: resizedWidth,
    sortable: sortable
  });
  var draggableRef = draggable ? dragRef : null;
  var headerCellRef = useComposeRefs(hoverRef, draggableRef);
  var handleCellClick = useCallback(function (e) {
    e.stopPropagation();

    if (sortable && onSort) {
      var newOrder = sortDirection === 'desc' ? '' : '-';
      onSort("".concat(newOrder).concat(id));
    }
  }, [onSort, sortable, id, sortDirection]);
  var showSortHint = sortable && !sortDirection && isHovering;
  var showResizeIndicator = resizable && isHovering;
  var isOverflowed = ((_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.scrollWidth) > resizedWidth;
  return /*#__PURE__*/React.createElement("div", {
    ref: headerCellRef,
    role: "presentation",
    onClick: handleCellClick,
    className: cn('header-cell', classes.root, (_cn = {}, _defineProperty(_cn, classes.active, sortDirection), _defineProperty(_cn, classes.hint, !sortDirection), _defineProperty(_cn, classes.fixedCell, fixed), _defineProperty(_cn, classes["align".concat(capitalize(align))], align), _cn), className),
    style: style,
    "data-qa": "header-cell"
  }, /*#__PURE__*/React.createElement(Row, {
    spacing: 2,
    align: "center",
    className: cn('header-cell-content', classes.contentWrapper),
    fullWidth: true
  }, /*#__PURE__*/React.createElement(Fade, {
    show: draggable && isHovering,
    unmountOnExit: !draggable,
    className: cn(classes.draggableIcon, 'drag-icon')
  }, /*#__PURE__*/React.createElement(Icon, {
    svg: IcoDraggable,
    height: 11,
    width: 7
  })), /*#__PURE__*/React.createElement(Popover, {
    isOpen: isOverflowed && isHovering,
    containerClassName: classes.popover,
    body: children
  }, /*#__PURE__*/React.createElement(TextField, {
    className: classes.title,
    wrap: false,
    ref: contentRef
  }, children)), /*#__PURE__*/React.createElement(Fade, {
    mountOnEnter: !sortable,
    show: sortDirection || showSortHint
  }, /*#__PURE__*/React.createElement(SortIndicator, {
    direction: sortDirection,
    isHint: showSortHint
  })), /*#__PURE__*/React.createElement(Divider, {
    ref: resizeRef,
    className: cn('header-cell-divider', classes.divider, (_cn2 = {}, _defineProperty(_cn2, classes.resizable, resizable), _defineProperty(_cn2, classes.draggable, showResizeIndicator), _cn2)),
    orientation: "vertical",
    thickness: 1
  })));
};

HeaderCell.defaultProps = {
  sortable: false,
  resizable: false,
  onSort: undefined,
  className: '',
  style: {},
  onDragDrop: noop,
  onResize: noop,
  draggable: false
};
HeaderCell.propTypes = {
  children: PropTypes.node.isRequired,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  align: PropTypes.string,
  resizable: PropTypes.bool,
  sortable: PropTypes.bool,
  sortDirection: PropTypes.oneOf(['asc', 'desc']),
  onSort: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.shape(),
  id: PropTypes.string.isRequired,
  onDragDrop: PropTypes.func,
  draggable: PropTypes.bool,
  onResize: PropTypes.func
};
export default HeaderCell;