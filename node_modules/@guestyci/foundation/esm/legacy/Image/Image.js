import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { Image, Transformation } from 'cloudinary-react';
import { CLOUD_NAME } from "../../constants/constants";
var cloudinaryCropToObjectFitDict = {
  scale: 'fill',
  fit: 'contain',
  fill: 'cover',
  limit: 'scale-down',
  crop: 'none'
};

var isCloudinary = function isCloudinary(id, isImg) {
  return id || !isImg;
};

var ImageView = function ImageView(_ref) {
  var id = _ref.id,
      _ref$src = _ref.src,
      src = _ref$src === void 0 ? '' : _ref$src,
      children = _ref.children,
      crop = _ref.crop,
      width = _ref.width,
      height = _ref.height,
      radius = _ref.radius,
      responsive = _ref.responsive;
  var isNotCloudinary = useMemo(function () {
    return src.startsWith('//') || src.startsWith('http');
  }, [src]);
  var source = id || src;
  return isCloudinary(id, isNotCloudinary) ? /*#__PURE__*/React.createElement(Image, {
    responsive: responsive,
    publicId: source,
    cloudName: CLOUD_NAME
  }, /*#__PURE__*/React.createElement(Transformation, {
    crop: crop,
    width: width,
    height: height,
    radius: radius
  }), children) : /*#__PURE__*/React.createElement("img", {
    alt: "",
    src: source,
    width: width,
    height: height,
    className: cn({
      'w-fill': width === 'auto'
    }),
    style: {
      objectFit: cloudinaryCropToObjectFitDict[crop]
    }
  });
};

ImageView.defaultProps = {
  children: null,
  crop: 'scale',
  width: 300,
  height: 300,
  radius: 0,
  responsive: false
};

var requiredOnlyOnePropCheck = function requiredOnlyOnePropCheck(props, propName, componentName) {
  if (!props.src === !props.id) {
    return new Error("One and only one of 'id' or 'src' is required by '".concat(componentName, "' component."));
  }
};

ImageView.propTypes = {
  /** Image Id as stored in coudinary  - Deprecated use src */
  id: requiredOnlyOnePropCheck,

  /** Image source url */
  src: requiredOnlyOnePropCheck,

  /** Inner children for image component - usually used with Transfrom component via cloudinary */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /** Crop type of image("scale"=objectFit.fill, "fit"=objectFit.contain, "fill":objectFit.cover, "limit":objectFit.scaleDown, "crop":objectFit.none) */
  crop: PropTypes.string,

  /** Image width */
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf(['auto'])]),

  /** Image height */
  height: PropTypes.number,

  /** Image border radius */
  radius: PropTypes.number,

  /** Define if image's width will be responsive */
  responsive: PropTypes.bool
};
export default ImageView;