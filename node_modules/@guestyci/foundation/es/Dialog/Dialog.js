import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import useLockBody from "../useLockBody";
import Paper from "../Paper";
import Portal from "../legacy/Portal";
import CSSTransition from "../CSSTransition";
import Backdrop from "../Backdrop";
import createStyles from "../createStyles";
import { white } from "../theme/colors";
import Fade from "../Fade";
import IconButton from "../IconButton";

var BtnDelete = function BtnDelete(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M8.485.707L7.778 0 4.243 3.536.707 0 0 .707l3.536 3.536L0 7.778l.707.707L4.243 4.95l3.535 3.535.707-.707L4.95 4.243z"
  }));
};

BtnDelete.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 8.4854 8.4854"
};
export const useStyles = createStyles(theme => ({
  root: {
    position: 'fixed',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    overflowY: 'auto',
    zIndex: theme.zIndex.dialog
  },
  dialog: {
    margin: 'auto'
  },
  content: {
    position: 'relative',
    border: `1px solid ${theme.palette.border}`,
    minWidth: 500,
    backgroundColor: white,
    borderRadius: 2
  },
  closeButton: {
    position: 'absolute',
    top: 15,
    right: 25,
    color: theme.palette.text.secondary,
    '&:hover': {
      color: theme.palette.text.default
    }
  },
  enter: {
    opacity: 0.01,
    transform: 'scale(0)'
  },
  enterActive: {
    transform: 'scale(1)',
    opacity: 1,
    transition: theme.transition.create('transform', {
      duration: 200
    })
  },
  enterDone: {
    transform: 'scale(1)',
    opacity: 1
  },
  exit: {
    opacity: 1,
    transform: 'scale(1)'
  },
  exitDone: {
    opacity: 0,
    transform: 'scale(0)'
  },
  exitActive: {
    transform: 'scale(0)',
    opacity: 0.01,
    transition: theme.transition.create('transform', {
      duration: 200
    })
  }
}), {
  name: 'Dialog'
});
const Dialog = React.forwardRef(function Dialog(_ref, ref) {
  let {
    open = false,
    className = '',
    children = null,
    style = {},
    jss = {},
    onClose = noop,
    transition,
    noClear = false
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["open", "className", "children", "style", "jss", "onClose", "transition", "noClear"]);

  const classes = useStyles({
    jss
  });
  const [show, setShow] = useState(false);
  const dialogTransition = transition || {
    enter: classes.enter,
    enterActive: classes.enterActive,
    enterDone: classes.enterDone,
    exit: classes.exit,
    exitActive: classes.exitActive,
    exitDone: classes.exitDone
  };
  useLockBody(open);
  useEffect(() => {
    setTimeout(() => setShow(open), 50);
  }, [open]);
  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Fade, {
    duration: 150,
    show: open,
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Backdrop, {
    onClick: onClose
  }), /*#__PURE__*/React.createElement(CSSTransition, {
    animation: dialogTransition,
    show: show,
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.dialog
  }, /*#__PURE__*/React.createElement(Paper, _extends({
    ref: ref,
    elevation: 2,
    className: cn(classes.content, className),
    style: style
  }, props), /*#__PURE__*/React.createElement(React.Fragment, null, !noClear && /*#__PURE__*/React.createElement(IconButton, {
    className: classes.closeButton,
    size: "xs",
    variant: "secondary",
    position: "suffix",
    onClick: onClose
  }, /*#__PURE__*/React.createElement(BtnDelete, {
    width: 12,
    height: 12
  })), children)))))));
});
Dialog.propTypes = {
  /** Child elements to render inside of the Dialog */
  children: PropTypes.node.isRequired,

  /** Boolean flag whether or not to show dialog */
  open: PropTypes.bool,

  /** Custom transition to pass to dialog */
  transition: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /** Custom jss overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Callback function for closing dialog */
  onClose: PropTypes.func,

  /** Additional classes for the paper level */
  className: PropTypes.string,

  /** Boolean flat to show/hide x button */
  noClear: PropTypes.bool
};
Dialog.displayName = 'Dialog';
export default Dialog;