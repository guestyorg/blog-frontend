import React, { useEffect, useRef } from 'react';
import PropTypes from 'prop-types';

function isInRect(ref, event) {
  var _ref$getBoundingClien = ref.getBoundingClientRect(),
      top = _ref$getBoundingClien.top,
      bottom = _ref$getBoundingClien.bottom,
      left = _ref$getBoundingClien.left,
      right = _ref$getBoundingClien.right;

  var clientX = event.clientX,
      clientY = event.clientY;
  return clientX >= left && clientX <= right && clientY >= top && clientY <= bottom;
}
/**
 * Create a wrapper compose to support click outside functionality functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


var ClickOutsideListener = function ClickOutsideListener(_ref) {
  var _ref$onClickOutside = _ref.onClickOutside,
      onClickOutside = _ref$onClickOutside === void 0 ? null : _ref$onClickOutside,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      children = _ref.children,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style;
  var clickOutsideRef = useRef(null);
  useEffect(function () {
    if (onClickOutside) {
      var handleClickOutside = function handleClickOutside(event) {
        var isCurrentTarget = clickOutsideRef.current.contains(event.target);

        if (clickOutsideRef && !isCurrentTarget && !isInRect(clickOutsideRef.current, event)) {
          onClickOutside();
        }
      };

      document.addEventListener('mousedown', handleClickOutside);
      return function () {
        return document.removeEventListener('mousedown', handleClickOutside);
      };
    }
  }, [onClickOutside]);
  return onClickOutside ? /*#__PURE__*/React.createElement("span", {
    ref: clickOutsideRef,
    className: className,
    style: style
  }, children) : children;
};

ClickOutsideListener.propTypes = {
  children: PropTypes.node.isRequired,
  onClickOutside: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.shape()
};
export default ClickOutsideListener;