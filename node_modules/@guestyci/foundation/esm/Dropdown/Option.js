import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useCallback, useMemo } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import MenuItem from "../Menu/MenuItem";
import TextField from "../TextField";
import checkboxStyles from "../Checkbox/styles";
import CheckedIcon from "../Checkbox/CheckedIcon";

var CheckboxIconOff = function CheckboxIconOff(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M12.5 15h-10A2.503 2.503 0 0 1 0 12.5v-10C0 1.122 1.122 0 2.5 0h10C13.879 0 15 1.122 15 2.5v10c0 1.379-1.121 2.5-2.5 2.5zM2.5 1C1.673 1 1 1.673 1 2.5v10c0 .827.673 1.5 1.5 1.5h10c.827 0 1.5-.673 1.5-1.5v-10c0-.827-.673-1.5-1.5-1.5h-10z"
  }));
};

CheckboxIconOff.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 15 15"
};
import createStyles from "../createStyles";
import Row from "../Layout/Row";
export var useStyles = createStyles(function (theme) {
  return _extends({}, checkboxStyles(theme));
}, {
  name: 'Option'
});

var jssOverrides = function jssOverrides(theme) {
  return {
    selected: {
      color: theme.palette.primary["default"]
    }
  };
};

var Option = React.forwardRef(function Option(_ref, ref) {
  var _cn;

  var value = _ref.value,
      _ref$multiselect = _ref.multiselect,
      multiselect = _ref$multiselect === void 0 ? false : _ref$multiselect,
      children = _ref.children,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      onClick = _ref.onClick,
      _ref$overflowEllipsis = _ref.overflowEllipsis,
      overflowEllipsis = _ref$overflowEllipsis === void 0 ? true : _ref$overflowEllipsis,
      props = _objectWithoutProperties(_ref, ["value", "multiselect", "children", "selected", "onClick", "overflowEllipsis"]);

  var classes = useStyles();
  var handleOptionClick = useCallback(function (e, selectedItem) {
    onClick(e, selectedItem);
  }, [onClick]);
  var CheckboxIcon = useMemo(function () {
    return selected ? CheckedIcon : CheckboxIconOff;
  }, [selected]);
  var selectedStyles = !multiselect ? jssOverrides : undefined;
  return /*#__PURE__*/React.createElement(MenuItem, _extends({
    selected: selected,
    jss: selectedStyles,
    value: value,
    onClick: handleOptionClick
  }, props, {
    ref: ref
  }), /*#__PURE__*/React.createElement(Row, {
    spacing: 2,
    fullWidth: true,
    align: "center"
  }, multiselect && /*#__PURE__*/React.createElement(CheckboxIcon, {
    height: 16,
    width: 16,
    className: cn(classes.icon, (_cn = {}, _defineProperty(_cn, classes.uncheckedDefaultBg, !selected), _defineProperty(_cn, classes.checked, selected), _cn))
  }), /*#__PURE__*/React.createElement(TextField, {
    overflowEllipsis: overflowEllipsis
  }, children)));
});
Option.propTypes = {
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]).isRequired,
  children: PropTypes.node.isRequired,
  overflowEllipsis: PropTypes.bool
};
Option.displayName = 'Option';
export default Option;