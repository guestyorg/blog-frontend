import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
import Row from "../Layout/Row";
import Button from "../Button";
import TextField from "../TextField";
import PickerClearButton from "../basePicker/PickerClearButton";
import PickerInputButton from "../basePicker/PickerInputButton";

var BtnIcoDuration = function BtnIcoDuration(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("title", null, "Combined Shape"), /*#__PURE__*/React.createElement("path", {
    d: "M13.625 0a.5.5 0 0 1 .09.992l-.09.008H12.55v3.37c1.89.378 3.597 1.26 4.97 2.5l1.169-1.162-.166-.166a.5.5 0 0 1 .635-.767l.07.058 1.05 1.041a.5.5 0 0 1-.636.768l-.07-.058-.173-.172-1.169 1.162a10.314 10.314 0 0 1 2.716 6.707l.004.281c0 5.743-4.691 10.396-10.475 10.396C4.69 24.958 0 20.306 0 14.563 0 9.524 3.609 5.325 8.4 4.37V1H7.325a.5.5 0 0 1-.09-.992L7.325 0h6.3zm-3.15 5.167C5.24 5.167 1 9.374 1 14.563c0 5.188 4.24 9.395 9.475 9.395 5.233 0 9.475-4.207 9.475-9.395a9.328 9.328 0 0 0-2.777-6.645 9.484 9.484 0 0 0-6.698-2.751zM6.033 9.462l.07.058 4.724 4.688a.5.5 0 0 1-.635.767l-.07-.058-4.724-4.687a.5.5 0 0 1 .635-.768zM11.55 1H9.4v3.22c.261-.026.525-.043.791-.05l.284-.003c.363 0 .722.018 1.076.054L11.55 1z",
    fillRule: "evenodd"
  }));
};

BtnIcoDuration.defaultProps = {
  width: "21",
  height: "25",
  viewBox: "0 0 21 25",
  xmlns: "http://www.w3.org/2000/svg"
};
import Input from "../Input";
import PickerResetWrapper from "../basePicker/PickerResetWrapper";
import { timePickerInputStyles } from "../TimePicker/styles";
export var useStyles = createStyles(function (theme) {
  return _extends({}, timePickerInputStyles(theme));
});

var deserializeTimeToObject = function deserializeTimeToObject(value) {
  if (!value) {
    return {
      hours: '',
      minutes: ''
    };
  }

  var hours = Math.floor(value / 60);
  var minutes = value % 60;

  if (hours < 10) {
    hours = "0".concat(Number(hours));
  }

  if (minutes < 10) {
    minutes = "0".concat(Number(minutes));
  }

  return {
    hours: !hours && minutes ? '00' : hours,
    minutes: !minutes && hours ? '00' : minutes
  };
};

var durationToValue = function durationToValue(_ref) {
  var hours = _ref.hours,
      minutes = _ref.minutes;

  if (!hours && !minutes) {
    return '';
  }

  var numDuration = Number(hours) * 60 + Number(minutes);
  return Number.isNaN(numDuration) ? '' : numDuration;
};

var jumpToNextInput = function jumpToNextInput(ref) {
  ref.current.select();
};

var DurationPickerInput = React.forwardRef(function TimePickerInput(_ref2, ref) {
  var _cn;

  var value = _ref2.value,
      onClick = _ref2.onClick,
      onChange = _ref2.onChange,
      open = _ref2.open,
      _ref2$name = _ref2.name,
      name = _ref2$name === void 0 ? '' : _ref2$name,
      className = _ref2.className,
      style = _ref2.style,
      disabled = _ref2.disabled,
      onClear = _ref2.onClear,
      noClear = _ref2.noClear,
      defaultValue = _ref2.defaultValue,
      resetable = _ref2.resetable,
      jss = _ref2.jss,
      error = _ref2.error,
      props = _objectWithoutProperties(_ref2, ["value", "onClick", "onChange", "open", "name", "className", "style", "disabled", "onClear", "noClear", "defaultValue", "resetable", "jss", "error"]);

  var classes = useStyles({
    jss: jss
  });
  var hourRef = useRef();
  var minuteRef = useRef();

  var _useState = useState({}),
      _useState2 = _slicedToArray(_useState, 2),
      duration = _useState2[0],
      setDuration = _useState2[1];

  useEffect(function () {
    if (open && (minuteRef === null || minuteRef === void 0 ? void 0 : minuteRef.current) !== document.activeElement) {
      hourRef.current.focus();
    }
  }, [open]);
  useEffect(function () {
    var serializedDuration = durationToValue(duration);

    var _deserializeTimeToObj = deserializeTimeToObject(value),
        nextHours = _deserializeTimeToObj.hours,
        nextMinutes = _deserializeTimeToObj.minutes;

    if (Number(value) !== serializedDuration) {
      setDuration({
        hours: nextHours,
        minutes: nextMinutes
      });
    }
  }, [value]);

  var handleInputFocus = function handleInputFocus(e) {
    e.target.select();
  };

  var dispatchEvent = function dispatchEvent(e, _ref3) {
    var hours = _ref3.hours,
        minutes = _ref3.minutes;
    e.stopPropagation();
    var val = durationToValue({
      hours: hours,
      minutes: minutes
    });
    onChange(e, val);
  };

  var handleInputBlur = function handleInputBlur(inputName) {
    return function (e) {
      var inputValue = e.target.value;
      var paddedValue = inputValue.length === 1 ? "0".concat(inputValue) : inputValue;

      var newDuration = _extends({}, duration, _defineProperty({}, inputName, paddedValue));

      if (inputValue && paddedValue !== inputValue) {
        setDuration(newDuration);
      }
    };
  };

  var handleReset = function handleReset(e) {
    e.stopPropagation();
    onChange(e, defaultValue);
  };

  var handleHoursChange = function handleHoursChange(e) {
    var inputValue = e.currentTarget.value;
    var minutes = duration.minutes;

    if (inputValue < 0) {
      return;
    }

    var newDuration = {
      hours: inputValue,
      minutes: minutes || '00'
    };
    setDuration(newDuration);

    if (inputValue.length === 2) {
      jumpToNextInput(minuteRef);
    }

    dispatchEvent(e, newDuration);
  };

  var handleMinutesChange = function handleMinutesChange(e) {
    var inputValue = e.target.value;
    var hours = duration.hours;

    if (inputValue < 0 || inputValue >= 60) {
      return;
    }

    var newDuration = {
      hours: hours || '00',
      minutes: inputValue
    };
    setDuration(newDuration);
    dispatchEvent(e, newDuration);
  };

  var hours = duration.hours,
      minutes = duration.minutes;
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.disabled, disabled), _defineProperty(_cn, classes.focus, open), _defineProperty(_cn, classes.error, error), _cn), className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/React.createElement(PickerResetWrapper, {
    align: "center",
    justify: "between",
    resetable: resetable,
    onReset: handleReset
  }, /*#__PURE__*/React.createElement(PickerInputButton, {
    svg: BtnIcoDuration,
    disabled: disabled,
    active: open
  }), /*#__PURE__*/React.createElement(Row, {
    className: classes.row,
    span: "auto",
    align: "center"
  }, /*#__PURE__*/React.createElement(Input, {
    ref: hourRef,
    disabled: disabled,
    maxLength: 2,
    onFocus: handleInputFocus,
    onChange: handleHoursChange,
    onBlur: handleInputBlur('hours'),
    name: "hours",
    value: hours,
    className: classes.input,
    placeholder: "HH"
  }), /*#__PURE__*/React.createElement(TextField, {
    className: classes.separator
  }, ":"), /*#__PURE__*/React.createElement(Input, {
    maxLength: 2,
    disabled: disabled,
    ref: minuteRef,
    onFocus: handleInputFocus,
    onChange: handleMinutesChange,
    onBlur: handleInputBlur('minutes'),
    name: "minutes",
    value: minutes,
    className: classes.input,
    placeholder: "MM"
  })), !noClear && !disabled && /*#__PURE__*/React.createElement(PickerClearButton, {
    show: !!value,
    onClick: onClear
  })));
});
DurationPickerInput.propTypes = {
  /** Selected value to pass to the input */
  value: PropTypes.oneOfType([PropTypes.shape(), PropTypes.array, PropTypes.string, PropTypes.number]),
  onClick: PropTypes.func,
  onClear: PropTypes.func,

  /** Prop to remove clear button if exists */
  noClear: PropTypes.bool,

  /** Disabled boolean indicator */
  disabled: PropTypes.bool,

  /** Additional className */
  className: PropTypes.string,

  /** Additional style */
  style: PropTypes.shape(),

  /** form level name */
  name: PropTypes.string,

  /** Indicator whether or not the dropdown is open */
  open: PropTypes.bool,

  /** jss override  */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
DurationPickerInput.displayName = 'DurationPickerInput';
export default DurationPickerInput;