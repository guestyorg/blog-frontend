import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useState, useEffect, useMemo } from 'react';
import useTheme from "../useTheme";

function camelToHyphen(str) {
  return str.replace(/[A-Z]/g, function (m) {
    return "-".concat(m.toLowerCase());
  });
}

function isDimention(feature) {
  return /[height|width]$/.test(feature);
}

export function generateQueryFromMedia() {
  var media = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var breakpoints = arguments.length > 1 ? arguments[1] : undefined;
  var keys = Object.keys(media);
  var mediaQuery = '';
  keys.forEach(function (key, index) {
    var value = breakpoints[media[key]];
    var feature = camelToHyphen(key);

    if (isDimention(feature) && value) {
      value = "".concat(value, "px");
    }

    if (value === true) {
      mediaQuery += feature;
    } else if (value === false) {
      mediaQuery += "not ".concat(feature);
    } else {
      mediaQuery += "(".concat(feature, ": ").concat(value, ")");
    }

    if (index < keys.length - 1) {
      mediaQuery += ' and ';
    }
  });
  return mediaQuery;
}

function useMediaQuery() {
  var media = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var theme = useTheme();
  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
  var matchMedia = supportMatchMedia ? window.matchMedia : null;
  var query = useMemo(function () {
    return generateQueryFromMedia(media, theme.breakpoints.values);
  }, [media]);

  var _useState = useState(function () {
    if (matchMedia) {
      return matchMedia(query).matches;
    }

    return false;
  }),
      _useState2 = _slicedToArray(_useState, 2),
      isMatch = _useState2[0],
      setIsMatch = _useState2[1];

  useEffect(function () {
    if (!matchMedia) {
      return;
    }

    var queryList = matchMedia(query);

    var handler = function handler() {
      setIsMatch(queryList.matches);
    };

    queryList.addListener(handler);
    return function () {
      return queryList.removeListener(handler);
    };
  }, [query]);
  return isMatch;
}

export default useMediaQuery;