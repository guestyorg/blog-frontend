// if (process.env.NODE_ENV !== 'test' && process.env.NODE_ENV !== 'feature') {
//   throw new Error(`Use NODE_ENV test || feature, current NODE_ENV ${process.env.NODE_ENV}`);
// }

const populateEnvParam = () => {

  process.env.secret_auth_api_admin_key = 'bQKeuBpDuh21aFgHc7C65Byf5SM8L661';

};

const chai = require('chai');
const expect = chai.expect;
const featureToggle = require('../../feature-toggle');

const featureToggleTestConfig = {
    core: {
      authorizationKey: 'qoqrvs71bp6ldbu93i5048bbpfvhllrmgub7', //test key
      labelsEnabled: true,
    },
    scheduler: {
      featuresRefreshRate: 30, // 30 sec
      segmentsRefreshRate: 60, // 60 sec
      metricsRefreshRate: 60, // 60 sec
      impressionsRefreshRate: 60, // 60 sec
      eventsPushRate: 60, // 60 sec
      eventsQueueSize: 500,  // 500 items
    },
    debug: true,
  }
;

populateEnvParam();

describe('Split featureToggle', function () {

  it('isEnable without init', async () => {

    let instance;

    try {
      instance = require('../../feature-toggle').default;
      const result = instance.isEnabled('leeTest');
      expect(true).to.be.equal(false);
    } catch (err) {
      expect(err.code).to.be.equal('REQUIRE_FT_INIT');
    }

  })

  it('run without config', async () => {
    let isThrow = false;

    try {
      delete await featureToggle.default.init({});
    } catch (err) {
      isThrow = true;
    }

    expect(isThrow).to.be.true;

  });

  it('Control treatment with on connection', async () => {

    let instance;

    try {
      await featureToggle.default.init(featureToggleTestConfig);
    } catch (e) {
      const err = e;
    }

    instance = require('../../feature-toggle').default;
    const result = instance.isEnabled('leeTest');
    delete instance;

    expect(result).to.be.false;

  });

  it('Treatment with connection for unregister flag', async () => {

    let instance;

    try {
      await featureToggle.default.init({
        ...featureToggleTestConfig,
        ...{
          startup: {
            readyTimeout: 2,
          },
        },
      });
    } catch (e) {
      const err = e;
    }

    instance = require('../../feature-toggle').default;
    const result = instance.isEnabled('leeTest');
    delete instance;

    expect(result).to.be.false;

  }).timeout(50000);

  it('ready timeout check', async () => {

    let instance;
    let error_code;

    try {
      await featureToggle.default.init({
        ...featureToggleTestConfig,
        ...{
          startup: {
            readyTimeout: 0.5,
          },
        },
      });
    } catch (e) {
      error_code = e.code;
    }

    delete instance;

    expect(error_code).to.equal('Timeout while waiting to event:init::ready, setTimeout:500');

  }).timeout(1000);

});

