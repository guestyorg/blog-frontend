import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Icon from "../Icon";
import BaseButton from "../BaseButton/BaseButton";
import { Theme } from "../../enums/enums";
import Tooltip from "../Tooltip/Tooltip";
var lightThemeClasses = 'fill-white fill-hover-blue-dark-theme';

var IconButton = function IconButton(_ref) {
  var icon = _ref.icon,
      svg = _ref.svg,
      onClick = _ref.onClick,
      className = _ref.className,
      style = _ref.style,
      disabled = _ref.disabled,
      iconClassName = _ref.iconClassName,
      iconStyle = _ref.iconStyle,
      type = _ref.type,
      iconWidth = _ref.iconWidth,
      iconHeight = _ref.iconHeight,
      theme = _ref.theme,
      name = _ref.name,
      id = _ref.id,
      tooltip = _ref.tooltip,
      tooltipPlacement = _ref.tooltipPlacement;
  return /*#__PURE__*/React.createElement(Tooltip, {
    body: tooltip,
    placement: tooltipPlacement,
    id: id,
    "data-qa": "icon-button"
  }, /*#__PURE__*/React.createElement(BaseButton, {
    onClick: onClick,
    name: name,
    className: className,
    variant: "icon",
    style: style,
    disabled: disabled,
    id: id
  }, /*#__PURE__*/React.createElement(Icon, {
    className: cn({
      'fill-hover-blue': !disabled
    }, {
      'fill-gray': disabled
    }, _defineProperty({}, lightThemeClasses, theme === Theme.Light), iconClassName),
    style: iconStyle,
    icon: icon,
    svg: svg,
    width: iconWidth,
    height: iconHeight,
    color: type === 'hint' ? 'muted' : 'gray-dark'
  })));
};

IconButton.defaultProps = {
  className: '',
  style: {},
  disabled: false,
  iconWidth: 20,
  iconHeight: 20,
  iconClassName: '',
  iconStyle: {},
  theme: 'dark',
  id: undefined,
  name: undefined,
  tooltip: null,
  tooltipPlacement: 'top',
  type: 'icon'
};
IconButton.propTypes = {
  /** Button click callback function */
  onClick: PropTypes.func.isRequired,

  /** Button indicator whether disabled or not */
  disabled: PropTypes.bool,

  /** Button additional classes */
  className: PropTypes.string,

  /** Button additional styling */
  style: PropTypes.shape(),

  /** The specified Icon from the Guesty Icon bank */
  icon: PropTypes.string,

  /** The svg icon to render */
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** The specified Icon height */
  iconHeight: PropTypes.number,

  /** The specified Icon width */
  iconWidth: PropTypes.number,

  /** The specified Icon className */
  iconClassName: PropTypes.string,

  /** The specified Icon Style */
  iconStyle: PropTypes.shape(),

  /** Defined the theme for the button component */
  theme: PropTypes.oneOf(['dark', 'light']),

  /** Add name prop to the button itself to pass on click */
  name: PropTypes.string,

  /** Add oid prop to the button itself to pass on click */
  id: PropTypes.string,

  /* Tooltip body to show over icon button */
  tooltip: PropTypes.node,

  /* tooltip placement according to the Tooltip component */
  tooltipPlacement: PropTypes.string,

  /* Set the icon color when not selected to hint color or icon(regular) */
  type: PropTypes.oneOf(['icon', 'hint'])
};
export default IconButton;