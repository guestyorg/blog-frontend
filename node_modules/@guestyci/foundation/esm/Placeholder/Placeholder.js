import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
import { gray200 } from "../theme/colors";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      width: '100%',
      backgroundColor: theme.palette.background.system,
      display: 'inline-block'
    },
    animate: {
      animation: '$shimmer 2s infinite linear',
      background: "linear-gradient(to right, ".concat(theme.palette.background.system, " 8%, ").concat(gray200, " 18%, ").concat(theme.palette.background.system, " 28%);"),
      backgroundSize: 1000
    },
    '@keyframes shimmer': {
      from: {
        backgroundPosition: -1000
      },
      to: {
        backgroundPosition: 1000
      }
    }
  };
}, {
  name: 'Placeholder'
});
var Placeholder = React.forwardRef(function Placeholder(_ref, ref) {
  var _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$animate = _ref.animate,
      animate = _ref$animate === void 0 ? true : _ref$animate,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      props = _objectWithoutProperties(_ref, ["className", "style", "animate", "jss"]);

  var classes = useStyles({
    jss: jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn(className, classes.root, _defineProperty({}, classes.animate, animate)),
    style: style
  }));
});
Placeholder.displayName = 'Placeholder';
Placeholder.propTypes = {
  /** Additional classes to style your placeholder */
  className: PropTypes.string,

  /** additional styles to pass to placeholder */
  style: PropTypes.shape(),

  /** if placeholder should be animated */
  animate: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
export default Placeholder;