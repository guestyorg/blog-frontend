const fs = require('fs');
const path = require('path');
const glob = require('glob');

const AWS = require('aws-sdk');
const deploy = require('s3-website').deploy;
const chalk = require('chalk');

const { getConfig } = require('../util/files');

const fillPublicURL = ({
  cluster,
  commit,
  repoName,
  firebaseApp = null,
  buildPath = './build',
}) => {
  const publicPath = generatePublicPath({
    cluster,
    commit,
    repoName,
    firebaseApp,
  });

  console.log('\nPublic path: ', chalk.cyan(publicPath), '\n');

  const cssFiles = glob.sync(`${buildPath}/**/*.css`);
  const jsFiles = glob.sync(`${buildPath}/**/*.js`);
  const indexFile = `${buildPath}/index.html`;

  const filesToReplaceIn = [...new Set([indexFile, ...cssFiles, ...jsFiles])];

  filesToReplaceIn.map(fileName => {
    const content = fs.readFileSync(fileName).toString();
    const replaced = replacePublicURL({ content, publicPath, fileName });

    fs.writeFileSync(fileName, replaced);

    console.log(`Written new ${fileName} to build folder.\n`);
  });
};

const replacePublicURL = ({ content, publicPath, fileName }) => {
  const replaceRegex = /__PUBLIC_URL__/g;
  let replaceCounter = 0;

  const replacer = () => {
    replaceCounter++;
    return publicPath;
  };

  const updated = content.replace(replaceRegex, replacer);
  console.log(
    `Replaced ${chalk.blue(
      `${replaceCounter}`
    )} occurrences of __PUBLIC_URL__ in ${fileName}`
  );

  return updated;
};

function generatePublicPath({ cluster, commit, repoName, firebaseApp }) {
  if (firebaseApp) {
    return `https://${firebaseApp}.firebaseapp.com`;
  }
  const target = getS3Targets({ cluster, commit, repoName }).static;
  return `https://d2g7j5hs6q3xyb.cloudfront.net/${target}`;
}

const getBuildFolder = ({ uploadDir } = {}) => {
  if (uploadDir) return uploadDir;

  if (fs.existsSync('./build')) return './build';
  if (fs.existsSync('./dist')) return './dist';

  throw new Error(
    'Deployment failed - build directory not found. Did you forget to build?'
  );
};

const getS3DeployConfig = (customConfig = {}) => {
  const staticConfig = require(path.resolve(
    __dirname,
    './assets/s3/config.json'
  ));

  return { ...staticConfig, ...customConfig };
};

function leftPad0(n) {
  return ('0' + n).slice(-2);
}

function getS3Targets({ cluster, commit, repoName }) {
  const now = new Date();
  const date =
    leftPad0(now.getDate()) +
    '-' +
    leftPad0(now.getMonth() + 1) +
    '-' +
    now.getFullYear() +
    ' ' +
    leftPad0(now.getHours()) +
    ':' +
    leftPad0(now.getMinutes());

  const folderName = `${date}--${commit.substring(0, 8)}`;
  return cluster === 'production'
    ? {
        static: `${cluster}/${repoName}/static`,
        version: `${cluster}/${repoName}/${folderName}`,
      }
    : { static: `branches/${cluster}/${repoName}/static` };
}

function deployFolder(src, dest, config) {
  const finalConfig = {
    ...config,
    prefix: dest,
    uploadDir: src,
  };

  const s3 = new AWS.S3({ region: config.region });

  return new Promise((resolve, reject) =>
    deploy(s3, finalConfig, (err, website) => {
      if (err)
        reject(
          new Error(
            `Deployment failed in AWS S3 step with: ${(
              err.message || err
            ).toString()}`
          )
        );
      else {
        console.log('Deployed to:', `${website.url}/${dest}`);
        resolve();
      }
    })
  );
}

module.exports = {
  getBuildFolder,
  getS3DeployConfig,
  getS3Targets,
  deployFolder,
  fillPublicURL,
};
