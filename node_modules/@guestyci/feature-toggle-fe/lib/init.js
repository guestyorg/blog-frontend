"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _jwtDecode2 = _interopRequireDefault(require("jwt-decode"));

var _featureToggle = _interopRequireDefault(require("@guestyci/feature-toggle"));

var _config = require("./config");

var parseToken = function parseToken(token) {
  try {
    var _jwtDecode = (0, _jwtDecode2["default"])(token),
        accountId = _jwtDecode.accountId,
        iss = _jwtDecode.iss;

    return {
      env: iss.split('.')[0],
      accountId: accountId
    };
  } catch (e) {
    return undefined;
  }
};

var getToken = function getToken() {
  var search = new URL(window.location).searchParams;
  var token = search.get('token');
  return token || JSON.parse(window.localStorage.getItem('token'));
};

var getConfig = function getConfig(env) {
  return env === 'production' ? _config.featureToggleProduction : _config.featureToggleDevelopment;
};

var featureToggleInit =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(environment) {
    var token, parsed, env, config, accountId;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!window.featureToggle) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", window.featureToggle);

          case 2:
            token = getToken();
            parsed = parseToken(token);
            env = environment || parsed.env;

            if (env) {
              _context.next = 8;
              break;
            }

            console.error('[featureToggle] Failed to get environment');
            return _context.abrupt("return");

          case 8:
            _context.prev = 8;

            if (env !== 'production') {
              console.log("[featureToggle] init started with env ".concat(env));
            }

            config = getConfig(env);
            accountId = parsed.accountId || 'anonymous';
            return _context.abrupt("return", _featureToggle["default"].init(config, accountId));

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](8);
            console.error('[featureToggle] Failed to fetch accountId from token while init ', _context.t0.stack);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 15]]);
  }));

  return function featureToggleInit(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = featureToggleInit;
exports["default"] = _default;