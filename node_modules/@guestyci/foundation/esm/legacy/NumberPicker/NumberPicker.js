import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/* eslint-disable class-methods-use-this */
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import withStyles from 'react-jss';
import isEmpty from 'lodash/isEmpty';
import { isNumber, parseNumber } from "../../utils/commonUtility";
import Input from "../Input/Input";
import NumberPickerActionButtons from "./NumberPickerActionButtons";
import PickerResetWrapper from "../basePicker/PickerResetWrapper";
var styles = {
  numberPickerLabelWrapper: {
    alignItems: 'center',
    '& .numberPickerLabel': {
      border: 0,
      '& input': {
        padding: '10px 5px!important',
        textAlign: 'right'
      }
    }
  },
  resetBtn: {
    borderLeftWidth: '0 !important'
  },
  input: {
    borderRightWidth: '0 !important'
  },
  isReadOnly: {
    '&:disabled': {
      color: 'black'
    }
  },
  inputWrapper: {
    'border-top-left-radius': '2px !important',
    'border-bottom-left-radius': '2px !important',
    'border-right': 0
  }
};

var shouldControlChangeInputValue = function shouldControlChangeInputValue(value, prevValue, stateValue) {
  return isNumber(value) && value !== prevValue && value !== stateValue;
};

var NumberPicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(NumberPicker, _PureComponent);

  var _super = _createSuper(NumberPicker);

  function NumberPicker(props) {
    var _this;

    _classCallCheck(this, NumberPicker);

    _this = _super.call(this, props);

    _this.handleIncrementClick = function () {
      var _this$props = _this.props,
          max = _this$props.max,
          step = _this$props.step;
      var value = _this.state.value;
      var val = +value || 0;
      var newVal = parseNumber(val + step);

      if (!isNumber(max) || isNumber(max) && newVal <= max) {
        _this.setState({
          value: newVal,
          disableMin: false,
          disableMax: isNumber(max) && newVal >= max
        }, function () {
          return _this.handleValueChange(newVal);
        });
      }
    };

    _this.calculateValueWithText = function (value) {
      var _this$props2 = _this.props,
          innerSingularText = _this$props2.innerSingularText,
          innerPluralText = _this$props2.innerPluralText,
          suffix = _this$props2.suffix;
      var isReadOnlyLocal = _this.state.isReadOnlyLocal;

      if (!isReadOnlyLocal) {
        return value;
      }

      if (!innerPluralText) {
        return "".concat(value, " ").concat(innerSingularText);
      }

      if (innerSingularText && innerPluralText && !suffix) {
        if (parseInt(value, 10) === 1) {
          return "".concat(value, " ").concat(innerSingularText);
        }

        if (parseInt(value, 10) > 1) {
          return "".concat(value, " ").concat(innerPluralText);
        }

        if (parseInt(value, 10) === 0) {
          return "".concat(value, " ").concat(innerPluralText);
        }
      }

      return value;
    };

    _this.handleDecrementClick = function () {
      var _this$props3 = _this.props,
          min = _this$props3.min,
          step = _this$props3.step;
      var value = _this.state.value;
      var val = +value || 0;
      var newVal = parseNumber(val - step);

      if (!isNumber(min) || isNumber(min) && newVal >= min) {
        _this.setState({
          value: newVal,
          disableMax: false,
          disableMin: isNumber(min) && newVal <= min
        }, function () {
          return _this.handleValueChange(newVal);
        });
      }
    };

    _this.handleInputChange = function (value) {
      var _this$props4 = _this.props,
          min = _this$props4.min,
          max = _this$props4.max;

      if (isEmpty(value) || _this.isValid(value)) {
        _this.setState({
          value: value,
          disableMax: isNumber(max) && value >= max,
          disableMin: isNumber(min) && value <= min
        }, function () {
          return _this.handleValueChange(value);
        });
      }
    };

    _this.isValidFloatingPoint = function (value) {
      if (value === Math.floor(value)) {
        return true;
      }

      var floatingPoint = _this.props.floatingPoint;
      var decValue = value.toString().split('.')[1];
      var decPoints = decValue ? decValue.length : 0;
      return floatingPoint >= decPoints;
    };

    _this.reset = function () {
      var _this$props5 = _this.props,
          max = _this$props5.max,
          min = _this$props5.min,
          defaultValue = _this$props5.defaultValue;

      _this.setState({
        value: defaultValue,
        disableMax: isNumber(max) && defaultValue >= max,
        disableMin: isNumber(min) && defaultValue <= min
      });

      _this.handleValueChange(defaultValue);
    };

    var initialValue = parseNumber(isNumber(props.value) ? props.value : props.defaultValue, '');
    _this.state = {
      value: initialValue,
      isReadOnlyLocal: false,
      disableMax: isNumber(initialValue) && isNumber(props.max) && initialValue >= props.max,
      disableMin: isNumber(initialValue) && isNumber(props.min) && initialValue <= props.min
    };
    return _this;
  }

  _createClass(NumberPicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props6 = this.props,
          isReadOnly = _this$props6.isReadOnly,
          asLabel = _this$props6.asLabel;
      this.setState({
        isReadOnlyLocal: isReadOnly || asLabel
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props7 = this.props,
          defaultValue = _this$props7.defaultValue,
          value = _this$props7.value;
      var stateValue = this.state.value;

      if (defaultValue !== prevProps.defaultValue) {
        this.handleInputChange(defaultValue);
      }

      if (shouldControlChangeInputValue(value, prevProps.value, stateValue)) {
        this.handleInputChange(value);
      }
    }
  }, {
    key: "handleValueChange",
    value: function handleValueChange(value) {
      var _this$props8 = this.props,
          onChange = _this$props8.onChange,
          id = _this$props8.id,
          name = _this$props8.name;
      onChange(parseNumber(value, null), id || name);
    }
  }, {
    key: "isValid",
    value: function isValid(value) {
      var numberRegex = RegExp('^-?\\d*\\.?\\d*$');
      return numberRegex.test(value);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props9 = this.props,
          disabled = _this$props9.disabled,
          placeholder = _this$props9.placeholder,
          inputClassName = _this$props9.inputClassName,
          inputStyle = _this$props9.inputStyle,
          className = _this$props9.className,
          style = _this$props9.style,
          resetable = _this$props9.resetable,
          defaultValue = _this$props9.defaultValue,
          classes = _this$props9.classes,
          name = _this$props9.name,
          id = _this$props9.id,
          required = _this$props9.required,
          suffix = _this$props9.suffix,
          innerPluralText = _this$props9.innerPluralText,
          innerSingularText = _this$props9.innerSingularText,
          asLabel = _this$props9.asLabel,
          icon = _this$props9.icon;
      var isReadOnlyLocal = this.state.isReadOnlyLocal;
      var _this$state = this.state,
          value = _this$state.value,
          disableMax = _this$state.disableMax,
          disableMin = _this$state.disableMin;
      var isReadOnlyWithoutSuffixAndHasText = isReadOnlyLocal && !suffix && (innerPluralText || innerSingularText);
      return /*#__PURE__*/React.createElement(PickerResetWrapper, {
        className: cn(className, _defineProperty({}, classes.numberPickerLabelWrapper, asLabel)),
        style: style,
        resetable: resetable,
        disabled: defaultValue === value,
        id: id,
        onReset: this.reset,
        "data-qa": "number-picker"
      }, icon && icon, /*#__PURE__*/React.createElement(Input, {
        suffix: suffix,
        required: required,
        name: name,
        id: id,
        value: this.calculateValueWithText(value),
        disabled: isReadOnlyLocal || disabled,
        placeholder: placeholder,
        onChange: this.handleInputChange,
        className: cn(inputClassName, _defineProperty({}, classes.isReadOnly, isReadOnlyWithoutSuffixAndHasText)),
        containerClassName: cn(classes.input, {
          'bg-white': isReadOnlyLocal
        }, 'border-radius-0', classes.inputWrapper, {
          numberPickerLabel: asLabel
        }),
        style: inputStyle
      }), /*#__PURE__*/React.createElement(NumberPickerActionButtons, {
        asLabel: asLabel,
        disableMax: disabled || disableMax,
        disableMin: disabled || disableMin,
        onIncrement: this.handleIncrementClick,
        onDecrement: this.handleDecrementClick
      }));
    }
  }]);

  return NumberPicker;
}(PureComponent);

NumberPicker.defaultProps = {
  value: undefined,
  disabled: false,
  defaultValue: undefined,
  min: undefined,
  max: undefined,
  step: 1,
  floatingPoint: 0,
  placeholder: '',
  inputClassName: '',
  inputStyle: {},
  className: '',
  style: {},
  resetable: false,
  id: undefined,
  name: '',
  suffix: null,
  innerPluralText: null,
  innerSingularText: null,
  isReadOnly: false,
  asLabel: false
};
NumberPicker.propTypes = {
  /** Controlled value to be set */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Indicator whether or not the input is disabled */
  disabled: PropTypes.bool,

  /** CallBack for on value change */
  onChange: PropTypes.func.isRequired,

  /** Default value for input (also resets to value) */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Minimum allowed value */
  min: PropTypes.number,

  /** Maximum allowed value */
  max: PropTypes.number,

  /** Amount to increment / decrement on each button click
   * - also allows the support do decimal point */
  step: PropTypes.number,

  /** Placeholder for input level */
  placeholder: PropTypes.string,

  /** Additional class for input level */
  inputClassName: PropTypes.string,

  /** Additional style for input level */
  inputStyle: PropTypes.shape(),

  /** Additional class for root level */
  className: PropTypes.string,

  /** additional style for root level */
  style: PropTypes.shape(),

  /** Show the reset option for the input (resets to defaultValue) */
  resetable: PropTypes.bool,

  /** id indicator for field */
  id: PropTypes.string,

  /** name indicator for field */
  name: PropTypes.string,

  /** Suffix to locate at the end of the number picker */
  suffix: PropTypes.node,

  /** Floating point allowed for number picker */
  floatingPoint: PropTypes.number,

  /** inner plural text locate after the number */
  innerPluralText: PropTypes.string,

  /** inner singular text locate after the number */
  innerSingularText: PropTypes.string,

  /** an indicator if the input is read only means you can't enter a number only use the buttons */
  isReadOnly: PropTypes.bool,

  /** Component icon */
  icon: PropTypes.node,

  /** Should render as label */
  asLabel: PropTypes.bool
};
export var NumberPickerComponent = NumberPicker;
export default withStyles(styles)(NumberPicker);