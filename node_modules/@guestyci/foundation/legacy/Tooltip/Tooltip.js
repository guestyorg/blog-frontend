"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Tooltip = _interopRequireDefault(require("reactstrap/lib/Tooltip"));

var _commonUtility = require("../../utils/commonUtility");

var _enums = require("../../enums/enums");

var Tooltip = function Tooltip(_ref) {
  var id = _ref.id,
      children = _ref.children,
      className = _ref.className,
      body = _ref.body,
      style = _ref.style,
      autoHide = _ref.autoHide,
      theme = _ref.theme,
      placement = _ref.placement,
      offset = _ref.offset,
      containerClassName = _ref.containerClassName,
      delay = _ref.delay,
      fullWidth = _ref.fullWidth,
      innerClassName = _ref.innerClassName,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["id", "children", "className", "body", "style", "autoHide", "theme", "placement", "offset", "containerClassName", "delay", "fullWidth", "innerClassName"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var onToggle = (0, _react.useCallback)(function () {
    setIsOpen(!isOpen);
  }, [isOpen]);
  var tooltipId = (0, _react.useMemo)(function () {
    return id || (0, _commonUtility.uuid)();
  }, [id]);
  return body ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("span", {
    className: containerClassName,
    id: "Tooltip-".concat(tooltipId)
  }, children), /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], (0, _extends2["default"])({
    innerClassName: (0, _classnames["default"])('font-size-md text-left border-radius-2', {
      'mw-100': fullWidth
    }, innerClassName),
    target: "Tooltip-".concat(tooltipId),
    isOpen: isOpen && !!body,
    toggle: onToggle,
    className: (0, _classnames["default"])({
      'light-theme': theme === _enums.Theme.Light
    }, {
      'error-theme': theme === _enums.Theme.Error
    }, className),
    popperClassName: "zindex-1500",
    style: style,
    autohide: autoHide,
    placement: placement,
    offset: offset,
    delay: delay
  }, props), body)) : children;
};

Tooltip.defaultProps = {
  className: '',
  id: undefined,
  autoHide: true,
  theme: 'dark',
  placement: 'top',
  offset: undefined,
  containerClassName: '',
  body: null,
  delay: {
    show: 250,
    hide: 0
  },
  fullWidth: false,
  innerClassName: ''
};
Tooltip.propTypes = {
  /** Node - the component wrapped by the tooltip */
  children: _propTypes["default"].node.isRequired,

  /** String || React Element - The tooltip body */
  body: _propTypes["default"].node,

  /** String - Set the tooltip trigger id */
  id: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** String - Additional tooltip component class */
  className: _propTypes["default"].string,

  /** String - Additional tooltip component class */
  containerClassName: _propTypes["default"].string,

  /** Set tooltip to not hide on mouseleave tooltip element */
  autoHide: _propTypes["default"].bool,

  /** Set the theme for the tooltip */
  theme: _propTypes["default"].oneOf(['dark', 'light', 'error']),

  /** Popover placement supporting (top, bottom, left, right ) => <pos>-start, <pos>-end */
  placement: _propTypes["default"].string,

  /** set custom offset to tooltip arrow */
  offset: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** Set show/hide delay for dialog - structure {show, hide} or number */
  delay: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    show: _propTypes["default"].number,
    hide: _propTypes["default"].number
  }), _propTypes["default"].number]),

  /** Bool, if the tooltip with take max width or be contained */
  fullWidth: _propTypes["default"].bool,

  /** Inner tooltip class name */
  innerClassName: _propTypes["default"].string
};
var _default = Tooltip;
exports["default"] = _default;