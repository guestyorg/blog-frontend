#!/usr/bin/env node

const path = require('path');

const commands = new Set([
  'bootstrap',
  'bootstrap-package',
  'bootstrap-driver',
  'bootstrap-hydra',
  'bump',
  'push-tags',
  'deploy-firebase',
  'deploy-s3',
  'deploy-storybook',
  'push-sb-branch',
  'build',
  'build-tags',
  'update-manifest',
  'invalidate-cf-index',
  'invalidate-cf-manifest',
  'invalidate-cloudfront',
]);

const cmd =
  process.argv[2] === 'invalidate-cloudfront'
    ? 'invalidate-cf-index'
    : process.argv[2];

const argv = require('yargs').argv;

if (new Set(['--help', '-h']).has(cmd)) {
  console.log(`
    To Use:
      $ ebisu <command>

    Available commands:
      ${Array.from(commands).join(', ')}
  `);
  console.log();
  process.exit(0);
}

if (!commands.has(cmd)) {
  console.error('Command is not supported');
  console.log();
  process.exit(1);
}

const getConfig = () => {
  let config = {};

  try {
    const packageConfigPath = path.resolve(process.cwd(), 'package.json');
    const packageConfig = require(packageConfigPath);
    config = packageConfig.ebisu;
  } catch (e) {
    console.log('Could not find package.json in project, not loading config');
  }

  return Object.assign({}, config, process.env, argv);
};

const start = async () => {
  const bin = path.resolve(__dirname, cmd) + '.js';
  const config = getConfig();

  try {
    await require(bin)(config);
    process.exit(0);
  } catch (e) {
    console.log(e);
    console.log();
    process.exit(1);
  }
};

start();
