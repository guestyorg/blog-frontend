{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\n\nvar useInfiniteScroll = function useInfiniteScroll(_ref) {\n  var scrollOffset = _ref.scrollOffset,\n      skip = _ref.skip,\n      totalCount = _ref.totalCount,\n      onLoadMore = _ref.onLoadMore,\n      isLoading = _ref.isLoading,\n      pageSize = _ref.pageSize;\n  var scrollableRef = useRef(null);\n  var hasReachedBottom = useCallback(function (scrollHeight, clientHeight, scrollTop) {\n    return scrollHeight - clientHeight - scrollTop <= scrollOffset;\n  }, [scrollOffset]);\n  var scrollHandler = useCallback(function (e) {\n    var nextSkip = skip + pageSize;\n\n    if (nextSkip < totalCount) {\n      var scrollableEl = scrollableRef.current;\n      var _e$target = e.target,\n          scrollHeight = _e$target.scrollHeight,\n          scrollTop = _e$target.scrollTop,\n          clientHeight = _e$target.clientHeight;\n\n      if (hasReachedBottom(scrollHeight, clientHeight, scrollTop)) {\n        scrollableEl.removeEventListener('scroll', scrollHandler);\n        onLoadMore(nextSkip, pageSize);\n      }\n    }\n  }, [skip, pageSize, totalCount, onLoadMore, hasReachedBottom]);\n  useEffect(function () {\n    if (!isLoading && totalCount) {\n      var scrollableEl = scrollableRef.current;\n\n      if (scrollableEl) {\n        scrollableEl.addEventListener('scroll', scrollHandler);\n        return function () {\n          return scrollableEl.removeEventListener('scroll', scrollHandler);\n        };\n      }\n    }\n  }, [scrollHandler, isLoading, totalCount]);\n  return scrollableRef;\n};\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/onboarding-blog/onboarding-blog-app/onboarding-frontend-main/simple-app-archive/node_modules/@guestyci/foundation/esm/useInfiniteScroll/useInfiniteScroll.js"],"names":["useCallback","useEffect","useRef","useInfiniteScroll","_ref","scrollOffset","skip","totalCount","onLoadMore","isLoading","pageSize","scrollableRef","hasReachedBottom","scrollHeight","clientHeight","scrollTop","scrollHandler","e","nextSkip","scrollableEl","current","_e$target","target","removeEventListener","addEventListener"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;;AAEA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;AACvD,MAAIC,YAAY,GAAGD,IAAI,CAACC,YAAxB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,UAAU,GAAGH,IAAI,CAACG,UAFtB;AAAA,MAGIC,UAAU,GAAGJ,IAAI,CAACI,UAHtB;AAAA,MAIIC,SAAS,GAAGL,IAAI,CAACK,SAJrB;AAAA,MAKIC,QAAQ,GAAGN,IAAI,CAACM,QALpB;AAMA,MAAIC,aAAa,GAAGT,MAAM,CAAC,IAAD,CAA1B;AACA,MAAIU,gBAAgB,GAAGZ,WAAW,CAAC,UAAUa,YAAV,EAAwBC,YAAxB,EAAsCC,SAAtC,EAAiD;AAClF,WAAOF,YAAY,GAAGC,YAAf,GAA8BC,SAA9B,IAA2CV,YAAlD;AACD,GAFiC,EAE/B,CAACA,YAAD,CAF+B,CAAlC;AAGA,MAAIW,aAAa,GAAGhB,WAAW,CAAC,UAAUiB,CAAV,EAAa;AAC3C,QAAIC,QAAQ,GAAGZ,IAAI,GAAGI,QAAtB;;AAEA,QAAIQ,QAAQ,GAAGX,UAAf,EAA2B;AACzB,UAAIY,YAAY,GAAGR,aAAa,CAACS,OAAjC;AACA,UAAIC,SAAS,GAAGJ,CAAC,CAACK,MAAlB;AAAA,UACIT,YAAY,GAAGQ,SAAS,CAACR,YAD7B;AAAA,UAEIE,SAAS,GAAGM,SAAS,CAACN,SAF1B;AAAA,UAGID,YAAY,GAAGO,SAAS,CAACP,YAH7B;;AAKA,UAAIF,gBAAgB,CAACC,YAAD,EAAeC,YAAf,EAA6BC,SAA7B,CAApB,EAA6D;AAC3DI,QAAAA,YAAY,CAACI,mBAAb,CAAiC,QAAjC,EAA2CP,aAA3C;AACAR,QAAAA,UAAU,CAACU,QAAD,EAAWR,QAAX,CAAV;AACD;AACF;AACF,GAf8B,EAe5B,CAACJ,IAAD,EAAOI,QAAP,EAAiBH,UAAjB,EAA6BC,UAA7B,EAAyCI,gBAAzC,CAf4B,CAA/B;AAgBAX,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI,CAACQ,SAAD,IAAcF,UAAlB,EAA8B;AAC5B,UAAIY,YAAY,GAAGR,aAAa,CAACS,OAAjC;;AAEA,UAAID,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACK,gBAAb,CAA8B,QAA9B,EAAwCR,aAAxC;AACA,eAAO,YAAY;AACjB,iBAAOG,YAAY,CAACI,mBAAb,CAAiC,QAAjC,EAA2CP,aAA3C,CAAP;AACD,SAFD;AAGD;AACF;AACF,GAXQ,EAWN,CAACA,aAAD,EAAgBP,SAAhB,EAA2BF,UAA3B,CAXM,CAAT;AAYA,SAAOI,aAAP;AACD,CAxCD;;AA0CA,eAAeR,iBAAf","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\n\nvar useInfiniteScroll = function useInfiniteScroll(_ref) {\n  var scrollOffset = _ref.scrollOffset,\n      skip = _ref.skip,\n      totalCount = _ref.totalCount,\n      onLoadMore = _ref.onLoadMore,\n      isLoading = _ref.isLoading,\n      pageSize = _ref.pageSize;\n  var scrollableRef = useRef(null);\n  var hasReachedBottom = useCallback(function (scrollHeight, clientHeight, scrollTop) {\n    return scrollHeight - clientHeight - scrollTop <= scrollOffset;\n  }, [scrollOffset]);\n  var scrollHandler = useCallback(function (e) {\n    var nextSkip = skip + pageSize;\n\n    if (nextSkip < totalCount) {\n      var scrollableEl = scrollableRef.current;\n      var _e$target = e.target,\n          scrollHeight = _e$target.scrollHeight,\n          scrollTop = _e$target.scrollTop,\n          clientHeight = _e$target.clientHeight;\n\n      if (hasReachedBottom(scrollHeight, clientHeight, scrollTop)) {\n        scrollableEl.removeEventListener('scroll', scrollHandler);\n        onLoadMore(nextSkip, pageSize);\n      }\n    }\n  }, [skip, pageSize, totalCount, onLoadMore, hasReachedBottom]);\n  useEffect(function () {\n    if (!isLoading && totalCount) {\n      var scrollableEl = scrollableRef.current;\n\n      if (scrollableEl) {\n        scrollableEl.addEventListener('scroll', scrollHandler);\n        return function () {\n          return scrollableEl.removeEventListener('scroll', scrollHandler);\n        };\n      }\n    }\n  }, [scrollHandler, isLoading, totalCount]);\n  return scrollableRef;\n};\n\nexport default useInfiniteScroll;"]},"metadata":{},"sourceType":"module"}