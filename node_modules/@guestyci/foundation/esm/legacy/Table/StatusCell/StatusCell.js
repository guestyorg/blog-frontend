import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

var _statusColors;

import React from 'react';
import { string, bool, node, shape } from 'prop-types';
import cn from 'classnames';
import Pill from "../../Pill";
import useTranslations from '@guestyci/localize/useTranslations';
import { isEmpty } from "../../../utils";
import Cell from "../Cell";
import Statuses from "./statuses";
var translations = [{
  id: 'smartviews_v3:status_cell.status.pending',
  d: 'Pending'
}, {
  id: 'smartviews_v3:status_cell.status.approved',
  d: 'Approved'
}, {
  id: 'smartviews_v3:status_cell.status.flagged',
  d: 'Flagged'
}, {
  id: 'smartviews_v3:status_cell.status.archived',
  d: 'Archived'
}, {
  id: 'smartviews_v3:status_cell.status.regenerating',
  d: 'Regenerating'
}, {
  id: 'smartviews_v3:status_cell.status.regeneration_failed',
  d: 'Regeneration Failed'
}, {
  id: 'smartviews_v3:status_cell.status.regeneration_required',
  d: 'Regeneration required'
}, {
  id: 'smartviews_v3:status_cell.status.unknown',
  d: 'Unknown'
}];
var statusColors = (_statusColors = {}, _defineProperty(_statusColors, Statuses.Pending, 'yellow'), _defineProperty(_statusColors, Statuses.Approved, 'green'), _defineProperty(_statusColors, Statuses.Flagged, 'red'), _defineProperty(_statusColors, Statuses.Archived, 'gray'), _defineProperty(_statusColors, Statuses.Regenerating, 'blue'), _defineProperty(_statusColors, Statuses.RegenerationFailed, 'red'), _defineProperty(_statusColors, Statuses.RegenerationRequired, 'gray'), _defineProperty(_statusColors, "unknown", 'black'), _statusColors);

function StatusCell(_ref) {
  var _statusTitles;

  var status = _ref.status,
      isLoading = _ref.isLoading,
      overflowEllipsis = _ref.overflowEllipsis,
      overflowEllipsisTooltip = _ref.overflowEllipsisTooltip,
      className = _ref.className,
      contentClassName = _ref.contentClassName,
      style = _ref.style,
      rest = _objectWithoutProperties(_ref, ["status", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style"]);

  var _useTranslations = useTranslations(translations),
      _useTranslations2 = _slicedToArray(_useTranslations, 8),
      pending = _useTranslations2[0],
      approved = _useTranslations2[1],
      flagged = _useTranslations2[2],
      archived = _useTranslations2[3],
      regenerating = _useTranslations2[4],
      regenerationFailed = _useTranslations2[5],
      regenerationRequired = _useTranslations2[6],
      unknown = _useTranslations2[7];

  var statusTitles = (_statusTitles = {}, _defineProperty(_statusTitles, Statuses.Pending, pending), _defineProperty(_statusTitles, Statuses.Approved, approved), _defineProperty(_statusTitles, Statuses.Flagged, flagged), _defineProperty(_statusTitles, Statuses.Archived, archived), _defineProperty(_statusTitles, Statuses.Regenerating, regenerating), _defineProperty(_statusTitles, Statuses.RegenerationFailed, regenerationFailed), _defineProperty(_statusTitles, Statuses.RegenerationRequired, regenerationRequired), _statusTitles);
  var displayStatus = statusTitles[status] || unknown;
  return /*#__PURE__*/React.createElement(Cell, _extends({}, rest, {
    isLoading: isLoading,
    overflowEllipsisTooltip: overflowEllipsisTooltip || displayStatus,
    overflowEllipsis: overflowEllipsis,
    className: cn('status-cell', className),
    contentClassName: contentClassName,
    style: style,
    "data-qa": "status-cell"
  }), !isEmpty(status) && /*#__PURE__*/React.createElement(Pill, {
    bgColor: statusColors[status] || statusColors.unknown,
    className: "text-center"
  }, displayStatus));
}

StatusCell.propTypes = {
  /** value of a status */
  status: string,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: node,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape()
};
StatusCell.defaultProps = {
  status: '',
  isLoading: false,
  className: '',
  contentClassName: '',
  style: {},
  overflowEllipsis: true,
  overflowEllipsisTooltip: null
};
export default StatusCell;