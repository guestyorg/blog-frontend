import { useState, useEffect, useMemo } from 'react';
import useTheme from "../useTheme";

function camelToHyphen(str) {
  return str.replace(/[A-Z]/g, m => `-${m.toLowerCase()}`);
}

function isDimention(feature) {
  return /[height|width]$/.test(feature);
}

export function generateQueryFromMedia(media = {}, breakpoints) {
  const keys = Object.keys(media);
  let mediaQuery = '';
  keys.forEach((key, index) => {
    let value = breakpoints[media[key]];
    const feature = camelToHyphen(key);

    if (isDimention(feature) && value) {
      value = `${value}px`;
    }

    if (value === true) {
      mediaQuery += feature;
    } else if (value === false) {
      mediaQuery += `not ${feature}`;
    } else {
      mediaQuery += `(${feature}: ${value})`;
    }

    if (index < keys.length - 1) {
      mediaQuery += ' and ';
    }
  });
  return mediaQuery;
}

function useMediaQuery(media = {}) {
  const theme = useTheme();
  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
  const matchMedia = supportMatchMedia ? window.matchMedia : null;
  const query = useMemo(() => generateQueryFromMedia(media, theme.breakpoints.values), [media]);
  const [isMatch, setIsMatch] = useState(() => {
    if (matchMedia) {
      return matchMedia(query).matches;
    }

    return false;
  });
  useEffect(() => {
    if (!matchMedia) {
      return;
    }

    const queryList = matchMedia(query);

    const handler = () => {
      setIsMatch(queryList.matches);
    };

    queryList.addListener(handler);
    return () => queryList.removeListener(handler);
  }, [query]);
  return isMatch;
}

export default useMediaQuery;