import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import moment from 'moment';
import MenuAutoPosition from "../Menu/MenuAutoPosition";
import Menu from "../Menu/Menu";
import ItemSelector from "./ItemSelector";
import withCollapse from "../Collapse/withCollapse";
import TimePickerInputField from "./TimePickerInputField";
import ClickOutsideListener from "../../ClickOutsideListener/ClickOutsideListener";

var paddNumber = function paddNumber(num) {
  if (num < 10) {
    return "0".concat(num);
  }

  return num;
};

var HOURS12 = _toConsumableArray(Array(12).keys()).map(function (i) {
  return i + 1;
});

var MINUTES = _toConsumableArray(Array(60).keys());

var AMPM = ['AM', 'PM'];

var TimePicker = /*#__PURE__*/function (_PureComponent) {
  _inherits(TimePicker, _PureComponent);

  var _super = _createSuper(TimePicker);

  function TimePicker(props) {
    var _this;

    _classCallCheck(this, TimePicker);

    _this = _super.call(this, props);

    _this.onChange = function () {
      var hours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HOURS12[11];
      var minutes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MINUTES[0];
      var ampm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AMPM[0];
      var _this$props = _this.props,
          id = _this$props.id,
          name = _this$props.name,
          onChange = _this$props.onChange;

      _this.setState({
        hours: hours,
        minutes: minutes,
        ampm: ampm
      }, function () {
        onChange(_this.getTimeStr(hours, minutes, ampm), id || name);
      });
    };

    _this.onHoursChange = function (hour) {
      var _this$state = _this.state,
          minutes = _this$state.minutes,
          ampm = _this$state.ampm;
      var hours = HOURS12[hour];

      _this.onChange(hours, minutes || MINUTES[0], ampm || AMPM[0]);
    };

    _this.onMinutesChange = function (minute) {
      var minutes = MINUTES[minute];
      var _this$state2 = _this.state,
          hours = _this$state2.hours,
          ampm = _this$state2.ampm;

      _this.onChange(hours || HOURS12[11], minutes, ampm || AMPM[0]);
    };

    _this.onAmpmChange = function (ampm) {
      var _this$state3 = _this.state,
          hours = _this$state3.hours,
          minutes = _this$state3.minutes;
      var _ampm = AMPM[ampm];

      _this.onChange(hours || HOURS12[11], minutes || MINUTES[0], _ampm);
    };

    _this.getHours = function (time) {
      var timeHour = time.hour();

      if (timeHour === 12 || timeHour === 0 && time.format('A') === 'AM') {
        return 12;
      }

      return time.hour() % 12;
    };

    _this.getTimeObj = function (timeStr) {
      if (!timeStr) {
        return {};
      }

      var time = moment(timeStr, 'hh:mm A');

      if (!time.isValid()) {
        time = moment("01-01-1970 ".concat(timeStr), 'MM-DD-YYYY hh:mm A');
      }

      return {
        hours: _this.getHours(time),
        minutes: time.minute(),
        ampm: time.format('A')
      };
    };

    _this.getTimeStr = function (h, m, ampm) {
      if (h === undefined || h === null) {
        return '';
      }

      return "".concat(paddNumber(h), ":").concat(paddNumber(m), " ").concat(ampm);
    };

    _this.clearTime = function () {
      _this.setState({
        hours: null,
        minutes: null,
        ampm: null
      });

      _this.onChange(null, null, null);
    };

    _this.reset = function () {
      var defaultValue = _this.props.defaultValue;

      var time = _this.getTimeObj(defaultValue);

      _this.setState(_extends({}, time));

      _this.onChange(time.hours, time.minutes, time.ampm);
    };

    var initialValue = props.value || props.defaultValue;

    var _this$getTimeObj = _this.getTimeObj(initialValue),
        _hours = _this$getTimeObj.hours,
        _minutes = _this$getTimeObj.minutes,
        _ampm2 = _this$getTimeObj.ampm;

    _this.state = {
      minutes: _minutes,
      hours: _hours,
      ampm: _ampm2
    };
    return _this;
  }

  _createClass(TimePicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          defaultValue = _this$props2.defaultValue,
          value = _this$props2.value;
      var _this$state4 = this.state,
          hours = _this$state4.hours,
          minutes = _this$state4.minutes,
          ampm = _this$state4.ampm;

      if (defaultValue || value) {
        this.onChange(hours, minutes, ampm);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          disabled = _this$props3.disabled,
          placeholder = _this$props3.placeholder,
          className = _this$props3.className,
          style = _this$props3.style,
          resetable = _this$props3.resetable,
          toggleCollapse = _this$props3.toggleCollapse,
          isCollapsed = _this$props3.isCollapsed,
          defaultValue = _this$props3.defaultValue,
          minutesStep = _this$props3.minutesStep,
          name = _this$props3.name,
          noClear = _this$props3.noClear,
          closeCollapse = _this$props3.closeCollapse,
          id = _this$props3.id;
      var _this$state5 = this.state,
          ampm = _this$state5.ampm,
          hours = _this$state5.hours,
          minutes = _this$state5.minutes;
      var hoursIndex = hours ? hours - 1 : 11;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('flex-end relative d-flex-fill', className),
        style: style,
        "data-qa": "time-picker"
      }, /*#__PURE__*/React.createElement(TimePickerInputField, {
        onClick: toggleCollapse,
        onClear: this.clearTime,
        onReset: this.reset,
        name: name,
        id: id,
        isOpen: !isCollapsed,
        resetable: resetable,
        defaultValue: defaultValue,
        disabled: disabled,
        placeholder: placeholder,
        value: this.getTimeStr(hours, minutes, ampm),
        noClear: noClear || resetable
      }), /*#__PURE__*/React.createElement(MenuAutoPosition, {
        trigger: !isCollapsed
      }, /*#__PURE__*/React.createElement(ClickOutsideListener, {
        onClickOutside: closeCollapse
      }, /*#__PURE__*/React.createElement(Menu, {
        className: "bg-white p-3 flex-center",
        collapse: isCollapsed,
        row: true,
        dense: true
      }, /*#__PURE__*/React.createElement(ItemSelector, {
        index: hoursIndex,
        values: HOURS12,
        onChange: this.onHoursChange,
        renderValue: paddNumber
      }), /*#__PURE__*/React.createElement(ItemSelector, {
        index: minutes,
        values: MINUTES,
        step: minutesStep,
        onChange: this.onMinutesChange,
        renderValue: paddNumber
      }), /*#__PURE__*/React.createElement(ItemSelector, {
        index: ampm === 'PM' ? 1 : 0,
        values: ['AM', 'PM'],
        onChange: this.onAmpmChange
      })))));
    }
  }]);

  return TimePicker;
}(PureComponent);

TimePicker.defaultProps = {
  value: '',
  disabled: false,
  defaultValue: '',
  placeholder: 'Select',
  className: '',
  style: {},
  resetable: false,
  minutesStep: 1,
  showError: false,
  noClear: false,
  name: '',
  id: ''
};
TimePicker.propTypes = {
  /** Controlled value to be set - format 'hh:mm A' */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Indicator whether or not the input is disabled */
  disabled: PropTypes.bool,

  /** CallBack for on value change */
  onChange: PropTypes.func.isRequired,

  /** Callback function to be called on dropdown visibility change */
  onVisibilityChange: PropTypes.func,

  /** Default value for input (also resets to value) - format 'hh:mm A' */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Placeholder for input level */
  placeholder: PropTypes.string,

  /** Additional class for root level */
  className: PropTypes.string,

  /** additional style for root level */
  style: PropTypes.shape(),

  /** Show the reset option for the input (resets to defaultValue) */
  resetable: PropTypes.bool,

  /** define the increacment/decreacment step on the minutes selector */
  minutesStep: PropTypes.number,

  /** Show error icon */
  showError: PropTypes.bool,

  /** Indicator whether or not we are disabling the clear button */
  noClear: PropTypes.bool,

  /** Input level name */
  name: PropTypes.string,

  /** Input level id */
  id: PropTypes.string
};
export var TimePickerComponent = TimePicker;
export default withCollapse(TimePicker);