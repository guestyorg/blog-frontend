import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { createUseStyles } from 'react-jss';
const spacer = [...Array(7).keys()].map(i => i * 5);
const useStyles = createUseStyles({
  col: {
    '& > * ': {
      marginBottom: ({
        spacing
      }) => spacer[spacing]
    },
    '& > *:last-child ': {
      marginBottom: 0
    }
  }
});
const Col = React.forwardRef(function Col(_ref, ref) {
  let {
    className,
    style,
    children,
    dense,
    fullWidth,
    align,
    justify,
    spacing,
    onClick
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "style", "children", "dense", "fullWidth", "align", "justify", "spacing", "onClick"]);

  const classes = useStyles({
    spacing
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    role: "presentation",
    onClick: onClick,
    className: cn({
      clickable: onClick
    }, 'd-flex flex-column', {
      [`col-wrapper ${classes.col}`]: !dense
    }, {
      'w-fill': fullWidth
    }, {
      [`align-items-${align}`]: align
    }, {
      [`justify-content-${justify}`]: justify
    }, className),
    style: style
  }), children);
});
Col.defaultProps = {
  className: '',
  style: {},
  children: null,
  dense: false,
  fullWidth: false,
  align: 'inherit',
  justify: 'inherit',
  spacing: 6,
  onClick: null
};
Col.propTypes = {
  /** Additional classes for row */
  className: PropTypes.string,

  /** Additional classes for row */
  align: PropTypes.string,

  /** Additional classes for row */
  justify: PropTypes.string,

  /** Additional styles for row */
  style: PropTypes.shape(),

  /** Children for row wrapper */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /** Boolean whether or not we are in dense (no margins) mode */
  dense: PropTypes.bool,

  /** Boolean whether or not we are in full width mode */
  fullWidth: PropTypes.bool,

  /** Spacing between components [0, 1, 2, 3, 4, 5, 6] -
   *  multiplies of 5 (1 => 5, 2=> 10). - defaults to 6
   */
  spacing: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]),

  /** handle click event for Col */
  onClick: PropTypes.func
}; // Hack for withInfo plugin

Col.displayName = 'Col';
export default Col;