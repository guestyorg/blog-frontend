{"ast":null,"code":"var _jsxFileName = \"/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/components/PostList.js\";\nimport React, { useState, useEffect, useCallback } from \"react\"; // import { useDispatch, useSelector } from \"react-redux\";\n// import { deletePost, listPosts } from \"../../../actions/postActions\";\n// import { POST_DETAILS_RESET } from \"../../../constants/postConstants\";\n// import Section from \"@guestyci/foundation/legacy/Section\";\n\nimport AddButton from \"@guestyci/foundation/AddButton\"; // import Table, { Column } from \"@guestyci/foundation/legacy/Table\";\n// import {\n//   getEmptySelection,\n//   getSelectionOnAction,\n// } from \"@guestyci/foundation/legacy/Table/tableUtility\";\n// import Cell from \"@guestyci/foundation/legacy/Table/Cell\";\n// import HeaderCell from \"@guestyci/foundation/legacy/Table/HeaderCell\";\n// import FlatButton from \"@guestyci/foundation/legacy/FlatButton\";\n// import { sleep } from \"@guestyci/foundation/utils/commonUtility\";\n// import orderBy from \"lodash/orderBy\";\n// import DateCell from \"@guestyci/foundation/legacy/Table/DateCell\";\n// import DateTimeCell from \"@guestyci/foundation/legacy/Table/DateTimeCell\";\n// import data from '../../../__mocks__/tableData';\n\nimport Resource from \"@guestyci/agni\";\nimport TextField from \"@guestyci/foundation/TextField\";\nimport { Row } from \"@guestyci/foundation/Layout\";\nimport { ReactComponent as BtnTrash } from \"@svgr/webpack?-svgo,+titleProp,+ref!@guestyci/foundation/icons/BtnTrash.svg\";\nimport Icon from \"@guestyci/foundation/Icon\";\nimport Spinner from \"@guestyci/foundation/Spinner\";\nimport StatusIndication from \"@guestyci/foundation/StatusIndication\";\nimport { NavLink } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostList(props) {\n  console.log(\"props:\", props);\n  const {\n    data\n  } = props; // console.log(\"blogId:\", blogId);\n\n  console.log(\"data:\", data);\n  const arr = [];\n  let posts = data.posts;\n\n  for (let i = 0; i < posts.length; i++) {\n    // console.log(\"posts[i]: \", posts[i]);\n    const arrPost = Object.entries(posts[i]);\n    console.log(\"arrPost:\", arrPost); //  title: {\n    //   children: 'John',\n    // },\n\n    const bigObj = {};\n\n    for (let j = 0; j < arrPost.length; j++) {\n      const obj = {}; // console.log(\"arrPost[j]: \", arrPost[j]);\n      // console.log(\"arrPost[0]: \",arrPost[j][0]);\n      // console.log(\"arrPost[1]: \",arrPost[j][1]);\n      // console.log(\"obj:\", obj);\n\n      if (arrPost[j][0] === \"_id\") {\n        obj.children = arrPost[j][1]; //         obj= {children: '613e616d7ab4e566768e79d5'}\n\n        bigObj.id = obj; //    bigObj= {id: {children: '613e616d7ab4e566768e79d5'}}\n\n        bigObj._id = arrPost[j][1]; //   bigObj= {_id: '613e616d7ab4e566768e79d5'}\n      } else if (arrPost[j][0] === \"createdAt\" || arrPost[j][0] === \"updatedAt\") {\n        // ['createdAt', '2021-09-13T08:46:49.849Z']\n        obj.children = new Date(arrPost[j][1]).toLocaleString(); // {children: '9/13/2021, 11:46:49 AM'}\n\n        bigObj[arrPost[j][0]] = obj; // {createdAt: {children: '9/13/2021, 11:46:49 AM'}}\n      } else if (arrPost[j][0] === \"userId\") {\n        // console.log(\"arrPost:\", arrPost);\n        // ['userId',  {_id: '613e1486e5218626969838f0', name: 'Karamba'}]\n        obj.children = `${arrPost[j][1].firstName} ${arrPost[j][1].lastName}`; // {children: 'Karamba'}\n\n        let emailObj = {};\n        emailObj.children = arrPost[j][1].email;\n        bigObj[\"admin\"] = obj;\n        bigObj[\"email\"] = emailObj;\n        let accountObj = {};\n        accountObj.children = arrPost[j][1].accountId.name;\n        bigObj[\"account\"] = accountObj; //{ accountId: {children: 'Karamba'}}\n      } else {\n        // ['firstName', 'miki']\n        obj.children = arrPost[j][1]; // {children: 'miki'}\n\n        bigObj[arrPost[j][0]] = obj; // firstName: {children: 'miki'}\n      } // console.log(\"bigObj:\", bigObj);\n      // arr.push( `${arrPost[j][0]}: {children: '${arrPost[j][1]}',}`)\n\n    } // arr.push({gilad:1,...posts[i]})\n\n\n    arr.push({ ...bigObj\n    }); // arr.push({ _id: `${counter}`, ...bigObj });\n    // counter++;\n  }\n\n  console.log(\"arr: \", arr); // const [rawData, setRawData] = useState();\n  // // const [data, setData] = useState();\n  // let data;\n  // const [postDeleted, setPostDeleted] = useState(false);\n  // const [rowSelection, setRowSelection] = useState(getEmptySelection());\n  // const { allSelected, items, exceptItems } = rowSelection;\n  // const width = 200;\n  // // const pageSize = 25;\n  // // const scrollOffset = data ? data.length : 100;\n  // // const [isLoading, setIsLoading] = useState(false);\n  // // const [skip, setSkip] = useState(0);\n  // const postList = useSelector((state) => state.postList);\n  // const { loading, error, posts } = postList;\n  // // console.log(\"posts:\", posts);\n  // data = posts;\n  // const postDelete = useSelector((state) => state.postDelete);\n  // const {\n  //   loading: loadingDelete,\n  //   error: errorDelete,\n  //   success: successDelete,\n  // } = postDelete;\n  // const userSignin = useSelector((state) => state.userSignin);\n  // const { userInfo, loadingAccount, errorAccount } = userSignin;\n  // const dispatch = useDispatch();\n  // useEffect(() => {\n  //   dispatch(listPosts());\n  //   // dispatch({\n  //   //   type: POST_DETAILS_RESET,\n  //   // });\n  // }, [dispatch, successDelete]);\n  // const selectionSize =\n  //   allSelected && data.length > 0\n  //     ? data.length - exceptItems.size\n  //     : items.size;\n  // const handleRowCheckChange = (action) => {\n  //   console.log(\"handleRowCheckChange\");\n  //   // console.log('action:', action);\n  //   const selection = getSelectionOnAction({ rowSelection, action, data });\n  //   console.log(\"rowSelection:\", rowSelection);\n  //   console.log(\"action:\", action);\n  //   console.log(\"data:\", data);\n  //   // console.log('selection:', selection);\n  //   setRowSelection(selection);\n  // };\n  // const deletePostHandler = async (postId) => {\n  //   console.log(\"deletePostHandler\");\n  //   try {\n  //     // const response = await api.delete(`/posts/${postId}`); // will go to `${config.MAILER_URL}/posts`\n  //     // console.log('response:', response);\n  //     // const data = response.data;\n  //     // addToast.success('post was delete')\n  //     // props.history.push('/');\n  //     dispatch(deletePost(postId));\n  //     setPostDeleted(true);\n  //     handleClearSelection();\n  //   } catch (error) {\n  //     console.log(\"error:\", error);\n  //     // addToast.danger(\"error deleting the post\")\n  //   }\n  // };\n  // const handleDelete = () => {\n  //   console.log(\"rowSelection.items: \", rowSelection.items);\n  //   if (window.confirm(\"Are you sure?\")) {\n  //     rowSelection.items.forEach((item) => deletePostHandler(item));\n  //   }\n  // };\n  // const handleClearSelection = () => {\n  //   console.log(\"handleClearSelection\");\n  //   setRowSelection(getEmptySelection());\n  // };\n  // const handleRowClick = (...args) => {\n  //   console.log(\"handleRowClick\", ...args);\n  //   const rowData = { ...args };\n  //   console.log(\"rowData:\", rowData);\n  //   console.log(\"rowData:\", rowData[0].id.children);\n  //   const postId = rowData[0].id.children;\n  //   // console.log('args:', args.id)\n  //   // props.history.push(\"www.google.com\")\n  //   props.history.push(`/post/edit/${postId}`);\n  // };\n\n  return (\n    /*#__PURE__*/\n    // <>\n    //   {console.log(\"data:\", data)}\n    //   {loading && <Spinner size={80} strokeWidth={6} />}\n    //   {error && (\n    //     <StatusIndication variant=\"danger\" text=\"error getting the data \" />\n    //   )}\n    //   {data && (\n    //     <Section col className=\"bg-white\">\n    //       {userInfo ? (\n    //         <Section gutter={2}>\n    _jsxDEV(AddButton, {\n      onClick: () => props.history.push(`/${blogId}/post/add`),\n      text: \"Add Post\",\n      \"data-qa\": \"post-list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }, this) //         </Section>\n    //       ) : (\n    //         <NavLink\n    //           to=\"/user/signin\"\n    //           // activeStyle={activeStyle}\n    //           style={{ marginLeft: \"20px\" }}\n    //           exact\n    //         >\n    //           sign in to create a new post\n    //         </NavLink>\n    //       )}\n    //       <Row spacing={4}>\n    //         <FlatButton\n    //           onClick={handleClearSelection}\n    //           disabled={!selectionSize}\n    //         >\n    //           {`Unselect ${selectionSize || \"\"}`}\n    //         </FlatButton>\n    //         {selectionSize > 0 && (\n    //           <>\n    //             <FlatButton type=\"error\" onClick={handleDelete}>\n    //               <Row align=\"center\" spacing={2}>\n    //                 <Icon svg={BtnTrash} />\n    //                 <TextField> Delete</TextField>\n    //               </Row>\n    //             </FlatButton>\n    //           </>\n    //         )}\n    //       </Row>\n    //       {console.log(\"rowSelection: \", rowSelection)}\n    //       <Table\n    //         multiselect\n    //         height={500}\n    //         data={posts}\n    //         // isLoading={isLoading}\n    //         // pageSize={pageSize}\n    //         rowSelection={rowSelection}\n    //         onCheckedRowsChange={handleRowCheckChange}\n    //         onRowClick={handleRowClick}\n    //         // infiniteScrollOptions={{\n    //         //   skip,\n    //         //   scrollOffset,\n    //         //   onLoadMore: handleLoadMore,\n    //         //   totalCount: semiInfiniteData.length,\n    //         // }}\n    //         // sortBy={sortBy}\n    //         // onSort={handleSort}\n    //       >\n    //         <Column align=\"left\" dataKey=\"id\" width={width} sortable>\n    //           <HeaderCell id=\"id\">Id</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"title\" width={width}>\n    //           <HeaderCell id=\"title\">Post Name</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"admin\" width={width}>\n    //           <HeaderCell id=\"admin\">Post Admin</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"email\" width={width}>\n    //           <HeaderCell id=\"email\">Email</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"account\" width={width}>\n    //           <HeaderCell id=\"account\">account</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"createdAt\" width={width}>\n    //           <HeaderCell id=\"createdAt\">created At</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"updatedAt\" width={width}>\n    //           <HeaderCell id=\"updatedAt\">updated At</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         {/* <Column dataKey=\"periodStartDate\" width={width} sortable>\n    //           <HeaderCell id=\"startdate\">Date Cell</HeaderCell>\n    //           <DateCell />\n    //         </Column>\n    //         <Column dataKey=\"periodEndDate\" width={width} sortable>\n    //           <HeaderCell id=\"enddate\">DateTime Cell</HeaderCell>\n    //           <DateTimeCell />\n    //         </Column> */}\n    //       </Table>\n    //     </Section>\n    //   )}\n    // </>\n\n  );\n}\n_c = PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/components/PostList.js"],"names":["React","useState","useEffect","useCallback","AddButton","Resource","TextField","Row","Icon","Spinner","StatusIndication","NavLink","PostList","props","console","log","data","arr","posts","i","length","arrPost","Object","entries","bigObj","j","obj","children","id","_id","Date","toLocaleString","firstName","lastName","emailObj","email","accountObj","accountId","name","push","history","blogId"],"mappings":"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O,CAACI,CAAD,CAAP,CAAW,CAAX,CAAD,CAAN,GAAwBC,GAAxB,CAPK,CASL;AACD,OA/DsC,CAiEvC;AAEA;;AACD,KAhFoC,CAiFrC;;;AACAT,IAAAA,GAAG,CAACsB,IAAJ,CAAS,EAAE,GAAGf;AAAL,KAAT,EAlFqC,CAmFrC;AAEA;AACD;;AAEDV,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,GAArB,EApGsC,CAsGtC;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;AAEA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,YAAC,SAAD;AACE,MAAA,OAAO,EAAE,MAAMJ,KAAK,CAAC2B,OAAN,CAAcD,IAAd,CAAoB,IAAGE,MAAO,WAA9B,CADjB;AAEE,MAAA,IAAI,EAAC,UAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,CAgBE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3GF;AA6GD;KAzTuB7B,Q","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { deletePost, listPosts } from \"../../../actions/postActions\";\n// import { POST_DETAILS_RESET } from \"../../../constants/postConstants\";\n\n// import Section from \"@guestyci/foundation/legacy/Section\";\nimport AddButton from \"@guestyci/foundation/AddButton\";\n\n// import Table, { Column } from \"@guestyci/foundation/legacy/Table\";\n// import {\n//   getEmptySelection,\n//   getSelectionOnAction,\n// } from \"@guestyci/foundation/legacy/Table/tableUtility\";\n// import Cell from \"@guestyci/foundation/legacy/Table/Cell\";\n// import HeaderCell from \"@guestyci/foundation/legacy/Table/HeaderCell\";\n// import FlatButton from \"@guestyci/foundation/legacy/FlatButton\";\n\n// import { sleep } from \"@guestyci/foundation/utils/commonUtility\";\n\n// import orderBy from \"lodash/orderBy\";\n\n// import DateCell from \"@guestyci/foundation/legacy/Table/DateCell\";\n// import DateTimeCell from \"@guestyci/foundation/legacy/Table/DateTimeCell\";\n\n// import data from '../../../__mocks__/tableData';\n\nimport Resource from \"@guestyci/agni\";\n\nimport TextField from \"@guestyci/foundation/TextField\";\nimport { Row } from \"@guestyci/foundation/Layout\";\nimport { ReactComponent as BtnTrash } from \"@guestyci/foundation/icons/BtnTrash.svg\";\nimport Icon from \"@guestyci/foundation/Icon\";\n\nimport Spinner from \"@guestyci/foundation/Spinner\";\nimport StatusIndication from \"@guestyci/foundation/StatusIndication\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function PostList(props) {\n  console.log(\"props:\", props);\n\n  const { data } = props;\n  // console.log(\"blogId:\", blogId);\n\n  console.log(\"data:\", data);\n\n  const arr = [];\n\n  let posts = data.posts;\n\n  for (let i = 0; i < posts.length; i++) {\n    // console.log(\"posts[i]: \", posts[i]);\n\n    const arrPost = Object.entries(posts[i]);\n    console.log(\"arrPost:\", arrPost);\n\n    //  title: {\n    //   children: 'John',\n    // },\n\n    const bigObj = {};\n\n    for (let j = 0; j < arrPost.length; j++) {\n      const obj = {};\n      // console.log(\"arrPost[j]: \", arrPost[j]);\n      // console.log(\"arrPost[0]: \",arrPost[j][0]);\n      // console.log(\"arrPost[1]: \",arrPost[j][1]);\n\n      // console.log(\"obj:\", obj);\n\n      if (arrPost[j][0] === \"_id\") {\n        obj.children = arrPost[j][1];\n        //         obj= {children: '613e616d7ab4e566768e79d5'}\n\n        bigObj.id = obj;\n        //    bigObj= {id: {children: '613e616d7ab4e566768e79d5'}}\n\n        bigObj._id = arrPost[j][1];\n\n        //   bigObj= {_id: '613e616d7ab4e566768e79d5'}\n      } else if (\n        arrPost[j][0] === \"createdAt\" ||\n        arrPost[j][0] === \"updatedAt\"\n      ) {\n        // ['createdAt', '2021-09-13T08:46:49.849Z']\n\n        obj.children = new Date(arrPost[j][1]).toLocaleString();\n        // {children: '9/13/2021, 11:46:49 AM'}\n\n        bigObj[arrPost[j][0]] = obj;\n\n        // {createdAt: {children: '9/13/2021, 11:46:49 AM'}}\n      } else if (arrPost[j][0] === \"userId\") {\n        // console.log(\"arrPost:\", arrPost);\n\n        // ['userId',  {_id: '613e1486e5218626969838f0', name: 'Karamba'}]\n        obj.children = `${arrPost[j][1].firstName} ${arrPost[j][1].lastName}`;\n\n        // {children: 'Karamba'}\n\n        let emailObj = {};\n\n        emailObj.children = arrPost[j][1].email;\n\n        bigObj[\"admin\"] = obj;\n\n        bigObj[\"email\"] = emailObj;\n\n        let accountObj = {};\n\n        accountObj.children = arrPost[j][1].accountId.name;\n\n        bigObj[\"account\"] = accountObj;\n\n        //{ accountId: {children: 'Karamba'}}\n      } else {\n        // ['firstName', 'miki']\n\n        obj.children = arrPost[j][1];\n\n        // {children: 'miki'}\n\n        bigObj[arrPost[j][0]] = obj;\n\n        // firstName: {children: 'miki'}\n      }\n\n      // console.log(\"bigObj:\", bigObj);\n\n      // arr.push( `${arrPost[j][0]}: {children: '${arrPost[j][1]}',}`)\n    }\n    // arr.push({gilad:1,...posts[i]})\n    arr.push({ ...bigObj });\n    // arr.push({ _id: `${counter}`, ...bigObj });\n\n    // counter++;\n  }\n\n  console.log(\"arr: \", arr);\n\n  // const [rawData, setRawData] = useState();\n  // // const [data, setData] = useState();\n\n  // let data;\n\n  // const [postDeleted, setPostDeleted] = useState(false);\n\n  // const [rowSelection, setRowSelection] = useState(getEmptySelection());\n  // const { allSelected, items, exceptItems } = rowSelection;\n\n  // const width = 200;\n  // // const pageSize = 25;\n  // // const scrollOffset = data ? data.length : 100;\n  // // const [isLoading, setIsLoading] = useState(false);\n  // // const [skip, setSkip] = useState(0);\n  // const postList = useSelector((state) => state.postList);\n  // const { loading, error, posts } = postList;\n  // // console.log(\"posts:\", posts);\n  // data = posts;\n  // const postDelete = useSelector((state) => state.postDelete);\n  // const {\n  //   loading: loadingDelete,\n  //   error: errorDelete,\n  //   success: successDelete,\n  // } = postDelete;\n\n  // const userSignin = useSelector((state) => state.userSignin);\n  // const { userInfo, loadingAccount, errorAccount } = userSignin;\n\n  // const dispatch = useDispatch();\n\n  // useEffect(() => {\n  //   dispatch(listPosts());\n  //   // dispatch({\n  //   //   type: POST_DETAILS_RESET,\n  //   // });\n  // }, [dispatch, successDelete]);\n\n  // const selectionSize =\n  //   allSelected && data.length > 0\n  //     ? data.length - exceptItems.size\n  //     : items.size;\n\n  // const handleRowCheckChange = (action) => {\n  //   console.log(\"handleRowCheckChange\");\n  //   // console.log('action:', action);\n\n  //   const selection = getSelectionOnAction({ rowSelection, action, data });\n  //   console.log(\"rowSelection:\", rowSelection);\n  //   console.log(\"action:\", action);\n  //   console.log(\"data:\", data);\n  //   // console.log('selection:', selection);\n  //   setRowSelection(selection);\n  // };\n\n  // const deletePostHandler = async (postId) => {\n  //   console.log(\"deletePostHandler\");\n  //   try {\n  //     // const response = await api.delete(`/posts/${postId}`); // will go to `${config.MAILER_URL}/posts`\n  //     // console.log('response:', response);\n  //     // const data = response.data;\n  //     // addToast.success('post was delete')\n  //     // props.history.push('/');\n  //     dispatch(deletePost(postId));\n\n  //     setPostDeleted(true);\n\n  //     handleClearSelection();\n  //   } catch (error) {\n  //     console.log(\"error:\", error);\n  //     // addToast.danger(\"error deleting the post\")\n  //   }\n  // };\n\n  // const handleDelete = () => {\n  //   console.log(\"rowSelection.items: \", rowSelection.items);\n\n  //   if (window.confirm(\"Are you sure?\")) {\n  //     rowSelection.items.forEach((item) => deletePostHandler(item));\n  //   }\n  // };\n\n  // const handleClearSelection = () => {\n  //   console.log(\"handleClearSelection\");\n  //   setRowSelection(getEmptySelection());\n  // };\n\n  // const handleRowClick = (...args) => {\n  //   console.log(\"handleRowClick\", ...args);\n\n  //   const rowData = { ...args };\n  //   console.log(\"rowData:\", rowData);\n  //   console.log(\"rowData:\", rowData[0].id.children);\n\n  //   const postId = rowData[0].id.children;\n  //   // console.log('args:', args.id)\n\n  //   // props.history.push(\"www.google.com\")\n\n  //   props.history.push(`/post/edit/${postId}`);\n  // };\n\n  return (\n    // <>\n    //   {console.log(\"data:\", data)}\n    //   {loading && <Spinner size={80} strokeWidth={6} />}\n    //   {error && (\n    //     <StatusIndication variant=\"danger\" text=\"error getting the data \" />\n    //   )}\n\n    //   {data && (\n    //     <Section col className=\"bg-white\">\n    //       {userInfo ? (\n    //         <Section gutter={2}>\n    <AddButton\n      onClick={() => props.history.push(`/${blogId}/post/add`)}\n      text=\"Add Post\"\n    />\n    //         </Section>\n    //       ) : (\n    //         <NavLink\n    //           to=\"/user/signin\"\n    //           // activeStyle={activeStyle}\n    //           style={{ marginLeft: \"20px\" }}\n    //           exact\n    //         >\n    //           sign in to create a new post\n    //         </NavLink>\n    //       )}\n    //       <Row spacing={4}>\n    //         <FlatButton\n    //           onClick={handleClearSelection}\n    //           disabled={!selectionSize}\n    //         >\n    //           {`Unselect ${selectionSize || \"\"}`}\n    //         </FlatButton>\n\n    //         {selectionSize > 0 && (\n    //           <>\n    //             <FlatButton type=\"error\" onClick={handleDelete}>\n    //               <Row align=\"center\" spacing={2}>\n    //                 <Icon svg={BtnTrash} />\n    //                 <TextField> Delete</TextField>\n    //               </Row>\n    //             </FlatButton>\n    //           </>\n    //         )}\n    //       </Row>\n\n    //       {console.log(\"rowSelection: \", rowSelection)}\n    //       <Table\n    //         multiselect\n    //         height={500}\n    //         data={posts}\n    //         // isLoading={isLoading}\n    //         // pageSize={pageSize}\n    //         rowSelection={rowSelection}\n    //         onCheckedRowsChange={handleRowCheckChange}\n    //         onRowClick={handleRowClick}\n    //         // infiniteScrollOptions={{\n    //         //   skip,\n    //         //   scrollOffset,\n    //         //   onLoadMore: handleLoadMore,\n    //         //   totalCount: semiInfiniteData.length,\n    //         // }}\n    //         // sortBy={sortBy}\n    //         // onSort={handleSort}\n    //       >\n    //         <Column align=\"left\" dataKey=\"id\" width={width} sortable>\n    //           <HeaderCell id=\"id\">Id</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"title\" width={width}>\n    //           <HeaderCell id=\"title\">Post Name</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"admin\" width={width}>\n    //           <HeaderCell id=\"admin\">Post Admin</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"email\" width={width}>\n    //           <HeaderCell id=\"email\">Email</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"account\" width={width}>\n    //           <HeaderCell id=\"account\">account</HeaderCell>\n    //           <Cell />\n    //         </Column>\n    //         <Column dataKey=\"createdAt\" width={width}>\n    //           <HeaderCell id=\"createdAt\">created At</HeaderCell>\n    //           <Cell />\n    //         </Column>\n\n    //         <Column dataKey=\"updatedAt\" width={width}>\n    //           <HeaderCell id=\"updatedAt\">updated At</HeaderCell>\n    //           <Cell />\n    //         </Column>\n\n    //         {/* <Column dataKey=\"periodStartDate\" width={width} sortable>\n    //           <HeaderCell id=\"startdate\">Date Cell</HeaderCell>\n    //           <DateCell />\n    //         </Column>\n    //         <Column dataKey=\"periodEndDate\" width={width} sortable>\n    //           <HeaderCell id=\"enddate\">DateTime Cell</HeaderCell>\n    //           <DateTimeCell />\n    //         </Column> */}\n    //       </Table>\n    //     </Section>\n    //   )}\n    // </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}