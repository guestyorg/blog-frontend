import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Paper from "../Paper";
import useLockBody from "../useLockBody";
import Portal from "../legacy/Portal";
import Fade from "../Fade";
import Backdrop from "../Backdrop";
import createStyles from "../createStyles";
import { white } from "../theme/colors";
import CSSTransition from "../CSSTransition";
import { firstLetterUppercase } from "../utils";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      position: 'fixed',
      inset: 0,
      zIndex: theme.zIndex.dialog
    },
    holder: {
      position: 'absolute',
      height: '100%'
    },
    holdLeft: {
      left: 0
    },
    holdRight: {
      right: 0
    },
    content: {
      position: 'relative',
      backgroundColor: white,
      height: '100%',
      overflow: 'auto'
    },
    enterRight: {
      transform: 'translateX(100%)'
    },
    enterLeft: {
      transform: 'translateX(-100%)'
    },
    enterActive: {
      transform: 'translateX(0)',
      transition: "transform ".concat(theme.transition.duration.complex, "ms ").concat(theme.transition.easing.easeInOut)
    },
    enterDone: {
      transform: 'translateX(0)'
    },
    exit: {
      transform: 'translateX(0)'
    },
    exitRightActive: {
      transform: 'translateX(100%)',
      transition: "transform ".concat(theme.transition.duration.complex, "ms ").concat(theme.transition.easing.easeInOut)
    },
    exitLeftActive: {
      transform: 'translateX(-100%)',
      transition: "transform ".concat(theme.transition.duration.complex, "ms ").concat(theme.transition.easing.easeInOut)
    },
    exitLeftDone: {
      transform: 'translateX(-100%)'
    },
    exitRightDone: {
      transform: 'translateX(100%)'
    },
    hideSurface: {
      visibility: 'hidden'
    },
    showSurface: {
      visibility: 'visible'
    }
  };
}, {
  name: 'OverlayDrawer'
});
var OverlayDrawer = React.forwardRef(function OverlayDrawer(_ref, ref) {
  var _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      _ref$wrapperClassName = _ref.wrapperClassName,
      wrapperClassName = _ref$wrapperClassName === void 0 ? '' : _ref$wrapperClassName,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      style = _ref.style,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      onClose = _ref.onClose,
      _onEnter = _ref.onEnter,
      _onExited = _ref.onExited,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? 'right' : _ref$direction,
      props = _objectWithoutProperties(_ref, ["open", "wrapperClassName", "className", "children", "style", "jss", "onClose", "onEnter", "onExited", "direction"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showSurface = _useState2[0],
      setShowSurface = _useState2[1];

  var classes = useStyles({
    jss: jss
  });
  var directionKey = firstLetterUppercase(direction);
  var slideTransition = {
    enter: classes["enter".concat(directionKey)],
    enterActive: classes.enterActive,
    enterDone: classes.enterDone,
    exit: classes.exit,
    exitActive: classes["exit".concat(directionKey, "Active")],
    exitDone: classes["exit".concat(directionKey, "Done")]
  };
  useLockBody(open);
  return /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement("div", {
    className: cn(classes.root, _defineProperty({}, classes.showSurface, showSurface), _defineProperty({}, classes.hideSurface, !showSurface))
  }, /*#__PURE__*/React.createElement(Fade, {
    show: open,
    duration: 300,
    timeout: 300,
    unmountOnExit: true
  }, /*#__PURE__*/React.createElement(Backdrop, {
    onClick: onClose
  })), /*#__PURE__*/React.createElement("div", {
    className: cn(classes.holder, classes["hold".concat(directionKey)], wrapperClassName)
  }, /*#__PURE__*/React.createElement(CSSTransition, {
    timeout: 375,
    animation: slideTransition,
    show: open,
    unmountOnExit: true,
    onEnter: function onEnter() {
      setShowSurface(true);
      if (_onEnter) _onEnter();
    },
    onExited: function onExited() {
      setShowSurface(false);
      if (_onExited) _onExited();
    }
  }, /*#__PURE__*/React.createElement(Paper, _extends({
    ref: ref,
    elevation: 2,
    className: cn(classes.content, className),
    style: style,
    square: true
  }, props), children)))));
});
OverlayDrawer.propTypes = {
  /** Child elements to render inside of the drawer */
  children: PropTypes.node.isRequired,

  /** Boolean flag whether or not to show drawer */
  open: PropTypes.bool,

  /** Custom jss overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Callback function for closing drawer */
  onClose: PropTypes.func,

  /** Callback function when drawer animation enters */
  onEnter: PropTypes.func,

  /** Callback function when drawer animation exited */
  onExited: PropTypes.func,

  /** Additional classes for the paper div parent */
  wrapperClassName: PropTypes.string,

  /** Additional classes for the paper level */
  className: PropTypes.string,

  /** Enum for the drawer anchor [ 'right', 'left' ] */
  direction: PropTypes.oneOf(['right', 'left'])
};
OverlayDrawer.displayName = 'OverlayDrawer';
export default OverlayDrawer;