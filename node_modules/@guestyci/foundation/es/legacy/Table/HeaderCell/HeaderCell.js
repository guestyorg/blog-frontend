import React, { useCallback, useRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import useHover from "../../../useHover";
import useComposeRefs from "../../../useComposeRefs";
import Row from "../../../Layout/Row";
import Fade from "../../../Fade";
import Icon from "../../../Icon";
import TextField from "../../../TextField";
import Divider from "../../../Divider";
import SortIndicator from "./SortIndicator";

var IcoDraggable = function IcoDraggable(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("g", {
    fill: "#707070",
    fillRule: "evenodd",
    opacity: ".53"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "1.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "5.5",
    cy: "1.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "5.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "5.5",
    cy: "5.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "9.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "5.5",
    cy: "9.5",
    r: "1.5"
  })));
};

IcoDraggable.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "7",
  height: "11",
  viewBox: "0 0 7 11"
};
import useDrag from "../../../useDrag";
import useResize from "../../../useResize";
import Popover from "../../Popover";
import { capitalize } from "../../../utils/commonUtility";
import createStyles from "../../../createStyles";
import { white } from "../../../theme/colors";

const getHeaderCursor = (draggable, isDragging, sortable) => {
  if (isDragging) return 'grabbing';
  if (draggable || sortable) return 'pointer';
  return 'default';
};

const useStyles = createStyles(theme => ({
  root: {
    borderBottom: `1px solid ${theme.palette.text.primary}`,
    paddingTop: theme.spacer(2),
    paddingBottom: theme.spacer(2),
    textTransform: 'uppercase',
    backgroundColor: white,
    display: 'table-cell',
    transition: theme.transition.create('color'),
    zIndex: 10,
    color: theme.palette.placeholder,
    position: 'sticky',
    top: 0,
    width: ({
      resizedWidth
    }) => resizedWidth,
    left: ({
      positionLeft
    }) => positionLeft,
    right: ({
      positionRight
    }) => positionRight,
    cursor: ({
      draggable,
      isDragging,
      sortable
    }) => getHeaderCursor(draggable, isDragging, sortable)
  },
  hint: {
    '&:hover': {
      color: theme.palette.text.secondary
    }
  },
  fixedCell: {
    borderTop: `1px solid ${theme.palette.border}`,
    zIndex: 15
  },
  alignCenter: {
    textAlign: 'center'
  },
  alignLeft: {
    textAlign: 'left'
  },
  alignRight: {
    textAlign: 'right'
  },
  active: {
    color: theme.palette.text.primary
  },
  draggableIcon: {
    marginBottom: 3
  },
  resizable: {
    cursor: 'col-resize'
  },
  contentWrapper: {
    paddingLeft: theme.spacer(3),
    height: 30
  },
  popover: {
    width: '100%',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  divider: {
    transition: theme.transition.create('border-color')
  },
  draggable: {
    borderColor: theme.palette.text.primary
  },
  title: {
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
}), {
  name: 'HeaderCell'
});

const HeaderCell = ({
  children,
  id,
  width,
  align,
  fixed,
  className,
  positionLeft,
  positionRight,
  draggable,
  onSort,
  sortable,
  sortDirection,
  style,
  onDragDrop,
  resizable,
  onResize
}) => {
  const [isHovering, hoverRef] = useHover();
  const contentRef = useRef(null);
  const [resizedWidth, resizeRef] = useResize({
    startWidth: width,
    isResizable: resizable,
    id,
    onResizeEnd: onResize
  });
  const [{
    isDragging
  }, dragRef] = useDrag(id, onDragDrop, draggable);
  const classes = useStyles({
    positionLeft,
    positionRight,
    draggable,
    isDragging,
    resizedWidth,
    sortable
  });
  const draggableRef = draggable ? dragRef : null;
  const headerCellRef = useComposeRefs(hoverRef, draggableRef);
  const handleCellClick = useCallback(e => {
    e.stopPropagation();

    if (sortable && onSort) {
      const newOrder = sortDirection === 'desc' ? '' : '-';
      onSort(`${newOrder}${id}`);
    }
  }, [onSort, sortable, id, sortDirection]);
  const showSortHint = sortable && !sortDirection && isHovering;
  const showResizeIndicator = resizable && isHovering;
  const isOverflowed = contentRef.current?.scrollWidth > resizedWidth;
  return /*#__PURE__*/React.createElement("div", {
    ref: headerCellRef,
    role: "presentation",
    onClick: handleCellClick,
    className: cn('header-cell', classes.root, {
      [classes.active]: sortDirection,
      [classes.hint]: !sortDirection,
      [classes.fixedCell]: fixed,
      [classes[`align${capitalize(align)}`]]: align
    }, className),
    style: style,
    "data-qa": "header-cell"
  }, /*#__PURE__*/React.createElement(Row, {
    spacing: 2,
    align: "center",
    className: cn('header-cell-content', classes.contentWrapper),
    fullWidth: true
  }, /*#__PURE__*/React.createElement(Fade, {
    show: draggable && isHovering,
    unmountOnExit: !draggable,
    className: cn(classes.draggableIcon, 'drag-icon')
  }, /*#__PURE__*/React.createElement(Icon, {
    svg: IcoDraggable,
    height: 11,
    width: 7
  })), /*#__PURE__*/React.createElement(Popover, {
    isOpen: isOverflowed && isHovering,
    containerClassName: classes.popover,
    body: children
  }, /*#__PURE__*/React.createElement(TextField, {
    className: classes.title,
    wrap: false,
    ref: contentRef
  }, children)), /*#__PURE__*/React.createElement(Fade, {
    mountOnEnter: !sortable,
    show: sortDirection || showSortHint
  }, /*#__PURE__*/React.createElement(SortIndicator, {
    direction: sortDirection,
    isHint: showSortHint
  })), /*#__PURE__*/React.createElement(Divider, {
    ref: resizeRef,
    className: cn('header-cell-divider', classes.divider, {
      [classes.resizable]: resizable,
      [classes.draggable]: showResizeIndicator
    }),
    orientation: "vertical",
    thickness: 1
  })));
};

HeaderCell.defaultProps = {
  sortable: false,
  resizable: false,
  onSort: undefined,
  className: '',
  style: {},
  onDragDrop: noop,
  onResize: noop,
  draggable: false
};
HeaderCell.propTypes = {
  children: PropTypes.node.isRequired,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  align: PropTypes.string,
  resizable: PropTypes.bool,
  sortable: PropTypes.bool,
  sortDirection: PropTypes.oneOf(['asc', 'desc']),
  onSort: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.shape(),
  id: PropTypes.string.isRequired,
  onDragDrop: PropTypes.func,
  draggable: PropTypes.bool,
  onResize: PropTypes.func
};
export default HeaderCell;