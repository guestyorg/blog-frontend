import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { firstLetterUppercase as capitalize } from "../utils/commonUtility";
import createStyles from "../createStyles";
export var useStyles = createStyles(function (theme) {
  return {
    h1: _extends({}, theme.typography.h1, {
      color: theme.palette.text.dark
    }),
    h2: _extends({}, theme.typography.h2, {
      color: theme.palette.text.dark
    }),
    h3: _extends({}, theme.typography.h3, {
      color: theme.palette.text.dark
    }),
    h4: theme.typography.h4,
    h5: theme.typography.h5,
    h6: _extends({}, theme.typography.h6, {
      color: theme.palette.text.link
    }),
    h7: theme.typography.h7,
    h8: _extends({}, theme.typography.h8, {
      color: theme.palette.text.dark
    }),
    // deprecated
    running: theme.typography.running,
    // deprecated
    secondary: theme.typography.secondary,
    bold: {
      fontWeight: theme.typography.fontWeight.bold
    },
    italic: {
      fontStyle: theme.typography.fontStyle.italic
    },
    colorInput: {
      color: theme.palette.text.input
    },
    colorWhite: {
      color: theme.palette.text.white
    },
    colorDark: {
      color: theme.palette.text.dark
    },
    colorSecondary: {
      color: theme.palette.text.secondary
    },
    colorLink: {
      color: theme.palette.text.link
    },
    colorError: {
      color: theme.palette.error.text
    },
    colorSuccess: {
      color: theme.palette.success.text
    },
    colorAlert: {
      color: theme.palette.alert.text
    },
    colorInfo: {
      color: theme.palette.info.text
    },
    colorDefault: {
      color: theme.palette.text["default"]
    },
    colorLight: {
      color: theme.palette.text.light
    },
    colorPlaceholder: {
      color: theme.palette.text.placeholder
    },
    colorInherit: {
      color: 'inherit'
    },
    overflowEllipsis: {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap'
    },
    displayBlock: {
      display: 'block'
    },
    displayInline: {
      display: 'inline'
    },
    textCenter: {
      textAlign: 'center'
    },
    textRight: {
      textAlign: 'right'
    },
    textLeft: {
      textAlign: 'left'
    },
    textJustify: {
      textAlign: 'justify'
    }
  };
}, {
  name: 'TextField'
});
var TextField = React.forwardRef(function TextField(_ref, ref) {
  var _cn;

  var _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'initial' : _ref$color,
      children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$bold = _ref.bold,
      bold = _ref$bold === void 0 ? false : _ref$bold,
      _ref$italic = _ref.italic,
      italic = _ref$italic === void 0 ? false : _ref$italic,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'inherit' : _ref$variant,
      _ref$overflowEllipsis = _ref.overflowEllipsis,
      overflowEllipsis = _ref$overflowEllipsis === void 0 ? false : _ref$overflowEllipsis,
      _ref$display = _ref.display,
      display = _ref$display === void 0 ? 'initial' : _ref$display,
      _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'inherit' : _ref$align,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      props = _objectWithoutProperties(_ref, ["color", "children", "className", "bold", "italic", "style", "variant", "overflowEllipsis", "display", "align", "jss"]);

  var classes = useStyles({
    jss: jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn((_cn = {}, _defineProperty(_cn, classes.overflowEllipsis, overflowEllipsis), _defineProperty(_cn, classes.bold, bold), _defineProperty(_cn, classes.italic, italic), _defineProperty(_cn, classes["color".concat(capitalize(color))], color !== 'initial'), _defineProperty(_cn, classes[variant], variant !== 'inherit'), _defineProperty(_cn, classes["text".concat(capitalize(align))], align !== 'inherit'), _defineProperty(_cn, classes["display".concat(capitalize(display))], display !== 'initial'), _cn), 'text-field-wrapper', className),
    style: style
  }, props), children);
});
TextField.propTypes = {
  /** Text field text color - value = [
   'default',
   'light',
   'white',
   'dark',
   'input',
   'secondary',
   'link',
   'error',
   'success',
   'info',
   'alert',
   'inherit',
   'initial'
   'placeholder'
   ] */
  color: PropTypes.oneOf(['default', 'light', 'white', 'dark', 'input', 'placeholder', 'secondary', 'link', 'error', 'success', 'info', 'alert', 'inherit', 'initial']),

  /** Indicator whether or not to make font bold */
  bold: PropTypes.bool,

  /** Wherever to use to use font-style italic or not */
  italic: PropTypes.bool,

  /** Text field inner children  - Node element */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** root level class name to add */
  className: PropTypes.string,

  /** root level style name to add */
  style: PropTypes.shape(),

  /** typography variant -  [
   'h1',
   'h2',
   'h3',
   'h4',
   'h5',
   'h6',
   'h7',
   'h8',
   'inherit',
   ] */
  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'inherit']),

  /** Boolean flag to indicate whether or not to truncate text on overflow */
  overflowEllipsis: PropTypes.bool,

  /** Set the display type */
  display: PropTypes.oneOf(['initial', 'block', 'inline']),

  /** Set the text alignment on component */
  align: PropTypes.oneOf(['inherit', 'left', 'right', 'center', 'justify']),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
}; // Hack for withInfo plugin

TextField.displayName = 'TextField';
export default TextField;