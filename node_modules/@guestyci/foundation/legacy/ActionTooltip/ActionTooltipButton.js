"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _enums = require("../../enums/enums");

var _RaisedButton = _interopRequireDefault(require("../RaisedButton/RaisedButton"));

var _Link = _interopRequireDefault(require("../Link/Link"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ActionTooltipButton = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(ActionTooltipButton, _Component);

  var _super = _createSuper(ActionTooltipButton);

  function ActionTooltipButton() {
    var _this;

    (0, _classCallCheck2["default"])(this, ActionTooltipButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleClick = function (e) {
      var _this$props = _this.props,
          actionHref = _this$props.actionHref,
          onAction = _this$props.onAction;

      if (actionHref) {
        window.open(actionHref, '_blank');
      }

      onAction(e);
    };

    return _this;
  }

  (0, _createClass2["default"])(ActionTooltipButton, [{
    key: "getActionSettings",
    value: function getActionSettings() {
      var actionType = this.props.actionType;
      var buttonComponents = {
        RaisedButton: _RaisedButton["default"],
        Link: _Link["default"]
      };
      var ActionComponent = buttonComponents.RaisedButton;
      var className = '';

      if (actionType !== _enums.ActionTooltipType.Button) {
        ActionComponent = buttonComponents.Link;
        className = 'text-hover-blue-dark-theme';
      }

      return {
        ActionComponent: ActionComponent,
        className: className
      };
    }
  }, {
    key: "render",
    value: function render() {
      var actionText = this.props.actionText;

      var _this$getActionSettin = this.getActionSettings(),
          ActionComponent = _this$getActionSettin.ActionComponent,
          className = _this$getActionSettin.className;

      return /*#__PURE__*/_react["default"].createElement(ActionComponent, {
        className: className,
        onClick: this.handleClick,
        "data-qa": "action-tooltip-button"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "flex-center"
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: ""
      }, actionText)));
    }
  }]);
  return ActionTooltipButton;
}(_react.Component);

ActionTooltipButton.defaultProps = {
  actionHref: '',
  onAction: function onAction() {}
};
ActionTooltipButton.propTypes = {
  /** Sets the type of the action */
  actionType: _propTypes["default"].oneOf([_enums.ActionTooltipType.Button, _enums.ActionTooltipType.Link]).isRequired,

  /** Sets the text of the action */
  actionText: _propTypes["default"].node.isRequired,

  /** Sets the Href of the action */
  actionHref: _propTypes["default"].string,

  /** Callback(optional) to be executed when the action is clicked */
  onAction: _propTypes["default"].func
};
var _default = ActionTooltipButton;
exports["default"] = _default;