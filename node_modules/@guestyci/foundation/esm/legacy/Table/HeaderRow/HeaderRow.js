import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import CheckboxCell from "../CheckboxCell";
import createStyles from "../../../createStyles";
import { white } from "../../../theme/colors";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      height: 45,
      borderBottom: "1px solid ".concat(theme.palette.text.primary),
      display: 'table-header-group',
      '& .header-cell, .checkbox-cell': {
        '&.cell-group-left': {
          borderTop: "2px solid ".concat(theme.palette.border)
        },
        '&.cell-group-right': {
          borderTopWidth: 2,
          borderTopColor: "".concat(theme.palette.border, " !important")
        },
        '&.cell-group-item-last': {
          '& .header-cell-content': {
            '& .header-cell-divider': {
              display: 'none'
            }
          }
        },
        '&.cell-group-item-first': {
          '& .header-cell-content': {
            '& .header-cell-divider': {
              display: 'none'
            }
          }
        },
        '&:last-child': {
          '& .header-cell-content': {
            '& .header-cell-divider': {
              display: 'none'
            }
          }
        }
      }
    },
    checkboxCell: {
      zIndex: 11,
      position: 'sticky',
      top: 0,
      backgroundColor: white,
      borderBottom: "1px solid ".concat(theme.palette.text.primary)
    }
  };
}, {
  name: 'HeaderRow'
});

var HeaderRow = function HeaderRow(_ref) {
  var _children$, _children$$props;

  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      draggable = _ref.draggable,
      onDragDrop = _ref.onDragDrop,
      onSort = _ref.onSort,
      onResize = _ref.onResize,
      sortBy = _ref.sortBy,
      multiSelect = _ref.multiSelect,
      _ref$masterCheckbox = _ref.masterCheckbox,
      _ref$masterCheckbox$c = _ref$masterCheckbox.checked,
      checked = _ref$masterCheckbox$c === void 0 ? false : _ref$masterCheckbox$c,
      _ref$masterCheckbox$i = _ref$masterCheckbox.indeterminate,
      indeterminate = _ref$masterCheckbox$i === void 0 ? false : _ref$masterCheckbox$i,
      _ref$masterCheckbox$o = _ref$masterCheckbox.onChange,
      onChange = _ref$masterCheckbox$o === void 0 ? noop : _ref$masterCheckbox$o;
  var fixedLeft = ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : (_children$$props = _children$.props) === null || _children$$props === void 0 ? void 0 : _children$$props.fixed) === 'left';
  var classes = useStyles();

  var _useMemo = useMemo(function () {
    var minusPrefix = sortBy === null || sortBy === void 0 ? void 0 : sortBy.startsWith('-');
    var direction = minusPrefix ? 'desc' : 'asc';
    var id = minusPrefix ? sortBy.substring(1) : sortBy;
    return [id, direction];
  }, [sortBy]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      sortId = _useMemo2[0],
      sortDirection = _useMemo2[1];

  var cells = useMemo(function () {
    return React.Children.map(children, function (child) {
      var _child$props = child.props,
          cellClassName = _child$props.className,
          fixed = _child$props.fixed,
          id = _child$props.id;
      return React.cloneElement(child, {
        draggable: !fixed && draggable,
        onDragDrop: onDragDrop,
        className: cn(cellClassName),
        onResize: onResize,
        onSort: onSort,
        sortDirection: sortId === id ? sortDirection : undefined
      });
    });
  }, [children, draggable, sortDirection, sortId]);
  return /*#__PURE__*/React.createElement("div", {
    className: cn('header-row', className, classes.root),
    style: style,
    "data-qa": "header-row"
  }, multiSelect && /*#__PURE__*/React.createElement(CheckboxCell, {
    onChange: onChange,
    checked: checked,
    indeterminate: indeterminate,
    fixed: fixedLeft,
    className: cn({
      'checkbox-cell cell-group-left': fixedLeft
    }, classes.checkboxCell)
  }), cells);
};

HeaderRow.defaultProps = {
  style: {},
  className: '',
  masterCheckbox: {
    checked: false,
    indeterminate: false,
    onChange: noop
  },
  multiSelect: false,
  draggable: false,
  onDragDrop: noop
};
HeaderRow.propTypes = {
  draggable: PropTypes.bool,
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  style: PropTypes.shape(),
  multiSelect: PropTypes.bool,
  masterCheckbox: PropTypes.shape({
    checked: PropTypes.bool,
    indeterminate: PropTypes.bool,
    onChange: PropTypes.func
  }),
  onDragDrop: PropTypes.func,
  sortBy: PropTypes.string,
  onSort: PropTypes.func
};
export default HeaderRow;