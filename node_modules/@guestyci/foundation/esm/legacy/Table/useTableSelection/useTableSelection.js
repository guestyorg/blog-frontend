import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useState, useEffect } from 'react';
import { getEmptySelection, getSelectionOnAction, getSelectionOnData } from "../tableUtility";
/**
 * Hook that provides table selection state
 * @param data {Array} - table data
 * @param rowIdDataKey {String} - key from row data to be used as identifier
 */

export default function useTableSelection() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      _ref$rowIdDataKey = _ref.rowIdDataKey,
      rowIdDataKey = _ref$rowIdDataKey === void 0 ? '_id' : _ref$rowIdDataKey,
      itemsTotalCount = _ref.itemsTotalCount;

  var _useState = useState(getEmptySelection()),
      _useState2 = _slicedToArray(_useState, 2),
      rowSelection = _useState2[0],
      setSelection = _useState2[1];

  var setTableSelection = function setTableSelection(action) {
    var nextSelection = getSelectionOnAction({
      rowSelection: rowSelection,
      action: action,
      data: data,
      rowIdDataKey: rowIdDataKey,
      itemsTotalCount: itemsTotalCount
    });
    setSelection(nextSelection);
  };

  var clearSelection = function clearSelection() {
    setSelection(getEmptySelection());
  };

  useEffect(function () {
    var allSelected = rowSelection.allSelected;

    if (allSelected) {
      var nextSelection = getSelectionOnData({
        rowSelection: rowSelection,
        data: data,
        rowIdDataKey: rowIdDataKey
      });
      setSelection(nextSelection);
    }
  }, [data, rowIdDataKey]);
  return [rowSelection, setTableSelection, {
    clearSelection: clearSelection
  }];
}