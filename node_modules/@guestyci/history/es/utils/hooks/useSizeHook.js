import { useState, useCallback, useLayoutEffect } from 'react';

const getSize = el => ({
  width: el?.offsetWidth || 0,
  height: el?.offsetHeight || 0
});

export default ((ref, isActive) => {
  const [size, setSize] = useState(getSize(ref?.current));
  let resizeTimer;
  const handleResize = useCallback(() => {
    if (ref?.current && isActive) {
      if (resizeTimer) clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        setSize(getSize(ref.current));
      }, 300);
    }
  }, [ref, isActive]);
  useLayoutEffect(() => {
    if (!ref?.current || !isActive) {
      return;
    }

    handleResize();

    if (typeof window?.ResizeObserver === 'function') {
      let resizeObserver = new window.ResizeObserver(() => {
        handleResize();
      });
      resizeObserver.observe(ref.current);
      return () => {
        resizeObserver.disconnect(ref.current);
        resizeObserver = null;
      };
    }

    window.addEventListener('resize', handleResize);
    return () => {
      if (ref?.current && isActive && resizeTimer) {
        clearTimeout(resizeTimer);
      }

      window.removeEventListener('resize', handleResize);
    };
  }, [ref.current, isActive]);
  return size;
});