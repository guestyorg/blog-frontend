import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import isUndefined from 'lodash/isUndefined';
import cn from 'classnames';
import withPopover from "../Popover/withPopover";
import { getPlaceholder } from "../../utils/formUtility";
import Popover from "../Popover";

const getChildValue = props => props.value || props.defaultValue;

const FormFieldComponent = ({
  input,
  children,
  isPopoverOpen,
  className,
  meta,
  input: {
    name,
    value: inputValue
  },
  style,
  popoverId,
  required,
  openPopover,
  closePopover
}) => {
  useEffect(() => {
    const propsValue = getChildValue(children.props);

    if (!input.value && propsValue) {
      input.onChange(propsValue);
    }
  }, []);

  const onChangeValue = (...args) => {
    const {
      onChange,
      onSelect
    } = children.props;

    if (onChange) {
      onChange(...args);
    }

    if (onSelect) {
      onSelect(...args);
    }

    input.onChange(...args);
  };

  const getFieldValue = (propsValue, inptVal, isVisited) => {
    if (isUndefined(propsValue)) {
      return inptVal;
    }

    if (isVisited) {
      return inptVal;
    }

    return propsValue;
  };

  const handleFocus = () => {
    input.onFocus();

    if (!meta.visited) {
      input.onChange(input.value);
    }

    if (meta.error) {
      openPopover();
    }
  };

  const handleBlur = () => {
    input.onBlur();
    closePopover();
  };

  const {
    value,
    placeholder,
    disabled
  } = children.props;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Popover, {
    isOpen: isPopoverOpen,
    body: meta.error,
    id: popoverId,
    theme: "error",
    containerClassName: "d-flex-fill",
    className: "font-weight-bold"
  }, /*#__PURE__*/React.createElement("div", {
    className: "w-fill"
  })), /*#__PURE__*/React.createElement("div", {
    className: cn(className, 'form-field-component-wrapper', 'transition-borderColor', 'w-fill', 'b-1', `border-${meta.touched && meta.error ? 'red' : 'transparent'}`, `${meta.error ? 'invalid-field' : null}`),
    onBlur: handleBlur,
    onFocus: handleFocus,
    tabIndex: -1,
    style: style
  }, React.cloneElement(children, {
    name,
    onChange: onChangeValue,
    required,
    disabled,
    placeholder: getPlaceholder(placeholder, required, disabled),
    value: getFieldValue(value, inputValue, meta.visited)
  })));
};

FormFieldComponent.defaultProps = {
  className: '',
  style: {},
  popoverId: null,
  required: false
};
FormFieldComponent.propTypes = {
  children: PropTypes.node.isRequired,
  required: PropTypes.bool,
  className: PropTypes.string,
  style: PropTypes.shape(),
  input: PropTypes.shape().isRequired,
  meta: PropTypes.shape().isRequired,
  popoverId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
};
export default withPopover(FormFieldComponent);