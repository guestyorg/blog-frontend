import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import StrapPopover from 'reactstrap/lib/Popover';
import { uuid } from "../../utils/commonUtility";
import { Theme } from "../../enums/enums";

var Popover = function Popover(_ref) {
  var children = _ref.children,
      className = _ref.className,
      body = _ref.body,
      style = _ref.style,
      theme = _ref.theme,
      containerClassName = _ref.containerClassName,
      innerClassName = _ref.innerClassName,
      placement = _ref.placement,
      offset = _ref.offset,
      isOpen = _ref.isOpen,
      onClose = _ref.onClose,
      fullWidth = _ref.fullWidth,
      id = _ref.id,
      rest = _objectWithoutProperties(_ref, ["children", "className", "body", "style", "theme", "containerClassName", "innerClassName", "placement", "offset", "isOpen", "onClose", "fullWidth", "id"]);

  var popoverId = useMemo(function () {
    return id || uuid();
  }, [id]);
  return /*#__PURE__*/React.createElement("div", {
    className: containerClassName,
    "data-qa": "popover"
  }, /*#__PURE__*/React.createElement("span", {
    id: "Popover-".concat(popoverId),
    className: containerClassName
  }, children), /*#__PURE__*/React.createElement(StrapPopover, _extends({
    target: "Popover-".concat(popoverId),
    isOpen: isOpen && !!body,
    toggle: onClose,
    className: cn('popover-container', {
      'mw-100': fullWidth
    }, {
      'dark-theme': theme === Theme.Dark
    }, {
      'light-theme': theme === Theme.Light
    }, {
      'error-theme': theme === Theme.Error
    }, className),
    popperClassName: cn('zindex-1500', {
      'max-width-fill': fullWidth
    }),
    innerClassName: cn('border-radius-2', 'font-size-md', 'p-2', innerClassName),
    boundariesElement: "window",
    style: style,
    placement: placement,
    offset: offset
  }, rest), body));
};

Popover.defaultProps = {
  className: '',
  innerClassName: '',
  id: undefined,
  theme: 'dark',
  placement: 'top',
  offset: undefined,
  containerClassName: '',
  body: null,
  onClose: noop,
  fullWidth: false
};
Popover.propTypes = {
  /** Bool - Boolean defining whether or not to toggle the popover */
  isOpen: PropTypes.bool.isRequired,

  /** Node - the component wrapped by the tooltip */
  children: PropTypes.node.isRequired,

  /** String || React Element - The tooltip body */
  body: PropTypes.node,

  /** onClose  - Function to support the popover toggle */
  onClose: PropTypes.func,

  /** String - Set the tooltip trigger id */
  id: PropTypes.string,

  /** String - Additional tooltip component class */
  className: PropTypes.string,

  /** Set the theme for the tooltip */
  theme: PropTypes.oneOf(['dark', 'light', 'error']),

  /** Popover placement supporting (top, bottom, left, right ) => <pos>-start, <pos>-end */
  placement: PropTypes.string,

  /** set custom offset to tooltip arrow */
  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Add class to popover root level */
  containerClassName: PropTypes.string,

  /** Set the popover content to fit to its children full width - by default 280 */
  fullWidth: PropTypes.bool,

  /** Inner class name for popover */
  innerClassName: PropTypes.string
};
export default Popover;