"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = require("react-jss");

var _classnames = _interopRequireDefault(require("classnames"));

var _commonUtility = require("../../utils/commonUtility");

var _Placeholder = _interopRequireDefault(require("../Placeholder"));

var useStyles = (0, _reactJss.createUseStyles)({
  icon: {
    minWidth: function minWidth(props) {
      return props.width;
    },
    minHeight: function minHeight(props) {
      return props.height;
    }
  },
  placeholder: {
    borderRadius: '15%'
  }
});

var createSvgFromText = function createSvgFromText(text) {
  var div = document.createElement('div');
  div.innerHTML = text.substring(text.indexOf('<svg'));
  return div.firstChild;
};

var Icon = _react["default"].memo(function (_ref) {
  var width = _ref.width,
      height = _ref.height,
      color = _ref.color,
      fillColor = _ref.fillColor,
      strokeColor = _ref.strokeColor,
      className = _ref.className,
      icon = _ref.icon,
      style = _ref.style,
      noFill = _ref.noFill;

  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      svgContent = _useState2[0],
      setSvgContent = _useState2[1];

  var _useState3 = (0, _react.useState)({}),
      _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
      attributes = _useState4[0],
      setAttributes = _useState4[1];

  (0, _react.useEffect)(function () {
    var setSvgAttributes = function setSvgAttributes(svg) {
      var attrs = Object.values(svg.attributes).reduce(function (acc, attr) {
        var name = attr.name,
            value = attr.value;

        if (!name.includes('xml')) {
          var camelName = (0, _commonUtility.snakeToCamel)(name);
          acc[camelName] = value;
        }

        return acc;
      }, {});
      setAttributes(attrs);
    };

    var fetchSvgIconFromS3 = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var resp, text, svgElement;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return fetch("https://d2g7j5hs6q3xyb.cloudfront.net/icons/".concat(icon, ".svg"));

              case 3:
                resp = _context.sent;
                _context.next = 6;
                return resp.text();

              case 6:
                text = _context.sent;
                svgElement = createSvgFromText(text);
                setSvgAttributes(svgElement);
                setSvgContent(svgElement.innerHTML);
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](0);
                console.warn("".concat(icon, " was not found"));

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 12]]);
      }));

      return function fetchSvgIconFromS3() {
        return _ref2.apply(this, arguments);
      };
    }();

    fetchSvgIconFromS3();
  }, [icon]);
  var classes = useStyles({
    width: width,
    height: height
  });
  var iconFillColor = fillColor || color;

  if (!svgContent) {
    return /*#__PURE__*/_react["default"].createElement(_Placeholder["default"], {
      className: (0, _classnames["default"])(className, classes.placeholder, classes.icon)
    });
  }

  return /*#__PURE__*/_react["default"].createElement("svg", (0, _extends2["default"])({
    dangerouslySetInnerHTML: {
      __html: svgContent
    }
  }, attributes, {
    width: width,
    height: height,
    className: (0, _classnames["default"])({
      'transition-all': iconFillColor && !noFill
    }, className, noFill ? 'fill-inherit' : ["fill-".concat(iconFillColor, " stroke-").concat(strokeColor)], classes.icon),
    style: style
  }));
});

Icon.defaultProps = {
  width: 20,
  height: 20,
  color: '',
  className: '',
  style: {},
  noFill: false
};
Icon.propTypes = {
  /** Icon width in pixels */
  width: _propTypes["default"].number,

  /** Icon height in pixels */
  height: _propTypes["default"].number,

  /** Icon fill color - see style guide colors for options */
  color: _propTypes["default"].string,

  /** Class to add to the Icon component */
  className: _propTypes["default"].string,

  /** Style to add to Icon component */
  style: _propTypes["default"].shape(),

  /** The string name of the Icon to use. Also possible to pass without the icon prop */
  icon: _propTypes["default"].string.isRequired,

  /** boolean - decide whether to disable default fill color */
  noFill: _propTypes["default"].bool
};
var _default = Icon;
exports["default"] = _default;