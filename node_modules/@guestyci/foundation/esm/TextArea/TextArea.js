import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import TextareaAutosize from 'react-textarea-autosize';
import Col from "../Layout/Col";
import createStyles from "../createStyles";
import InputStyles from "../Input/styles";
import { blueGray500 } from "../theme/colors";
export var useStyles = createStyles(function (theme) {
  return {
    root: _extends({}, theme.typography.primary),
    textArea: _extends({}, InputStyles.shared(theme), {
      '&::placeholder': InputStyles.placeholder(theme),
      '&:hover': InputStyles.hover(theme),
      '&:focus': InputStyles.focused(theme),
      '&:disabled': InputStyles.disabled(theme),
      paddingTop: theme.spacer(3),
      paddingBottom: theme.spacer(3),
      minHeight: '60px'
    }),
    error: InputStyles.error(theme),
    charCount: {
      marginTop: theme.spacer(1),
      color: blueGray500
    }
  };
}, {
  name: 'TextArea'
});
var TextArea = React.forwardRef(function TextArea(_ref, ref) {
  var name = _ref.name,
      value = _ref.value,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      placeholder = _ref.placeholder,
      className = _ref.className,
      maxLength = _ref.maxLength,
      minRows = _ref.minRows,
      maxRows = _ref.maxRows,
      error = _ref.error,
      jss = _ref.jss,
      props = _objectWithoutProperties(_ref, ["name", "value", "onChange", "disabled", "placeholder", "className", "maxLength", "minRows", "maxRows", "error", "jss"]);

  var classes = useStyles({
    jss: jss
  });
  var charCount = value.length;
  return /*#__PURE__*/React.createElement(Col, {
    className: cn(classes.root, className)
  }, /*#__PURE__*/React.createElement(TextareaAutosize, _extends({
    value: value,
    onChange: onChange,
    name: name,
    placeholder: placeholder,
    disabled: disabled,
    maxRows: maxRows,
    minRows: minRows,
    maxLength: maxLength,
    className: cn(classes.textArea, _defineProperty({}, classes.error, error)),
    ref: ref
  }, props)), maxLength && /*#__PURE__*/React.createElement("span", {
    className: classes.charCount
  }, "".concat(charCount, "/").concat(maxLength)));
});
TextArea.defaultProps = {
  value: '',
  name: '',
  onChange: noop,
  placeholder: '',
  disabled: false,
  minRows: 1,
  maxRows: 5,
  maxLength: undefined
};
TextArea.propTypes = {
  /** text area value */
  value: PropTypes.string,

  /** text area name */
  name: PropTypes.string,

  /** On change trigger function to update on text change */
  onChange: PropTypes.func,

  /** The max length for the text area input */
  maxLength: PropTypes.number,

  /** TextArea Placeholder */
  placeholder: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** Minimum height according by units of rows */
  minRows: PropTypes.number,

  /** Maximum height according by units of rows */
  maxRows: PropTypes.number,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
TextArea.displayName = 'TextArea';
export default TextArea;