"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDates = require("react-dates");

var _enums = require("../../enums/enums");

var RangePicker = function RangePicker(_ref) {
  var startDate = _ref.startDate,
      startDateId = _ref.startDateId,
      endDateId = _ref.endDateId,
      style = _ref.style,
      prevMonthButton = _ref.prevMonthButton,
      nextMonthButton = _ref.nextMonthButton,
      renderMonthElement = _ref.renderMonthElement,
      enableOutsideDays = _ref.enableOutsideDays,
      isDayBlocked = _ref.isDayBlocked,
      isOutsideRange = _ref.isOutsideRange,
      verticalSpacing = _ref.verticalSpacing,
      disabled = _ref.disabled,
      endDate = _ref.endDate,
      readOnly = _ref.readOnly,
      daySize = _ref.daySize,
      focusedInput = _ref.focusedInput,
      onFocus = _ref.onFocus,
      numberOfMonths = _ref.numberOfMonths,
      minimumNights = _ref.minimumNights,
      onMonthChange = _ref.onMonthChange,
      renderDayContents = _ref.renderDayContents,
      initialVisibleMonth = _ref.initialVisibleMonth,
      onDatesChange = _ref.onDatesChange,
      anchorDirection = _ref.anchorDirection,
      openDirection = _ref.openDirection,
      weekDayFormat = _ref.weekDayFormat,
      appendToBody = _ref.appendToBody,
      startDatePlaceholderText = _ref.startDatePlaceholderText,
      endDatePlaceholderText = _ref.endDatePlaceholderText;
  return /*#__PURE__*/_react["default"].createElement("div", {
    style: style,
    "data-qa": "range-picker"
  }, /*#__PURE__*/_react["default"].createElement(_reactDates.DateRangePicker, {
    startDatePlaceholderText: startDatePlaceholderText,
    endDatePlaceholderText: endDatePlaceholderText,
    startDate: startDate,
    startDateId: startDateId,
    endDate: endDate,
    endDateId: endDateId,
    onDatesChange: onDatesChange,
    isDayBlocked: isDayBlocked,
    enableOutsideDays: enableOutsideDays,
    daySize: daySize,
    disabled: disabled,
    noBorder: true,
    onNextMonthClick: onMonthChange,
    onPrevMonthClick: onMonthChange,
    numberOfMonths: numberOfMonths,
    hideKeyboardShortcutsPanel: true,
    verticalSpacing: verticalSpacing,
    customArrowIcon: /*#__PURE__*/_react["default"].createElement("div", {
      className: "pl-1 pr-2 ".concat(startDate || endDate ? 'text-black' : 'text-gray')
    }, "-"),
    navPrev: prevMonthButton,
    navNext: nextMonthButton,
    renderMonthElement: renderMonthElement,
    focusedInput: focusedInput,
    onFocusChange: onFocus,
    readOnly: readOnly,
    minimumNights: minimumNights,
    renderDayContents: renderDayContents,
    isOutsideRange: isOutsideRange,
    initialVisibleMonth: initialVisibleMonth,
    anchorDirection: anchorDirection,
    openDirection: openDirection,
    weekDayFormat: weekDayFormat,
    displayFormat: _enums.DateDisplayFormat,
    appendToBody: appendToBody
  }));
};

var _default = RangePicker;
exports["default"] = _default;