import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useState, useCallback, useMemo, useEffect } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import isEmpty from 'lodash/isEmpty';
import debounce from 'lodash/debounce';
import createStyles from "../createStyles";
import { white } from "../theme/colors";
const useStyles = createStyles({
  root: {
    position: 'absolute',
    overflow: 'hidden',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    '& span': {
      transform: 'scale(0)',
      borderRadius: '100%',
      position: 'absolute',
      overflow: 'hidden',
      opacity: 0.5,
      backgroundColor: ({
        color
      }) => color,
      animation: '$rippleEffect 850ms'
    }
  },
  '@keyframes rippleEffect': {
    to: {
      opacity: 0,
      transform: 'scale(2)'
    }
  }
});
const TouchRipple = React.forwardRef(function TouchRipple({
  color = white,
  className = ''
}, ref) {
  const [spanStyles, setSpanStyles] = useState({});
  const [count, setCount] = useState(0);
  const classes = useStyles({
    color
  });
  const showRipple = useCallback(e => {
    const rippleContainer = e.currentTarget;
    const size = rippleContainer.offsetWidth;
    const pos = rippleContainer.getBoundingClientRect();
    const x = Math.round(e.clientX - pos.left);
    const y = Math.round(e.clientY - pos.top);
    setCount(count + 1);
    setSpanStyles(_extends({}, spanStyles, {
      [count]: {
        top: -(size / 2) + y,
        left: -(size / 2) + x,
        height: size,
        width: size
      }
    }));
  }, [count, spanStyles]);
  const cleanUp = debounce(() => {
    setCount(0);
    setSpanStyles({});
  }, 2500);
  React.useImperativeHandle(ref, () => ({
    ripple: showRipple,
    stop: cleanUp
  }));
  useEffect(() => {
    return () => cleanUp.cancel();
  }, []);
  const spanArray = useMemo(() => Object.keys(spanStyles), [spanStyles]);
  return /*#__PURE__*/React.createElement("div", {
    role: "presentation",
    className: cn(classes.root, className)
  }, !isEmpty(spanArray) ? spanArray.map(key => /*#__PURE__*/React.createElement("span", {
    key: `rippleWave${key}`,
    style: _extends({}, spanStyles[key])
  })) : null);
});
TouchRipple.propTypes = {
  color: PropTypes.string,
  className: PropTypes.string
};
export default TouchRipple;