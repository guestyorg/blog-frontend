"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _moment = _interopRequireDefault(require("moment"));

var _memoize = _interopRequireDefault(require("@guestyci/memoize"));

var _reactDayPicker = _interopRequireDefault(require("react-day-picker"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _CalendarDay = _interopRequireDefault(require("./CalendarDay"));

var _CalendarNavBar = _interopRequireDefault(require("./CalendarNavBar"));

var _CalendarWeekDayBar = _interopRequireDefault(require("./CalendarWeekDayBar"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Calendar = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Calendar, _Component);

  var _super = _createSuper(Calendar);

  function Calendar() {
    var _this;

    (0, _classCallCheck2["default"])(this, Calendar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.getAccurateMonth = (0, _memoize["default"])(function (month) {
      if (month) {
        return _moment["default"].utc(month).startOf('month').add('14', 'days').toDate();
      }

      return month;
    });
    _this.handleMonthChange = (0, _debounce["default"])(function (month) {
      var onMonthChange = _this.props.onMonthChange;
      onMonthChange(month);
    }, 500);

    _this.renderDay = function (day) {
      var _this$props = _this.props,
          activeDates = _this$props.activeDates,
          calendar = _this$props.calendar,
          sm = _this$props.sm,
          isFetching = _this$props.isFetching,
          tooltipBoundariesElement = _this$props.tooltipBoundariesElement;
      return /*#__PURE__*/_react["default"].createElement(_CalendarDay["default"], {
        tooltipBoundariesElement: tooltipBoundariesElement,
        calendar: calendar,
        day: day,
        isFetching: isFetching,
        activeDates: activeDates,
        sm: sm
      });
    };

    return _this;
  }

  (0, _createClass2["default"])(Calendar, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          month = _this$props2.month,
          initialMonth = _this$props2.initialMonth,
          sm = _this$props2.sm;
      var calendarInitialMonth = this.getAccurateMonth(initialMonth);
      var calendarMonth = this.getAccurateMonth(month);
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('relative calendar', {
          lg: !sm
        }),
        "data-qa": "calendar"
      }, /*#__PURE__*/_react["default"].createElement(_reactDayPicker["default"], {
        month: calendarMonth,
        initialMonth: calendarInitialMonth,
        showOutsideDays: true,
        onMonthChange: this.handleMonthChange,
        renderDay: this.renderDay,
        navbarElement: /*#__PURE__*/_react["default"].createElement(_CalendarNavBar["default"], null),
        weekdayElement: /*#__PURE__*/_react["default"].createElement(_CalendarWeekDayBar["default"], {
          className: (0, _classnames["default"])({
            'pb-3': !sm
          }),
          dayCharCount: sm ? 1 : 3
        })
      }));
    }
  }]);
  return Calendar;
}(_react.Component);

Calendar.defaultProps = {
  activeDates: {
    start: null,
    end: null
  },
  initialMonth: undefined,
  month: undefined,
  sm: false,
  isFetching: false,
  tooltipBoundariesElement: undefined
};
Calendar.propTypes = {
  /** The Calendar Month data
   Structure:{ reservation: {
   guest, money, blocks, checkIn, checkOut, guestsCount, status
   }, listingId, accountId, date, currency, status, price }
   */
  calendar: _propTypes["default"].shape({
    listingId: _propTypes["default"].string,
    accountId: _propTypes["default"].string,
    date: _propTypes["default"].string,
    currency: _propTypes["default"].string,
    status: _propTypes["default"].string,
    price: _propTypes["default"].number,
    reservation: _propTypes["default"].shape({
      _id: _propTypes["default"].string.isRequired,
      guestId: _propTypes["default"].string.isRequired,
      confirmationCode: _propTypes["default"].string.isRequired,
      guest: _propTypes["default"].shape({
        _id: _propTypes["default"].string.isRequired,
        name: _propTypes["default"].string.isRequired,
        avatar: _propTypes["default"].string
      }),
      money: _propTypes["default"].shape({
        currency: _propTypes["default"].string.isRequired,
        hostPayout: _propTypes["default"].number.isRequired
      }),
      blocks: _propTypes["default"].shape().isRequired,
      checkIn: _propTypes["default"].string,
      checkOut: _propTypes["default"].string,
      guestsCount: _propTypes["default"].number,
      status: _propTypes["default"].string.isRequired
    })
  }).isRequired,

  /** Initial month - for none async actions
   *  (accepts - date string, unix and date object)
   *  */
  initialMonth: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date), _propTypes["default"].number]),

  /** controlled change month manually
   * (accepts - date string, unix and date object)
   * */
  month: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].instanceOf(Date), _propTypes["default"].number]),

  /** The dates that are active for the reservation
   - structure: {start: {String} - check in date string, end: {String} - checkout date string}
   */
  activeDates: _propTypes["default"].shape({
    start: _propTypes["default"].string,
    end: _propTypes["default"].string
  }),

  /** Callback function to handle month change */
  onMonthChange: _propTypes["default"].func.isRequired,

  /** Indicator whether or not we want the small calendar or regular sized */
  sm: _propTypes["default"].bool,

  /** Indicator whether or not we are in fetching mode */
  isFetching: _propTypes["default"].bool,
  tooltipBoundariesElement: _propTypes["default"].string
};
var _default = Calendar;
exports["default"] = _default;