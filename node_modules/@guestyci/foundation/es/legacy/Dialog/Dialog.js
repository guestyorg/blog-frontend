import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { createUseStyles } from 'react-jss';
import { Modal, ModalBody } from 'reactstrap';
import DialogHeader from "./DialogHeader";
import DialogFooter from "./DialogFooter";
import DialogXHeader from "./DialogXHeader";
const useStyles = createUseStyles({
  modalContentWithMaxHeight: {
    minHeight: '250px !important ',
    maxHeight: '620px !important'
  },
  modalContent: {
    minHeight: '250px !important '
  }
});

const Dialog = ({
  onConfirm,
  value,
  onClose,
  isOpen,
  title,
  headerRightComponent,
  footerLeftComponent,
  showCancel,
  isSubmitting,
  type,
  confirmTitle,
  cancelTitle,
  disabled,
  children,
  noFooter,
  bodyClassName,
  className,
  centered,
  windowScroll,
  disabledModalContentPadding,
  onOpened,
  onClosed
}) => {
  const classes = useStyles();
  const handleConfirmClick = useCallback(() => {
    if (onConfirm) {
      onConfirm(value);
    }
  });
  const handleCloseClick = useCallback(() => {
    if (onClose) {
      onClose(value);
    }
  });
  const isXDialog = !title && noFooter;
  const modalContentClass = windowScroll ? classes.modalContent : classes.modalContentWithMaxHeight;
  return /*#__PURE__*/React.createElement(Modal, {
    onOpened: onOpened,
    onClosed: onClosed,
    centered: centered,
    isOpen: isOpen,
    className: className,
    contentClassName: cn('box-shadow-center-heavy', modalContentClass, {
      [`${isXDialog ? 'pb-6 pl-9 pt-4 pr-4' : 'px-9'}`]: !disabledModalContentPadding
    }),
    "data-qa": "dialog"
  }, title && /*#__PURE__*/React.createElement(DialogHeader, {
    type: type,
    title: title,
    rightComponent: headerRightComponent
  }), isXDialog && /*#__PURE__*/React.createElement(DialogXHeader, {
    onClick: handleCloseClick,
    setAbsoluteRight: disabledModalContentPadding
  }), /*#__PURE__*/React.createElement(ModalBody, {
    className: cn(`${!disabledModalContentPadding && isXDialog ? 'pr-5 pl-0 pt-0 pb-0' : 'p-0'}`, 'overflow-y-auto', bodyClassName)
  }, children), !noFooter && /*#__PURE__*/React.createElement(DialogFooter, {
    disabled: disabled,
    isSubmitting: isSubmitting,
    showCancel: showCancel,
    showConfirm: !!onConfirm,
    cancelTitle: cancelTitle,
    confirmTitle: confirmTitle,
    onCancel: handleCloseClick,
    onConfirm: handleConfirmClick,
    leftComponent: footerLeftComponent
  }));
};

Dialog.defaultProps = {
  title: '',
  headerRightComponent: null,
  footerLeftComponent: null,
  onConfirm: undefined,
  confirmTitle: 'Save',
  cancelTitle: 'Cancel',
  disabled: false,
  value: null,
  noFooter: false,
  isSubmitting: false,
  showCancel: true,
  bodyClassName: '',
  className: '',
  type: 'primary',
  centered: false,
  windowScroll: false,
  disabledModalContentPadding: false
};
Dialog.propTypes = {
  /** Indicator whether or not the dialog should be open */
  isOpen: PropTypes.bool.isRequired,

  /** Dialog body element */
  children: PropTypes.node.isRequired,

  /** CallBack function to dismiss dialog */
  onClose: PropTypes.func.isRequired,

  /** Header title for dialog */
  title: PropTypes.string,

  /** Dialog header right element */
  headerRightComponent: PropTypes.node,

  /** Dialog footer left element */
  footerLeftComponent: PropTypes.node,

  /** Dialog confirm title for footer confirm button */
  confirmTitle: PropTypes.string,

  /** Dialog cancel title for footer cancel button */
  cancelTitle: PropTypes.string,

  /** Callback for the confirm button click -
   * not defining this will cause the confirm button to not render */
  onConfirm: PropTypes.func,

  /** Indicator whether or not the dialog confirm button is disabled */
  disabled: PropTypes.bool,

  /** Payload to pass on dialog callback click */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** Indicator whether or not to remove the footer */
  noFooter: PropTypes.bool,

  /** Indicator whether or not to show the primary button in loading state */
  isSubmitting: PropTypes.bool,

  /** Indicator whether or not to show the cancel button on the footer */
  showCancel: PropTypes.bool,

  /** Additional class name to body */
  bodyClassName: PropTypes.string,

  /** Additional class name to the dialog box  */
  className: PropTypes.string,

  /** Set dialog type (error, primary) */
  type: PropTypes.oneOf(['error', 'primary']),

  /** Indicator whether or not to center the modal */
  centered: PropTypes.bool,

  /** Indicator whether or not dialog should have content scroll vs windowScroll */
  windowScroll: PropTypes.bool,

  /** Indicator whether the dialog content will fill the full dialog without padding */
  disabledModalContentPadding: PropTypes.bool,

  /** Callback triggered after open transition - Not this is only in special cases where you want a callback after the animation of open has ended */
  onOpened: PropTypes.func,

  /** Callback triggered after exist animation - Not this is only in special cases where you want a callback after the animation of close has ended */
  onClosed: PropTypes.func
};
export default Dialog;