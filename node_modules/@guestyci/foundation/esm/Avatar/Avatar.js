import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      position: 'relative',
      backgroundColor: theme.palette.background.system,
      borderRadius: '50%',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    },
    icon: {
      padding: theme.spacer(2),
      textTransform: 'uppercase'
    },
    small: {
      width: 24,
      height: 24,
      '& $icon': {
        padding: theme.spacer(1)
      }
    },
    large: {
      width: 40,
      height: 40
    },
    disabled: {
      opacity: 0.3
    },
    img: {
      objectFit: 'cover',
      width: '100%',
      height: '100%',
      borderRadius: 'inherit'
    }
  };
}, {
  name: 'Avatar'
});
var Avatar = React.forwardRef(function Avatar(_ref, ref) {
  var _cn;

  var _ref$alt = _ref.alt,
      alt = _ref$alt === void 0 ? '' : _ref$alt,
      _ref$src = _ref.src,
      src = _ref$src === void 0 ? '' : _ref$src,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'large' : _ref$size,
      _ref$badge = _ref.badge,
      badge = _ref$badge === void 0 ? null : _ref$badge,
      props = _objectWithoutProperties(_ref, ["alt", "src", "children", "className", "style", "jss", "disabled", "size", "badge"]);

  var classes = useStyles({
    jss: jss
  });
  var showChildren = !src && children;
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.disabled, disabled), _defineProperty(_cn, classes.small, size === 'small'), _defineProperty(_cn, classes.large, size === 'large'), _cn), className),
    style: style
  }), src && /*#__PURE__*/React.createElement("img", {
    className: classes.img,
    alt: alt,
    src: src
  }), showChildren && /*#__PURE__*/React.createElement("div", {
    className: classes.icon
  }, children), badge && badge);
});
Avatar.propTypes = {
  /** Badge component */
  badge: PropTypes.node,

  /** Avatar size - values: [small , large] */
  size: PropTypes.oneOf(['small', 'large']),

  /** Image alt */
  alt: PropTypes.string,

  /** Image src in case we want to render an image as avatar */
  src: PropTypes.string,

  /** In case we render icon or children components pass them as children */
  children: PropTypes.node,

  /** Additional root level classes */
  className: PropTypes.string,

  /** Additional root level styles */
  style: PropTypes.shape(),

  /** Disabled mode for avatars */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Avatar.displayName = 'Avatar';
export default Avatar;