import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useMemo } from 'react';
import { arrayOf, bool, shape, string } from 'prop-types';
import cn from 'classnames';
import TextCell from "../TextCell";

function TagsCell(_ref) {
  let {
    tags,
    separator,
    isLoading,
    overflowEllipsis,
    className,
    contentClassName,
    style
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["tags", "separator", "isLoading", "overflowEllipsis", "className", "contentClassName", "style"]);

  const displayTags = useMemo(() => tags.join(separator), [tags, separator]);
  return /*#__PURE__*/React.createElement(TextCell, _extends({}, rest, {
    isLoading: isLoading,
    overflowEllipsis: overflowEllipsis,
    className: cn('tags-cell', className),
    contentClassName: contentClassName,
    style: style,
    "data-qa": "tags-cell"
  }), displayTags);
}

TagsCell.propTypes = {
  /** list of string tags */
  tags: arrayOf(string),

  /** separator between tag values */
  separator: string,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape()
};
TagsCell.defaultProps = {
  tags: [],
  separator: ', '
};
export default TagsCell;