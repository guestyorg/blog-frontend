{"ast":null,"code":"import Axios from \"axios\";\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_ADD_FAIL, USER_ADD_REQUEST, USER_ADD_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_DATA_FAIL, USER_DATA_REQUEST, USER_DATA_SUCCESS, USER_SIGNOUT, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\";\nimport { makeDataForTable, prices, ratings } from \"../utils\";\nimport Resource from \"@guestyci/agni\"; // const { api, env, config } = Resource.create();\n\nconst temp = Resource.create(\"user\");\nconst {\n  api,\n  env,\n  config\n} = Resource.create();\ntemp.api.defaults.baseURL = `http://localhost:9999/api/users`; //http://localhost:9999/blog-hydra/api/users\n\nconst userApi = temp.api;\nexport const listUsers = view => async (dispatch, getState) => {\n  console.log(\"view:\", view); // console.log(\"ratings:\", ratings);\n  // console.log(\"prices:\", prices);\n\n  dispatch({\n    type: USER_LIST_REQUEST\n  });\n  console.log(\"USER_LIST_REQUEST\");\n  const {\n    accountSignin: {\n      accountInfo\n    }\n  } = getState();\n\n  try {\n    // console.log(\"accountInfo:\", accountInfo);\n    const {\n      data\n    } = await userApi.post(\"/\", {\n      accountInfo,\n      view\n    }); // console.log(\"data:\", data);\n    // let counter = 1;\n\n    let arr = makeDataForTable(data);\n    console.log(\"arr: \", arr); //  setData(response.data.results)\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: arr\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const getUserData = () => async dispatch => {\n  // console.log(\"accountId:\", accountId);\n  dispatch({\n    type: USER_DATA_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await userApi.get(\"/data\");\n    const {\n      userInfoData\n    } = data;\n    console.log('userInfoData:', userInfoData);\n\n    async function getAccountData() {\n      const {\n        data: accountData\n      } = await api.get(\"/accounts/me\"); // will go to `${config.MAILER_URL}/users`\n\n      dispatch({\n        type: USER_DATA_SUCCESS,\n        payload: { ...userInfoData,\n          accountData\n        }\n      });\n    }\n\n    getAccountData(); // dispatch(emailUser(email));\n\n    localStorage.setItem(\"userData\", JSON.stringify(data));\n  } catch (error) {\n    // console.log(\"error :\", error);\n    dispatch({\n      type: USER_DATA_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}; //////////////////////////////////old///////////////////////////////////////////////\n// /////////////////////// listUser ideal ///////////////\n// export const listUsers = () => async (dispatch) => {\n//   dispatch({ type: USER_LIST_REQUEST });\n//   console.log(\"USER_LIST_REQUEST\");\n//   try {\n//     // const temp = Resource.create('tasks');\n//     // temp.api.defaults.baseURL = `http://localhost:9999/tasks`;\n//     // export const tasksApi = temp.api;\n//     // const { data } = await userApi.get(\"http://localhost:9999/api/users\");\n//     const { data } = await userApi.get(); // will go to `${config.MAILER_URL}/users`\n//     console.log(\"data:\", data);\n//     let counter = 1;\n//     const arr = [];\n//     let users = data;\n//     for (let i = 0; i < users.length; i++) {\n//       // console.log(\"users[i]: \", users[i]);\n//       const arrUser = Object.entries(users[i]);\n//       console.log(\"arrUser:\", arrUser);\n//       //  firstName: {\n//       //   children: 'John',\n//       // },\n//       const bigObj = {};\n//       for (let j = 0; j < arrUser.length; j++) {\n//         const obj = {};\n//         // console.log(\"arrUser[j]: \", arrUser[j]);\n//         // console.log(\"arrUser[0]: \",arrUser[j][0]);\n//         // console.log(\"arrUser[1]: \",arrUser[j][1]);\n//         // console.log(\"obj:\", obj);\n//         if (arrUser[j][0] === \"_id\") {\n//           obj.children = arrUser[j][1];\n//           //         obj= {children: '613e616d7ab4e566768e79d5'}\n//           bigObj.id = obj;\n//           //    bigObj= {id: {children: '613e616d7ab4e566768e79d5'}}\n//           bigObj._id = arrUser[j][1];\n//           //   bigObj= {_id: '613e616d7ab4e566768e79d5'}\n//         } else if (\n//           arrUser[j][0] === \"createdAt\" ||\n//           arrUser[j][0] === \"updatedAt\"\n//         ) {\n//           // ['createdAt', '2021-09-13T08:46:49.849Z']\n//           obj.children = new Date(arrUser[j][1]).toLocaleString();\n//           // {children: '9/13/2021, 11:46:49 AM'}\n//           bigObj[arrUser[j][0]] = obj;\n//           // {createdAt: {children: '9/13/2021, 11:46:49 AM'}}\n//         } else if (arrUser[j][0] === \"accountId\") {\n//           // console.log(\"arrUser:\", arrUser);\n//           // ['accountId',  {_id: '613e1486e5218626969838f0', name: 'Karamba'}]\n//           obj.children = arrUser[j][1].name;\n//           // {children: 'Karamba'}\n//           bigObj[arrUser[j][0]] = obj;\n//           //{ accountId: {children: 'Karamba'}}\n//         } else {\n//           // ['firstName', 'miki']\n//           obj.children = arrUser[j][1];\n//           // {children: 'miki'}\n//           bigObj[arrUser[j][0]] = obj;\n//           // firstName: {children: 'miki'}\n//         }\n//         // console.log(\"bigObj:\", bigObj);\n//         // arr.push( `${arrUser[j][0]}: {children: '${arrUser[j][1]}',}`)\n//       }\n//       // arr.push({gilad:1,...users[i]})\n//       arr.push({ ...bigObj });\n//       // arr.push({ _id: `${counter}`, ...bigObj });\n//       counter++;\n//     }\n//     console.log(\"arr: \", arr);\n//     //  setData(response.data.results)\n//     dispatch({ type: USER_LIST_SUCCESS, payload: arr });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: USER_LIST_FAIL, payload: message });\n//   }\n// };\n// /////////////////////////////////////////////////\n\nexport const add = (firstName, lastName, email, accountId) => async dispatch => {\n  dispatch({\n    type: USER_ADD_REQUEST,\n    payload: {\n      firstName,\n      lastName,\n      email,\n      accountId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await userApi.post(\"/register\", {\n      firstName,\n      lastName,\n      email,\n      accountId\n    });\n    dispatch({\n      type: USER_ADD_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_ADD_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const register = (firstName, lastName, email, accountId) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      firstName,\n      lastName,\n      email,\n      accountId\n    }\n  });\n\n  try {\n    // const { data } = await userApi.post(\"/register\", {\n    //   firstName,\n    //   lastName,\n    //   email,\n    //   accountId,\n    // });\n    const {\n      data\n    } = await await Axios.post(\"http://localhost:9999/api/users/register\", {\n      firstName,\n      lastName,\n      email,\n      accountId\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signin = (email, accountId) => async dispatch => {\n  // console.log(\"accountId:\", accountId);\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      accountId\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await userApi.post(\"/signin\", {\n      email,\n      accountId\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    }); // dispatch(emailUser(email));\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    // console.log(\"error :\", error);\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const signoutUser = () => dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_SIGNOUT\n  }); // document.location.href = \"/signin\";\n};\nexport const deleteUser = userId => async dispatch => {\n  console.log(\"userId:\", userId);\n  console.log(\"deleteUser\");\n  dispatch({\n    type: USER_DELETE_REQUEST,\n    payload: userId\n  });\n\n  try {\n    const {\n      data\n    } = await userApi.delete(`/${userId}`);\n    console.log(\"data:\", data);\n    dispatch({\n      type: USER_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(\"error\");\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const detailsUser = userId => async dispatch => {\n  dispatch({\n    type: USER_DETAILS_REQUEST,\n    payload: userId\n  });\n\n  try {\n    const {\n      data\n    } = await userApi.get(`/${userId}`);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUser = user => async dispatch => {\n  console.log(\"updateUser\");\n  dispatch({\n    type: USER_UPDATE_PROFILE_REQUEST,\n    payload: user\n  });\n\n  try {\n    console.log(\"user:\", user);\n    const {\n      data\n    } = await userApi.patch(`/${user.userId}`, user);\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/actions/userActions.js"],"names":["Axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_ADD_FAIL","USER_ADD_REQUEST","USER_ADD_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_DATA_FAIL","USER_DATA_REQUEST","USER_DATA_SUCCESS","USER_SIGNOUT","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","makeDataForTable","prices","ratings","Resource","temp","create","api","env","config","defaults","baseURL","userApi","listUsers","view","dispatch","getState","console","log","type","accountSignin","accountInfo","data","post","arr","payload","error","message","response","getUserData","get","userInfoData","getAccountData","accountData","localStorage","setItem","JSON","stringify","add","firstName","lastName","email","accountId","register","signin","signoutUser","removeItem","deleteUser","userId","delete","detailsUser","updateUser","user","patch"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\n\nimport {\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_ADD_FAIL,\n  USER_ADD_REQUEST,\n  USER_ADD_SUCCESS,\n  USER_SIGNIN_FAIL,\n  USER_SIGNIN_REQUEST,\n  USER_SIGNIN_SUCCESS,\n  USER_DATA_FAIL,\n  USER_DATA_REQUEST,\n  USER_DATA_SUCCESS,\n  USER_SIGNOUT,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n} from \"../constants/userConstants\";\n\nimport { makeDataForTable, prices, ratings } from \"../utils\";\n\nimport Resource from \"@guestyci/agni\";\n// const { api, env, config } = Resource.create();\nconst temp = Resource.create(\"user\");\nconst { api, env, config } = Resource.create();\n\ntemp.api.defaults.baseURL = `http://localhost:9999/api/users`;\n\n//http://localhost:9999/blog-hydra/api/users\n\nconst userApi = temp.api;\n\nexport const listUsers = (view) => async (dispatch, getState) => {\n  console.log(\"view:\", view);\n  // console.log(\"ratings:\", ratings);\n  // console.log(\"prices:\", prices);\n\n  dispatch({ type: USER_LIST_REQUEST });\n  console.log(\"USER_LIST_REQUEST\");\n\n  const {\n    accountSignin: { accountInfo },\n  } = getState();\n\n  try {\n    // console.log(\"accountInfo:\", accountInfo);\n    const { data } = await userApi.post(\"/\", { accountInfo, view });\n\n    // console.log(\"data:\", data);\n\n    // let counter = 1;\n\n    let arr = makeDataForTable(data);\n    console.log(\"arr: \", arr);\n    //  setData(response.data.results)\n\n    dispatch({ type: USER_LIST_SUCCESS, payload: arr });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: USER_LIST_FAIL, payload: message });\n  }\n};\n\nexport const getUserData = () => async (dispatch) => {\n  // console.log(\"accountId:\", accountId);\n  dispatch({ type: USER_DATA_REQUEST });\n  try {\n    const { data } = await userApi.get(\"/data\");\n\n    const {userInfoData}=data\n    console.log('userInfoData:', userInfoData)\n\n    async function getAccountData() {\n      const { data: accountData } = await api.get(\"/accounts/me\"); // will go to `${config.MAILER_URL}/users`\n      dispatch({\n        type: USER_DATA_SUCCESS,\n        payload: { ...userInfoData, accountData },\n      });\n    }\n\n    getAccountData();\n\n    // dispatch(emailUser(email));\n\n    localStorage.setItem(\"userData\", JSON.stringify(data));\n  } catch (error) {\n    // console.log(\"error :\", error);\n    dispatch({\n      type: USER_DATA_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n//////////////////////////////////old///////////////////////////////////////////////\n// /////////////////////// listUser ideal ///////////////\n\n// export const listUsers = () => async (dispatch) => {\n//   dispatch({ type: USER_LIST_REQUEST });\n//   console.log(\"USER_LIST_REQUEST\");\n//   try {\n//     // const temp = Resource.create('tasks');\n//     // temp.api.defaults.baseURL = `http://localhost:9999/tasks`;\n//     // export const tasksApi = temp.api;\n\n//     // const { data } = await userApi.get(\"http://localhost:9999/api/users\");\n\n//     const { data } = await userApi.get(); // will go to `${config.MAILER_URL}/users`\n\n//     console.log(\"data:\", data);\n\n//     let counter = 1;\n//     const arr = [];\n\n//     let users = data;\n\n//     for (let i = 0; i < users.length; i++) {\n//       // console.log(\"users[i]: \", users[i]);\n\n//       const arrUser = Object.entries(users[i]);\n//       console.log(\"arrUser:\", arrUser);\n\n//       //  firstName: {\n//       //   children: 'John',\n//       // },\n\n//       const bigObj = {};\n\n//       for (let j = 0; j < arrUser.length; j++) {\n//         const obj = {};\n//         // console.log(\"arrUser[j]: \", arrUser[j]);\n//         // console.log(\"arrUser[0]: \",arrUser[j][0]);\n//         // console.log(\"arrUser[1]: \",arrUser[j][1]);\n\n//         // console.log(\"obj:\", obj);\n\n//         if (arrUser[j][0] === \"_id\") {\n//           obj.children = arrUser[j][1];\n//           //         obj= {children: '613e616d7ab4e566768e79d5'}\n\n//           bigObj.id = obj;\n//           //    bigObj= {id: {children: '613e616d7ab4e566768e79d5'}}\n\n//           bigObj._id = arrUser[j][1];\n\n//           //   bigObj= {_id: '613e616d7ab4e566768e79d5'}\n//         } else if (\n//           arrUser[j][0] === \"createdAt\" ||\n//           arrUser[j][0] === \"updatedAt\"\n//         ) {\n//           // ['createdAt', '2021-09-13T08:46:49.849Z']\n\n//           obj.children = new Date(arrUser[j][1]).toLocaleString();\n//           // {children: '9/13/2021, 11:46:49 AM'}\n\n//           bigObj[arrUser[j][0]] = obj;\n\n//           // {createdAt: {children: '9/13/2021, 11:46:49 AM'}}\n//         } else if (arrUser[j][0] === \"accountId\") {\n//           // console.log(\"arrUser:\", arrUser);\n\n//           // ['accountId',  {_id: '613e1486e5218626969838f0', name: 'Karamba'}]\n//           obj.children = arrUser[j][1].name;\n\n//           // {children: 'Karamba'}\n\n//           bigObj[arrUser[j][0]] = obj;\n//           //{ accountId: {children: 'Karamba'}}\n//         } else {\n//           // ['firstName', 'miki']\n\n//           obj.children = arrUser[j][1];\n\n//           // {children: 'miki'}\n\n//           bigObj[arrUser[j][0]] = obj;\n\n//           // firstName: {children: 'miki'}\n//         }\n\n//         // console.log(\"bigObj:\", bigObj);\n\n//         // arr.push( `${arrUser[j][0]}: {children: '${arrUser[j][1]}',}`)\n//       }\n//       // arr.push({gilad:1,...users[i]})\n//       arr.push({ ...bigObj });\n//       // arr.push({ _id: `${counter}`, ...bigObj });\n\n//       counter++;\n//     }\n\n//     console.log(\"arr: \", arr);\n//     //  setData(response.data.results)\n\n//     dispatch({ type: USER_LIST_SUCCESS, payload: arr });\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message;\n//     dispatch({ type: USER_LIST_FAIL, payload: message });\n//   }\n// };\n\n// /////////////////////////////////////////////////\nexport const add =\n  (firstName, lastName, email, accountId) => async (dispatch) => {\n    dispatch({\n      type: USER_ADD_REQUEST,\n      payload: { firstName, lastName, email, accountId },\n    });\n    try {\n      const { data } = await userApi.post(\"/register\", {\n        firstName,\n        lastName,\n        email,\n        accountId,\n      });\n\n      dispatch({ type: USER_ADD_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({\n        type: USER_ADD_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n\nexport const register =\n  (firstName, lastName, email, accountId) => async (dispatch) => {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n      payload: { firstName, lastName, email, accountId },\n    });\n    try {\n      // const { data } = await userApi.post(\"/register\", {\n      //   firstName,\n      //   lastName,\n      //   email,\n      //   accountId,\n      // });\n\n      const { data } = await await Axios.post(\n        \"http://localhost:9999/api/users/register\",\n        {\n          firstName,\n          lastName,\n          email,\n          accountId,\n        }\n      );\n\n      dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n\n      dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n    } catch (error) {\n      dispatch({\n        type: USER_REGISTER_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n\nexport const signin = (email, accountId) => async (dispatch) => {\n  // console.log(\"accountId:\", accountId);\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, accountId } });\n  try {\n    const { data } = await userApi.post(\"/signin\", { email, accountId });\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n    // dispatch(emailUser(email));\n\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    // console.log(\"error :\", error);\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\nexport const signoutUser = () => (dispatch) => {\n  localStorage.removeItem(\"userInfo\");\n\n  dispatch({ type: USER_SIGNOUT });\n  // document.location.href = \"/signin\";\n};\n\nexport const deleteUser = (userId) => async (dispatch) => {\n  console.log(\"userId:\", userId);\n  console.log(\"deleteUser\");\n  dispatch({ type: USER_DELETE_REQUEST, payload: userId });\n\n  try {\n    const { data } = await userApi.delete(`/${userId}`);\n    console.log(\"data:\", data);\n    dispatch({ type: USER_DELETE_SUCCESS, payload: data });\n  } catch (error) {\n    console.log(\"error\");\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: USER_DELETE_FAIL, payload: message });\n  }\n};\n\nexport const detailsUser = (userId) => async (dispatch) => {\n  dispatch({ type: USER_DETAILS_REQUEST, payload: userId });\n\n  try {\n    const { data } = await userApi.get(`/${userId}`);\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: USER_DETAILS_FAIL, payload: message });\n  }\n};\n\nexport const updateUser = (user) => async (dispatch) => {\n  console.log(\"updateUser\");\n  dispatch({ type: USER_UPDATE_PROFILE_REQUEST, payload: user });\n  try {\n    console.log(\"user:\", user);\n    const { data } = await userApi.patch(`/${user.userId}`, user);\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: USER_UPDATE_FAIL, payload: message });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}