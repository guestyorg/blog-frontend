import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import cn from 'classnames';
import debounce from 'lodash/debounce';
import moment from 'moment';
import memoize from '@guestyci/memoize';
import DayPicker from 'react-day-picker';
import PropTypes from 'prop-types';
import CalendarDay from "./CalendarDay";
import CalendarNavBar from "./CalendarNavBar";
import CalendarWeekDayBar from "./CalendarWeekDayBar";

var Calendar = /*#__PURE__*/function (_Component) {
  _inherits(Calendar, _Component);

  var _super = _createSuper(Calendar);

  function Calendar() {
    var _this;

    _classCallCheck(this, Calendar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.getAccurateMonth = memoize(function (month) {
      if (month) {
        return moment.utc(month).startOf('month').add('14', 'days').toDate();
      }

      return month;
    });
    _this.handleMonthChange = debounce(function (month) {
      var onMonthChange = _this.props.onMonthChange;
      onMonthChange(month);
    }, 500);

    _this.renderDay = function (day) {
      var _this$props = _this.props,
          activeDates = _this$props.activeDates,
          calendar = _this$props.calendar,
          sm = _this$props.sm,
          isFetching = _this$props.isFetching,
          tooltipBoundariesElement = _this$props.tooltipBoundariesElement;
      return /*#__PURE__*/React.createElement(CalendarDay, {
        tooltipBoundariesElement: tooltipBoundariesElement,
        calendar: calendar,
        day: day,
        isFetching: isFetching,
        activeDates: activeDates,
        sm: sm
      });
    };

    return _this;
  }

  _createClass(Calendar, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          month = _this$props2.month,
          initialMonth = _this$props2.initialMonth,
          sm = _this$props2.sm;
      var calendarInitialMonth = this.getAccurateMonth(initialMonth);
      var calendarMonth = this.getAccurateMonth(month);
      return /*#__PURE__*/React.createElement("div", {
        className: cn('relative calendar', {
          lg: !sm
        }),
        "data-qa": "calendar"
      }, /*#__PURE__*/React.createElement(DayPicker, {
        month: calendarMonth,
        initialMonth: calendarInitialMonth,
        showOutsideDays: true,
        onMonthChange: this.handleMonthChange,
        renderDay: this.renderDay,
        navbarElement: /*#__PURE__*/React.createElement(CalendarNavBar, null),
        weekdayElement: /*#__PURE__*/React.createElement(CalendarWeekDayBar, {
          className: cn({
            'pb-3': !sm
          }),
          dayCharCount: sm ? 1 : 3
        })
      }));
    }
  }]);

  return Calendar;
}(Component);

Calendar.defaultProps = {
  activeDates: {
    start: null,
    end: null
  },
  initialMonth: undefined,
  month: undefined,
  sm: false,
  isFetching: false,
  tooltipBoundariesElement: undefined
};
Calendar.propTypes = {
  /** The Calendar Month data
   Structure:{ reservation: {
   guest, money, blocks, checkIn, checkOut, guestsCount, status
   }, listingId, accountId, date, currency, status, price }
   */
  calendar: PropTypes.shape({
    listingId: PropTypes.string,
    accountId: PropTypes.string,
    date: PropTypes.string,
    currency: PropTypes.string,
    status: PropTypes.string,
    price: PropTypes.number,
    reservation: PropTypes.shape({
      _id: PropTypes.string.isRequired,
      guestId: PropTypes.string.isRequired,
      confirmationCode: PropTypes.string.isRequired,
      guest: PropTypes.shape({
        _id: PropTypes.string.isRequired,
        name: PropTypes.string.isRequired,
        avatar: PropTypes.string
      }),
      money: PropTypes.shape({
        currency: PropTypes.string.isRequired,
        hostPayout: PropTypes.number.isRequired
      }),
      blocks: PropTypes.shape().isRequired,
      checkIn: PropTypes.string,
      checkOut: PropTypes.string,
      guestsCount: PropTypes.number,
      status: PropTypes.string.isRequired
    })
  }).isRequired,

  /** Initial month - for none async actions
   *  (accepts - date string, unix and date object)
   *  */
  initialMonth: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date), PropTypes.number]),

  /** controlled change month manually
   * (accepts - date string, unix and date object)
   * */
  month: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date), PropTypes.number]),

  /** The dates that are active for the reservation
   - structure: {start: {String} - check in date string, end: {String} - checkout date string}
   */
  activeDates: PropTypes.shape({
    start: PropTypes.string,
    end: PropTypes.string
  }),

  /** Callback function to handle month change */
  onMonthChange: PropTypes.func.isRequired,

  /** Indicator whether or not we want the small calendar or regular sized */
  sm: PropTypes.bool,

  /** Indicator whether or not we are in fetching mode */
  isFetching: PropTypes.bool,
  tooltipBoundariesElement: PropTypes.string
};
export default Calendar;