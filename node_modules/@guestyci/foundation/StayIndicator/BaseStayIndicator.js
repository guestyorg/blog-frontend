"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = exports.getColorBasedStyles = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _memoize = _interopRequireDefault(require("@guestyci/memoize"));

var _Layout = require("../Layout");

var _colors = require("../theme/colors");

var _enums = require("../enums/enums");

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _IndicatorCircle = _interopRequireDefault(require("./IndicatorCircle"));

var _IndicatorLine = _interopRequireDefault(require("./IndicatorLine"));

var _helpers = require("./helpers");

var Complete = _enums.StayStatus.Complete,
    Reserved = _enums.StayStatus.Reserved,
    Staying = _enums.StayStatus.Staying;
var getColorBasedStyles = (0, _memoize["default"])(function (status, isDark, classes) {
  var backgroundSuccess = classes.backgroundSuccess,
      borderSuccess = classes.borderSuccess,
      borderWarning = classes.borderWarning,
      borderDark = classes.borderDark,
      borderGrey = classes.borderGrey;

  switch (status) {
    case Complete:
      return {
        left: [backgroundSuccess, borderSuccess],
        right: [backgroundSuccess, borderSuccess]
      };

    case Reserved:
      return {
        left: [borderWarning],
        right: [borderWarning]
      };

    case Staying:
      return {
        left: [backgroundSuccess, borderSuccess],
        right: [isDark ? borderDark : borderGrey]
      };

    default:
      return {
        left: [isDark ? borderDark : borderGrey],
        right: [isDark ? borderDark : borderGrey]
      };
  }
});
exports.getColorBasedStyles = getColorBasedStyles;
var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    indicatorLineSize: {
      flexGrow: 1
    },
    indicatorCircle: {
      fill: theme.palette.background.white
    },
    indicatorCircleSize: {
      width: _helpers.componentThickness,
      height: _helpers.componentThickness
    },
    backgroundSuccess: {
      fill: theme.palette.success["default"]
    },
    borderSuccess: {
      stroke: theme.palette.success["default"]
    },
    borderWarning: {
      stroke: theme.palette.alert["default"]
    },
    borderDark: {
      stroke: theme.palette.text.primary
    },
    borderGrey: {
      stroke: _colors.gray300
    },
    rootHorizontal: {
      minWidth: _helpers.componentMinLength
    },
    rootVertical: {
      minHeight: _helpers.componentMinLength
    },
    rootHorizontalSmall: {
      width: _helpers.componentMinLength,
      height: _helpers.componentThickness
    },
    rootHorizontalFullWidth: {
      width: '100%'
    },
    rootVerticalSmall: {
      height: _helpers.componentMinLength,
      width: _helpers.componentThickness
    },
    rootVerticalFullWidth: {
      height: '100%'
    },
    indicatorLine: {},
    root: {}
  };
});
exports.useStyles = useStyles;
var BaseStayIndicator = (0, _react.forwardRef)(function (_ref, ref) {
  var _cn;

  var _ref$status = _ref.status,
      status = _ref$status === void 0 ? _enums.StayStatus.Planned : _ref$status,
      className = _ref.className,
      dark = _ref.dark,
      jss = _ref.jss,
      fullWidth = _ref.fullWidth,
      vertical = _ref.vertical;
  var classes = useStyles({
    jss: jss
  });
  var Wrapper = vertical ? _Layout.Col : _Layout.Row;
  return /*#__PURE__*/_react["default"].createElement(Wrapper, {
    className: (0, _classnames["default"])((_cn = {}, (0, _defineProperty2["default"])(_cn, classes.rootHorizontal, !vertical), (0, _defineProperty2["default"])(_cn, classes.rootVertical, vertical), (0, _defineProperty2["default"])(_cn, classes.rootHorizontalSmall, !vertical), (0, _defineProperty2["default"])(_cn, classes.rootHorizontalFullWidth, !vertical && fullWidth), (0, _defineProperty2["default"])(_cn, classes.rootVerticalSmall, vertical), (0, _defineProperty2["default"])(_cn, classes.rootVerticalFullWidth, vertical && fullWidth), _cn), classes.root, className),
    ref: ref
  }, /*#__PURE__*/_react["default"].createElement(_IndicatorCircle["default"], {
    className: _classnames["default"].apply(void 0, ['stay-indicator-circle-1', classes.indicatorCircle, classes.indicatorCircleSize].concat((0, _toConsumableArray2["default"])(getColorBasedStyles(status, dark, classes).left)))
  }), /*#__PURE__*/_react["default"].createElement(_IndicatorLine["default"], {
    vertical: vertical,
    className: _classnames["default"].apply(void 0, ['stay-indicator-line-1', classes.indicatorLine, classes.indicatorLineSize].concat((0, _toConsumableArray2["default"])(getColorBasedStyles(status, dark, classes).left)))
  }), /*#__PURE__*/_react["default"].createElement(_IndicatorLine["default"], {
    vertical: vertical,
    className: _classnames["default"].apply(void 0, ['stay-indicator-line-2', classes.indicatorLine, classes.indicatorLineSize].concat((0, _toConsumableArray2["default"])(getColorBasedStyles(status, dark, classes).right)))
  }), /*#__PURE__*/_react["default"].createElement(_IndicatorCircle["default"], {
    className: _classnames["default"].apply(void 0, ['stay-indicator-circle-2', classes.indicatorCircle, classes.indicatorCircleSize].concat((0, _toConsumableArray2["default"])(getColorBasedStyles(status, dark, classes).right)))
  }));
});
BaseStayIndicator.displayName = 'BaseStayIndicator';
BaseStayIndicator.propTypes = {
  /** Stay status - Enum (StayStatus- [Reserved, Planned, Staying, Complete,]) */
  status: _propTypes["default"].oneOf([_enums.StayStatus.Planned, _enums.StayStatus.Staying, _enums.StayStatus.Complete, _enums.StayStatus.Reserved]),

  /** Additional class to add to StayIndicator */
  className: _propTypes["default"].string,

  /** jss override object to customize the jss classes */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** Set orientation as vertical(default is horizontal) */
  vertical: _propTypes["default"].bool,

  /** Set theme to dark */
  dark: _propTypes["default"].bool,

  /** Set the stay indicator to fill space */
  fullWidth: _propTypes["default"].bool,

  /** reference that will be applied to Row container */
  ref: _propTypes["default"].shape()
};
var _default = BaseStayIndicator;
exports["default"] = _default;