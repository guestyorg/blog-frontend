import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import debounce from 'lodash/debounce';

var BtnSearch = function BtnSearch(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19.96 20.243l-5.995-5.995c.049-.046.1-.086.149-.134A8.269 8.269 0 0 0 2.422 2.422a8.267 8.267 0 0 0 0 11.692c2.939 2.939 7.538 3.193 10.775.779l6.057 6.057.707-.707zM3.13 13.407A7.268 7.268 0 1 1 13.408 3.129a7.268 7.268 0 0 1-10.28 10.278z"
  }));
};

BtnSearch.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 19.9607 20.9498"
};

var BtnDelete = function BtnDelete(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M8.485.707L7.778 0 4.243 3.536.707 0 0 .707l3.536 3.536L0 7.778l.707.707L4.243 4.95l3.535 3.535.707-.707L4.95 4.243z"
  }));
};

BtnDelete.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 8.4854 8.4854"
};
import IconButton from "../IconButton";
import SvgIcon from "../SvgIcon";
import Row from "../Row/Row";
import Fade from "../Fade/Fade";

class SearchBar extends PureComponent {
  constructor(props) {
    super(props);
    this.onInputChange = debounce(value => {
      const {
        onChange
      } = this.props;
      onChange(value);
    }, 500);

    this.handleInputChange = e => {
      const {
        value
      } = e.currentTarget;
      this.setState({
        searchValue: value
      });
      const {
        onChange
      } = this.props;

      if (onChange) {
        this.onInputChange(value);
      }
    };

    this.submit = event => {
      event.preventDefault();
      const {
        onSubmit
      } = this.props;
      const {
        searchValue
      } = this.state;
      onSubmit(searchValue);
    };

    this.clearSearch = () => {
      this.setState({
        searchValue: ''
      });
      const {
        onSubmit,
        onClear
      } = this.props;
      onSubmit('');

      if (onClear) {
        onClear();
      }
    };

    this.state = {
      searchValue: props.defaultValue
    };
  }

  render() {
    const {
      className,
      showDelete,
      noBorder,
      placeholder
    } = this.props;
    const {
      searchValue
    } = this.state;
    return /*#__PURE__*/React.createElement("form", {
      onSubmit: this.submit,
      className: cn('search-bar', 'w-fill', 'pb-1', 'border-gray-light', 'relative', {
        'bb-1': !noBorder
      }, className),
      "data-qa": "search-bar"
    }, /*#__PURE__*/React.createElement(Row, {
      spacing: "sm",
      align: "center",
      justify: "start",
      fullWidth: true
    }, /*#__PURE__*/React.createElement(SvgIcon, {
      svg: BtnSearch,
      fillColor: searchValue ? 'black' : 'gray-dark',
      height: 18,
      width: 17
    }), /*#__PURE__*/React.createElement("input", {
      className: "b-0 font-size-lg search-bar-input",
      placeholder: placeholder,
      onChange: this.handleInputChange,
      value: searchValue
    }), /*#__PURE__*/React.createElement(Fade, {
      mountOnEnter: true,
      show: !!(searchValue || showDelete)
    }, /*#__PURE__*/React.createElement(IconButton, {
      svg: BtnDelete,
      iconWidth: 10,
      iconHeight: 10,
      onClick: this.clearSearch,
      className: "p-1"
    }))));
  }

}

SearchBar.defaultProps = {
  onChange: noop,
  onClear: noop,
  className: '',
  style: {},
  noBorder: false,
  placeholder: 'Type in to Search...',
  defaultValue: ''
};
SearchBar.propTypes = {
  /** Callback function to handle search bar submit */
  onSubmit: PropTypes.func.isRequired,

  /** Callback function to handle searchbar value change */
  onChange: PropTypes.func,

  /** Initial input content */
  defaultValue: PropTypes.string,

  /** Additional class for searchbar root */
  className: PropTypes.string,

  /** Additional style for earchbar root */
  style: PropTypes.shape(),

  /** Callback method to handle clear search */
  onClear: PropTypes.func,

  /** Indicator whether or not to show search border bottom */
  noBorder: PropTypes.bool,

  /** Placeholder for search  */
  placeholder: PropTypes.string
};
export default SearchBar;