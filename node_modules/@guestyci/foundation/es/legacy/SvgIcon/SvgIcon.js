import React, { useMemo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
const useStyles = createUseStyles({
  icon: {
    minWidth: props => props.width,
    minHeight: props => props.height
  }
});
const SvgIcon = forwardRef(function SvgIcon({
  width,
  height,
  color,
  fillColor,
  strokeColor,
  className,
  svg,
  style,
  noFill
}, ref) {
  const classes = useStyles({
    width,
    height
  });
  const Svg = useMemo(() => svg, [svg]);
  const iconFillColor = fillColor || color;
  return /*#__PURE__*/React.createElement(Svg, {
    ref: ref,
    width: width,
    height: height,
    className: cn({
      'transition-all': iconFillColor && !noFill
    }, className, noFill ? 'fill-inherit' : [`fill-${iconFillColor} stroke-${strokeColor}`], classes.icon),
    style: style
  });
});
SvgIcon.defaultProps = {
  width: 20,
  height: 20,
  color: '',
  fillColor: '',
  strokeColor: '',
  className: '',
  style: {},
  noFill: false
};
SvgIcon.propTypes = {
  /** Icon width in pixels */
  width: PropTypes.number,

  /** Icon height in pixels */
  height: PropTypes.number,

  /** Icon fill color - see style guide colors for options - Deprecated use fillColor */
  color: PropTypes.string,

  /** Icon fill color - see style guide colors for options */
  fillColor: PropTypes.string,

  /** Icon stroke color - see style guide colors for options */
  strokeColor: PropTypes.string,

  /** Class to add to the Icon component */
  className: PropTypes.string,

  /** Style to add to Icon component */
  style: PropTypes.shape(),

  /** The svg icon to render */
  svg: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]).isRequired,

  /** boolean - decide whether to disable default fill color */
  noFill: PropTypes.bool
}; // Hack for withInfo plugin

SvgIcon.displayName = 'SvgIcon';
export default SvgIcon;