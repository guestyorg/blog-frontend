import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import Button from "../Button";
import { capitalize } from "../utils/commonUtility";
import { blue10, blue700, gray50, gray600 } from "../theme/colors";
import { fade } from "../theme/utils";
export const useStyles = createStyles(theme => ({
  root: {
    height: 'fit-content',
    overflow: 'hidden',
    width: 'fit-content',
    borderRadius: '50% !important'
  },
  colorTransParent: {
    color: 'inherit',
    '&:not([disabled]):hover': {
      backgroundColor: 'transparent'
    }
  },
  colorPrimary: {
    color: theme.palette.primary.default,
    '&:not([disabled]):hover': {
      backgroundColor: fade(blue10, 0.3)
    }
  },
  colorSecondary: {
    color: theme.palette.text.secondary,
    '&:not([disabled]):hover': {
      backgroundColor: gray50
    }
  },
  icon: {
    fill: 'currentColor'
  },
  iconXxs: {
    padding: theme.spacer(2)
  },
  iconXs: {
    padding: theme.spacer(2)
  },
  iconSm: {
    padding: theme.spacer(2)
  },
  iconMd: {
    padding: theme.spacer(3)
  },
  iconLg: {
    padding: theme.spacer(3)
  },
  positionSuffix: {
    marginRight: '-15px !important'
  },
  positionPrefix: {
    marginLeft: '-15px !important'
  }
}), {
  name: 'IconButton'
});
export const getIconSize = size => {
  switch (size) {
    case 'xxs':
      return 10;

    case 'xs':
      return 15;

    case 'md':
      return 25;

    case 'lg':
      return 30;

    default:
      return 20;
  }
};

const getRippleColor = (color, rippleColor) => {
  if (color === 'primary') {
    return blue700;
  }

  if (color === 'secondary') {
    return gray600;
  }

  return rippleColor;
};

const IconButton = React.forwardRef(function IconButton(_ref, ref) {
  let {
    size,
    isLoading,
    onClick,
    disabled,
    className,
    spinnerColor,
    children,
    position,
    jss,
    color = 'default',
    rippleColor
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "isLoading", "onClick", "disabled", "className", "spinnerColor", "children", "position", "jss", "color", "rippleColor"]);

  const classes = useStyles({
    jss
  });
  const iconSize = getIconSize(size);
  const iconColor = isLoading ? 'transparent' : color;
  const iconRippleColor = getRippleColor(color, rippleColor);
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    disabled: disabled,
    isLoading: isLoading,
    onClick: onClick,
    rippleColor: iconRippleColor,
    spinnerColor: spinnerColor,
    className: cn(classes.root, {
      [classes[`color${capitalize(iconColor)}`]]: iconColor !== 'default',
      [classes[`icon${capitalize(size)}`]]: size,
      [classes[`position${capitalize(position)}`]]: position
    }, className),
    ref: ref
  }), React.cloneElement(children, {
    className: cn(classes.icon, children?.props?.className),
    height: children?.props?.height || iconSize,
    width: children?.props?.width || iconSize
  }));
});
IconButton.defaultProps = {
  onClick: noop,
  isLoading: false,
  disabled: false,
  size: 'sm'
};
IconButton.propTypes = {
  /** Child element to locate inside of button */
  children: PropTypes.node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: PropTypes.func,

  /** Button size - values =['xs', 'sm', 'md', 'lg'] */
  size: PropTypes.oneOf(['xxs', 'xs', 'sm', 'md', 'lg']),

  /** Indicator whether or not to show loader in button */
  isLoading: PropTypes.bool,

  /** Indicator whether or not to button is disabled */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** color to set icon button - value =[transparent, primary, secondary] */
  color: PropTypes.string,

  /** Adds negative margins 15 to counter padding in components
   * Commonly used with Input suffix/prefix or Rows with spacing
   */
  position: PropTypes.oneOf(['suffix', 'prefix'])
};
IconButton.displayName = 'IconButton';
export default IconButton;