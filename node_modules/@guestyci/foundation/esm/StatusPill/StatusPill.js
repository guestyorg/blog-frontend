import React, { forwardRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
import TextField from "../TextField";
import Row from "../Layout/Row";
export var useStyles = createStyles(function (theme) {
  return {
    statusWrapper: {
      height: 21,
      borderRadius: 3,
      padding: theme.spacer(0, 2)
    },
    status: function status(_ref) {
      var _theme$palette$varian, _theme$palette$varian2;

      var variant = _ref.variant;
      return {
        backgroundColor: ((_theme$palette$varian = theme.palette[variant]) === null || _theme$palette$varian === void 0 ? void 0 : _theme$palette$varian.background) || theme.palette.secondary.background,
        color: ((_theme$palette$varian2 = theme.palette[variant]) === null || _theme$palette$varian2 === void 0 ? void 0 : _theme$palette$varian2.text) || theme.palette.text["default"]
      };
    },
    dot: function dot(_ref2) {
      var _theme$palette$varian3;

      var variant = _ref2.variant;
      return {
        borderRadius: '50%',
        height: '7px',
        width: '7px',
        backgroundColor: ((_theme$palette$varian3 = theme.palette[variant]) === null || _theme$palette$varian3 === void 0 ? void 0 : _theme$palette$varian3.text) || theme.palette.text["default"]
      };
    }
  };
});
var StatusPill = forwardRef(function StatusPill(_ref3, ref) {
  var _ref3$variant = _ref3.variant,
      variant = _ref3$variant === void 0 ? 'info' : _ref3$variant,
      _ref3$dotIcon = _ref3.dotIcon,
      dotIcon = _ref3$dotIcon === void 0 ? false : _ref3$dotIcon,
      className = _ref3.className,
      children = _ref3.children,
      _ref3$jss = _ref3.jss,
      jss = _ref3$jss === void 0 ? {} : _ref3$jss;
  var classes = useStyles({
    jss: jss,
    variant: variant
  });
  return /*#__PURE__*/React.createElement(Row, {
    align: "center",
    justify: "start",
    spacing: 1,
    className: cn(classes.statusWrapper, classes.status, className),
    ref: ref
  }, dotIcon && /*#__PURE__*/React.createElement("div", {
    className: cn(classes.dot)
  }), /*#__PURE__*/React.createElement(TextField, {
    variant: "h7",
    overflowEllipsis: true
  }, children));
});
StatusPill.displayName = 'StatusPill';
StatusPill.propTypes = {
  variant: PropTypes.oneOf(['success', 'alert', 'info', 'primary', 'secondary', 'error']),

  /** root level class name to add */
  className: PropTypes.string,

  /** text node element */
  children: PropTypes.node.isRequired,

  /** jss override object to customize the jss classes [statusWrapper] */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Boolean to determine if to show dot icon to left of the children */
  dotIcon: PropTypes.bool
};
export default StatusPill;