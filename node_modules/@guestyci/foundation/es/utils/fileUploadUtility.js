import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import Resource from '@guestyci/agni';
import { getUserData } from "./commonUtility";
import { CLOUD_NAME, CLOUDINARY_API_KEY } from "../constants/constants";

const getFromTokenIssuer = (issuer = '') => issuer.split('.')[0];

const {
  api
} = Resource.create({
  domain: '/user-generated-content/api'
});

const generateSignature = async (callback, params) => {
  try {
    const {
      data
    } = await api.post('/media-provider/generate-signature', params);
    callback(data.signature);
  } catch (err) {
    console.log('error', err);
  }
};

export const setUploadFolder = () => {
  const {
    accountId,
    iss
  } = getUserData() || {};

  if (!accountId || !iss) {
    return 'general';
  }

  return `${getFromTokenIssuer(iss)}/${accountId}`;
};
/**
 * Create a cloudinary upload widget
 * @param onSuccess  {Function} - CB function to run on success
 * @param onFailure {Function} - CB function to run on failure
 * @param options = { Object} - options to pass to the widget
 * @return {Object} Cloudinary widget object
 */

export const createUploadWidget = (_ref) => {
  let {
    onSuccess,
    onFailure
  } = _ref,
      options = _objectWithoutPropertiesLoose(_ref, ["onSuccess", "onFailure"]);

  if (window.cloudinary) {
    const {
      cloudinary
    } = window;
    return cloudinary.createUploadWidget(_extends({
      cloudName: CLOUD_NAME,
      apiKey: CLOUDINARY_API_KEY,
      uploadSignature: generateSignature,
      sources: ['local'],
      showPoweredBy: false,
      folder: setUploadFolder()
    }, options), (uploadError, result) => {
      if (uploadError && onFailure) {
        onFailure(uploadError);
      }

      if (result && result.event === 'success') {
        onSuccess(result.info);
      }
    });
  }
};
/**
 * Open a cloudinary upload widget
 * @param onSuccess  {Function} - CB function to run on success
 * @param onFailure {Function} - CB function to run on failure
 * @param options = { Object} - options to pass to the widget
 */

export const openUploadWidget = (_ref2) => {
  let {
    onSuccess,
    onFailure
  } = _ref2,
      options = _objectWithoutPropertiesLoose(_ref2, ["onSuccess", "onFailure"]);

  if (window.cloudinary) {
    window.cloudinary.openUploadWidget(_extends({
      cloudName: CLOUD_NAME,
      api_key: CLOUDINARY_API_KEY,
      sources: ['local'],
      showPoweredBy: false,
      uploadSignature: generateSignature,
      folder: setUploadFolder()
    }, options), (uploadError, result) => {
      if (uploadError && onFailure) {
        onFailure(uploadError);
      }

      if (result && result.event === 'success') {
        onSuccess(result.info);
      }
    });
  }
};