import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import moment from 'moment';
import memoize from '@guestyci/memoize';
import { intl, warningHandler, locales } from "../utils/i18nUtility";
import LocalizationContext from "./LocalizationContext";
var lang = window.localStorage.getItem('lang') || 'en-US';

var LocalizationProvider =
/*#__PURE__*/
function (_Component) {
  _inherits(LocalizationProvider, _Component);

  function LocalizationProvider(props) {
    var _this;

    _classCallCheck(this, LocalizationProvider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LocalizationProvider).call(this, props));
    _this.getIsEnglish = memoize(function () {
      var language = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return language.split('-')[0] === 'en';
    });
    _this.state = {
      isLocalizationReady: false
    };
    return _this;
  }

  _createClass(LocalizationProvider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var language = this.props.language;
      this.loadLocales(language || lang);
      moment.locale(language || lang);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var language = this.props.language;

      if (prevProps.language !== language) {
        this.loadLocales(language || lang);
        moment.locale(language || lang);
      }
    }
  }, {
    key: "loadLocales",
    value: function loadLocales(language) {
      var _this2 = this;

      this.setState({
        isLocalizationReady: false
      });
      intl.init({
        currentLocale: language,
        locales: locales,
        warningHandler: warningHandler,
        fallbackLocale: 'en-US'
      }).then(function () {
        _this2.setState({
          isLocalizationReady: true
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          language = _this$props.language;
      var isLocalizationReady = this.state.isLocalizationReady;
      var isEnglish = this.getIsEnglish(language || lang);
      return React.createElement(LocalizationContext.Provider, {
        value: {
          language: language || lang,
          isEnglish: isEnglish
        }
      }, isLocalizationReady && children);
    }
  }]);

  return LocalizationProvider;
}(Component);

LocalizationProvider.defaultProps = {
  language: undefined
};
LocalizationProvider.propTypes = {
  language: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]).isRequired
};
export default LocalizationProvider;