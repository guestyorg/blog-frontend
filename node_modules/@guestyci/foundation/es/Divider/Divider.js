import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import createStyles from "../createStyles";
export const useStyles = createStyles(theme => ({
  horizontal: {
    width: '100%',
    borderTop: 'solid'
  },
  vertical: {
    height: '100%',
    borderLeft: 'solid'
  },
  root: {
    borderWidth: ({
      thickness
    }) => thickness || 1,
    borderColor: theme.palette.border
  }
}), {
  name: 'Divider'
});
const Divider = forwardRef(function Divider(_ref, ref) {
  let {
    orientation,
    className,
    style,
    thickness,
    jss
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["orientation", "className", "style", "thickness", "jss"]);

  const classes = useStyles({
    thickness,
    jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref
  }, props, {
    className: cn(classes.root, {
      [classes.horizontal]: orientation === 'horizontal',
      [classes.vertical]: orientation === 'vertical'
    }, className),
    style: style
  }));
});
Divider.defaultProps = {
  orientation: 'horizontal',
  className: '',
  style: {},
  thickness: 1
};
Divider.propTypes = {
  /** Orientation of divider - values = ['horizontal', 'vertical'] - when vertical, provide height for the component */
  orientation: PropTypes.oneOf(['horizontal', 'vertical']),

  /** Set additional class names to divider */
  className: PropTypes.string,

  /** Set style to divider */
  style: PropTypes.shape(),

  /** Border width */
  thickness: PropTypes.number
};
Divider.displayName = 'Divider';
export default Divider;