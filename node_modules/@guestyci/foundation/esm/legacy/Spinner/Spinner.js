import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { uuid } from "../../utils/commonUtility";

var Spinner = /*#__PURE__*/function (_React$Component) {
  _inherits(Spinner, _React$Component);

  var _super = _createSuper(Spinner);

  function Spinner(props) {
    var _this;

    _classCallCheck(this, Spinner);

    _this = _super.call(this, props);

    _this.setStrokeWidth = function (size, strokeWidth) {
      var sWidth = strokeWidth;

      if (size > 64) {
        sWidth = 8;
      } else if (size > 32) {
        sWidth = 6;
      }

      return sWidth;
    };

    var _size = props.small ? 30 : props.size || 60;

    _this.state = {
      size: _size,
      id: props.id || uuid(),
      strokeWidth: _this.setStrokeWidth(props.size, props.strokeWidth)
    };
    return _this;
  }

  _createClass(Spinner, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          color = _this$props.color,
          className = _this$props.className,
          style = _this$props.style,
          svgClassName = _this$props.svgClassName,
          svgStyle = _this$props.svgStyle;
      var _this$state = this.state,
          size = _this$state.size,
          id = _this$state.id,
          strokeWidth = _this$state.strokeWidth;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('flex-center w-fill relative', className),
        style: style,
        id: id,
        "data-qa": "spinner"
      }, /*#__PURE__*/React.createElement("svg", {
        className: cn('spinner', 'absolute', _defineProperty({}, "height-".concat(size, " width-").concat(size), size), svgClassName),
        viewBox: "25 25 50 50",
        style: svgStyle
      }, /*#__PURE__*/React.createElement("circle", {
        className: cn('path', "stroke-".concat(color)),
        cx: "50",
        cy: "50",
        r: "20",
        fill: "none",
        strokeWidth: strokeWidth,
        strokeMiterlimit: "10"
      })));
    }
  }]);

  return Spinner;
}(React.Component);

Spinner.defaultProps = {
  color: 'blue',
  size: 32,
  small: false,
  id: undefined,
  className: '',
  style: {},
  svgClassName: '',
  svgStyle: {},
  strokeWidth: 4
};
Spinner.propTypes = {
  color: PropTypes.string,
  size: PropTypes.number,
  small: PropTypes.bool,
  id: PropTypes.string,
  className: PropTypes.string,
  style: PropTypes.shape(),
  strokeWidth: PropTypes.number,
  svgClassName: PropTypes.string,
  svgStyle: PropTypes.shape()
};
export default Spinner;