import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { string, bool, shape } from 'prop-types';
import cn from 'classnames';
import FormattedDate from '@guestyci/localize/FormattedDate';
import FormattedTime from '@guestyci/localize/FormattedTime';
import TextField from "../../../TextField";
import TextCell from "../TextCell";

var DateTimeCell = function DateTimeCell(_ref) {
  var date = _ref.date,
      isLoading = _ref.isLoading,
      className = _ref.className,
      style = _ref.style,
      rest = _objectWithoutProperties(_ref, ["date", "isLoading", "className", "style"]);

  return /*#__PURE__*/React.createElement(TextCell, _extends({}, rest, {
    isLoading: isLoading,
    className: cn('date-time-cell', className),
    style: style,
    "data-qa": "date-time-cell"
  }), date && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedDate, {
    date: date
  }), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(TextField, {
    color: "secondary",
    variant: "h5",
    display: "inline"
  }, /*#__PURE__*/React.createElement(FormattedTime, {
    time: new Date(date)
  }))));
};

DateTimeCell.propTypes = {
  /** date value in ISO format */
  date: string,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** class name of cell */
  className: string,

  /** styles applied to a cell */
  style: shape()
};
DateTimeCell.defaultProps = {
  date: null,
  isLoading: false
};
export default DateTimeCell;