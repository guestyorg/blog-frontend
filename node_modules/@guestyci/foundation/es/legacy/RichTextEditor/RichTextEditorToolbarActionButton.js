import PropTypes from 'prop-types';
import React, { Component } from 'react';
import withStyles from 'react-jss';
import ActionButton from "../ActionButton";
import RichTextEditorToolbarItem from "./RichTextEditorToolbarItem";
import { grayDark, grayLight, grayLightest, white } from "../../theme/colors";
import { Theme } from "../../enums/enums";

const getBackgroundColorFromProps = props => {
  const {
    active,
    theme
  } = props;

  if (active) {
    return theme === Theme.Light ? grayLightest : grayLight;
  }

  return theme === Theme.Light ? white : grayLightest;
};

const getBorderFromProps = props => `1px solid ${props.theme === Theme.Light ? grayLightest : grayLight}`;

const styles = {
  actionButton: {
    width: 25,
    height: 25,
    border: 'none',
    backgroundColor: getBackgroundColorFromProps,
    padding: '0',
    '&:hover': {
      border: getBorderFromProps
    }
  },
  actionButtonIcon: {
    fill: grayDark
  }
};

class RichTextEditorToolbarActionButton extends Component {
  constructor(...args) {
    super(...args);

    this.handleOnMouseDown = e => {
      e.preventDefault();
      const {
        type,
        onToggle
      } = this.props;
      onToggle(type);
    };
  }

  render() {
    const {
      icon,
      svg,
      iconWidth,
      iconHeight,
      classes
    } = this.props;
    return /*#__PURE__*/React.createElement(RichTextEditorToolbarItem, {
      "data-qa": "rich-text-editor-toolbar-action-button"
    }, /*#__PURE__*/React.createElement(ActionButton, {
      className: classes.actionButton,
      icon: icon,
      svg: svg,
      onMouseDown: this.handleOnMouseDown,
      iconWidth: iconWidth,
      iconHeight: iconHeight,
      iconClassName: classes.actionButtonIcon
    }));
  }

}

RichTextEditorToolbarActionButton.defaultProps = {
  iconWidth: 20,
  iconHeight: 20
};
RichTextEditorToolbarActionButton.propTypes = {
  icon: PropTypes.string,
  svg: PropTypes.func,
  onClick: PropTypes.func.isRequired,
  iconHeight: PropTypes.number,
  iconWidth: PropTypes.number,
  editorState: PropTypes.shape().isRequired,
  type: PropTypes.string.isRequired,
  theme: PropTypes.string.isRequired
};
export default withStyles(styles)(RichTextEditorToolbarActionButton);