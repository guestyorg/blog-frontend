const { Octokit } = require('@octokit/rest');

const owner = 'guestyorg';

const api = ({ token }) => {
  const octokit = new Octokit({ auth: token });

  return {
    octokit,
    getFile: async (...args) => getFile(octokit, ...args),
    updateFile: async (...args) => updateFile(octokit, ...args),
    prMaster: async (...args) => prMaster(octokit, ...args),
    branchFromMaster: async (...args) => branchFromMaster(octokit, ...args),
    checkIfFileExists: async (...args) => checkIfFileExists(octokit, ...args),
  };
};

const branchFromMaster = async (octokit, { repo, name }) => {
  const ref = `refs/heads/${name}`;

  const {
    data: {
      object: { sha },
    },
  } = await octokit.git.getRef({
    owner,
    repo,
    ref: 'heads/master',
  });

  const {
    data: {
      object: { sha: newBranchSha },
    },
  } = await octokit.git.createRef({
    owner,
    repo,
    ref,
    sha,
  });

  return newBranchSha;
};

const updateFile = async (octokit, { repo, sha, path, branch, content }) => {
  const { data } = await octokit.repos.createOrUpdateFileContents({
    owner,
    repo,
    path,
    sha,
    branch,
    message: 'Inventory update change',
    content: content,
    'committer.name': 'Guesty devops bot',
    'committer.email': 'guesty-devops-ci',
    'author.name': 'Guetsy devops bot',
    'author.email': 'guesty-devops-ci',
  });

  return data;
};

const prMaster = async (octokit, { repo, title, body, head }) => {
  return octokit.pulls.create({
    owner,
    repo,
    title,
    body,
    head,
    base: 'master',
  });
};

const getFile = async (octokit, { file, branch, repo }) => {
  const {
    data: { content, encoding, sha },
  } = await octokit.repos.getContent({
    owner,
    repo,
    path: file,
    ref: `refs/heads/${branch}`,
  });

  return { content, encoding, sha };
};

const checkIfFileExists = async (octokit, { file, branch, repo }) => {
  try {
    const data = await octokit.repos.getContent({
      owner,
      repo,
      path: file,
      ref: `refs/heads/${branch}`,
    });

    return !!data;
  } catch (error) {
    if (error.status === 404) {
      return false;
    }
    throw error;
  }
};

module.exports = api;
