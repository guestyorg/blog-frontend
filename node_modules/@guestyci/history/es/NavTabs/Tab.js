import React, { useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import isObject from 'lodash/isObject';
import cn from 'classnames';
import createStyles from '@guestyci/foundation/createStyles';
import Link from "../Link";
const useStyles = createStyles(theme => ({
  root: {
    textTransform: 'uppercase',
    padding: 0,
    minHeight: 50,
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    '&:hover': {
      color: theme.palette.brand.primary
    }
  },
  active: {
    color: theme.palette.brand.primary,
    fontWeight: 'bold'
  }
}), {
  name: 'Tab'
});

const Tab = ({
  onClick,
  tabIndex,
  to,
  value,
  className,
  disabled,
  isActive,
  children
}) => {
  const classes = useStyles();
  const pathname = useMemo(() => isObject(to) ? to.pathname : to, [to]);
  const onTabClick = useCallback(() => {
    onClick({
      tabIndex,
      to,
      value
    });
  }, [onClick, tabIndex, to, value]);
  return /*#__PURE__*/React.createElement(Link, {
    "data-cy": isActive ? 'active' : '',
    href: pathname,
    className: cn('tab-item', classes.root, {
      [classes.active]: isActive
    }, className),
    onClick: onTabClick,
    disabled: disabled
  }, children);
};

Tab.defaultProps = {
  children: null,
  disabled: false,
  to: undefined
};
Tab.propTypes = {
  /** Tab name */
  children: PropTypes.node,

  /** Indicator whether or not the tab is disabled */
  disabled: PropTypes.bool,

  /** The tab value to be passed when clicked */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /** value to pass on click  */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()])
};
export default Tab;