"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LabelDropdownComponent = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _LabelDropdownInputField = _interopRequireDefault(require("./LabelDropdownInputField"));

var _DropdownInputField = _interopRequireDefault(require("../baseDropdown/DropdownInputField"));

var _withDropdown = _interopRequireDefault(require("../baseDropdown/withDropdown"));

var _DropdownMenu = _interopRequireDefault(require("../baseDropdown/DropdownMenu"));

var _MenuItem = _interopRequireDefault(require("../Menu/MenuItem"));

var _enums = require("../../enums/enums");

var LabelDropdown = function LabelDropdown(_ref) {
  var options = _ref.options,
      toggleCollapse = _ref.toggleCollapse,
      isCollapsed = _ref.isCollapsed,
      placeholder = _ref.placeholder,
      className = _ref.className,
      style = _ref.style,
      name = _ref.name,
      searchable = _ref.searchable,
      selectedItem = _ref.selectedItem,
      query = _ref.query,
      onSearchChange = _ref.onSearchChange,
      clearSelectedItem = _ref.clearSelectedItem,
      onSelectItem = _ref.onSelectItem,
      displayField = _ref.displayField,
      isFetching = _ref.isFetching,
      fetchNextPage = _ref.fetchNextPage,
      pageCount = _ref.pageCount,
      currentPage = _ref.currentPage,
      searchInputValue = _ref.searchInputValue,
      clearQuery = _ref.clearQuery,
      anchorDirection = _ref.anchorDirection,
      closeDropdown = _ref.closeDropdown;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('relative flex-column', className),
    style: style,
    name: name,
    "data-qa": "label-dropdown"
  }, /*#__PURE__*/_react["default"].createElement(_LabelDropdownInputField["default"], {
    label: selectedItem[displayField] || selectedItem.label,
    onClick: toggleCollapse,
    isOpen: !isCollapsed,
    placeholder: placeholder
  }), /*#__PURE__*/_react["default"].createElement(_DropdownMenu["default"], {
    anchorDirection: anchorDirection,
    onDismiss: closeDropdown,
    pageCount: pageCount,
    onLoadMore: fetchNextPage,
    currentPage: currentPage,
    isFetching: isFetching,
    className: (0, _classnames["default"])('max-width-280', searchable ? 'min-width-280' : 'min-width-140'),
    isEmptyState: !options.length,
    isCollapsed: isCollapsed,
    topBar: searchable ? /*#__PURE__*/_react["default"].createElement(_DropdownInputField["default"], {
      noAction: true,
      className: "b-0 bb-1",
      inputClassName: (0, _classnames["default"])({
        'text-blue': !(0, _isEmpty["default"])(selectedItem)
      }),
      onQueryChange: onSearchChange,
      query: query,
      value: searchInputValue,
      onClearQuery: clearQuery,
      onClearSelected: clearSelectedItem,
      searchable: true,
      placeholder: "Search"
    }) : null
  }, options.map(function (item) {
    return /*#__PURE__*/_react["default"].createElement(_MenuItem["default"], {
      key: item.value,
      value: item,
      isSelected: item.value === selectedItem.value,
      onClick: onSelectItem
    }, item.label);
  })));
};

LabelDropdown.defaultProps = {
  searchable: false,
  placeholder: 'Select Value...',
  defaultValue: {},
  onSearchQueryChange: null,
  className: '',
  style: {},
  displayField: 'label',
  onLoadMore: _noop["default"],
  isFetching: false,
  pageCount: 0,
  value: undefined,
  anchorDirection: _enums.AnchorDirectionType.Start,
  onChange: _noop["default"],
  onSelect: _noop["default"]
};
LabelDropdown.propTypes = {
  /** The dropdown options to show - Structure ({
   label: {Node} - the label to present,
   value: {String|number} - unique value to be sent to the server,
  name: {String} -  (required if label is custom node) value to send if label is component
   - shown in input once selected,
  })
   */
  options: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,

  /** Indicator whether or not the input field is searchable */
  searchable: _propTypes["default"].bool,

  /** Placeholder for input field */
  placeholder: _propTypes["default"].string,

  /** Initial value to set to dropdown */
  defaultValue: _propTypes["default"].shape(),

  /** Mandatory if searchable - callback for on input change */
  onSearchQueryChange: _propTypes["default"].func,

  /** Callback function to be called on value changed - Deprecated */
  onSelect: _propTypes["default"].func,

  /** Callback function to be called on value changed */
  onChange: _propTypes["default"].func,

  /** Callback function to be called on dropdown visibility change */
  onVisibilityChange: _propTypes["default"].func,

  /** Additional class for dropdown root */
  className: _propTypes["default"].string,

  /** Additional style for dropdown root */
  style: _propTypes["default"].shape(),

  /**  field to display for selected item */
  displayField: _propTypes["default"].string,

  /** Callback function to fetch more items - required for infinite scroll */
  onLoadMore: _propTypes["default"].func,

  /** Total page count for pagination - required to allow infinite scroll */
  pageCount: _propTypes["default"].number,

  /** Indicator whether or not we are currently fetching value for infinite scroll */
  isFetching: _propTypes["default"].bool,

  /** Value to set for the dropdown to make controlled
   * auto sets if full dropdown item, if string -
   * will only set once the value exists in the dropdown options
   */
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].string, _propTypes["default"].number]),

  /** Set the direction of the dropdown anchor */
  anchorDirection: _propTypes["default"].oneOf([_enums.AnchorDirectionType.Center, _enums.AnchorDirectionType.Start, _enums.AnchorDirectionType.End])
};
var LabelDropdownComponent = LabelDropdown;
exports.LabelDropdownComponent = LabelDropdownComponent;

var _default = (0, _withDropdown["default"])(LabelDropdown);

exports["default"] = _default;