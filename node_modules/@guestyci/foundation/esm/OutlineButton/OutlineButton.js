import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { fade } from "../theme/utils";
import { white } from "../theme/colors";
import createStyles from "../createStyles";
import Button from "../Button";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      minWidth: 95,
      color: theme.palette.primary["default"],
      border: "1px solid ".concat(theme.palette.primary["default"], " !important"),
      backgroundColor: white,
      '&:not([disabled]):hover': {
        backgroundColor: theme.palette.primary["default"],
        border: "1px solid ".concat(theme.palette.primary["default"], " !important"),
        color: white
      },
      '&:disabled': {
        border: "1px solid ".concat(fade(theme.palette.primary["default"], 0.6), " !important"),
        color: fade(theme.palette.secondary["default"], 0.3)
      }
    }
  };
}, {
  name: 'OutlineButton'
});
var OutlineButton = React.forwardRef(function OutlineButton(_ref, ref) {
  var children = _ref.children,
      size = _ref.size,
      isLoading = _ref.isLoading,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      className = _ref.className,
      jss = _ref.jss,
      props = _objectWithoutProperties(_ref, ["children", "size", "isLoading", "onClick", "disabled", "className", "jss"]);

  var classes = useStyles({
    isLoading: isLoading,
    jss: jss
  });
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    disabled: disabled,
    isLoading: isLoading,
    size: size,
    onClick: onClick,
    rippleColor: white,
    spinnerColor: "blue",
    className: cn(classes.root, className),
    ref: ref
  }), children);
});
OutlineButton.defaultProps = {
  size: 'md',
  onClick: noop,
  isLoading: false,
  disabled: false
};
OutlineButton.propTypes = {
  /** Child element to locate inside of button */
  children: PropTypes.node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: PropTypes.func,

  /** Button size - values =['md', 'lg', 'xl'] */
  size: PropTypes.oneOf(['md', 'lg', 'xl']),

  /** Indicator whether or not to show loader in button */
  isLoading: PropTypes.bool,

  /** Indicator whether or not to button is disabled */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
OutlineButton.displayName = 'OutlineButton';
export default OutlineButton;