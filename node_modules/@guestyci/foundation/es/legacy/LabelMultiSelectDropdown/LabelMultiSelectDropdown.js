import React from 'react';
import cn from 'classnames';
import isEmpty from 'lodash/isEmpty';
import withDropdown from "../baseDropdown/withDropdown";
import withMultiSelect from "../baseDropdown/withMultiSelect";
import LabelDropdownInputField from "../LabelDropdown/LabelDropdownInputField";
import DropdownInputField from "../baseDropdown/DropdownInputField";
import DropdownMenu from "../baseDropdown/DropdownMenu";
import MultiSelectDropdownSelectedMenu from "../MultiSelectDropdown/MultiSelectDropdownSelectedMenu";
import MultiSelectDropdownMenuItem from "../MultiSelectDropdown/MultiSelectDropdownMenuItem";

const LabelMultiSelectDropdown = ({
  toggleCollapse,
  isCollapsed,
  name,
  className,
  onSearchChange,
  clearQuery,
  closeDropdown,
  style,
  isFetching,
  fetchNextPage,
  pageCount,
  currentPage,
  query,
  placeholder,
  searchable,
  clearSelectedItem,
  selectedItem,
  searchPlaceholder,
  searchInputValue,
  unselectedOptions,
  selectedOptions,
  searchQuery,
  onChange
}) => /*#__PURE__*/React.createElement("div", {
  className: cn('d-flex-fill relative flex-column', className),
  style: style,
  name: name,
  "data-qa": "label-multi-select-dropdown"
}, /*#__PURE__*/React.createElement(LabelDropdownInputField, {
  label: searchInputValue,
  onClick: toggleCollapse,
  isOpen: !isCollapsed,
  placeholder: placeholder
}), /*#__PURE__*/React.createElement(DropdownMenu, {
  pageCount: pageCount,
  onDismiss: closeDropdown,
  isEmptyState: !unselectedOptions.length,
  currentPage: currentPage,
  onLoadMore: fetchNextPage,
  isFetching: isFetching,
  isCollapsed: isCollapsed,
  className: cn('max-width-280', searchable ? 'min-width-280' : 'min-width-140'),
  topBar: /*#__PURE__*/React.createElement(DropdownInputField, {
    noAction: true,
    placeholder: searchPlaceholder,
    className: "b-0 bb-1",
    inputClassName: cn({
      'text-blue': !isEmpty(selectedItem)
    }),
    onQueryChange: onSearchChange,
    query: query,
    value: searchQuery,
    onClearQuery: clearQuery,
    onClearSelected: clearSelectedItem,
    searchable: true
  })
}, /*#__PURE__*/React.createElement(MultiSelectDropdownSelectedMenu, {
  options: selectedOptions,
  onChange: onChange
}), unselectedOptions.map((option, key) => {
  const iteratorId = key;
  return /*#__PURE__*/React.createElement(MultiSelectDropdownMenuItem, {
    key: `MultiSelectDropdownMenuItem-${iteratorId}`,
    checked: false,
    onChange: onChange,
    value: option
  }, option.label);
})));

export const LabelMultiSelectDropdownComponent = LabelMultiSelectDropdown;
export default withDropdown(withMultiSelect(LabelMultiSelectDropdown));