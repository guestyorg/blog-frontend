import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { node, string, shape, bool } from 'prop-types';
import cn from 'classnames';
import PlaceholderBase from "../../Placeholder";
import Tooltip from "../../Tooltip";
import { isNumber } from "../../../utils/commonUtility";
import useOverflowBoundaries from "../../../useOverflowBoundaries";
import createStyles from "../../../createStyles";
import TextField from "../../../TextField";
const useStyles = createStyles(theme => ({
  root: {
    backgroundColor: 'inherit',
    display: 'table-cell',
    overflow: 'none',
    verticalAlign: 'middle',
    borderBottom: `1px solid ${theme.palette.border}`
  },
  cellContent: {
    padding: theme.spacer(3)
  }
}), {
  name: 'Cell'
});
const Cell = React.forwardRef(function Cell(_ref, ref) {
  let {
    children,
    isLoading,
    overflowEllipsis,
    overflowEllipsisTooltip,
    className,
    contentClassName,
    style,
    width,
    positionLeft,
    positionRight,
    Placeholder,
    jss,
    tooltipId
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style", "width", "positionLeft", "positionRight", "Placeholder", "jss", "tooltipId"]);

  const classes = useStyles({
    jss
  });
  const [isOverflowed, overflowRef] = useOverflowBoundaries();
  const tooltipBody = overflowEllipsis && isOverflowed ? overflowEllipsisTooltip : null;

  const layoutStyles = _extends({}, isNumber(positionRight) && {
    right: `${positionRight}px`
  }, {}, isNumber(positionLeft) && {
    left: `${positionLeft}px`
  }, {}, isNumber(width) && {
    width: `${width}px`
  });

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn('cell', classes.root, className),
    style: _extends({}, style, {}, layoutStyles)
  }), /*#__PURE__*/React.createElement(Tooltip, {
    id: tooltipId,
    body: tooltipBody
  }, /*#__PURE__*/React.createElement(TextField, {
    overflowEllipsis: overflowEllipsis,
    className: cn('cell-content', classes.cellContent, contentClassName),
    ref: overflowRef
  }, isLoading ? Placeholder : children)));
});
Cell.propTypes = {
  /** content of a cell */
  children: node,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: node,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape(),

  /** component to be rendered when loading is in progress  */
  Placeholder: node
};
Cell.defaultProps = {
  children: null,
  className: '',
  contentClassName: '',
  style: {},
  overflowEllipsis: false,
  overflowEllipsisTooltip: null,
  isLoading: false,
  Placeholder: /*#__PURE__*/React.createElement(PlaceholderBase, {
    className: "cell-placeholder height-10 w-fill"
  })
};
Cell.displayName = 'Cell';
export default Cell;