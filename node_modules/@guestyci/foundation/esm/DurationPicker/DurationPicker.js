import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo, useRef, useState } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { Menu } from "../Menu";
import TextField from "../TextField";
import MenuItem from "../Menu/MenuItem";
import createStyles from "../createStyles";
import DurationPickerInput from "./DurationPickerInput";
import { timePickerStyles } from "../TimePicker/styles";
export var useStyles = createStyles(function (theme) {
  return _extends({}, timePickerStyles(theme));
}, {
  name: 'DurationPicker'
});

var generateOptions = function generateOptions(duration, interval) {
  var itemCount = duration / interval;

  var padTime = function padTime(t) {
    return t < 10 ? "0".concat(t) : t;
  };

  var minutes = interval;

  var items = _toConsumableArray(Array(Math.round(itemCount)));

  return items.map(function () {
    var result = "".concat(padTime(Math.floor(minutes / 60)), " : ").concat(padTime(minutes % 60));
    var value = minutes;
    minutes += interval;
    return {
      label: result,
      value: value
    };
  });
};

var DurationPicker = React.forwardRef(function DurationPicker(_ref, ref) {
  var value = _ref.value,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      defaultValue = _ref.defaultValue,
      _ref$resetable = _ref.resetable,
      resetable = _ref$resetable === void 0 ? false : _ref$resetable,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$interval = _ref.interval,
      interval = _ref$interval === void 0 ? 30 : _ref$interval,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? false : _ref$error,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 24 * 60 : _ref$duration,
      props = _objectWithoutProperties(_ref, ["value", "onChange", "className", "style", "name", "defaultValue", "resetable", "disabled", "jss", "interval", "error", "duration"]);

  var classes = useStyles({
    jss: jss
  });
  var anchorRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  var handleInputClick = function handleInputClick() {
    setOpen(!open);
  };

  var handleDurationPickerClose = function handleDurationPickerClose() {
    setOpen(false);
  };

  var dispatchEvent = function dispatchEvent(e, selectedValue) {
    // work around to solve - see https://github.com/guestyorg/foundation-ui/issues/284
    Object.assign(e.target, {
      name: name,
      value: selectedValue
    });
    onChange(e, selectedValue);
  };

  var handleInputChange = function handleInputChange(e, inputValue) {
    e.stopPropagation();
    dispatchEvent(e, inputValue);
    handleDurationPickerClose();
  };

  var handleItemClick = function handleItemClick(e, selectedValue) {
    dispatchEvent(e, selectedValue);
    handleDurationPickerClose();
  };

  var handleClearClick = function handleClearClick(e) {
    dispatchEvent(e);
  };

  var options = useMemo(function () {
    return generateOptions(duration, interval);
  }, [duration, interval]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn(classes.root, className),
    style: style
  }, props), /*#__PURE__*/React.createElement(DurationPickerInput, {
    ref: anchorRef,
    onClick: handleInputClick,
    onChange: handleInputChange,
    onClear: handleClearClick,
    open: open,
    disabled: disabled,
    defaultValue: defaultValue,
    resetable: resetable,
    value: value,
    error: error
  }), /*#__PURE__*/React.createElement(Menu, {
    anchorDirection: "start",
    open: open,
    className: classes.menu,
    onClose: handleDurationPickerClose,
    variant: "menu",
    fitAnchor: true,
    anchor: anchorRef
  }, options.map(function (option) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: option.value,
      value: option.value,
      onClick: handleItemClick
    }, /*#__PURE__*/React.createElement(TextField, null, option.label));
  })));
});
DurationPicker.propTypes = {
  /** Callback function to be called on value changed - arguments - (event) */
  onChange: PropTypes.func.isRequired,

  /** Additional class for duration picker root */
  className: PropTypes.string,

  /** Additional style for duration picker root */
  style: PropTypes.shape(),

  /** form element name */
  name: PropTypes.string,

  /** Controlled value to set to the duration picker */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** The interval leaps for the picker items in minutes */
  interval: PropTypes.number,

  /** JSS overrides for DurationPicker */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** default value to reset to */
  defaultValue: PropTypes.string,

  /** indicator whether or not to allow reset */
  resetable: PropTypes.bool,

  /** The max duration value to build dropdown values from  in minutes */
  duration: PropTypes.number
};
DurationPicker.displayName = 'DurationPicker';
export default DurationPicker;