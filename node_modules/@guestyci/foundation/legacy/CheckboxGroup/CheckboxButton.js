"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _withHover = _interopRequireDefault(require("../../withHover/withHover"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var CheckboxButton = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(CheckboxButton, _Component);

  var _super = _createSuper(CheckboxButton);

  function CheckboxButton() {
    var _this;

    (0, _classCallCheck2["default"])(this, CheckboxButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onCheckboxClick = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          name = _this$props.name,
          id = _this$props.id,
          onChange = _this$props.onChange;
      onChange(value, name, id);
    };

    return _this;
  }

  (0, _createClass2["default"])(CheckboxButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          checked = _this$props2.checked,
          children = _this$props2.children,
          onHoverEnter = _this$props2.onHoverEnter,
          onHoverLeave = _this$props2.onHoverLeave,
          borderRight = _this$props2.borderRight,
          isHovering = _this$props2.isHovering;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('flex-center', 'height-46', 'width-46', 'bg-gray-lightest', {
          'bg-white': checked,
          'br-1': borderRight,
          'border-gray-light': borderRight,
          'fill-blue': checked || isHovering,
          'text-blue': checked || isHovering,
          'text-gray-dark': !checked
        }, className),
        onKeyDown: this.onRadioButtonClick,
        onClick: this.onCheckboxClick,
        onMouseEnter: onHoverEnter,
        onMouseLeave: onHoverLeave,
        disabled: false,
        role: "button",
        "data-qa": "checkbox-button"
      }, children);
    }
  }]);
  return CheckboxButton;
}(_react.Component);

CheckboxButton.defaultProps = {
  checked: false,
  value: undefined,
  name: undefined,
  id: undefined,
  className: '',
  borderRight: false
};
CheckboxButton.propTypes = {
  /** Set the radioButton checked attribute to show it as current */
  checked: _propTypes["default"].bool,

  /** children will be rendered inside the radio item */
  children: _propTypes["default"].node.isRequired,

  /** The radioButton value to be passed when clicked */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].shape()]),

  /** value will be return when click on this item */
  onChange: _propTypes["default"].func.isRequired,

  /** value will be return when click on this item */
  name: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** identifier will be return when click on this element */
  id: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** classes to be added to the component */
  className: _propTypes["default"].string,

  /** An indicator if the checkbox has borderRight */
  borderRight: _propTypes["default"].bool
};

var _default = (0, _withHover["default"])(CheckboxButton);

exports["default"] = _default;