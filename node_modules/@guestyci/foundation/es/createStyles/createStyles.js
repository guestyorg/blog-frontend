import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import { useMemo, useEffect } from 'react';
import isEmpty from 'lodash/isEmpty';
import memoize from '@guestyci/memoize';
import { createUseStyles as jssCreateUseStyles } from 'react-jss';
import { increment } from "./sheetCounter";
import useTheme from "../useTheme";

const generateUseStyles = options => sheet => jssCreateUseStyles(sheet, options);

const getSheet = memoize((styles, theme) => {
  return typeof styles === 'function' ? styles(theme) : styles;
});

const getClasses = (sheetClasses, overrideClasses) => {
  if (!isEmpty(overrideClasses)) {
    return _extends({}, sheetClasses, {}, overrideClasses);
  }

  return sheetClasses;
};

const generateOverrideSheet = ({
  jssIndex,
  options,
  useStylesOverrides
}, jssOverrides) => {
  const jss = {
    useStylesOverrides
  };

  if (isEmpty(jssOverrides)) {
    return {};
  }

  if (jssIndex) {
    return jss;
  }

  jss.jssIndex = increment();
  const createUseStylesOverride = generateUseStyles(_extends({}, options, {
    index: jss.jssIndex
  }));
  jss.useStylesOverrides = createUseStylesOverride(jssOverrides);
  return jss;
};

function createStyles(styles, options = {}) {
  const index = increment();
  let instance = {
    index,
    options,
    jssIndex: null,
    useStylesOverrides: () => {}
  };
  const createUseStyles = generateUseStyles(_extends({}, options, {
    index
  }));
  return function useStyles(props = {}) {
    const {
      jss
    } = props,
          otherProps = _objectWithoutPropertiesLoose(props, ["jss"]);

    const theme = useTheme(); // create basic style sheet for component instance

    const useStyleSheet = useMemo(() => createUseStyles(getSheet(styles, theme)), [theme]);
    useEffect(() => {
      return () => {
        instance.jssIndex = null;
      };
    }, []); // cache base sheet classes

    const classes = useStyleSheet(otherProps); // Create Overriding sheet in case jss is passed

    const _useMemo = useMemo(() => generateOverrideSheet(instance, getSheet(jss, theme)), [theme, jss]),
          {
      useStylesOverrides = () => {}
    } = _useMemo,
          jssInstance = _objectWithoutPropertiesLoose(_useMemo, ["useStylesOverrides"]);

    instance = _extends({}, instance, {}, jssInstance); // cache jss override sheet classes

    const jssOverrideClasses = useStylesOverrides(otherProps);

    if (!isEmpty(jssOverrideClasses)) {
      instance.useStylesOverrides = useStylesOverrides;
    }

    return getClasses(classes, jssOverrideClasses);
  };
}

export default createStyles;