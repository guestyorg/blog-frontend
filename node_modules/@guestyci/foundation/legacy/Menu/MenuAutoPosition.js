"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactJss = _interopRequireDefault(require("react-jss"));

var _memoize = _interopRequireDefault(require("@guestyci/memoize"));

var _enums = require("../../enums/enums");

var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _CSSTransiton = _interopRequireDefault(require("../CSSTransiton"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var styles = {
  blocker: {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 1300,
    position: 'fixed',
    touchAction: 'none',
    backgroundColor: 'transparent'
  },
  menu: {
    zIndex: 1301
  }
};

var MenuAutoPosition = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2["default"])(MenuAutoPosition, _PureComponent);

  var _super = _createSuper(MenuAutoPosition);

  function MenuAutoPosition(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, MenuAutoPosition);
    _this = _super.call(this, props);
    _this.getAnchorDirection = (0, _memoize["default"])(function (anchor, parentWidth) {
      var childWidth = _this.childRef.current.offsetWidth;

      switch (anchor) {
        case _enums.AnchorDirectionType.Left:
          return -childWidth;

        case _enums.AnchorDirectionType.Right:
          return parentWidth;

        case _enums.AnchorDirectionType.EndCenter:
          return -(childWidth - parentWidth / 2);

        case _enums.AnchorDirectionType.StartCenter:
          return parentWidth / 2;

        case _enums.AnchorDirectionType.Center:
          return -(childWidth - parentWidth) / 2;

        case _enums.AnchorDirectionType.End:
          return -(childWidth - parentWidth);

        default:
          return 0;
      }
    });

    _this.isInViewPort = function (offsetHeight) {
      return offsetHeight <= window.scrollY + (window.innerHeight || document.documentElement.clientHeight);
    };

    _this.calculateComponentPosition = (0, _memoize["default"])(function (left, parentWidth, top, parentHeight) {
      var _this$childRef$curren = _this.childRef.current,
          offsetHeight = _this$childRef$curren.offsetHeight,
          offsetWidth = _this$childRef$curren.offsetWidth;
      var direction = _enums.MenuSlideAnchorDirectionType.Top;
      var offsetTop = top + window.scrollY;
      var width = offsetWidth >= parentWidth ? offsetWidth : parentWidth;
      var position = {
        left: left,
        top: offsetTop,
        width: width
      };

      if (!_this.isInViewPort(offsetTop + offsetHeight + parentHeight)) {
        position.top -= offsetHeight;
        direction = _enums.MenuSlideAnchorDirectionType.Bottom;
      } else {
        position.top += parentHeight;
      }

      return {
        position: position,
        direction: direction
      };
    });
    _this.autoPositionRef = _react["default"].createRef();
    _this.childRef = _react["default"].createRef();
    _this.state = {
      position: {},
      direction: _enums.MenuSlideAnchorDirectionType.Top
    };
    return _this;
  }

  (0, _createClass2["default"])(MenuAutoPosition, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var trigger = this.props.trigger;

      if (trigger && prevProps.trigger !== trigger) {
        this.calculatePosition();
      }
    }
  }, {
    key: "calculatePosition",
    value: function calculatePosition() {
      var anchorDirection = this.props.anchorDirection;
      var el = this.autoPositionRef.current;

      if (el) {
        var parent = el.parentElement;
        var offsetHeight = parent.offsetHeight;

        var _parent$getBoundingCl = parent.getBoundingClientRect(),
            left = _parent$getBoundingCl.left,
            width = _parent$getBoundingCl.width,
            top = _parent$getBoundingCl.top;

        var relativeAnchorDirection = this.getAnchorDirection(anchorDirection, width);

        var _this$calculateCompon = this.calculateComponentPosition(left + relativeAnchorDirection, width, top, offsetHeight),
            position = _this$calculateCompon.position,
            direction = _this$calculateCompon.direction;

        this.setState({
          position: position,
          direction: direction
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          style = _this$props.style,
          trigger = _this$props.trigger,
          classes = _this$props.classes;
      var _this$state = this.state,
          position = _this$state.position,
          direction = _this$state.direction;
      return /*#__PURE__*/_react["default"].createElement("div", {
        ref: this.autoPositionRef,
        "data-qa": "menu-auto-position"
      }, /*#__PURE__*/_react["default"].createElement(_Portal["default"], {
        withState: true,
        isOpen: trigger
      }, trigger && /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.blocker
      }), /*#__PURE__*/_react["default"].createElement(_CSSTransiton["default"], {
        animation: "scale",
        show: trigger,
        className: (0, _classnames["default"])("menu-auto-position absolute transform-center-".concat(direction), classes.menu, className),
        style: (0, _extends2["default"])({}, style, {}, position)
      }, /*#__PURE__*/_react["default"].createElement("div", {
        ref: this.childRef
      }, children))));
    }
  }]);
  return MenuAutoPosition;
}(_react.PureComponent);

MenuAutoPosition.defaultProps = {
  className: '',
  style: {},
  anchorDirection: _enums.AnchorDirectionType.Start
};
MenuAutoPosition.propTypes = {
  /** Child node for the auto position to reference and wrap */
  children: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].arrayOf(_propTypes["default"].node)]).isRequired,

  /** Indicator when to re calculate the position */
  trigger: _propTypes["default"].bool.isRequired,

  /** Additional class to root level */
  className: _propTypes["default"].string,

  /** Additional style to root level */
  style: _propTypes["default"].shape(),

  /** Direction to open the menu (center, left, right, end ,start, start center, end center) */
  anchorDirection: _propTypes["default"].oneOf([_enums.AnchorDirectionType.Center, _enums.AnchorDirectionType.Left, _enums.AnchorDirectionType.Right, _enums.AnchorDirectionType.StartCenter, _enums.AnchorDirectionType.EndCenter, _enums.AnchorDirectionType.Start, _enums.AnchorDirectionType.End])
};

var _default = (0, _reactJss["default"])(styles)(MenuAutoPosition);

exports["default"] = _default;