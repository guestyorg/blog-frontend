import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import { snakeToCamel } from "../../utils/commonUtility";
import Placeholder from "../Placeholder";
const useStyles = createUseStyles({
  icon: {
    minWidth: props => props.width,
    minHeight: props => props.height
  },
  placeholder: {
    borderRadius: '15%'
  }
});

const createSvgFromText = text => {
  const div = document.createElement('div');
  div.innerHTML = text.substring(text.indexOf('<svg'));
  return div.firstChild;
};

const Icon = React.memo(({
  width,
  height,
  color,
  fillColor,
  strokeColor,
  className,
  icon,
  style,
  noFill
}) => {
  const [svgContent, setSvgContent] = useState();
  const [attributes, setAttributes] = useState({});
  useEffect(() => {
    const setSvgAttributes = svg => {
      const attrs = Object.values(svg.attributes).reduce((acc, attr) => {
        const {
          name,
          value
        } = attr;

        if (!name.includes('xml')) {
          const camelName = snakeToCamel(name);
          acc[camelName] = value;
        }

        return acc;
      }, {});
      setAttributes(attrs);
    };

    const fetchSvgIconFromS3 = async () => {
      try {
        const resp = await fetch(`https://d2g7j5hs6q3xyb.cloudfront.net/icons/${icon}.svg`);
        const text = await resp.text();
        const svgElement = createSvgFromText(text);
        setSvgAttributes(svgElement);
        setSvgContent(svgElement.innerHTML);
      } catch (err) {
        console.warn(`${icon} was not found`);
      }
    };

    fetchSvgIconFromS3();
  }, [icon]);
  const classes = useStyles({
    width,
    height
  });
  const iconFillColor = fillColor || color;

  if (!svgContent) {
    return /*#__PURE__*/React.createElement(Placeholder, {
      className: cn(className, classes.placeholder, classes.icon)
    });
  }

  return /*#__PURE__*/React.createElement("svg", _extends({
    dangerouslySetInnerHTML: {
      __html: svgContent
    }
  }, attributes, {
    width: width,
    height: height,
    className: cn({
      'transition-all': iconFillColor && !noFill
    }, className, noFill ? 'fill-inherit' : [`fill-${iconFillColor} stroke-${strokeColor}`], classes.icon),
    style: style
  }));
});
Icon.defaultProps = {
  width: 20,
  height: 20,
  color: '',
  className: '',
  style: {},
  noFill: false
};
Icon.propTypes = {
  /** Icon width in pixels */
  width: PropTypes.number,

  /** Icon height in pixels */
  height: PropTypes.number,

  /** Icon fill color - see style guide colors for options */
  color: PropTypes.string,

  /** Class to add to the Icon component */
  className: PropTypes.string,

  /** Style to add to Icon component */
  style: PropTypes.shape(),

  /** The string name of the Icon to use. Also possible to pass without the icon prop */
  icon: PropTypes.string.isRequired,

  /** boolean - decide whether to disable default fill color */
  noFill: PropTypes.bool
};
export default Icon;