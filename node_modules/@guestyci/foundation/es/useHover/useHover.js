import { useRef, useState, useEffect } from 'react';
import isObject from 'lodash/isObject';

function getDelay(delay, type) {
  if (!delay) {
    return;
  }

  if (isObject(delay)) {
    return delay[type];
  }

  return delay;
}
/**
 * Use hover hook
 * Options:
 * @param delay = number or object { enter, exit }
 * @return [isHovering, hoverRef]
 */


function useHover({
  delay
} = {}) {
  const [isHovering, setIsHovering] = useState(null);
  const hoverRef = useRef(null);
  const timeout = useRef({});

  const onHoverLeave = () => {
    const d = getDelay(delay, 'exit');

    if (d) {
      clearTimeout(timeout.current.enter);
      timeout.current.exit = setTimeout(() => setIsHovering(false), d);
    } else {
      setIsHovering(false);
    }
  };

  const onHoverEnter = () => {
    const d = getDelay(delay, 'enter');

    if (d) {
      clearTimeout(timeout.current.exit);
      timeout.current.enter = setTimeout(() => setIsHovering(true), d);
    } else {
      setIsHovering(true);
    }
  };

  useEffect(() => {
    const node = hoverRef.current;

    if (node) {
      node.addEventListener('mouseover', onHoverEnter);
      node.addEventListener('mouseleave', onHoverLeave);
      node.addEventListener('blur', onHoverLeave);
      return () => {
        node.removeEventListener('mouseover', onHoverEnter);
        node.removeEventListener('mouseleave', onHoverLeave);
        node.removeEventListener('blur', onHoverLeave);
      };
    }
  }, [hoverRef.current]);
  return [isHovering, hoverRef];
}

export default useHover;