"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Transition = _interopRequireDefault(require("react-transition-group/Transition"));

/* eslint no-param-reassign: 0 */
var Collapse = function Collapse(_ref) {
  var children = _ref.children,
      isOpen = _ref.isOpen,
      className = _ref.className,
      duration = _ref.duration,
      onEntered = _ref.onEntered,
      onExited = _ref.onExited,
      lazyMount = _ref.lazyMount,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "isOpen", "className", "duration", "onEntered", "onExited", "lazyMount"]);

  var handleEnter = function handleEnter(node, isAppearing) {
    if (isAppearing) {
      node.style.height = 'auto';
    } else {
      node.style.height = 0;
    }
  };

  var handleEntering = function handleEntering(node) {
    var height = node.scrollHeight;
    node.style.transitionDuration = "".concat(duration, "ms");
    node.style.height = "".concat(height, "px");
  };

  var handleEntered = function handleEntered(node, isAppearing) {
    node.style.height = 'auto';

    if (onEntered) {
      onEntered(node, isAppearing);
    }
  };

  var handleExit = function handleExit(node) {
    var height = node.scrollHeight;
    node.style.height = "".concat(height, "px");
  };

  var handleExiting = function handleExiting(node) {
    setTimeout(function () {
      node.style.transitionDuration = "".concat(duration, "ms");
      node.style.height = 0;
    }, 0);
  };

  return /*#__PURE__*/_react["default"].createElement(_Transition["default"], (0, _extends2["default"])({
    "in": isOpen,
    appear: true,
    timeout: duration,
    onEnter: handleEnter,
    onEntering: handleEntering,
    onExit: handleExit,
    onExiting: handleExiting,
    onEntered: handleEntered,
    onExited: onExited,
    mountOnEnter: lazyMount,
    unmountOnExit: lazyMount
  }, props, {
    "data-qa": "collapse"
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('w-fill', 'height-0', 'overflow-hidden', className)
  }, children));
};

Collapse.defaultProps = {
  duration: 350,
  lazyMount: false,
  className: ''
};
Collapse.propTypes = {
  /** Indicator whether or not collapse should be open */
  isOpen: _propTypes["default"].bool.isRequired,

  /** Children to render when collapse is open */
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].node]).isRequired,

  /** Duration of the animation */
  duration: _propTypes["default"].number,

  /** Function to be executed when the collapse is opened
   * (node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: _propTypes["default"].func,

  /** Function to be executed when the collapse is closed
   * (node: HtmlElement, isAppearing: bool) -> void
   */
  onExited: _propTypes["default"].func,

  /** Mount the child component in a lazy fashion.
   * Meaning, mounted when expended and unmounted when collapsed */
  lazyMount: _propTypes["default"].bool,
  className: _propTypes["default"].string
};
var _default = Collapse;
exports["default"] = _default;