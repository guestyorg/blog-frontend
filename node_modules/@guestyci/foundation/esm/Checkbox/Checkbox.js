import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import { uuid } from "../utils/commonUtility";

var BtnCheckboxIndeterminate = function BtnCheckboxIndeterminate(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("g", {
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("rect", {
    width: "15",
    height: "15",
    rx: "2"
  }), /*#__PURE__*/React.createElement("rect", {
    width: "9",
    height: "1.5",
    x: "3",
    y: "6.75",
    fill: "#FFF",
    rx: ".75"
  })));
};

BtnCheckboxIndeterminate.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "15",
  height: "15",
  viewBox: "0 0 15 15"
};

var BtnCheckboxOff = function BtnCheckboxOff(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M12.5 15h-10A2.503 2.503 0 0 1 0 12.5v-10C0 1.122 1.122 0 2.5 0h10C13.879 0 15 1.122 15 2.5v10c0 1.379-1.121 2.5-2.5 2.5zM2.5 1C1.673 1 1 1.673 1 2.5v10c0 .827.673 1.5 1.5 1.5h10c.827 0 1.5-.673 1.5-1.5v-10c0-.827-.673-1.5-1.5-1.5h-10z"
  }));
};

BtnCheckboxOff.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 15 15"
};
import Row from "../Layout/Row";
import IconButton from "../IconButton";
import TextField from "../TextField";
import CheckedIcon from "./CheckedIcon";
import checkboxStyles from "./styles";
import { gray100, gray300 } from "../theme/colors";
export var useStyles = createStyles(function (theme) {
  return _extends({
    root: {
      position: 'relative',
      cursor: 'pointer'
    }
  }, checkboxStyles(theme), {
    iconDisabled: {
      fill: gray300,
      backgroundColor: gray100
    },
    indeterminate: {
      fill: theme.palette.primary["default"]
    },
    disabled: {
      cursor: 'not-allowed',
      color: theme.palette.text.placeholder
    },
    input: {
      cursor: 'inherit',
      position: 'absolute',
      opacity: 0,
      width: '100%',
      height: '100%',
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    }
  });
}, {
  name: 'Checkbox'
});
var Checkbox = React.forwardRef(function Checkbox(_ref, ref) {
  var _cn2;

  var id = _ref.id,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      _ref$indeterminate = _ref.indeterminate,
      indeterminate = _ref$indeterminate === void 0 ? false : _ref$indeterminate,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$checkedIcon = _ref.checkedIcon,
      checkedIcon = _ref$checkedIcon === void 0 ? null : _ref$checkedIcon,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$icon = _ref.icon,
      icon = _ref$icon === void 0 ? null : _ref$icon,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$inputProps = _ref.inputProps,
      inputProps = _ref$inputProps === void 0 ? {} : _ref$inputProps,
      props = _objectWithoutProperties(_ref, ["id", "checked", "indeterminate", "onChange", "disabled", "value", "name", "style", "className", "checkedIcon", "children", "icon", "jss", "inputProps"]);

  var classes = useStyles({
    jss: jss
  });
  var inputId = useMemo(function () {
    return id || uuid();
  }, [id]);
  var SvgIcon = useMemo(function () {
    if (indeterminate) return /*#__PURE__*/React.createElement(BtnCheckboxIndeterminate, {
      height: 16,
      width: 16
    });

    if (icon) {
      return checked ? checkedIcon : icon;
    }

    return checked ? /*#__PURE__*/React.createElement(CheckedIcon, {
      height: 16,
      width: 16
    }) : /*#__PURE__*/React.createElement(BtnCheckboxOff, {
      height: 16,
      width: 16
    });
  }, [checked, indeterminate, icon, checkedIcon]);
  return /*#__PURE__*/React.createElement("label", {
    htmlFor: inputId,
    ref: ref
  }, /*#__PURE__*/React.createElement(Row, {
    wrap: false,
    align: "center",
    className: cn(classes.root, _defineProperty({}, classes.disabled, disabled), className),
    style: style
  }, /*#__PURE__*/React.createElement(IconButton, _extends({
    color: "primary"
  }, props, {
    size: "sm",
    component: "span",
    disabled: disabled
  }), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", _extends({}, inputProps, {
    id: inputId,
    type: "checkbox",
    checked: checked,
    disabled: disabled,
    onChange: onChange,
    className: classes.input,
    name: name,
    value: value
  })), React.cloneElement(SvgIcon, {
    className: cn(classes.icon, (_cn2 = {}, _defineProperty(_cn2, classes.uncheckedDefaultBg, !checked && !icon), _defineProperty(_cn2, classes.checked, checked), _defineProperty(_cn2, classes.indeterminate, indeterminate), _defineProperty(_cn2, classes.iconDisabled, disabled), _cn2))
  }))), children && /*#__PURE__*/React.createElement(TextField, null, children)));
});
Checkbox.propTypes = {
  /** Child element */
  children: PropTypes.node,

  /** Boolean flag used to set the checkbox as checked or not */
  checked: PropTypes.bool,

  /** Boolean flag used to set the checkbox as indeterminate or not */
  indeterminate: PropTypes.bool,

  /** Function to toggle the checkbox */
  onChange: PropTypes.func,

  /** Boolean indicator to toggle disabled for the checkbox */
  disabled: PropTypes.bool,

  /** React icon element for the custom icon */
  icon: PropTypes.node,

  /** React icon element for the custom checked icon */
  checkedIcon: PropTypes.node,

  /** The value to pass on checkbox click */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** Checkbox name */
  name: PropTypes.string,

  /** Additional class to add to the checkbox */
  className: PropTypes.string,

  /** Additional style to add to the checkbox */
  style: PropTypes.shape(),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Input level props */
  inputProps: PropTypes.shape()
};
Checkbox.displayName = 'Checkbox';
export default Checkbox;