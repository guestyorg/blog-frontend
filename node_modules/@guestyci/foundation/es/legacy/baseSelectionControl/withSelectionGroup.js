import _extends from "@babel/runtime/helpers/esm/extends";
import React, { Component } from 'react';
import { uuid } from "../../utils/commonUtility";

function initUUIDsForChildren(children) {
  return children.map(() => uuid());
}

function initOptions(children, isMulti) {
  const uuids = initUUIDsForChildren(children);
  let checkedFlag = false;
  const childrenStructure = new Map(children.map((child, index) => {
    if (child.props.checked) {
      checkedFlag = true;
    }

    return [uuids[index], {
      child,
      checked: child.props.checked,
      uid: uuids[index]
    }];
  }));

  if (!isMulti && !checkedFlag && childrenStructure.size !== 0) {
    childrenStructure.set(childrenStructure.keys().next().value, _extends({}, childrenStructure.values().next().value, {
      checked: true
    }));
  }

  return childrenStructure;
}

function selectedKeyOnInit(data) {
  const children = Array.from(data.values());

  if (!children.length) {
    return null;
  }

  const child = children.find(val => val.checked);

  if (!child) {
    return children[0].uid;
  }

  return child.uid;
}
/**
 * When the user passes a child you'll get it as an
 * object and not as array of objects, this function fix the structure.
 * @param children
 * @returns {*[]}
 */


function checkChildrenSize(children) {
  return Array.isArray(children) ? children : [children];
}
/**
 * Create a wrapper compose to support multiple selection functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


const withSelectionGroup = ComposedComponent => {
  var _temp;

  return _temp = class extends Component {
    constructor(props) {
      super(props);

      this.getNumberOfChecked = () => {
        const {
          options
        } = this.state;
        const {
          isMulti
        } = this.props;
        const checkedItems = [];

        if (isMulti) {
          options.forEach(value => {
            if (value.checked) {
              checkedItems.push(value.child.props.value);
            }
          });
        }

        return checkedItems.length > 0 ? checkedItems : undefined;
      };

      this.handleOptionClick = optionId => {
        const {
          options,
          lastChecked
        } = this.state;
        const {
          isMulti = false
        } = this.props;

        if (!isMulti) {
          options.set(lastChecked, _extends({}, options.get(lastChecked), {
            checked: false
          }));
          options.set(optionId, _extends({}, options.get(optionId), {
            checked: true
          }));
        } else {
          const state = options.get(optionId).checked;
          options.set(optionId, _extends({}, options.get(optionId), {
            checked: !state
          }));
        }

        this.setState({
          options,
          lastChecked: optionId
        });
      };

      const data = initOptions(checkChildrenSize(props.children), props.isMulti);
      this.state = {
        options: data,
        lastChecked: props.isMulti ? '' : selectedKeyOnInit(data)
      };
    }

    static getDerivedStateFromProps(props, state) {
      let newState = null;

      if (props.children && props.children.length > 0 && state.options.size !== props.children.length) {
        newState = {
          options: initOptions(checkChildrenSize(props.children), props.isMulti)
        };
      }

      return newState;
    }

    render() {
      const {
        options
      } = this.state;
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        options: options,
        onOptionClicked: this.handleOptionClick,
        selectedCheckboxesWhenMulti: this.getNumberOfChecked()
      })));
    }

  }, _temp;
};

export default withSelectionGroup;