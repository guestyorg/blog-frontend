import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import withHover from "../../withHover/withHover";

var CheckboxButton = /*#__PURE__*/function (_Component) {
  _inherits(CheckboxButton, _Component);

  var _super = _createSuper(CheckboxButton);

  function CheckboxButton() {
    var _this;

    _classCallCheck(this, CheckboxButton);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.onCheckboxClick = function () {
      var _this$props = _this.props,
          value = _this$props.value,
          name = _this$props.name,
          id = _this$props.id,
          onChange = _this$props.onChange;
      onChange(value, name, id);
    };

    return _this;
  }

  _createClass(CheckboxButton, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          checked = _this$props2.checked,
          children = _this$props2.children,
          onHoverEnter = _this$props2.onHoverEnter,
          onHoverLeave = _this$props2.onHoverLeave,
          borderRight = _this$props2.borderRight,
          isHovering = _this$props2.isHovering;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('flex-center', 'height-46', 'width-46', 'bg-gray-lightest', {
          'bg-white': checked,
          'br-1': borderRight,
          'border-gray-light': borderRight,
          'fill-blue': checked || isHovering,
          'text-blue': checked || isHovering,
          'text-gray-dark': !checked
        }, className),
        onKeyDown: this.onRadioButtonClick,
        onClick: this.onCheckboxClick,
        onMouseEnter: onHoverEnter,
        onMouseLeave: onHoverLeave,
        disabled: false,
        role: "button",
        "data-qa": "checkbox-button"
      }, children);
    }
  }]);

  return CheckboxButton;
}(Component);

CheckboxButton.defaultProps = {
  checked: false,
  value: undefined,
  name: undefined,
  id: undefined,
  className: '',
  borderRight: false
};
CheckboxButton.propTypes = {
  /** Set the radioButton checked attribute to show it as current */
  checked: PropTypes.bool,

  /** children will be rendered inside the radio item */
  children: PropTypes.node.isRequired,

  /** The radioButton value to be passed when clicked */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** value will be return when click on this item */
  onChange: PropTypes.func.isRequired,

  /** value will be return when click on this item */
  name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** identifier will be return when click on this element */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** classes to be added to the component */
  className: PropTypes.string,

  /** An indicator if the checkbox has borderRight */
  borderRight: PropTypes.bool
};
export default withHover(CheckboxButton);