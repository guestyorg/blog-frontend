import React, { forwardRef, useLayoutEffect, useRef, useState } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
import InlineTip from "./InlineTip";
import MiniTip from "./MiniTip";
import SideTip from "./SideTip";
export const useStyles = createStyles(() => ({
  root: {
    width: 'fit-content',
    maxWidth: '100%'
  }
}), {
  name: 'Tip'
});
const Tip = forwardRef(function Tip({
  variant = 'side',
  className,
  children,
  jss = {}
}, ref) {
  const classes = useStyles({
    jss
  });
  const overflowRef = useRef();
  const [forceMini, setForceMini] = useState(false);
  useLayoutEffect(() => {
    if (variant === 'side') {
      const {
        current = {}
      } = overflowRef;
      const {
        clientWidth,
        scrollWidth
      } = current;
      const isOverflow = scrollWidth > clientWidth;

      if (isOverflow) {
        setForceMini(true);
      }
    }
  }, [overflowRef.current]);
  const shouldForceMini = variant === 'side' && forceMini;
  const selectedVariant = shouldForceMini ? 'mini' : variant;
  const TipComponent = {
    inline: InlineTip,
    side: SideTip,
    mini: MiniTip
  }[selectedVariant];
  return /*#__PURE__*/React.createElement("div", {
    ref: overflowRef,
    className: cn(classes.root, className)
  }, /*#__PURE__*/React.createElement(TipComponent, {
    jss: jss,
    ref: ref
  }, children));
});
Tip.displayName = 'Tip';
Tip.propTypes = {
  /** variant -  [ 'side', 'inline', 'mini' ] */
  variant: PropTypes.oneOf(['side', 'inline', 'mini']),

  /** root level class name to add */
  className: PropTypes.string,

  /** text node element */
  children: PropTypes.node.isRequired,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
export default Tip;