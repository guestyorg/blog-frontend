import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useEffect, useRef, useState } from 'react';

function useResize(_ref) {
  var _ref$startWidth = _ref.startWidth,
      startWidth = _ref$startWidth === void 0 ? 0 : _ref$startWidth,
      _ref$minWidth = _ref.minWidth,
      minWidth = _ref$minWidth === void 0 ? 85 : _ref$minWidth,
      _ref$isResizable = _ref.isResizable,
      isResizable = _ref$isResizable === void 0 ? true : _ref$isResizable,
      id = _ref.id,
      onResizeEnd = _ref.onResizeEnd;
  var resizeRef = useRef({});

  var _useState = useState(startWidth),
      _useState2 = _slicedToArray(_useState, 2),
      width = _useState2[0],
      setWidth = _useState2[1];

  var handleResize = function handleResize(e) {
    e.preventDefault();
    var node = resizeRef.current;
    var isDragging = node.isDragging,
        startX = node.startX,
        dragStartWidth = node.dragStartWidth;

    if (isDragging) {
      var calculatedWidth = Math.max(dragStartWidth + (e.pageX - startX), minWidth);

      if (width !== calculatedWidth) {
        setWidth(calculatedWidth);
      }

      node.cachedWidth = calculatedWidth;
    }
  };

  var handleResizeEnd = function handleResizeEnd(e) {
    var node = resizeRef.current;
    node.startX = e.pageX;
    node.isDragging = false;
    node.dragStartWidth = node.cachedWidth;
    onResizeEnd(_defineProperty({}, id, node.cachedWidth));
    document.removeEventListener('mousemove', handleResize);
    document.removeEventListener('mouseup', handleResizeEnd);
  };

  var handleResizeStart = function handleResizeStart(e) {
    e.preventDefault();
    var node = resizeRef.current;
    node.isDragging = true;
    node.startX = e.pageX;
    node.dragStartWidth = node.dragStartWidth || width;
    document.addEventListener('mousemove', handleResize);
    document.addEventListener('mouseup', handleResizeEnd);
  };

  useEffect(function () {
    var node = resizeRef.current;

    if (node && isResizable) {
      node.addEventListener('mousedown', handleResizeStart);
      return function () {
        node.removeEventListener('mousedown', handleResizeStart);
      };
    }
  }, [isResizable]);
  return [width, resizeRef];
}

export default useResize;