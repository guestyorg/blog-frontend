import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import { useMemo, useEffect } from 'react';
import isEmpty from 'lodash/isEmpty';
import memoize from '@guestyci/memoize';
import { createUseStyles as jssCreateUseStyles } from 'react-jss';
import { increment } from "./sheetCounter";
import useTheme from "../useTheme";

var generateUseStyles = function generateUseStyles(options) {
  return function (sheet) {
    return jssCreateUseStyles(sheet, options);
  };
};

var getSheet = memoize(function (styles, theme) {
  return typeof styles === 'function' ? styles(theme) : styles;
});

var getClasses = function getClasses(sheetClasses, overrideClasses) {
  if (!isEmpty(overrideClasses)) {
    return _extends({}, sheetClasses, {}, overrideClasses);
  }

  return sheetClasses;
};

var generateOverrideSheet = function generateOverrideSheet(_ref, jssOverrides) {
  var jssIndex = _ref.jssIndex,
      options = _ref.options,
      useStylesOverrides = _ref.useStylesOverrides;
  var jss = {
    useStylesOverrides: useStylesOverrides
  };

  if (isEmpty(jssOverrides)) {
    return {};
  }

  if (jssIndex) {
    return jss;
  }

  jss.jssIndex = increment();
  var createUseStylesOverride = generateUseStyles(_extends({}, options, {
    index: jss.jssIndex
  }));
  jss.useStylesOverrides = createUseStylesOverride(jssOverrides);
  return jss;
};

function createStyles(styles) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var index = increment();
  var instance = {
    index: index,
    options: options,
    jssIndex: null,
    useStylesOverrides: function useStylesOverrides() {}
  };
  var createUseStyles = generateUseStyles(_extends({}, options, {
    index: index
  }));
  return function useStyles() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var jss = props.jss,
        otherProps = _objectWithoutProperties(props, ["jss"]);

    var theme = useTheme(); // create basic style sheet for component instance

    var useStyleSheet = useMemo(function () {
      return createUseStyles(getSheet(styles, theme));
    }, [theme]);
    useEffect(function () {
      return function () {
        instance.jssIndex = null;
      };
    }, []); // cache base sheet classes

    var classes = useStyleSheet(otherProps); // Create Overriding sheet in case jss is passed

    var _useMemo = useMemo(function () {
      return generateOverrideSheet(instance, getSheet(jss, theme));
    }, [theme, jss]),
        _useMemo$useStylesOve = _useMemo.useStylesOverrides,
        useStylesOverrides = _useMemo$useStylesOve === void 0 ? function () {} : _useMemo$useStylesOve,
        jssInstance = _objectWithoutProperties(_useMemo, ["useStylesOverrides"]);

    instance = _extends({}, instance, {}, jssInstance); // cache jss override sheet classes

    var jssOverrideClasses = useStylesOverrides(otherProps);

    if (!isEmpty(jssOverrideClasses)) {
      instance.useStylesOverrides = useStylesOverrides;
    }

    return getClasses(classes, jssOverrideClasses);
  };
}

export default createStyles;