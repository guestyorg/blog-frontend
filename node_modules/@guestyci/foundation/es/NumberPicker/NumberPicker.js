import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import createStyles from "../createStyles";
import useFocus from "../useFocus";
import { isEmpty } from "../utils";
import Input from "../Input";
import Row from "../Layout/Row";
import NumberPickerArrows from "./NumberPickerArrows";
import PickerResetWrapper from "../basePicker/PickerResetWrapper";
import InputStyles from "../Input/styles";
const affixesContainer = {
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  minWidth: '46px',
  height: '44px'
};
export const useStyles = createStyles(theme => ({
  root: {
    height: '46px',
    borderRadius: '2px',
    border: `solid 1px ${theme.palette.border}`,
    color: `${theme.palette.text.input} !important`,
    transition: theme.transition.create(),
    '&:hover': InputStyles.hover(theme)
  },
  focused: InputStyles.focused(theme),
  disabled: InputStyles.disabled(theme),
  error: InputStyles.error(theme),
  input: {
    borderStyle: 'none',
    '&:hover': {
      borderStyle: 'none'
    },
    height: '100%'
  },
  inputWithSuffix: {
    paddingRight: 0
  },
  inputWithPrefix: {
    paddingLeft: 0
  },
  prefixContainer: _extends({}, affixesContainer, {
    borderRight: `solid 1px ${theme.palette.border}`,
    marginRight: theme.spacer(3)
  }),
  suffixContainer: _extends({}, affixesContainer, {
    borderLeft: `solid 1px ${theme.palette.border}`,
    marginLeft: theme.spacer(3)
  })
}), {
  name: 'NumberPicker'
});
const inputJssOverride = {
  focused: {
    borderStyle: 'none',
    boxShadow: 'none'
  },
  disabled: {
    cursor: 'not-allowed',
    '&:hover': {
      borderStyle: 'none'
    }
  }
};
const NumberPicker = React.forwardRef(function NumberPicker(_ref, ref) {
  let {
    name,
    value,
    defaultValue,
    placeholder,
    step,
    min,
    max,
    onChange,
    disabled,
    resetable,
    prefix,
    suffix,
    jss,
    error,
    style,
    className
  } = _ref,
      otherInputProps = _objectWithoutPropertiesLoose(_ref, ["name", "value", "defaultValue", "placeholder", "step", "min", "max", "onChange", "disabled", "resetable", "prefix", "suffix", "jss", "error", "style", "className"]);

  const classes = useStyles({
    jss
  });
  const [focused, focusRef] = useFocus();

  const isValidValue = v => {
    const numberRegex = RegExp('(^-?([1-9]\\d*|0)?(?:\\.(\\d+)?)?$)');
    return numberRegex.test(v);
  };

  const handleInputChange = e => {
    const {
      target: {
        value: newValue
      }
    } = e;

    if (isValidValue(newValue)) {
      onChange(e);
    }
  };

  const manipulateEvent = (event, newValue) => {
    event.persist();
    Object.defineProperty(event, 'target', {
      value: {
        value: `${newValue}`,
        name
      }
    });
    return event;
  };

  const formatFloat = n => parseFloat(n.toFixed(4));

  const getIncValue = () => {
    const numericValue = Number(value);

    if (isEmpty(value) || Number.isNaN(numericValue)) {
      return Number(defaultValue || 0) + step;
    }

    if (numericValue < min) {
      return min;
    }

    return formatFloat(Math.round(numericValue / step) * step + step);
  };

  const getDecValue = () => {
    const numericValue = Number(value);

    if (isEmpty(value) || Number.isNaN(numericValue)) {
      return Number(defaultValue || 0) - step;
    }

    if (numericValue > max) {
      return max;
    }

    return formatFloat(Math.round(numericValue / step) * step - step);
  };

  const disableInc = disabled || getIncValue() > max;
  const disableDec = disabled || getDecValue() < min;

  const handleInc = event => onChange(manipulateEvent(event, getIncValue()));

  const handleDec = event => onChange(manipulateEvent(event, getDecValue()));

  const handleReset = event => {
    onChange(manipulateEvent(event, defaultValue));
  };

  return /*#__PURE__*/React.createElement(Row, {
    fullWidth: true,
    wrap: false,
    align: "center",
    spacing: 0,
    ref: ref,
    className: cn(classes.root, {
      [classes.focused]: focused
    }, {
      [classes.disabled]: disabled
    }, {
      [classes.error]: error
    }, className),
    style: style
  }, /*#__PURE__*/React.createElement(PickerResetWrapper, {
    resetable: resetable,
    onReset: handleReset,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(Input, _extends({
    name: name,
    ref: focusRef,
    prefix: prefix && /*#__PURE__*/React.createElement("div", {
      className: classes.prefixContainer
    }, prefix),
    suffix: suffix && /*#__PURE__*/React.createElement("div", {
      className: classes.suffixContainer
    }, suffix),
    className: cn(classes.input, {
      [classes.inputWithPrefix]: prefix
    }, {
      [classes.inputWithSuffix]: suffix
    }),
    placeholder: placeholder,
    disabled: disabled,
    onChange: handleInputChange,
    value: value,
    jss: inputJssOverride
  }, otherInputProps)), /*#__PURE__*/React.createElement(NumberPickerArrows, {
    disableDec: disableDec,
    disableInc: disableInc,
    onInc: handleInc,
    onDec: handleDec
  })));
});
NumberPicker.defaultProps = {
  name: undefined,
  value: undefined,
  defaultValue: '',
  placeholder: undefined,
  step: 1,
  min: undefined,
  max: undefined,
  onChange: noop,
  disabled: false,
  resetable: false,
  prefix: undefined,
  suffix: undefined,
  error: false,
  jss: undefined,
  style: undefined,
  className: undefined
};
NumberPicker.propTypes = {
  /** Number picker name to be set */
  name: PropTypes.string,

  /** value to be set */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** default value to be set - will be used when for reset, and inc/dec while value is not set */
  defaultValue: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOf([''])]),

  /** Input placeholder text */
  placeholder: PropTypes.string,

  /** step that will be applied when incrementing and decrementing */
  step: PropTypes.number,

  /** min value to be set */
  min: PropTypes.number,

  /** max value to be set */
  max: PropTypes.number,

  /** Function to be called on input value change */
  onChange: PropTypes.func,

  /** Disable state in which input interaction is not available */
  disabled: PropTypes.bool,

  /** Define if the value can be reset */
  resetable: PropTypes.bool,

  /** Input class */
  className: PropTypes.string,

  /** String Or React Element to be shown before the input */
  prefix: PropTypes.node,

  /** String Or React Element to be shown after the input */
  suffix: PropTypes.node,

  /** Indicator for form error state  */
  error: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Additional styles */
  style: PropTypes.shape()
};
export default NumberPicker;