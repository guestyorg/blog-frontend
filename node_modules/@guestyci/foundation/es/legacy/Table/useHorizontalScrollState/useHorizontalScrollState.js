import { useEffect, useMemo, useState } from 'react';
import throttle from 'lodash/throttle';

const useHorizontalScrollState = ([shouldUseHorizontalScrollState, ref]) => {
  const [showStart, setShowStart] = useState(false);
  const [showEnd, setShowEnd] = useState(false);
  const onScroll = useMemo(() => {
    const throttled = throttle(({
      scrollLeft,
      scrollWidth,
      offsetWidth
    }) => {
      setShowStart(scrollLeft > 0);
      setShowEnd(scrollLeft + offsetWidth < scrollWidth);
    }, 100);

    const handler = e => {
      const {
        offsetHeight = 0,
        scrollHeight = 0,
        scrollWidth = 0,
        scrollLeft = 0,
        scrollTop = 0,
        offsetWidth = 0
      } = e.target;
      throttled({
        scrollTop,
        scrollLeft,
        scrollWidth,
        scrollHeight,
        offsetWidth,
        offsetHeight
      });
    };

    return shouldUseHorizontalScrollState ? handler : null;
  }, [shouldUseHorizontalScrollState, setShowStart, setShowEnd]);
  useEffect(() => {
    if (ref?.current && shouldUseHorizontalScrollState && typeof onScroll === 'function') onScroll({
      target: ref.current
    });
  }, [shouldUseHorizontalScrollState, ref, onScroll, ref?.current?.scrollWidth]);
  return [showStart, showEnd, onScroll];
};

export default useHorizontalScrollState;