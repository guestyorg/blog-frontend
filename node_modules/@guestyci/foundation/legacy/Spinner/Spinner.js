"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _commonUtility = require("../../utils/commonUtility");

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Spinner = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(Spinner, _React$Component);

  var _super = _createSuper(Spinner);

  function Spinner(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Spinner);
    _this = _super.call(this, props);

    _this.setStrokeWidth = function (size, strokeWidth) {
      var sWidth = strokeWidth;

      if (size > 64) {
        sWidth = 8;
      } else if (size > 32) {
        sWidth = 6;
      }

      return sWidth;
    };

    var _size = props.small ? 30 : props.size || 60;

    _this.state = {
      size: _size,
      id: props.id || (0, _commonUtility.uuid)(),
      strokeWidth: _this.setStrokeWidth(props.size, props.strokeWidth)
    };
    return _this;
  }

  (0, _createClass2["default"])(Spinner, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          color = _this$props.color,
          className = _this$props.className,
          style = _this$props.style,
          svgClassName = _this$props.svgClassName,
          svgStyle = _this$props.svgStyle;
      var _this$state = this.state,
          size = _this$state.size,
          id = _this$state.id,
          strokeWidth = _this$state.strokeWidth;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('flex-center w-fill relative', className),
        style: style,
        id: id,
        "data-qa": "spinner"
      }, /*#__PURE__*/_react["default"].createElement("svg", {
        className: (0, _classnames["default"])('spinner', 'absolute', (0, _defineProperty2["default"])({}, "height-".concat(size, " width-").concat(size), size), svgClassName),
        viewBox: "25 25 50 50",
        style: svgStyle
      }, /*#__PURE__*/_react["default"].createElement("circle", {
        className: (0, _classnames["default"])('path', "stroke-".concat(color)),
        cx: "50",
        cy: "50",
        r: "20",
        fill: "none",
        strokeWidth: strokeWidth,
        strokeMiterlimit: "10"
      })));
    }
  }]);
  return Spinner;
}(_react["default"].Component);

Spinner.defaultProps = {
  color: 'blue',
  size: 32,
  small: false,
  id: undefined,
  className: '',
  style: {},
  svgClassName: '',
  svgStyle: {},
  strokeWidth: 4
};
Spinner.propTypes = {
  color: _propTypes["default"].string,
  size: _propTypes["default"].number,
  small: _propTypes["default"].bool,
  id: _propTypes["default"].string,
  className: _propTypes["default"].string,
  style: _propTypes["default"].shape(),
  strokeWidth: _propTypes["default"].number,
  svgClassName: _propTypes["default"].string,
  svgStyle: _propTypes["default"].shape()
};
var _default = Spinner;
exports["default"] = _default;