import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import debounce from 'lodash/debounce';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import useHover from "../useHover";
import useFocus from "../useFocus";
import useComposeRefs from "../useComposeRefs";
import Row from "../Layout/Row";
import Input from "../Input";
import TextField from "../TextField";
import Dropdown, { Option } from "../Dropdown";
import InputActions from "../Input/InputActions";
import InputStyles from "../Input/styles";
import CountryFlagButton from "./CountryFlagButton";
import PhonePickerDropdownItem from "./PhonePickerDropdownItem";
import countries from "./countries";
import * as flags from "./flags";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      height: '46px',
      borderRadius: '2px',
      border: "solid 1px ".concat(theme.palette.border),
      color: "".concat(theme.palette.text.input, " !important"),
      transition: theme.transition.create(),
      '&:hover': InputStyles.hover(theme)
    },
    focused: InputStyles.focused(theme),
    disabled: InputStyles.disabled(theme),
    error: InputStyles.error(theme),
    dialCodeInput: {
      borderStyle: 'none',
      display: 'flex',
      alignItems: 'center',
      '&:hover': {
        borderStyle: 'none'
      },
      paddingLeft: theme.spacer(2),
      paddingRight: theme.spacer(1)
    },
    numberInput: {
      borderStyle: 'none',
      '&:hover': {
        borderStyle: 'none'
      },
      height: '100%',
      paddingLeft: '0px'
    },
    dropdown: {
      width: '45px'
    }
  };
});
var inputJssOverride = {
  input: {
    height: 'unset',
    width: '100%',
    border: 'none',
    backgroundColor: 'transparent'
  },
  focused: {
    borderStyle: 'none',
    boxShadow: 'none'
  }
};
var defaultCountry = countries.find(function (_ref) {
  var name = _ref.name;
  return name === 'United States';
});
var ALLOWED_SYMBOLS = '0-9-+*#';
export var getCleanNumber = function getCleanNumber(number, dialCode) {
  return number.replace(new RegExp("^\\+(".concat(dialCode, ")|[^").concat(ALLOWED_SYMBOLS, "]"), 'g'), '');
};
export var extractCountry = function extractCountry(number) {
  if (!number.startsWith('+')) {
    return;
  }

  var country;
  var countryWithAreaCode = countries.find(function (c) {
    var dialCode = c.dialCode,
        areaCodes = c.areaCodes;

    if (number.startsWith("+".concat(dialCode))) {
      country = c;
      var cleanNumber = getCleanNumber(number, dialCode);
      return areaCodes === null || areaCodes === void 0 ? void 0 : areaCodes.some(function (code) {
        return cleanNumber.startsWith(code);
      });
    }

    return false;
  });
  return countryWithAreaCode || country;
};
var PhonePicker = React.forwardRef(function PhonePicker(_ref2, ref) {
  var _ref2$name = _ref2.name,
      name = _ref2$name === void 0 ? '' : _ref2$name,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? '' : _ref2$value,
      _ref2$onChange = _ref2.onChange,
      onChange = _ref2$onChange === void 0 ? noop : _ref2$onChange,
      _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className,
      _ref2$disabled = _ref2.disabled,
      disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
      _ref2$error = _ref2.error,
      error = _ref2$error === void 0 ? null : _ref2$error,
      _ref2$withActions = _ref2.withActions,
      withActions = _ref2$withActions === void 0 ? true : _ref2$withActions,
      _ref2$primary = _ref2.primary,
      primary = _ref2$primary === void 0 ? false : _ref2$primary,
      _ref2$onRemove = _ref2.onRemove,
      onRemove = _ref2$onRemove === void 0 ? noop : _ref2$onRemove,
      _ref2$onStar = _ref2.onStar,
      onStar = _ref2$onStar === void 0 ? noop : _ref2$onStar,
      _ref2$style = _ref2.style,
      style = _ref2$style === void 0 ? {} : _ref2$style,
      _ref2$jss = _ref2.jss,
      jss = _ref2$jss === void 0 ? {} : _ref2$jss,
      props = _objectWithoutProperties(_ref2, ["name", "value", "onChange", "className", "disabled", "error", "withActions", "primary", "onRemove", "onStar", "style", "jss"]);

  var classes = useStyles({
    jss: jss
  });

  var _useFocus = useFocus(),
      _useFocus2 = _slicedToArray(_useFocus, 2),
      focused = _useFocus2[0],
      focusRef = _useFocus2[1];

  var _useHover = useHover(),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var _useState = useState(defaultCountry),
      _useState2 = _slicedToArray(_useState, 2),
      country = _useState2[0],
      setCountry = _useState2[1];

  var _useState3 = useState(countries),
      _useState4 = _slicedToArray(_useState3, 2),
      filteredCounties = _useState4[0],
      setFilteredCountries = _useState4[1];

  var containerRef = useComposeRefs(hoverRef, ref);

  var onDropdownChange = function onDropdownChange(e) {
    var c = e.target.value;
    setCountry(c);
    setFilteredCountries(countries);
  };

  var onDropdownSearch = debounce(function (e) {
    var search = e.target.value;
    var filtered = countries.filter(function (_ref3) {
      var countryName = _ref3.name;
      return countryName.toLowerCase().includes(search.toLowerCase());
    });
    setFilteredCountries(filtered);
  }, 100);

  var manipulateEvent = function manipulateEvent(event, newValue) {
    event.persist();
    Object.defineProperty(event, 'target', {
      value: {
        value: newValue,
        name: name
      }
    });
    return event;
  };

  var onInputChange = function onInputChange(e) {
    var inputValue = e.target.value;

    if (inputValue === '') {
      onChange(e);
      return;
    }

    var regex = new RegExp("^[".concat(ALLOWED_SYMBOLS, "]+$"));

    if (!regex.test(inputValue)) {
      return;
    }

    var newValue = inputValue.startsWith('+') ? inputValue : "+".concat(country.dialCode, " ").concat(inputValue);
    onChange(manipulateEvent(e, newValue));
  };

  var inputNumber = useMemo(function () {
    var c = extractCountry(value);

    if (!c) {
      return value;
    }

    setCountry(c);
    return getCleanNumber(value, c.dialCode);
  }, [value]);
  return /*#__PURE__*/React.createElement(Row, _extends({}, props, {
    ref: containerRef,
    className: cn(classes.root, _defineProperty({}, classes.focused, focused), _defineProperty({}, classes.disabled, disabled), _defineProperty({}, classes.error, error), className),
    style: style
  }), /*#__PURE__*/React.createElement(Dropdown, {
    value: country,
    disabled: disabled,
    className: classes.dropdown,
    input: /*#__PURE__*/React.createElement(CountryFlagButton, {
      ref: focusRef,
      disabled: disabled,
      CountryIcon: flags[country.iso2.toUpperCase()]
    }),
    onChange: onDropdownChange,
    onSearchQueryChange: onDropdownSearch,
    searchable: true
  }, filteredCounties.map(function (c) {
    return /*#__PURE__*/React.createElement(Option, {
      value: c,
      key: c.iso2
    }, /*#__PURE__*/React.createElement(PhonePickerDropdownItem, {
      country: c
    }));
  })), /*#__PURE__*/React.createElement(TextField, {
    className: classes.dialCodeInput
  }, "+".concat(country.dialCode)), /*#__PURE__*/React.createElement(Input, {
    value: inputNumber,
    className: classes.numberInput,
    jss: inputJssOverride,
    onChange: onInputChange,
    disabled: disabled,
    name: name,
    suffix: withActions && /*#__PURE__*/React.createElement(InputActions, {
      disabled: disabled,
      show: isHovering,
      primary: primary,
      onRemove: onRemove,
      onStar: onStar,
      name: name
    })
  }));
});
PhonePicker.propTypes = {
  /** Input level name property */
  name: PropTypes.string,

  /** value for controlled component */
  value: PropTypes.string,

  /** Cb for input change - params: {value: String, isValid: Boolean}, id|name {String | number} */
  onChange: PropTypes.func,

  /** Additional class to the top component level */
  className: PropTypes.string,

  /** Additional style to the top component level */
  style: PropTypes.shape(),

  /** Boolean disable/enable component */
  disabled: PropTypes.bool,

  /**  Cb for clicking on the trash icon */
  onRemove: PropTypes.func,

  /** Cb for clicking on the star (set primary) icon */
  onStar: PropTypes.func,

  /** Indicator whether to show the star/trash actions */
  withActions: PropTypes.bool,

  /** Boolean setting the email as primary */
  primary: PropTypes.bool
};
export default PhonePicker;