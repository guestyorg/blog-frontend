import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useRef, useState, useEffect } from 'react';
import isObject from 'lodash/isObject';

function getDelay(delay, type) {
  if (!delay) {
    return;
  }

  if (isObject(delay)) {
    return delay[type];
  }

  return delay;
}
/**
 * Use hover hook
 * Options:
 * @param delay = number or object { enter, exit }
 * @return [isHovering, hoverRef]
 */


function useHover() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      delay = _ref.delay;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      isHovering = _useState2[0],
      setIsHovering = _useState2[1];

  var hoverRef = useRef(null);
  var timeout = useRef({});

  var onHoverLeave = function onHoverLeave() {
    var d = getDelay(delay, 'exit');

    if (d) {
      clearTimeout(timeout.current.enter);
      timeout.current.exit = setTimeout(function () {
        return setIsHovering(false);
      }, d);
    } else {
      setIsHovering(false);
    }
  };

  var onHoverEnter = function onHoverEnter() {
    var d = getDelay(delay, 'enter');

    if (d) {
      clearTimeout(timeout.current.exit);
      timeout.current.enter = setTimeout(function () {
        return setIsHovering(true);
      }, d);
    } else {
      setIsHovering(true);
    }
  };

  useEffect(function () {
    var node = hoverRef.current;

    if (node) {
      node.addEventListener('mouseover', onHoverEnter);
      node.addEventListener('mouseleave', onHoverLeave);
      node.addEventListener('blur', onHoverLeave);
      return function () {
        node.removeEventListener('mouseover', onHoverEnter);
        node.removeEventListener('mouseleave', onHoverLeave);
        node.removeEventListener('blur', onHoverLeave);
      };
    }
  }, [hoverRef.current]);
  return [isHovering, hoverRef];
}

export default useHover;