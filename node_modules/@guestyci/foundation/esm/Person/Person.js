import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import TextField from "../TextField";
import Row from "../Layout/Row";
import Avatar from "../Avatar";
import createStyles from "../createStyles";
import Col from "../Layout/Col";
import ReturningGuestBadge from "./ReturningGuestBadge";
import { nameToInitials } from "../utils";
export var useStyles = createStyles(function (theme) {
  return {
    root: {},
    description: {
      color: theme.palette.description
    },
    badge: {
      position: 'absolute',
      bottom: -2,
      right: -6
    },
    initials: {
      backgroundColor: theme.palette.secondary["default"]
    },
    initialsText: {
      color: 'white',
      textTransform: 'uppercase'
    }
  };
}, {
  name: 'Person'
});
var Person = React.forwardRef(function Person(_ref, ref) {
  var _ref$img = _ref.img,
      img = _ref$img === void 0 ? '' : _ref$img,
      name = _ref.name,
      _ref$description = _ref.description,
      description = _ref$description === void 0 ? '' : _ref$description,
      _ref$returningGuest = _ref.returningGuest,
      returningGuest = _ref$returningGuest === void 0 ? false : _ref$returningGuest,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      props = _objectWithoutProperties(_ref, ["img", "name", "description", "returningGuest", "className", "style", "jss"]);

  var classes = useStyles({
    jss: jss
  });
  var initials = useMemo(function () {
    return img ? '' : nameToInitials(name);
  }, [img]);
  return /*#__PURE__*/React.createElement(Row, _extends({}, props, {
    style: style,
    className: cn(classes.root, className),
    ref: ref,
    spacing: 2,
    fullWidth: true,
    justify: "start",
    align: "center"
  }), /*#__PURE__*/React.createElement(Avatar, {
    src: img,
    className: cn(_defineProperty({}, classes.initials, initials)),
    badge: returningGuest ? /*#__PURE__*/React.createElement(ReturningGuestBadge, {
      className: classes.badge
    }) : null
  }, initials && /*#__PURE__*/React.createElement(TextField, {
    className: classes.initialsText,
    variant: "h3"
  }, initials)), /*#__PURE__*/React.createElement(Col, {
    justify: "center",
    spacing: 1
  }, /*#__PURE__*/React.createElement(TextField, null, name), description && /*#__PURE__*/React.createElement(TextField, {
    variant: "h5",
    className: classes.description
  }, description)));
});
Person.propTypes = {
  /** Image url for person avatar */
  img: PropTypes.string,

  /** Person name */
  name: PropTypes.node.isRequired,

  /** Subtitle for person */
  description: PropTypes.node,

  /** Additional class for person */
  className: PropTypes.string,

  /** Additional style for person */
  style: PropTypes.shape(),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Indicator for returning guest badge */
  returningGuest: PropTypes.bool
};
Person.displayName = 'Person';
export default Person;