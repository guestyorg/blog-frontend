{"ast":null,"code":"var _jsxFileName = \"/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/screens/UserListScreen/UserListScreen.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\"; // import { withStyles, makeStyles } from \"@material-ui/core/styles\";\n// import Table from \"@material-ui/core/Table\";\n// import TableBody from \"@material-ui/core/TableBody\";\n// import TableCell from \"@material-ui/core/TableCell\";\n// import TableContainer from \"@material-ui/core/TableContainer\";\n// import TableHead from \"@material-ui/core/TableHead\";\n// import TableRow from \"@material-ui/core/TableRow\";\n// import Paper from \"@material-ui/core/Paper\";\n// import CssBaseline from \"@material-ui/core/CssBaseline\";\n// import Container from \"@material-ui/core/Container\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteUser, listUsers } from \"./../../actions/userActions\";\nimport { USER_DETAILS_RESET } from \"./../../constants/userConstants\";\nimport { useEffect } from \"react\"; // import DeleteIcon from \"@material-ui/icons/Delete\";\n// import EditIcon from \"@material-ui/icons/Edit\";\n// import \"./UserListScreen.scss\";\n// import { CircularProgress } from \"@material-ui/core\";\n// import Alert from \"@material-ui/lab/Alert\";\n// import  IconButton from '@material-ui/core/IconButton';\n// const StyledTableCell = withStyles((theme) => ({\n//   head: {\n//     backgroundColor: theme.palette.common.black,\n//     color: theme.palette.common.white,\n//   },\n//   body: {\n//     fontSize: 14,\n//   },\n// }))(TableCell);\n// const StyledTableRow = withStyles((theme) => ({\n//   root: {\n//     \"&:nth-of-type(odd)\": {\n//       backgroundColor: theme.palette.action.hover,\n//     },\n//   },\n// }))(TableRow);\n// const useStyles = makeStyles({\n//   table: {\n//     minWidth: 700,\n//   },\n// });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserListScreen(props) {\n  _s();\n\n  const userList = useSelector(state => state.userList);\n  const {\n    loading,\n    error,\n    users\n  } = userList;\n  console.log(\"users:\", users);\n  const userDelete = useSelector(state => state.userDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete\n  } = userDelete;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(listUsers());\n    dispatch({\n      type: USER_DETAILS_RESET\n    });\n  }, [dispatch, successDelete]);\n\n  const deleteHandler = user => {\n    console.log(\"user:\", user);\n\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deleteUser(user._id));\n    }\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"h2\", {\n    \"data-qa\": \"user-list-screen\",\n    children: \"hello \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this) // <React.Fragment>\n  //   <CssBaseline />\n  //   {loadingDelete && <CircularProgress />}\n  //   {errorDelete && <Alert severity=\"error\">{errorDelete}</Alert>}\n  //   {successDelete && (\n  //     <Alert severity=\"success\">User Deleted Successfully</Alert>\n  //   )}\n  //   <Container maxWidth=\"md\">\n  //     {loading ? (\n  //       <CircularProgress />\n  //     ) : error ? (\n  //       <Alert severity=\"error\">{error}</Alert>\n  //     ) : (\n  //       <>\n  //         {\" \"}\n  //         <TableContainer component={Paper}>\n  //           <Table className={classes.table} aria-label=\"customized table\">\n  //             <TableHead>\n  //               <TableRow>\n  //                 <StyledTableCell>Name</StyledTableCell>\n  //                 <StyledTableCell align=\"right\">Email</StyledTableCell>\n  //                 <StyledTableCell align=\"right\">Date</StyledTableCell>\n  //                 <StyledTableCell align=\"right\">Edit</StyledTableCell>\n  //                 <StyledTableCell align=\"right\">Delete</StyledTableCell>\n  //               </TableRow>\n  //             </TableHead>\n  //             <TableBody>\n  //               {users &&\n  //                 users.map((user) => (\n  //                   <StyledTableRow key={user.name}>\n  //                     <StyledTableCell component=\"th\" scope=\"row\">\n  //                       {user.name}\n  //                     </StyledTableCell>\n  //                     <StyledTableCell align=\"right\">\n  //                       {user.email}\n  //                     </StyledTableCell>\n  //                     <StyledTableCell align=\"right\">\n  //                       {user.createdAt.substring(0, 10)}\n  //                     </StyledTableCell>\n  //                     <StyledTableCell align=\"right\">\n  //                       <IconButton color=\"primary\" aria-label=\"delete\">\n  //                         <EditIcon\n  //                           className=\"pointer\"\n  //                           onClick={() => {\n  //                             props.history.push(`/user/${user._id}/edit`);\n  //                           }}\n  //                         />{\" \"}\n  //                       </IconButton>\n  //                     </StyledTableCell>\n  //                     <StyledTableCell align=\"right\">\n  //                       <IconButton color=\"secondary\" aria-label=\"delete\">\n  //                         <DeleteIcon\n  //                           className=\"pointer\"\n  //                           onClick={() => deleteHandler(user)}\n  //                         />{\" \"}\n  //                       </IconButton>\n  //                     </StyledTableCell>\n  //                   </StyledTableRow>\n  //                 ))}\n  //             </TableBody>\n  //           </Table>\n  //         </TableContainer>\n  //       </>\n  //     )}\n  //   </Container>\n  // </React.Fragment>\n  ;\n} // import React, { useState, useEffect, useCallback } from 'react';\n// import Section from '@guestyci/foundation/legacy/Section';\n// import AddButton from '@guestyci/foundation/AddButton';\n// import Table, { Column } from '@guestyci/foundation/legacy/Table';\n// import {\n//   getEmptySelection,\n//   getSelectionOnAction,\n// } from '@guestyci/foundation/legacy/Table/tableUtility';\n// import Cell from '@guestyci/foundation/legacy/Table/Cell';\n// import HeaderCell from '@guestyci/foundation/legacy/Table/HeaderCell';\n// import FlatButton from '@guestyci/foundation/legacy/FlatButton';\n// import { sleep } from '@guestyci/foundation/utils/commonUtility';\n// import orderBy from 'lodash/orderBy';\n// import DateCell from '@guestyci/foundation/legacy/Table/DateCell';\n// import DateTimeCell from '@guestyci/foundation/legacy/Table/DateTimeCell';\n// // import data from '../../../__mocks__/tableData';\n// import Resource from '@guestyci/agni';\n// import TextField from '@guestyci/foundation/TextField';\n// import { Row } from '@guestyci/foundation/Layout';\n// import { ReactComponent as BtnTrash } from '@guestyci/foundation/icons/BtnTrash.svg';\n// import Icon from '@guestyci/foundation/Icon';\n// import axios from 'axios';\n// import { after } from 'lodash';\n// const UserListScreen = (props) => {\n//   // console.log('props:', props)\n//   const { api, env, config } = Resource.create();\n//   const [rawData, setRawData] = useState();\n//   const [data, setData] = useState();\n//   let counter = 1;\n//   const arr = [];\n//   let res1;\n//   let users;\n//   // infint-scroll-table\n//   const width = 200;\n//   const pageSize = 25;\n//   const scrollOffset = data ? data.length : 100;\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [skip, setSkip] = useState(0);\n//   const handleLoadMore = useCallback(async (newSkip, newPageSize) => {\n//     console.log('handleLoadMore');\n//     const addition = semiInfiniteData.slice(newSkip, newSkip + newPageSize);\n//     // console.log('newPageSize:', newPageSize)\n//     // console.log('newSkip:', newSkip)\n//     // console.log('addition:', addition)\n//     console.log('data: ', data);\n//     setIsLoading(true);\n//     await sleep(400);\n//     setSkip(newSkip);\n//     setData((prev) => [...(prev || []), ...addition]);\n//     setIsLoading(false);\n//   }, []);\n//   // sortable table\n//   const [sortBy, setSortBy] = useState();\n//   const [userDeleted, setUserDeleted] = useState(false);\n//   const handleSort = useCallback((newSortBy) => {\n//     console.log('handleSort');\n//     setSortBy(newSortBy);\n//     const minusPrefix = newSortBy?.startsWith('-');\n//     console.log('minusPrefix:', minusPrefix);\n//     const direction = minusPrefix ? 'desc' : 'asc';\n//     console.log('direction:', direction);\n//     const id = minusPrefix ? newSortBy.substring(1) : sortBy;\n//     console.log('id:', id);\n//     setData(orderBy(rawData, `${id}.date`, direction));\n//     console.log('data:', data);\n//   }, []);\n//   useEffect(() => {\n//     console.log('useEffect');\n//            dispatch((listUsers));\n//       // try {\n//       //   for (let i = 0; i < users.length; i++) {\n//       //     //  console.log(\"users[i]: \", users[i] );\n//       //     const arrUser = Object.entries(users[i]);\n//       //     //  console.log('arrUser:', arrUser)\n//       //     //  firstName: {\n//       //     //   children: 'John',\n//       //     // },\n//       //     const bigObj = {};\n//       //     for (let j = 0; j < arrUser.length; j++) {\n//       //       const obj = {};\n//       //       // console.log(\"arrUser[j]: \",arrUser[j]);\n//       //       // console.log(\"arrUser[0]: \",arrUser[j][0]);\n//       //       // console.log(\"arrUser[1]: \",arrUser[j][1]);\n//       //       obj.children = arrUser[j][1];\n//       //       // console.log('obj:', obj)\n//       //       if (arrUser[j][0] === '_id') {\n//       //         bigObj.id = obj;\n//       //         bigObj._id = arrUser[j][1];\n//       //       } else {\n//       //         bigObj[arrUser[j][0]] = obj;\n//       //       }\n//       //       // console.log('bigObj:', bigObj)\n//       //       // arr.push( `${arrUser[j][0]}: {children: '${arrUser[j][1]}',}`)\n//       //     }\n//       //     // arr.push({gilad:1,...users[i]})\n//       //     arr.push({ ...bigObj });\n//       //     // arr.push({ _id: `${counter}`, ...bigObj });\n//       //     counter++;\n//       //   }\n//       //   console.log('arr: ', arr);\n//       //   //  setData(response.data.results)\n//       //   setData(arr);\n//       //   // const response1= await axios.get(\"https://api.guesty.com/api/v2/guests\",  {\n//       //   //   auth: {\n//       //   //     username: \"88ed11eb4b951e3e239bdfb11b4d6a0a\",\n//       //   //     password: \"f1f74044be21d90c5d0880162994e236yy\"\n//       //   //   }\n//       //   // }\n//       //   // );\n//       //   //  res1= response1.data.results\n//       //   //  console.log('res1:', res1)\n//       //   // handleLoadMore(0, pageSize);\n//       // } catch (error) {\n//       //   console.log('error:', error);\n//       // }\n//   }, []);\n//   const semiInfiniteData = [...Array(300)]\n//     .reduce((acc) => acc.concat(data), [])\n//     .map((e, index) => ({\n//       ...e,\n//       id: { children: index + 1 },\n//       _id: index + 1,\n//     }));\n//   console.log('semiInfiniteData:', semiInfiniteData);\n//   // useEffect(() => {\n//   //   console.log('handleLoadMore')\n//   //   handleLoadMore(0, pageSize);\n//   // }, []);\n//   // multi-select-table\n//   const [rowSelection, setRowSelection] = useState(getEmptySelection());\n//   const { allSelected, items, exceptItems } = rowSelection;\n//   // console.log('exceptItems:', exceptItems);\n//   // console.log('items:', items);\n//   // console.log('allSelected:', allSelected);\n//   const selectionSize =\n//     allSelected && arr.length > 0 ? arr.length - exceptItems.size : items.size;\n//   const handleRowCheckChange = (action) => {\n//     console.log('handleRowCheckChange');\n//     // console.log('action:', action);\n//     const selection = getSelectionOnAction({ rowSelection, action, data });\n//     // console.log('selection:', selection);\n//     setRowSelection(selection);\n//   };\n//   const deleteUser = async (userId) => {\n//     console.log('deleteUser');\n//     try {\n//       const response = await api.delete(`/users/${userId}`); // will go to `${config.MAILER_URL}/users`\n//       console.log('response:', response);\n//       // const data = response.data;\n//       // addToast.success('user was delete')\n//       setUserDeleted(true);\n//       // props.history.push('/');\n//       handleClearSelection();\n//     } catch (error) {\n//       console.log('error:', error);\n//       // addToast.danger(\"error deleting the user\")\n//     }\n//   };\n//   const handleDelete = () => {\n//     console.log(rowSelection.items);\n//     if (window.confirm('Are you sure?')) {\n//       rowSelection.items.forEach((item) => deleteUser(item));\n//     }\n//   };\n//   const handleClearSelection = () => {\n//     console.log('handleClearSelection');\n//     setRowSelection(getEmptySelection());\n//   };\n//   const handleRowClick = (...args) => {\n//     console.log('handleRowClick', ...args);\n//     const rowData = { ...args };\n//     console.log('rowData:', rowData);\n//     console.log('rowData:', rowData[0].id.children);\n//     const userId = rowData[0].id.children;\n//     // console.log('args:', args.id)\n//     // props.history.push(\"www.google.com\")\n//     props.history.push(`/user/edit/${userId}`);\n//   };\n//   return (\n//     <>\n//       {data && (\n//         <Section col className=\"bg-white\">\n//           <Section gutter={2}>\n//             <AddButton\n//               onClick={() => props.history.push(`/user/add`)}\n//               text=\"Add User\"\n//             />\n//           </Section>\n//           <Row spacing={4}>\n//             <FlatButton\n//               onClick={handleClearSelection}\n//               disabled={!selectionSize}\n//             >\n//               {`Unselect ${selectionSize || ''}`}\n//             </FlatButton>\n//             {selectionSize > 0 && (\n//               <>\n//                 <FlatButton type=\"error\" onClick={handleDelete}>\n//                   <Row align=\"center\" spacing={2}>\n//                     <Icon svg={BtnTrash} />\n//                     <TextField> Delete</TextField>\n//                   </Row>\n//                 </FlatButton>\n//               </>\n//             )}\n//           </Row>\n//           {console.log('rowSelection: ', rowSelection)}\n//           <Table\n//             multiselect\n//             height={500}\n//             data={data}\n//             isLoading={isLoading}\n//             pageSize={pageSize}\n//             rowSelection={rowSelection}\n//             onCheckedRowsChange={handleRowCheckChange}\n//             onRowClick={handleRowClick}\n//             infiniteScrollOptions={{\n//               skip,\n//               scrollOffset,\n//               onLoadMore: handleLoadMore,\n//               totalCount: semiInfiniteData.length,\n//             }}\n//             sortBy={sortBy}\n//             onSort={handleSort}\n//           >\n//             <Column align=\"left\" dataKey=\"id\" width={width} sortable>\n//               <HeaderCell id=\"id\">Id</HeaderCell>\n//               <Cell />\n//             </Column>\n//             <Column dataKey=\"firstName\" width={width}>\n//               <HeaderCell id=\"firstname\">First name</HeaderCell>\n//               <Cell />\n//             </Column>\n//             <Column dataKey=\"lastName\" width={width}>\n//               <HeaderCell id=\"lastname\">Last name</HeaderCell>\n//               <Cell />\n//             </Column>\n//             {/* <Column dataKey=\"email\" width={width}>\n//               <HeaderCell id=\"email\">Email</HeaderCell>\n//               <Cell />\n//             </Column> */}\n//             {/* <Column dataKey=\"periodStartDate\" width={width} sortable>\n//               <HeaderCell id=\"startdate\">Date Cell</HeaderCell>\n//               <DateCell />\n//             </Column>\n//             <Column dataKey=\"periodEndDate\" width={width} sortable>\n//               <HeaderCell id=\"enddate\">DateTime Cell</HeaderCell>\n//               <DateTimeCell />\n//             </Column> */}\n//           </Table>\n//         </Section>\n//       )}\n//     </>\n//   );\n// };\n// export default UserListScreen;\n\n_s(UserListScreen, \"yBitUMf8jfmqAG/mVK5hl5eFr4Q=\", true, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = UserListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserListScreen\");","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/screens/UserListScreen/UserListScreen.js"],"names":["React","useDispatch","useSelector","deleteUser","listUsers","USER_DETAILS_RESET","useEffect","UserListScreen","props","userList","state","loading","error","users","console","log","userDelete","loadingDelete","errorDelete","success","successDelete","dispatch","type","deleteHandler","user","window","confirm","_id","classes","useStyles"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,6BAAtC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,SAAT,QAA0B,OAA1B,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC5C,QAAMC,QAAQ,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACD,QAAlB,CAA5B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA4BJ,QAAlC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AAEA,QAAMG,UAAU,GAAGd,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACM,UAAlB,CAA9B;AACA,QAAM;AACJL,IAAAA,OAAO,EAAEM,aADL;AAEJL,IAAAA,KAAK,EAAEM,WAFH;AAGJC,IAAAA,OAAO,EAAEC;AAHL,MAIFJ,UAJJ;AAMA,QAAMK,QAAQ,GAAGpB,WAAW,EAA5B;AAEAK,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACjB,SAAS,EAAV,CAAR;AACAiB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEjB;AADC,KAAD,CAAR;AAGD,GALQ,EAKN,CAACgB,QAAD,EAAWD,aAAX,CALM,CAAT;;AAOA,QAAMG,aAAa,GAAIC,IAAD,IAAU;AAC9BV,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,IAArB;;AACA,QAAIC,MAAM,CAACC,OAAP,CAAe,eAAf,CAAJ,EAAqC;AACnCL,MAAAA,QAAQ,CAAClB,UAAU,CAACqB,IAAI,CAACG,GAAN,CAAX,CAAR;AACD;AACF,GALD;;AAOA,QAAMC,OAAO,GAAGC,SAAS,EAAzB;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAEE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArEF;AAuED,C,CAmpbwBtB,c;UACLL,W,EAIEA,W,EAOFD,W;;;KAZKM,c","sourcesContent":["import React from \"react\";\n// import { withStyles, makeStyles } from \"@material-ui/core/styles\";\n// import Table from \"@material-ui/core/Table\";\n// import TableBody from \"@material-ui/core/TableBody\";\n// import TableCell from \"@material-ui/core/TableCell\";\n// import TableContainer from \"@material-ui/core/TableContainer\";\n// import TableHead from \"@material-ui/core/TableHead\";\n// import TableRow from \"@material-ui/core/TableRow\";\n// import Paper from \"@material-ui/core/Paper\";\n\n// import CssBaseline from \"@material-ui/core/CssBaseline\";\n// import Container from \"@material-ui/core/Container\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteUser, listUsers } from \"./../../actions/userActions\";\nimport { USER_DETAILS_RESET } from \"./../../constants/userConstants\";\nimport { useEffect } from \"react\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import EditIcon from \"@material-ui/icons/Edit\";\n\n// import \"./UserListScreen.scss\";\n// import { CircularProgress } from \"@material-ui/core\";\n// import Alert from \"@material-ui/lab/Alert\";\n// import  IconButton from '@material-ui/core/IconButton';\n// const StyledTableCell = withStyles((theme) => ({\n//   head: {\n//     backgroundColor: theme.palette.common.black,\n//     color: theme.palette.common.white,\n//   },\n//   body: {\n//     fontSize: 14,\n//   },\n// }))(TableCell);\n\n// const StyledTableRow = withStyles((theme) => ({\n//   root: {\n//     \"&:nth-of-type(odd)\": {\n//       backgroundColor: theme.palette.action.hover,\n//     },\n//   },\n// }))(TableRow);\n\n// const useStyles = makeStyles({\n//   table: {\n//     minWidth: 700,\n//   },\n// });\n\nexport default function UserListScreen(props) {\n  const userList = useSelector((state) => state.userList);\n  const { loading, error, users } = userList;\n  console.log(\"users:\", users);\n\n  const userDelete = useSelector((state) => state.userDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete,\n  } = userDelete;\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(listUsers());\n    dispatch({\n      type: USER_DETAILS_RESET,\n    });\n  }, [dispatch, successDelete]);\n\n  const deleteHandler = (user) => {\n    console.log(\"user:\", user);\n    if (window.confirm(\"Are you sure?\")) {\n      dispatch(deleteUser(user._id));\n    }\n  };\n\n  const classes = useStyles();\n\n  return (\n    <h2>hello </h2>\n    // <React.Fragment>\n    //   <CssBaseline />\n    //   {loadingDelete && <CircularProgress />}\n    //   {errorDelete && <Alert severity=\"error\">{errorDelete}</Alert>}\n    //   {successDelete && (\n    //     <Alert severity=\"success\">User Deleted Successfully</Alert>\n    //   )}\n\n    //   <Container maxWidth=\"md\">\n    //     {loading ? (\n    //       <CircularProgress />\n    //     ) : error ? (\n    //       <Alert severity=\"error\">{error}</Alert>\n    //     ) : (\n    //       <>\n    //         {\" \"}\n    //         <TableContainer component={Paper}>\n    //           <Table className={classes.table} aria-label=\"customized table\">\n    //             <TableHead>\n    //               <TableRow>\n    //                 <StyledTableCell>Name</StyledTableCell>\n    //                 <StyledTableCell align=\"right\">Email</StyledTableCell>\n    //                 <StyledTableCell align=\"right\">Date</StyledTableCell>\n    //                 <StyledTableCell align=\"right\">Edit</StyledTableCell>\n    //                 <StyledTableCell align=\"right\">Delete</StyledTableCell>\n    //               </TableRow>\n    //             </TableHead>\n    //             <TableBody>\n    //               {users &&\n    //                 users.map((user) => (\n    //                   <StyledTableRow key={user.name}>\n    //                     <StyledTableCell component=\"th\" scope=\"row\">\n    //                       {user.name}\n    //                     </StyledTableCell>\n    //                     <StyledTableCell align=\"right\">\n    //                       {user.email}\n    //                     </StyledTableCell>\n    //                     <StyledTableCell align=\"right\">\n    //                       {user.createdAt.substring(0, 10)}\n    //                     </StyledTableCell>\n    //                     <StyledTableCell align=\"right\">\n    //                       <IconButton color=\"primary\" aria-label=\"delete\">\n    //                         <EditIcon\n    //                           className=\"pointer\"\n    //                           onClick={() => {\n    //                             props.history.push(`/user/${user._id}/edit`);\n    //                           }}\n    //                         />{\" \"}\n    //                       </IconButton>\n    //                     </StyledTableCell>\n\n    //                     <StyledTableCell align=\"right\">\n    //                       <IconButton color=\"secondary\" aria-label=\"delete\">\n    //                         <DeleteIcon\n    //                           className=\"pointer\"\n    //                           onClick={() => deleteHandler(user)}\n    //                         />{\" \"}\n    //                       </IconButton>\n    //                     </StyledTableCell>\n    //                   </StyledTableRow>\n    //                 ))}\n    //             </TableBody>\n    //           </Table>\n    //         </TableContainer>\n    //       </>\n    //     )}\n    //   </Container>\n    // </React.Fragment>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect, useCallback } from 'react';\n// import Section from '@guestyci/foundation/legacy/Section';\n// import AddButton from '@guestyci/foundation/AddButton';\n\n// import Table, { Column } from '@guestyci/foundation/legacy/Table';\n// import {\n//   getEmptySelection,\n//   getSelectionOnAction,\n// } from '@guestyci/foundation/legacy/Table/tableUtility';\n// import Cell from '@guestyci/foundation/legacy/Table/Cell';\n// import HeaderCell from '@guestyci/foundation/legacy/Table/HeaderCell';\n// import FlatButton from '@guestyci/foundation/legacy/FlatButton';\n\n// import { sleep } from '@guestyci/foundation/utils/commonUtility';\n\n// import orderBy from 'lodash/orderBy';\n\n// import DateCell from '@guestyci/foundation/legacy/Table/DateCell';\n// import DateTimeCell from '@guestyci/foundation/legacy/Table/DateTimeCell';\n\n// // import data from '../../../__mocks__/tableData';\n\n// import Resource from '@guestyci/agni';\n\n// import TextField from '@guestyci/foundation/TextField';\n// import { Row } from '@guestyci/foundation/Layout';\n// import { ReactComponent as BtnTrash } from '@guestyci/foundation/icons/BtnTrash.svg';\n// import Icon from '@guestyci/foundation/Icon';\n\n// import axios from 'axios';\n// import { after } from 'lodash';\n\n\n// const UserListScreen = (props) => {\n//   // console.log('props:', props)\n//   const { api, env, config } = Resource.create();\n//   const [rawData, setRawData] = useState();\n//   const [data, setData] = useState();\n\n//   let counter = 1;\n//   const arr = [];\n//   let res1;\n//   let users;\n\n//   // infint-scroll-table\n//   const width = 200;\n//   const pageSize = 25;\n//   const scrollOffset = data ? data.length : 100;\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [skip, setSkip] = useState(0);\n\n//   const handleLoadMore = useCallback(async (newSkip, newPageSize) => {\n//     console.log('handleLoadMore');\n\n//     const addition = semiInfiniteData.slice(newSkip, newSkip + newPageSize);\n//     // console.log('newPageSize:', newPageSize)\n//     // console.log('newSkip:', newSkip)\n//     // console.log('addition:', addition)\n//     console.log('data: ', data);\n//     setIsLoading(true);\n//     await sleep(400);\n//     setSkip(newSkip);\n//     setData((prev) => [...(prev || []), ...addition]);\n//     setIsLoading(false);\n//   }, []);\n\n//   // sortable table\n//   const [sortBy, setSortBy] = useState();\n\n//   const [userDeleted, setUserDeleted] = useState(false);\n//   const handleSort = useCallback((newSortBy) => {\n//     console.log('handleSort');\n//     setSortBy(newSortBy);\n\n//     const minusPrefix = newSortBy?.startsWith('-');\n//     console.log('minusPrefix:', minusPrefix);\n//     const direction = minusPrefix ? 'desc' : 'asc';\n//     console.log('direction:', direction);\n//     const id = minusPrefix ? newSortBy.substring(1) : sortBy;\n//     console.log('id:', id);\n\n//     setData(orderBy(rawData, `${id}.date`, direction));\n\n//     console.log('data:', data);\n//   }, []);\n\n//   useEffect(() => {\n//     console.log('useEffect');\n\n//            dispatch((listUsers));\n\n//       // try {\n\n//       //   for (let i = 0; i < users.length; i++) {\n//       //     //  console.log(\"users[i]: \", users[i] );\n\n//       //     const arrUser = Object.entries(users[i]);\n//       //     //  console.log('arrUser:', arrUser)\n\n//       //     //  firstName: {\n//       //     //   children: 'John',\n//       //     // },\n\n//       //     const bigObj = {};\n\n//       //     for (let j = 0; j < arrUser.length; j++) {\n//       //       const obj = {};\n//       //       // console.log(\"arrUser[j]: \",arrUser[j]);\n//       //       // console.log(\"arrUser[0]: \",arrUser[j][0]);\n//       //       // console.log(\"arrUser[1]: \",arrUser[j][1]);\n\n//       //       obj.children = arrUser[j][1];\n//       //       // console.log('obj:', obj)\n\n//       //       if (arrUser[j][0] === '_id') {\n//       //         bigObj.id = obj;\n\n//       //         bigObj._id = arrUser[j][1];\n//       //       } else {\n//       //         bigObj[arrUser[j][0]] = obj;\n//       //       }\n\n//       //       // console.log('bigObj:', bigObj)\n\n//       //       // arr.push( `${arrUser[j][0]}: {children: '${arrUser[j][1]}',}`)\n//       //     }\n//       //     // arr.push({gilad:1,...users[i]})\n//       //     arr.push({ ...bigObj });\n//       //     // arr.push({ _id: `${counter}`, ...bigObj });\n\n//       //     counter++;\n//       //   }\n\n//       //   console.log('arr: ', arr);\n//       //   //  setData(response.data.results)\n\n//       //   setData(arr);\n\n//       //   // const response1= await axios.get(\"https://api.guesty.com/api/v2/guests\",  {\n//       //   //   auth: {\n//       //   //     username: \"88ed11eb4b951e3e239bdfb11b4d6a0a\",\n//       //   //     password: \"f1f74044be21d90c5d0880162994e236yy\"\n//       //   //   }\n//       //   // }\n\n//       //   // );\n\n//       //   //  res1= response1.data.results\n//       //   //  console.log('res1:', res1)\n\n//       //   // handleLoadMore(0, pageSize);\n//       // } catch (error) {\n//       //   console.log('error:', error);\n//       // }\n    \n//   }, []);\n\n//   const semiInfiniteData = [...Array(300)]\n//     .reduce((acc) => acc.concat(data), [])\n//     .map((e, index) => ({\n//       ...e,\n//       id: { children: index + 1 },\n//       _id: index + 1,\n//     }));\n\n//   console.log('semiInfiniteData:', semiInfiniteData);\n\n//   // useEffect(() => {\n//   //   console.log('handleLoadMore')\n//   //   handleLoadMore(0, pageSize);\n//   // }, []);\n\n//   // multi-select-table\n//   const [rowSelection, setRowSelection] = useState(getEmptySelection());\n//   const { allSelected, items, exceptItems } = rowSelection;\n//   // console.log('exceptItems:', exceptItems);\n//   // console.log('items:', items);\n//   // console.log('allSelected:', allSelected);\n\n//   const selectionSize =\n//     allSelected && arr.length > 0 ? arr.length - exceptItems.size : items.size;\n\n//   const handleRowCheckChange = (action) => {\n//     console.log('handleRowCheckChange');\n//     // console.log('action:', action);\n\n//     const selection = getSelectionOnAction({ rowSelection, action, data });\n//     // console.log('selection:', selection);\n//     setRowSelection(selection);\n//   };\n\n//   const deleteUser = async (userId) => {\n//     console.log('deleteUser');\n//     try {\n//       const response = await api.delete(`/users/${userId}`); // will go to `${config.MAILER_URL}/users`\n//       console.log('response:', response);\n//       // const data = response.data;\n//       // addToast.success('user was delete')\n//       setUserDeleted(true);\n//       // props.history.push('/');\n\n//       handleClearSelection();\n//     } catch (error) {\n//       console.log('error:', error);\n//       // addToast.danger(\"error deleting the user\")\n//     }\n//   };\n\n//   const handleDelete = () => {\n//     console.log(rowSelection.items);\n\n//     if (window.confirm('Are you sure?')) {\n//       rowSelection.items.forEach((item) => deleteUser(item));\n//     }\n//   };\n\n//   const handleClearSelection = () => {\n//     console.log('handleClearSelection');\n//     setRowSelection(getEmptySelection());\n//   };\n\n//   const handleRowClick = (...args) => {\n//     console.log('handleRowClick', ...args);\n\n//     const rowData = { ...args };\n//     console.log('rowData:', rowData);\n//     console.log('rowData:', rowData[0].id.children);\n\n//     const userId = rowData[0].id.children;\n//     // console.log('args:', args.id)\n\n//     // props.history.push(\"www.google.com\")\n\n//     props.history.push(`/user/edit/${userId}`);\n//   };\n\n//   return (\n//     <>\n//       {data && (\n//         <Section col className=\"bg-white\">\n//           <Section gutter={2}>\n//             <AddButton\n//               onClick={() => props.history.push(`/user/add`)}\n//               text=\"Add User\"\n//             />\n//           </Section>\n\n//           <Row spacing={4}>\n//             <FlatButton\n//               onClick={handleClearSelection}\n//               disabled={!selectionSize}\n//             >\n//               {`Unselect ${selectionSize || ''}`}\n//             </FlatButton>\n\n//             {selectionSize > 0 && (\n//               <>\n//                 <FlatButton type=\"error\" onClick={handleDelete}>\n//                   <Row align=\"center\" spacing={2}>\n//                     <Icon svg={BtnTrash} />\n//                     <TextField> Delete</TextField>\n//                   </Row>\n//                 </FlatButton>\n//               </>\n//             )}\n//           </Row>\n\n//           {console.log('rowSelection: ', rowSelection)}\n//           <Table\n//             multiselect\n//             height={500}\n//             data={data}\n//             isLoading={isLoading}\n//             pageSize={pageSize}\n//             rowSelection={rowSelection}\n//             onCheckedRowsChange={handleRowCheckChange}\n//             onRowClick={handleRowClick}\n//             infiniteScrollOptions={{\n//               skip,\n//               scrollOffset,\n//               onLoadMore: handleLoadMore,\n//               totalCount: semiInfiniteData.length,\n//             }}\n//             sortBy={sortBy}\n//             onSort={handleSort}\n//           >\n//             <Column align=\"left\" dataKey=\"id\" width={width} sortable>\n//               <HeaderCell id=\"id\">Id</HeaderCell>\n//               <Cell />\n//             </Column>\n//             <Column dataKey=\"firstName\" width={width}>\n//               <HeaderCell id=\"firstname\">First name</HeaderCell>\n//               <Cell />\n//             </Column>\n//             <Column dataKey=\"lastName\" width={width}>\n//               <HeaderCell id=\"lastname\">Last name</HeaderCell>\n//               <Cell />\n//             </Column>\n//             {/* <Column dataKey=\"email\" width={width}>\n//               <HeaderCell id=\"email\">Email</HeaderCell>\n//               <Cell />\n//             </Column> */}\n//             {/* <Column dataKey=\"periodStartDate\" width={width} sortable>\n//               <HeaderCell id=\"startdate\">Date Cell</HeaderCell>\n//               <DateCell />\n//             </Column>\n//             <Column dataKey=\"periodEndDate\" width={width} sortable>\n//               <HeaderCell id=\"enddate\">DateTime Cell</HeaderCell>\n//               <DateTimeCell />\n//             </Column> */}\n//           </Table>\n//         </Section>\n//       )}\n//     </>\n//   );\n// };\n// export default UserListScreen;\n"]},"metadata":{},"sourceType":"module"}