import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import InputActions from "../Input/InputActions";
import Input from "../Input";
import useHover from "../useHover";
var EmailInput = React.forwardRef(function EmailInput(_ref, ref) {
  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      _ref$withActions = _ref.withActions,
      withActions = _ref$withActions === void 0 ? true : _ref$withActions,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? '' : _ref$placeholder,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,
      _ref$onStar = _ref.onStar,
      onStar = _ref$onStar === void 0 ? noop : _ref$onStar,
      _ref$onRemove = _ref.onRemove,
      onRemove = _ref$onRemove === void 0 ? noop : _ref$onRemove,
      _ref$primary = _ref.primary,
      primary = _ref$primary === void 0 ? false : _ref$primary,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      props = _objectWithoutProperties(_ref, ["value", "disabled", "name", "withActions", "className", "placeholder", "onChange", "onStar", "onRemove", "primary", "style", "jss"]);

  var _useHover = useHover(),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  return /*#__PURE__*/React.createElement("div", {
    ref: hoverRef
  }, /*#__PURE__*/React.createElement(Input, _extends({}, props, {
    ref: ref,
    onChange: onChange,
    style: style,
    className: className,
    disabled: disabled,
    value: value,
    type: "email",
    placeholder: placeholder,
    name: name,
    jss: jss,
    suffix: withActions && /*#__PURE__*/React.createElement(InputActions, {
      disabled: disabled,
      show: isHovering,
      primary: primary,
      onRemove: onRemove,
      onStar: onStar,
      name: name
    })
  })));
});
EmailInput.propTypes = {
  /** Cb for input change
   *  passing : value: {String}, target: {id or name defined}
   *  */
  onChange: PropTypes.func,

  /**  Cb for clicking on the trash icon */
  onRemove: PropTypes.func,

  /** Cb for clicking on the star (set primary) icon */
  onStar: PropTypes.func,

  /** Indicator whether to show the star/trash actions */
  withActions: PropTypes.bool,

  /** Boolean setting the email as primary */
  primary: PropTypes.bool,

  /** Input level name property */
  name: PropTypes.string,

  /** Email value - setting as controlled */
  value: PropTypes.string,

  /** Placeholder for the email */
  placeholder: PropTypes.string,

  /** Boolean to set the email and component as disabled */
  disabled: PropTypes.bool,

  /** Additional class to the top component level */
  className: PropTypes.string,

  /** Additional style to the top component level */
  style: PropTypes.shape(),

  /** JSS override object */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
EmailInput.displayName = 'EmailInput';
export default EmailInput;