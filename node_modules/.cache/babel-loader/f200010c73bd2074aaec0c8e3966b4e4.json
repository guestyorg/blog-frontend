{"ast":null,"code":"// import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from \"redux-thunk\";\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n// ////\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n// const initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n//   accountSignin: {\n//     accountInfo: localStorage.getItem(\"accountInfo\")\n//       ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//       : null,\n//   },\n// };\n// const reducer = combineReducers({\n//   userRegister: userRegisterReducer,\n//   userSignin: userSigninReducer,\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n//   /////\n//   blogRegister: blogRegisterReducer,\n//   blogSignin: blogSigninReducer,\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n//   /////\n//   accountRegister: accountRegisterReducer,\n//   accountSignin: accountSigninReducer,\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   reducer,\n//   initialState,\n//   composeEnhancer(applyMiddleware(thunk))\n// );\n// export default store;\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport thunk from \"redux-thunk\";\nimport { accountDeleteReducer, accountDetailsReducer, accountListReducer, accountRegisterReducer, accountSigninReducer, accountUpdateReducer } from \"./reducers/accountReducers\";\nimport { userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userSigninReducer, userUpdateReducer } from \"./reducers/userReducers\"; ////\n\nimport { blogDeleteReducer, blogDetailsReducer, blogListReducer, blogRegisterReducer, blogSigninReducer, blogUpdateReducer } from \"./reducers/blogReducers\"; // temp reducer to be removed\n// Once real reducers added you can delete this\n\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}; // shape the state structure\n\n\nconst rootReducer = combineReducers({\n  tempReducer,\n  form: formReducer\n}); // Add custom middleware here\n\nconst featureMiddleware = [];\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\n\nexport default ((initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null\n  },\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\") ? JSON.parse(localStorage.getItem(\"accountInfo\")) : null\n  }\n}, api) => createStore(rootReducer, initialState, applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))));","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/store.js"],"names":["applyMiddleware","combineReducers","createStore","compose","reducer","formReducer","thunk","accountDeleteReducer","accountDetailsReducer","accountListReducer","accountRegisterReducer","accountSigninReducer","accountUpdateReducer","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userSigninReducer","userUpdateReducer","blogDeleteReducer","blogDetailsReducer","blogListReducer","blogRegisterReducer","blogSigninReducer","blogUpdateReducer","tempReducer","state","action","type","rootReducer","form","featureMiddleware","initialState","userSignin","userInfo","localStorage","getItem","JSON","parse","accountSignin","accountInfo","api","withExtraArgument"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAASA,eAAT,EAA0BC,eAA1B,EAA2CC,WAA3C,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,YAAvC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,SACEC,oBADF,EAEEC,qBAFF,EAGEC,kBAHF,EAIEC,sBAJF,EAKEC,oBALF,EAMEC,oBANF,QAOO,4BAPP;AASA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,mBAJF,EAKEC,iBALF,EAMEC,iBANF,QAOO,yBAPP,C,CASA;;AAEA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,mBAJF,EAKEC,iBALF,EAMEC,iBANF,QAOO,yBAPP,C,CASA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACE;AACE,aAAOF,KAAP;AAFJ;AAID,CALD,C,CAMA;;;AACA,MAAMG,WAAW,GAAG5B,eAAe,CAAC;AAClCwB,EAAAA,WADkC;AAElCK,EAAAA,IAAI,EAAEzB;AAF4B,CAAD,CAAnC,C,CAKA;;AACA,MAAM0B,iBAAiB,GAAG,EAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAe,CACbC,YAAY,GAAG;AACbC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACNC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADM,GAEN;AAHM,GADC;AAObG,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAEL,YAAY,CAACC,OAAb,CAAqB,aAArB,IACTC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CADS,GAET;AAHS;AAPF,CADF,EAcbK,GAda,KAgBbvC,WAAW,CACT2B,WADS,EAETG,YAFS,EAGThC,eAAe,CAAC,GAAG+B,iBAAJ,EAAuBzB,KAAK,CAACoC,iBAAN,CAAwBD,GAAxB,CAAvB,CAHN,CAhBb","sourcesContent":["// import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\n// import { reducer as formReducer } from 'redux-form';\n\n// import thunk from \"redux-thunk\";\n\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n\n// ////\n\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n\n// const initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n\n//   accountSignin: {\n//     accountInfo: localStorage.getItem(\"accountInfo\")\n//       ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//       : null,\n//   },\n// };\n// const reducer = combineReducers({\n//   userRegister: userRegisterReducer,\n\n//   userSignin: userSigninReducer,\n\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n\n//   /////\n\n//   blogRegister: blogRegisterReducer,\n\n//   blogSignin: blogSigninReducer,\n\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n\n//   /////\n\n//   accountRegister: accountRegisterReducer,\n\n//   accountSignin: accountSigninReducer,\n\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   reducer,\n//   initialState,\n//   composeEnhancer(applyMiddleware(thunk))\n// );\n\n// export default store;\n\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport thunk from \"redux-thunk\";\n\nimport {\n  accountDeleteReducer,\n  accountDetailsReducer,\n  accountListReducer,\n  accountRegisterReducer,\n  accountSigninReducer,\n  accountUpdateReducer,\n} from \"./reducers/accountReducers\";\n\nimport {\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userSigninReducer,\n  userUpdateReducer,\n} from \"./reducers/userReducers\";\n\n////\n\nimport {\n  blogDeleteReducer,\n  blogDetailsReducer,\n  blogListReducer,\n  blogRegisterReducer,\n  blogSigninReducer,\n  blogUpdateReducer,\n} from \"./reducers/blogReducers\";\n\n// temp reducer to be removed\n// Once real reducers added you can delete this\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n// shape the state structure\nconst rootReducer = combineReducers({\n  tempReducer,\n  form: formReducer,\n});\n\n// Add custom middleware here\nconst featureMiddleware = [];\n\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\n\nexport default (\n  initialState = {\n    userSignin: {\n      userInfo: localStorage.getItem(\"userInfo\")\n        ? JSON.parse(localStorage.getItem(\"userInfo\"))\n        : null,\n    },\n\n    accountSignin: {\n      accountInfo: localStorage.getItem(\"accountInfo\")\n        ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n        : null,\n    },\n  },\n  api\n) =>\n  createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n  );\n"]},"metadata":{},"sourceType":"module"}