import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import isEmpty from 'lodash/isEmpty';
import { checkReservationDetails, formatCalendarDay, formatCalendarMonth, getReservationTitle, getStayDateTime, isInvalidPlannedDate } from "./calendarHelper";
import withHover from "../../withHover/withHover";
import Tooltip from "../Tooltip/Tooltip";
import { CalendarDayStatus } from "../../enums/enums";
import { link as linkTo } from "../../utils/commonUtility";
import CalendarTooltip from "./CalendarTooltip";
import CalendarDaySMBody from "./CalendarDaySMBody";
import CalendarDayLGBody from "./CalendarDayLGBody";

var CalendarDay = /*#__PURE__*/function (_PureComponent) {
  _inherits(CalendarDay, _PureComponent);

  var _super = _createSuper(CalendarDay);

  function CalendarDay(props) {
    var _this;

    _classCallCheck(this, CalendarDay);

    _this = _super.call(this, props);

    _this.goToLink = function () {
      var calendarDayData = _this.state.calendarDayData;

      if ((calendarDayData.dayStatus === CalendarDayStatus.Booked || calendarDayData.dayStatus === CalendarDayStatus.Reserved || calendarDayData.blocks && (calendarDayData.blocks.sr || calendarDayData.blocks.o)) && calendarDayData.link) {
        linkTo(calendarDayData.link);
      }
    };

    _this.serializeReservationData = function (reservation, status, isReserved, isOwner, isSR) {
      var data = _extends({}, reservation);

      if (!isEmpty(data)) {
        data.plannedArrival = getStayDateTime(data.checkIn, data.plannedArrival);

        if (isReserved) {
          data.title = getReservationTitle(data.confirmationCode, data.source, isOwner, isSR);
        }

        data.plannedDeparture = getStayDateTime(data.checkOut, data.plannedDeparture);
        data.isValidCheckIn = isInvalidPlannedDate(data.plannedArrival, data.checkIn);
        data.isValidCheckOut = isInvalidPlannedDate(data.checkOut, data.plannedDeparture);
      }

      return data;
    };

    _this.showTooltip = function (sm, cost, availableNotes, unavailableBlocks, isReserved) {
      return sm && !isEmpty(cost) || !isEmpty(availableNotes) || !isEmpty(unavailableBlocks) || isReserved;
    };

    _this.renderCalendarTooltip = function () {
      var calendarDayData = _this.state.calendarDayData;
      var sm = _this.props.sm;
      var cost = calendarDayData.cost,
          availableNotes = calendarDayData.availableNotes,
          dayStatus = calendarDayData.dayStatus,
          isReserved = calendarDayData.isReserved,
          unavailableBlocks = calendarDayData.unavailableBlocks,
          isOwner = calendarDayData.isOwner,
          isSR = calendarDayData.isSR,
          reservation = calendarDayData.reservation;

      var data = _this.serializeReservationData(reservation, dayStatus, isReserved, isOwner, isSR);

      if (_this.showTooltip(sm, cost, availableNotes, unavailableBlocks, isReserved)) {
        return /*#__PURE__*/React.createElement(CalendarTooltip, {
          data: data,
          blocks: unavailableBlocks,
          isReserved: isReserved,
          price: sm ? cost : undefined,
          note: availableNotes
        });
      }

      return null;
    };

    _this.state = {
      d: formatCalendarDay(props.day, true),
      m: formatCalendarMonth(props.day, true),
      calendarDayData: {}
    };
    return _this;
  }

  _createClass(CalendarDay, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          calendar = _this$props.calendar,
          day = _this$props.day,
          activeDates = _this$props.activeDates;
      this.initCalendarDay(calendar, day, activeDates);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          calendar = _this$props2.calendar,
          day = _this$props2.day,
          activeDates = _this$props2.activeDates;

      if (isEmpty(prevProps.calendar) && !isEmpty(calendar) || prevProps.day !== day) {
        this.initCalendarDay(calendar, day, activeDates);
      }
    }
  }, {
    key: "initCalendarDay",
    value: function initCalendarDay(calendar, day, activeDates) {
      var calendarDayData = checkReservationDetails(calendar, day, activeDates);
      this.setState({
        calendarDayData: calendarDayData
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          onHoverEnter = _this$props3.onHoverEnter,
          onHoverLeave = _this$props3.onHoverLeave,
          isHovering = _this$props3.isHovering,
          sm = _this$props3.sm,
          isFetching = _this$props3.isFetching,
          tooltipBoundariesElement = _this$props3.tooltipBoundariesElement;
      var _this$state = this.state,
          d = _this$state.d,
          m = _this$state.m,
          calendarDayData = _this$state.calendarDayData;
      var availableNotes = calendarDayData.availableNotes,
          startStyles = calendarDayData.startStyles,
          endStyles = calendarDayData.endStyles,
          endOpacity = calendarDayData.endOpacity,
          startOpacity = calendarDayData.startOpacity,
          startOfBlock = calendarDayData.startOfBlock,
          color = calendarDayData.color,
          link = calendarDayData.link,
          guest = calendarDayData.guest,
          showPrice = calendarDayData.showPrice,
          cost = calendarDayData.cost,
          isAvailable = calendarDayData.isAvailable,
          showAvatar = calendarDayData.showAvatar;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('DayPicker-Day--wrap', {
          lg: !sm
        }),
        "data-qa": "calendar-day"
      }, !isFetching && startStyles && /*#__PURE__*/React.createElement("div", {
        className: cn('DayPicker-Day--range', startStyles),
        style: {
          opacity: startOpacity
        }
      }), !isFetching && endStyles && /*#__PURE__*/React.createElement("div", {
        className: cn('DayPicker-Day--range', endStyles),
        style: {
          opacity: endOpacity
        }
      }), /*#__PURE__*/React.createElement(Tooltip, {
        boundariesElement: tooltipBoundariesElement,
        id: "cell-".concat(sm ? 'sm' : 'lg', "-").concat(d, "-").concat(m),
        containerClassName: "w-fill h-fill",
        body: this.renderCalendarTooltip(),
        delay: {
          show: 300,
          hide: 250
        }
      }, /*#__PURE__*/React.createElement("div", {
        role: "presentation",
        onClick: this.goToLink,
        onMouseEnter: onHoverEnter,
        onMouseLeave: onHoverLeave,
        className: cn('flex-center flex-column font-size-xs calendar-day-content w-fill h-fill', {
          'text-hover-blue': isAvailable
        }, "text-".concat(color), {
          clickable: link
        })
      }, sm ? /*#__PURE__*/React.createElement(CalendarDaySMBody, {
        isHovering: isAvailable && isHovering,
        hasNote: availableNotes,
        day: isFetching ? '-' : d
      }) : /*#__PURE__*/React.createElement(CalendarDayLGBody, {
        isHovering: isAvailable && isHovering,
        hasNote: availableNotes,
        day: isFetching ? '-' : d,
        price: showPrice ? cost : undefined,
        personOpacity: startOpacity,
        startOfBlock: startOfBlock,
        guest: guest,
        showAvatar: showAvatar
      }))));
    }
  }]);

  return CalendarDay;
}(PureComponent);

CalendarDay.defaultProps = {
  isFetching: false,
  sm: false,
  tooltipBoundariesElement: undefined
};
CalendarDay.propTypes = {
  day: PropTypes.instanceOf(Date).isRequired,
  calendar: PropTypes.shape().isRequired,
  activeDates: PropTypes.shape().isRequired,
  sm: PropTypes.bool,
  isFetching: PropTypes.bool,
  tooltipBoundariesElement: PropTypes.string
};
export default withHover(CalendarDay);