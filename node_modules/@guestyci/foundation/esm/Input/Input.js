import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useState } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import Row from "../Layout/Row";
import createStyles from "../createStyles";
import InputStyles from "./styles";
export var useStyles = createStyles(function (theme) {
  return {
    root: _extends({}, theme.typography.primary, {}, InputStyles.shared(theme), {
      '&:hover': InputStyles.hover(theme),
      height: '46px'
    }),
    input: {
      border: 'none',
      height: '100%',
      width: '100%',
      backgroundColor: 'transparent',
      '&::placeholder': InputStyles.placeholder(theme)
    },
    disabled: InputStyles.disabled(theme),
    focused: InputStyles.focused(theme),
    error: InputStyles.error(theme),
    prefix: {
      height: '100%',
      display: 'flex',
      alignItems: 'center'
    },
    suffix: {
      height: '100%',
      display: 'flex',
      alignItems: 'center'
    }
  };
}, {
  name: 'Input'
});
var Input = React.forwardRef(function Input(_ref, ref) {
  var _cn;

  var name = _ref.name,
      value = _ref.value,
      placeholder = _ref.placeholder,
      disabled = _ref.disabled,
      onChange = _ref.onChange,
      className = _ref.className,
      style = _ref.style,
      suffix = _ref.suffix,
      prefix = _ref.prefix,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      error = _ref.error,
      jss = _ref.jss,
      props = _objectWithoutProperties(_ref, ["name", "value", "placeholder", "disabled", "onChange", "className", "style", "suffix", "prefix", "onFocus", "onBlur", "error", "jss"]);

  var classes = useStyles({
    jss: jss
  });

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      focused = _useState2[0],
      setFocused = _useState2[1];

  var onInputFocus = function onInputFocus() {
    setFocused(true);

    if (onFocus) {
      onFocus.apply(void 0, arguments);
    }
  };

  var onInputBlur = function onInputBlur() {
    setFocused(false);

    if (onBlur) {
      onBlur.apply(void 0, arguments);
    }
  };

  return /*#__PURE__*/React.createElement(Row, {
    wrap: false,
    justify: "between",
    align: "center",
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.disabled, disabled), _defineProperty(_cn, classes.focused, focused), _defineProperty(_cn, classes.error, error), _cn), className)
  }, prefix && /*#__PURE__*/React.createElement("span", {
    className: classes.prefix
  }, prefix), /*#__PURE__*/React.createElement("input", _extends({
    onChange: onChange,
    onFocus: onInputFocus,
    onBlur: onInputBlur,
    name: name,
    value: value,
    className: cn(classes.input),
    disabled: disabled,
    placeholder: placeholder,
    ref: ref
  }, props)), suffix && /*#__PURE__*/React.createElement("span", {
    className: classes.suffix
  }, suffix));
});
Input.defaultProps = {
  name: '',
  value: '',
  onChange: noop,
  placeholder: '',
  className: '',
  style: undefined,
  suffix: null,
  disabled: false
};
Input.propTypes = {
  /** Input name to be set */
  name: PropTypes.string,

  /** Input value to be set */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Input placeholder text */
  placeholder: PropTypes.string,

  /** Disable state in which input interaction is not available */
  disabled: PropTypes.bool,

  /** Function to be called on input value change */
  onChange: PropTypes.func,

  /** Input class */
  className: PropTypes.string,

  /** Input style */
  style: PropTypes.shape(),

  /** String Or React Element to be shown before the input */
  prefix: PropTypes.node,

  /** String Or React Element to be shown after the input */
  suffix: PropTypes.node,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Input.displayName = 'Input';
export default Input;