import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import Popper from "../legacy/Popper";
import Paper from "../Paper";
import createStyles from "../createStyles";
import { white } from "../theme/colors";
import { OriginDirectionType } from "../enums";
import ClickOutsideListener from "../ClickOutsideListener";
import useComposeRefs from "../useComposeRefs";
export var useStyles = createStyles(function (theme) {
  return {
    enter: {
      opacity: 0.01,
      transform: 'scale(.85)'
    },
    enterActive: {
      transform: 'scale(1)',
      opacity: 1,
      transition: theme.transition.create('all', {
        duration: 200
      })
    },
    enterDone: {
      transform: 'scale(1)',
      opacity: 1
    },
    exit: {
      opacity: 1,
      transform: 'scale(1)'
    },
    exitDone: {
      opacity: 0,
      transform: 'scale(.85)'
    },
    exitActive: {
      transform: 'scale(.85)',
      opacity: 0.01,
      transition: theme.transition.create('all', {
        duration: 200
      })
    },
    content: {
      padding: theme.spacer(2),
      borderRadius: 3,
      backgroundColor: theme.palette.secondary["default"],
      color: white
    },
    maxWidth: {
      maxWidth: 350
    }
  };
}, {
  name: 'Popover'
});
var Popover = React.forwardRef(function Popover(_ref, ref) {
  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$body = _ref.body,
      body = _ref$body === void 0 ? null : _ref$body,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? OriginDirectionType.Top : _ref$placement,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? noop : _ref$onClose,
      _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      anchor = _ref.anchor,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? 15 : _ref$offset,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      _ref$backdrop = _ref.backdrop,
      backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss,
      _ref$popperProps = _ref.popperProps,
      popperProps = _ref$popperProps === void 0 ? {} : _ref$popperProps,
      props = _objectWithoutProperties(_ref, ["children", "className", "body", "style", "placement", "onClose", "open", "anchor", "offset", "fullWidth", "backdrop", "jss", "popperProps"]);

  var popoverRef = useRef();
  var composedRef = useCallback(useComposeRefs(anchor, popoverRef), []);
  var classes = useStyles({
    jss: jss
  });

  var _placement$split = placement.split(' '),
      _placement$split2 = _slicedToArray(_placement$split, 2),
      originDirection = _placement$split2[0],
      _placement$split2$ = _placement$split2[1],
      anchorDirection = _placement$split2$ === void 0 ? 'center' : _placement$split2$;

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    ref: composedRef
  }, children), body && /*#__PURE__*/React.createElement(Popper, _extends({}, popperProps, {
    offset: offset,
    trigger: open,
    backdrop: backdrop,
    transition: {
      enter: classes.enter,
      enterActive: classes.enterActive,
      enterDone: classes.enterActive,
      exit: classes.exit,
      exitActive: classes.exitActive,
      exitDone: classes.exitDone
    },
    anchorDirection: anchorDirection,
    originDirection: originDirection,
    anchor: popoverRef
  }), /*#__PURE__*/React.createElement(ClickOutsideListener, {
    delay: 250,
    onClickOutside: onClose
  }, /*#__PURE__*/React.createElement(Paper, _extends({
    ref: ref
  }, props, {
    elevation: 2,
    className: cn(classes.content, _defineProperty({}, classes.maxWidth, !fullWidth), className),
    style: style
  }), body))));
});
Popover.propTypes = {
  /** Control option for anchor in popover */
  anchor: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.shape({
    current: PropTypes.object
  })]),

  /** Add backdrop to Popover */
  backdrop: PropTypes.bool,

  /** Bool - Boolean defining whether or not to toggle the popover */
  open: PropTypes.bool.isRequired,

  /** Node - the component wrapped by the tooltip */
  children: PropTypes.node.isRequired,

  /** String || React Element - The tooltip body */
  body: PropTypes.node,

  /** onClose  - Function to support the popover toggle */
  onClose: PropTypes.func,

  /** Additional component class */
  className: PropTypes.string,

  /** Additional component style */
  style: PropTypes.shape(),

  /** Popover placement supporting:
   *  (top, bottom, left, right, top start, top end, bottom start, bottom end, left start, left end, right start, right end )
   *  */
  placement: PropTypes.string,

  /** Set the popover content to fit to its children full width */
  fullWidth: PropTypes.bool,

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Additional Popper props */
  popperProps: PropTypes.shape(),

  /** offset position from anchor */
  offset: PropTypes.number
};
Popover.displayName = 'Popover';
export default Popover;