#!/usr/bin/env node
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const config = require('./config');

const AWS = require('aws-sdk');

const deploy = require('s3-website').deploy;

const fs = require('fs');

class DeployScript {
  constructor() {
    _defineProperty(this, "path", __dirname.split('/'));

    _defineProperty(this, "s3", new AWS.S3({
      region: config.region
    }));

    _defineProperty(this, "checkBuildFolder", () => {
      let escape = true;

      if (fs.existsSync('./build')) {
        config.uploadDir = './build';
        escape = false;
      } else if (fs.existsSync('./dist')) {
        config.uploadDir = './dist';
        escape = false;
      }

      if (escape) {
        throw new Error('Did you forget to build?');
      }
    });

    _defineProperty(this, "getTarget", () => {
      if (process.env.CLUSTER === 'production') {
        this.target = `production/${process.env.REPO_NAME}/${process.env.BUILD_NUMBER}`;
      } else {
        this.target = `branches/${process.env.BRANCH_NAME}/${process.env.REPO_NAME}/static`;
      }
    });

    _defineProperty(this, "createNginxLocations", async () => {
      if (fs.existsSync('./nginx.locations.json')) {
        let rawdata = fs.readFileSync('./nginx.locations.json');
        let locations = JSON.parse(rawdata);
        locations.map(location => {
          if (location.hasOwnProperty('proxy_pass')) {
            // location.proxy_pass = `https://d2g7j5hs6q3xyb.cloudfront.net/${this.target}${location.proxy_pass}`;
            location.proxy_pass = `https://guesty-frontend.s3.amazonaws.com/${this.target}${location.proxy_pass}`;
          }
        });
        await fs.writeFile(`${config.uploadDir}/nginx.locations.json`, JSON.stringify(locations), 'utf8', () => {});
      } else {
        throw new Error('Missing nginx locations file !!!');
      }
    });

    _defineProperty(this, "deployFolder", async () => {
      config.prefix = this.target;
      await this.createNginxLocations();
      await deploy(this.s3, config, (err, website) => {
        if (err) {
          throw err;
        }

        console.log('build to:', `${website.url}/${this.target}`);
      });
    });

    this.checkBuildFolder();
    this.getTarget();
  }

}

const instance = new DeployScript();
instance.deployFolder();