import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { fade } from "../theme/utils";
import { white } from "../theme/colors";
import createStyles from "../createStyles";
import Button from "../Button";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      minWidth: 95,
      color: white,
      boxShadow: '0 2px 3px 0 rgba(0, 0, 0, 0.14)',
      backgroundColor: theme.palette.primary["default"],
      '&:not([disabled]):hover': {
        backgroundColor: function backgroundColor(_ref) {
          var isLoading = _ref.isLoading;
          return isLoading ? theme.palette.primary["default"] : theme.palette.primary.hover;
        }
      },
      '&:not([disabled]):active': {
        border: theme.boxShadow[3]
      },
      '&:disabled': {
        backgroundColor: fade(theme.palette.primary.disabled, 0.7),
        color: fade(white, 0.7)
      }
    }
  };
}, {
  name: 'RaisedButton'
});
var RaisedButton = React.forwardRef(function RaisedButton(_ref2, ref) {
  var children = _ref2.children,
      size = _ref2.size,
      isLoading = _ref2.isLoading,
      onClick = _ref2.onClick,
      disabled = _ref2.disabled,
      className = _ref2.className,
      jss = _ref2.jss,
      props = _objectWithoutProperties(_ref2, ["children", "size", "isLoading", "onClick", "disabled", "className", "jss"]);

  var classes = useStyles({
    isLoading: isLoading,
    jss: jss
  });
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    disabled: disabled,
    isLoading: isLoading,
    size: size,
    onClick: onClick,
    spinnerColor: white,
    className: cn(classes.root, className),
    rippleColor: white,
    ref: ref
  }), children);
});
RaisedButton.defaultProps = {
  size: 'md',
  onClick: noop,
  isLoading: false,
  disabled: false
};
RaisedButton.propTypes = {
  /** Child element to locate inside of button */
  children: PropTypes.node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: PropTypes.func,

  /** Button size - values =['md', 'lg', 'xl'] */
  size: PropTypes.oneOf(['md', 'lg', 'xl']),

  /** Indicator whether or not to show loader in button */
  isLoading: PropTypes.bool,

  /** Indicator whether or not to button is disabled */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
RaisedButton.displayName = 'RaisedButton';
export default RaisedButton;