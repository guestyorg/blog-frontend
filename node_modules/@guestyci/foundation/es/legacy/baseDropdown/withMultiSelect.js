import _extends from "@babel/runtime/helpers/esm/extends";
import React, { Component } from 'react';
import filter from 'lodash/filter';
import head from 'lodash/head';
import isString from 'lodash/isString';
import map from 'lodash/map';
import isEqual from 'lodash/isEqual';
import find from 'lodash/find';
import size from 'lodash/size';
/**
 * Create a wrapper compose to support multi-select functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */

const withMultiSelect = ComposedComponent => {
  var _temp;

  return _temp = class MultiSelectWrapper extends Component {
    constructor(props) {
      super(props);

      this.getSelectedItems = (options, selected) => {
        if (!size(selected)) return [];
        const checkedItemsSet = new Set(selected);
        return filter(options, option => checkedItemsSet.has(option.value));
      };

      this.getUnselectedItems = (options, selected) => {
        if (!size(selected)) return options;
        const checkedItemsSet = new Set(selected);
        return filter(options, option => !checkedItemsSet.has(option.value));
      };

      this.getPlaceholder = (options, single = 'more', plural = 'more') => {
        if (!options || !size(options)) return '';
        let tmpOptions = options;
        let firstItem;
        firstItem = head(options).label;

        if (!isString(firstItem)) {
          tmpOptions = map(options, 'name');
          firstItem = head(tmpOptions);
        }

        if (tmpOptions.length === 1) return firstItem;
        const type = tmpOptions.length === 2 ? single : plural;
        return `${firstItem} + ${tmpOptions.length - 1} ${type}`;
      };

      this.setValues = values => {
        const {
          single,
          plural,
          options
        } = this.props;
        const unselectedOptions = this.getUnselectedItems(options, values);
        const selectedOptions = this.getSelectedItems(options, values);
        const searchInputValue = this.getPlaceholder(selectedOptions, single, plural);
        this.setState({
          searchInputValue,
          selectedOptions,
          unselectedOptions
        });
      };

      this.setNewOptions = (options, selectedValues) => {
        const {
          selectedOptions
        } = this.state;
        const selectedItems = selectedValues || selectedOptions.map(option => option.value);
        const unselectedOptions = this.getUnselectedItems(options, selectedItems);
        this.setState({
          unselectedOptions
        });
      };

      this.clearSelected = () => {
        const {
          onChange,
          id,
          name,
          options
        } = this.props;
        this.setState({
          searchInputValue: '',
          selectedOptions: [],
          unselectedOptions: options
        });
        onChange([], id || name);
      };

      this.handleItemChange = item => {
        let {
          selectedOptions,
          unselectedOptions
        } = this.state;
        const {
          single,
          plural,
          id,
          name,
          onChange
        } = this.props;
        const isChecked = find(selectedOptions, {
          value: item.value
        });

        if (isChecked) {
          unselectedOptions.push(item);
          selectedOptions = filter(selectedOptions, option => option.value !== item.value);
        } else {
          selectedOptions.push(item);
          unselectedOptions = filter(unselectedOptions, option => option.value !== item.value);
        }

        const searchInputValue = this.getPlaceholder(selectedOptions, single, plural);
        this.setState({
          searchInputValue,
          selectedOptions,
          unselectedOptions
        });
        onChange(map(selectedOptions, 'value'), id || name);
      };

      const intialValues = props.value || props.values;
      const initialSelectedItems = this.getSelectedItems(props.options, intialValues);
      this.state = {
        unselectedOptions: this.getUnselectedItems(props.options, intialValues),
        selectedOptions: initialSelectedItems,
        searchInputValue: this.getPlaceholder(initialSelectedItems, props.single, props.plural)
      };
    }

    componentDidUpdate(prevProps) {
      const {
        value,
        values,
        options
      } = this.props;
      const {
        value: prevValue,
        values: prevValues,
        options: prevOptions
      } = prevProps;
      const dropdownValues = value || values;
      const prevDropdownValues = prevValue || prevValues;

      if (options.length !== prevOptions.length && !isEqual(options, prevOptions)) {
        this.setNewOptions(options, dropdownValues);
      }

      if (!isEqual(dropdownValues, prevDropdownValues)) {
        this.setValues(dropdownValues);
      }
    }

    render() {
      const {
        searchInputValue,
        unselectedOptions,
        selectedOptions
      } = this.state;
      return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        unselectedOptions: unselectedOptions,
        selectedOptions: selectedOptions,
        searchInputValue: searchInputValue,
        onChange: this.handleItemChange,
        getSelectedItems: this.getSelectedItems,
        getUnselectedItems: this.getUnselectedItems,
        clearSelected: this.clearSelected,
        setNewOptions: this.setNewOptions,
        setValues: this.setValues
      }));
    }

  }, _temp;
};

export default withMultiSelect;