"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ButtonDropdownComponent = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _classnames = _interopRequireDefault(require("classnames"));

var _enums = require("../../enums/enums");

var _withDropdown = _interopRequireDefault(require("../baseDropdown/withDropdown"));

var _DropdownMenu = _interopRequireDefault(require("../baseDropdown/DropdownMenu"));

var _MenuItem = _interopRequireDefault(require("../Menu/MenuItem"));

var _DropdownButtonField = _interopRequireDefault(require("./DropdownButtonField"));

var ButtonDropdown = function ButtonDropdown(_ref) {
  var options = _ref.options,
      toggleCollapse = _ref.toggleCollapse,
      isCollapsed = _ref.isCollapsed,
      selectedItem = _ref.selectedItem,
      name = _ref.name,
      className = _ref.className,
      style = _ref.style,
      onSelectItem = _ref.onSelectItem,
      isFetching = _ref.isFetching,
      fetchNextPage = _ref.fetchNextPage,
      pageCount = _ref.pageCount,
      currentPage = _ref.currentPage,
      type = _ref.type,
      title = _ref.title,
      disabled = _ref.disabled,
      inDialog = _ref.inDialog,
      closeDropdown = _ref.closeDropdown;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('d-flex-fill relative flex-column', className),
    style: style,
    name: name,
    "data-qa": "button-dropdown"
  }, /*#__PURE__*/_react["default"].createElement(_DropdownButtonField["default"], {
    toggleCollapse: toggleCollapse,
    type: type,
    title: title,
    inDialog: inDialog,
    disabled: disabled,
    isCollapsed: isCollapsed,
    className: "dropdown-btn"
  }), /*#__PURE__*/_react["default"].createElement(_DropdownMenu["default"], {
    pageCount: pageCount,
    isEmptyState: !options.length,
    currentPage: currentPage,
    onLoadMore: fetchNextPage,
    isFetching: isFetching,
    isCollapsed: isCollapsed,
    onDismiss: closeDropdown
  }, options.map(function (item) {
    return /*#__PURE__*/_react["default"].createElement(_MenuItem["default"], {
      key: item.value,
      value: item,
      isSelected: item.value === selectedItem.value,
      onClick: onSelectItem
    }, item.label);
  })));
};

ButtonDropdown.defaultProps = {
  className: '',
  style: {},
  name: '',
  onLoadMore: _noop["default"],
  isFetching: false,
  pageCount: 0,
  type: 'plain',
  disabled: false,
  value: undefined,
  inDialog: false,
  onChange: _noop["default"],
  onSelect: _noop["default"]
};
ButtonDropdown.propTypes = {
  /** The dropdown options to show - Structure ({
   label: {Node} - the label to present,
   value: {String|number} - unique value to be sent to the server,
  name: {String} - required if value to present if label is component-shown in input once selected,
  })
   */
  options: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,

  /** Callback function to be called on value changed - Deprecated */
  onSelect: _propTypes["default"].func,

  /** Callback function to be called on value changed */
  onChange: _propTypes["default"].func,

  /** Callback function to be called on dropdown visibility change */
  onVisibilityChange: _propTypes["default"].func,

  /** Additional class for dropdown root */
  className: _propTypes["default"].string,

  /** Additional style for dropdown root */
  style: _propTypes["default"].shape(),

  /** form element name */
  name: _propTypes["default"].string,

  /** Callback function to fetch more items - required for infinite scroll */
  onLoadMore: _propTypes["default"].func,

  /** Total page count for pagination - required to allow infinite scroll */
  pageCount: _propTypes["default"].number,

  /** Indicator whether or not we are currently fetching value for infinite scroll */
  isFetching: _propTypes["default"].bool,

  /** button type (sets the color) */
  type: _propTypes["default"].oneOf(Object.keys(_enums.DropdownButtonColors)),

  /** button title */
  title: _propTypes["default"].string.isRequired,

  /** button disable indicator */
  disabled: _propTypes["default"].bool,

  /** button disable indicator */
  inDialog: _propTypes["default"].bool,

  /** Value to set for the dropdown to make controlled */
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].string, _propTypes["default"].number])
};
var ButtonDropdownComponent = ButtonDropdown;
exports.ButtonDropdownComponent = ButtonDropdownComponent;

var _default = (0, _withDropdown["default"])(ButtonDropdown);

exports["default"] = _default;