import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import memoize from '@guestyci/memoize';
import { firstLetterUppercase as capitalize } from "../../utils/commonUtility";
import createStyles from "../../createStyles";
import styles from "../styles";
import { isNumber } from "../../utils";
export const generateGutter = memoize((gutter, spacer) => {
  if (!gutter) {
    return undefined;
  }

  if (isNumber(gutter)) {
    return spacer(gutter);
  }

  return gutter.split(' ').reduce((padding, item) => `${padding} ${spacer(item)}px`, '').trim();
});
export const useStyles = createStyles(theme => _extends({
  root: {
    backgroundColor: ({
      bgColor
    }) => bgColor
  },
  gutter: {
    padding: ({
      gutter
    }) => generateGutter(gutter, theme.spacer)
  },
  displayFlex: {
    display: 'flex',
    width: '100%'
  }
}, styles), {
  name: 'Section'
});
const Section = React.forwardRef(function Section(_ref, ref) {
  let {
    className,
    style,
    children,
    gutter,
    flex,
    justify,
    wrap,
    align,
    bgColor,
    jss
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "style", "children", "gutter", "flex", "justify", "wrap", "align", "bgColor", "jss"]);

  const classes = useStyles({
    bgColor,
    gutter,
    jss
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn(classes.root, {
      [classes.gutter]: gutter,
      [classes.flexWrap]: wrap,
      [classes.displayFlex]: flex,
      [classes[`justify${capitalize(justify)}`]]: justify !== 'start',
      [classes[`alignItems${capitalize(align)}`]]: align !== 'stretch'
    }, className),
    style: style
  }), children);
});
Section.defaultProps = {
  bgColor: 'initial',
  className: '',
  style: {},
  children: null,
  gutter: 0,
  flex: true,
  wrap: true,
  justify: 'start',
  align: 'stretch'
};
Section.propTypes = {
  /** Background color for section */
  bgColor: PropTypes.string,

  /** Additional class for top level */
  className: PropTypes.string,

  /** Indicator whether or not to render flex wrap */
  wrap: PropTypes.bool,

  /** Additional styling for root level */
  style: PropTypes.shape(),

  /** set gutter padding to component - available value - [0,1,2,3,4,5,6,7,8,9,10] will be determined by the theme spacer (default 5)
   * Also supporting string format "x y", "top right bottom left" - e.g "2 3", "2 2 0 2"
   * */
  gutter: PropTypes.oneOfType([PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), PropTypes.string]),

  /** Child components inside a section */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),

  /** Boolean to set section a flex */
  flex: PropTypes.bool,

  /** Set flex alignment - available values = ['start', 'center', 'end', 'stretch', 'baseline']  */
  align: PropTypes.oneOf(['start', 'center', 'end', 'stretch', 'baseline']),

  /** Set flex justify content - available values = ['start','center','end','between','around','evenly'] */
  justify: PropTypes.oneOf(['start', 'center', 'end', 'between', 'around', 'evenly']),

  /** JSS overrides */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
}; // Hack for withInfo plugin

Section.displayName = 'Section';
export default Section;