import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import isNumber from 'lodash/isNumber';
import TextareaAutosize from 'react-textarea-autosize';
import noop from 'lodash/noop';
import InputLabel from "../InputLabel/InputLabel";
import { Theme } from "../../enums/enums";

var TextArea = /*#__PURE__*/function (_Component) {
  _inherits(TextArea, _Component);

  var _super = _createSuper(TextArea);

  function TextArea(props) {
    var _this;

    _classCallCheck(this, TextArea);

    _this = _super.call(this, props);

    _this._isValid = function (inputLength) {
      var maxLength = _this.props.maxLength;
      return !isNumber(maxLength) || maxLength - inputLength >= 0;
    };

    _this._calcCharCount = function (input) {
      var maxLength = _this.props.maxLength;

      if (isNumber(maxLength)) {
        return maxLength - input.length;
      }

      return undefined;
    };

    _this.handleInputChange = function (event) {
      var value = event.currentTarget.value;
      var _this$props = _this.props,
          id = _this$props.id,
          name = _this$props.name,
          onChange = _this$props.onChange;

      if (_this._isValid(value.length)) {
        _this.setState({
          charCount: _this._calcCharCount(value)
        });

        if (onChange) {
          onChange(value, id || name);
        }
      }
    };

    _this.getTheme = function (theme) {
      switch (theme) {
        case Theme.Light:
          return 'border-gray-lightest bg-white';

        case Theme.Dark:
          return 'bg-gray-lightest border-gray-light';

        case Theme.Yellow:
          return 'bg-yellow-light border-gray-light';

        default:
          return 'border-gray-lightest bg-white';
      }
    };

    _this.state = {
      charCount: props.maxLength
    };
    _this.textAreaRef = React.createRef();
    return _this;
  }

  _createClass(TextArea, [{
    key: "render",
    value: function render() {
      var charCount = this.state.charCount;

      var _this$props2 = this.props,
          value = _this$props2.value,
          maxLength = _this$props2.maxLength,
          containerStyle = _this$props2.containerStyle,
          tooltip = _this$props2.tooltip,
          label = _this$props2.label,
          disabled = _this$props2.disabled,
          className = _this$props2.className,
          rows = _this$props2.rows,
          maxRows = _this$props2.maxRows,
          theme = _this$props2.theme,
          containerClassName = _this$props2.containerClassName,
          autoFocus = _this$props2.autoFocus,
          required = _this$props2.required,
          placeholder = _this$props2.placeholder,
          props = _objectWithoutProperties(_this$props2, ["value", "maxLength", "containerStyle", "tooltip", "label", "disabled", "className", "rows", "maxRows", "theme", "containerClassName", "autoFocus", "required", "placeholder"]);

      var textAreaTheme = this.getTheme(theme);
      return /*#__PURE__*/React.createElement("div", {
        className: "d-flex-fill flex-column input-wrapper",
        "data-qa": "text-area"
      }, label && /*#__PURE__*/React.createElement(InputLabel, {
        label: label,
        tooltip: tooltip
      }), /*#__PURE__*/React.createElement("div", {
        className: cn('d-flex-fill flex-start-center pos-relative border-gray-lighter b-1', containerClassName, textAreaTheme, {
          'bg-gray-lighter': disabled
        }),
        style: containerStyle
      }, /*#__PURE__*/React.createElement(TextareaAutosize, _extends({}, props, {
        placeholder: placeholder,
        autoFocus: autoFocus,
        ref: this.textAreaRef,
        maxRows: maxRows,
        rows: rows,
        value: value,
        disabled: disabled,
        maxLength: maxLength,
        onChange: this.handleInputChange,
        className: cn('w-100 border-0 py-3 px-4 min-height-50 font-size-md text-black', textAreaTheme, className)
      })), isNumber(maxLength) && /*#__PURE__*/React.createElement("span", {
        className: "textarea-charcount font-size-md text-muted pos-absolute mr-2 right-0 bottom-0"
      }, charCount)));
    }
  }]);

  return TextArea;
}(Component);

TextArea.defaultProps = {
  maxLength: null,
  value: undefined,
  onChange: noop,
  placeholder: '',
  label: null,
  tooltip: '',
  disabled: false,
  rows: 1,
  maxRows: 5,
  theme: Theme.Dark,
  containerClassName: '',
  autoFocus: false
};
TextArea.propTypes = {
  /** Controlled text area value */
  value: PropTypes.string,

  /** On change trigger function to update on text change */
  onChange: PropTypes.func,

  /** The max length for the text area input */
  maxLength: PropTypes.number,

  /** TextArea Placeholder */
  placeholder: PropTypes.string,

  /** A label to show on top of the input */
  label: PropTypes.string,

  /** Add tooltip help icon and message - tooltip - String help message */
  tooltip: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** Row number to set for the textarea */
  rows: PropTypes.number,

  /** max number of rows for expandable text area */
  maxRows: PropTypes.number,

  /** Define theme for text area - possible values = [Theme.Light, Theme.Dark, Theme.Yellow] */
  theme: PropTypes.oneOf([Theme.Light, Theme.Dark, Theme.Yellow]),

  /** Container level class name */
  containerClassName: PropTypes.string,

  /** Boolean to define if should be auto focused */
  autoFocus: PropTypes.bool
};
export default TextArea;