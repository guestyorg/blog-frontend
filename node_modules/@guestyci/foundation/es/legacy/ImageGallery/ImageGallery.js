import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import Carousel from "../Carousel";
import ImageView from "../Image";
import { Theme } from "../../enums/enums";

const ImageGallery = ({
  images,
  arrows,
  arrowTheme,
  showArrowsOnHover,
  infinite,
  height,
  className,
  style,
  crop
}) => {
  const imagesElements = useMemo(() => images.map(image => /*#__PURE__*/React.createElement(ImageView, {
    responsive: true,
    src: image,
    key: image,
    crop: crop,
    width: "auto",
    height: height
  })), [images]);
  const settings = {
    arrows,
    infinite,
    showArrowsOnHover,
    className,
    style,
    arrowsFade: true,
    arrowTheme
  };
  return /*#__PURE__*/React.createElement(Carousel, _extends({}, settings, {
    "data-qa": "image-gallery"
  }), imagesElements);
};

ImageGallery.defaultProps = {
  arrows: true,
  showArrowsOnHover: true,
  infinite: true,
  className: '',
  style: {},
  arrowTheme: Theme.Light,
  height: 300,
  crop: 'fill'
};
ImageGallery.propTypes = {
  /** list of images to show in the gallery */
  images: PropTypes.arrayOf(PropTypes.string).isRequired,

  /** indicates if to display arrows */
  arrows: PropTypes.bool,

  /** indicate if to show the arrows when not hovering the carousel */
  showArrowsOnHover: PropTypes.bool,

  /** Infinitely wrap around contents */
  infinite: PropTypes.bool,

  /** Additional style */
  style: PropTypes.shape(),

  /** Additional class name */
  className: PropTypes.string,

  /** arrow's theme */
  arrowTheme: PropTypes.oneOf([Theme.Light, Theme.Dark]),

  /** height of the gallery */
  height: PropTypes.number,

  /** Crop type */
  crop: PropTypes.string
};
export default ImageGallery;