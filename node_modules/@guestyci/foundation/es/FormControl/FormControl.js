import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import TextField from "../TextField";
import Row from "../Layout/Row";
import Col from "../Layout/Col";
import createStyles from "../createStyles";
export const useStyles = createStyles(theme => ({
  root: {},
  label: {
    alignSelf: 'flex-start',
    marginBottom: theme.spacer(2),
    color: theme.palette.label
  },
  info: {
    marginTop: '2px',
    color: theme.palette.description
  }
}));
const FormControl = React.forwardRef(function FormControl(_ref, ref) {
  let {
    name,
    children,
    label = null,
    info = null,
    className = '',
    error = '',
    style = {},
    required = false,
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["name", "children", "label", "info", "className", "error", "style", "required", "jss"]);

  const classes = useStyles({
    jss
  });
  const showInfo = info && !error;
  return /*#__PURE__*/React.createElement(Col, _extends({}, props, {
    ref: ref,
    tabIndex: -1,
    className: cn(classes.root, {
      'form-control-error': !!error
    }, className),
    style: style
  }), label && /*#__PURE__*/React.createElement(TextField, {
    className: classes.label
  }, label), React.cloneElement(children, {
    error: !!error,
    name,
    required
  }), /*#__PURE__*/React.createElement(Row, {
    spacing: 3,
    justify: error ? 'start' : 'end'
  }, error && /*#__PURE__*/React.createElement(TextField, {
    color: "error"
  }, error), showInfo && /*#__PURE__*/React.createElement(TextField, {
    className: classes.info
  }, info)));
});
FormControl.propTypes = {
  /** Child component for the form control */
  children: PropTypes.node.isRequired,

  /** Boolean indicator for required */
  required: PropTypes.bool,

  /** Form control label field */
  label: PropTypes.node,

  /* Form control info field */
  info: PropTypes.node,

  /** Additional root classname */
  className: PropTypes.string,

  /** additional root syle */
  style: PropTypes.shape(),

  /** Jss override to create custom styles */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
FormControl.displayName = 'FormControl';
export default FormControl;