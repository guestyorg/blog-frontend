import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import { snakeToCamel } from "../../utils/commonUtility";
import Placeholder from "../Placeholder";
var useStyles = createUseStyles({
  icon: {
    minWidth: function minWidth(props) {
      return props.width;
    },
    minHeight: function minHeight(props) {
      return props.height;
    }
  },
  placeholder: {
    borderRadius: '15%'
  }
});

var createSvgFromText = function createSvgFromText(text) {
  var div = document.createElement('div');
  div.innerHTML = text.substring(text.indexOf('<svg'));
  return div.firstChild;
};

var Icon = React.memo(function (_ref) {
  var width = _ref.width,
      height = _ref.height,
      color = _ref.color,
      fillColor = _ref.fillColor,
      strokeColor = _ref.strokeColor,
      className = _ref.className,
      icon = _ref.icon,
      style = _ref.style,
      noFill = _ref.noFill;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      svgContent = _useState2[0],
      setSvgContent = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      attributes = _useState4[0],
      setAttributes = _useState4[1];

  useEffect(function () {
    var setSvgAttributes = function setSvgAttributes(svg) {
      var attrs = Object.values(svg.attributes).reduce(function (acc, attr) {
        var name = attr.name,
            value = attr.value;

        if (!name.includes('xml')) {
          var camelName = snakeToCamel(name);
          acc[camelName] = value;
        }

        return acc;
      }, {});
      setAttributes(attrs);
    };

    var fetchSvgIconFromS3 = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var resp, text, svgElement;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return fetch("https://d2g7j5hs6q3xyb.cloudfront.net/icons/".concat(icon, ".svg"));

              case 3:
                resp = _context.sent;
                _context.next = 6;
                return resp.text();

              case 6:
                text = _context.sent;
                svgElement = createSvgFromText(text);
                setSvgAttributes(svgElement);
                setSvgContent(svgElement.innerHTML);
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context["catch"](0);
                console.warn("".concat(icon, " was not found"));

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 12]]);
      }));

      return function fetchSvgIconFromS3() {
        return _ref2.apply(this, arguments);
      };
    }();

    fetchSvgIconFromS3();
  }, [icon]);
  var classes = useStyles({
    width: width,
    height: height
  });
  var iconFillColor = fillColor || color;

  if (!svgContent) {
    return /*#__PURE__*/React.createElement(Placeholder, {
      className: cn(className, classes.placeholder, classes.icon)
    });
  }

  return /*#__PURE__*/React.createElement("svg", _extends({
    dangerouslySetInnerHTML: {
      __html: svgContent
    }
  }, attributes, {
    width: width,
    height: height,
    className: cn({
      'transition-all': iconFillColor && !noFill
    }, className, noFill ? 'fill-inherit' : ["fill-".concat(iconFillColor, " stroke-").concat(strokeColor)], classes.icon),
    style: style
  }));
});
Icon.defaultProps = {
  width: 20,
  height: 20,
  color: '',
  className: '',
  style: {},
  noFill: false
};
Icon.propTypes = {
  /** Icon width in pixels */
  width: PropTypes.number,

  /** Icon height in pixels */
  height: PropTypes.number,

  /** Icon fill color - see style guide colors for options */
  color: PropTypes.string,

  /** Class to add to the Icon component */
  className: PropTypes.string,

  /** Style to add to Icon component */
  style: PropTypes.shape(),

  /** The string name of the Icon to use. Also possible to pass without the icon prop */
  icon: PropTypes.string.isRequired,

  /** boolean - decide whether to disable default fill color */
  noFill: PropTypes.bool
};
export default Icon;