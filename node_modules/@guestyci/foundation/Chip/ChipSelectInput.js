"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.useStyles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _styles = _interopRequireDefault(require("../Input/styles"));

var _Row = _interopRequireDefault(require("../Layout/Row"));

var _Button = _interopRequireDefault(require("../Button"));

var _TextField = _interopRequireDefault(require("../TextField"));

var _commonUtility = require("../utils/commonUtility");

var _Chip = _interopRequireDefault(require("./Chip"));

var _composeEvent = _interopRequireDefault(require("../utils/composeEvent"));

var useStyles = (0, _createStyles["default"])(function (theme) {
  return {
    root: (0, _extends2["default"])({}, theme.typography.primary, {}, _styles["default"].shared(theme), {
      paddingRight: 0,
      paddingLeft: theme.spacer(1),
      '&:hover': (0, _extends2["default"])({}, _styles["default"].hover(theme)),
      minHeight: 46,
      maxHeight: 150,
      overflowY: 'auto',
      '&::placeholder': _styles["default"].placeholder(theme)
    }),
    input: {
      flex: 1,
      height: '100%'
    },
    placeholder: {
      paddingLeft: theme.spacer(2)
    },
    clearIcon: {
      color: theme.palette.secondary["default"],
      '&:hover': {
        color: theme.palette.primary["default"]
      }
    },
    disabled: _styles["default"].disabled(theme),
    focus: _styles["default"].focused(theme),
    error: _styles["default"].error(theme)
  };
});
exports.useStyles = useStyles;

var ChipSelectInput = _react["default"].forwardRef(function ChipSelect(_ref, ref) {
  var _cn;

  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? [] : _ref$value,
      onClick = _ref.onClick,
      open = _ref.open,
      _ref$renderComponent = _ref.renderComponent,
      renderComponent = _ref$renderComponent === void 0 ? null : _ref$renderComponent,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      className = _ref.className,
      style = _ref.style,
      disabled = _ref.disabled,
      onChange = _ref.onChange,
      jss = _ref.jss,
      dataKey = _ref.dataKey,
      variant = _ref.variant,
      error = _ref.error,
      noClear = _ref.noClear,
      placeholder = _ref.placeholder,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["value", "onClick", "open", "renderComponent", "name", "className", "style", "disabled", "onChange", "jss", "dataKey", "variant", "error", "noClear", "placeholder"]);
  var classes = useStyles({
    jss: jss
  });
  var SelectedItemComponent = renderComponent || _Chip["default"];

  var handleRemoveChip = function handleRemoveChip(e, selectedItem) {
    e.stopPropagation();
    var newValue = value === null || value === void 0 ? void 0 : value.filter(function (item) {
      return item !== selectedItem;
    });
    onChange((0, _composeEvent["default"])(e, {
      value: newValue
    }), newValue);
  };

  return /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: (0, _classnames["default"])(classes.root, (_cn = {}, (0, _defineProperty2["default"])(_cn, classes.disabled, disabled), (0, _defineProperty2["default"])(_cn, classes.focus, open), (0, _defineProperty2["default"])(_cn, classes.error, error), _cn), className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/_react["default"].createElement(_Row["default"], {
    spacing: 1,
    fullWidth: true,
    wrap: true,
    align: "center",
    className: (0, _classnames["default"])(classes.input)
  }, /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, !(0, _commonUtility.isEmpty)(value) && value.map(function (val) {
    var key = (0, _isObject["default"])(val) ? val[dataKey] : val;
    var spreadProps = (0, _isObject["default"])(val) ? (0, _extends2["default"])({}, val) : {};
    return /*#__PURE__*/_react["default"].createElement(SelectedItemComponent, (0, _extends2["default"])({
      key: key,
      onClear: handleRemoveChip,
      value: val
    }, spreadProps));
  }), (0, _commonUtility.isEmpty)(value) && /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
    className: classes.placeholder
  }, placeholder))));
});

ChipSelectInput.propTypes = {
  /** Selected value to pass to the input */
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].array, _propTypes["default"].string, _propTypes["default"].number]),
  onClick: _propTypes["default"].func,
  onClear: _propTypes["default"].func,

  /** Disabled boolean indicator */
  disabled: _propTypes["default"].bool,

  /** Additional className */
  className: _propTypes["default"].string,

  /** Additional style */
  style: _propTypes["default"].shape(),

  /** form level name */
  name: _propTypes["default"].string,

  /** Indicator whether or not the dropdown is open */
  open: _propTypes["default"].bool,

  /** Custom node element to render as the value of the input  */
  renderComponent: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].object]),

  /** jss override  */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** Identifier key when passing complex structurs as value, defaults to value */
  dataKey: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string])
};
ChipSelectInput.displayName = 'ChipSelect';
var _default = ChipSelectInput;
exports["default"] = _default;