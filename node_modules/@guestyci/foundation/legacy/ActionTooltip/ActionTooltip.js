"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ActionTooltipBody = _interopRequireDefault(require("./ActionTooltipBody"));

var _Tooltip = _interopRequireDefault(require("../Tooltip/Tooltip"));

var _enums = require("../../enums/enums");

var ActionTooltip = function ActionTooltip(_ref) {
  var actionType = _ref.actionType,
      actionText = _ref.actionText,
      actionHref = _ref.actionHref,
      href = _ref.href,
      placement = _ref.placement,
      children = _ref.children,
      body = _ref.body,
      delay = _ref.delay,
      theme = _ref.theme,
      onAction = _ref.onAction,
      id = _ref.id,
      className = _ref.className,
      containerClassName = _ref.containerClassName;
  return /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
    placement: placement,
    className: className,
    id: id,
    containerClassName: containerClassName,
    body: /*#__PURE__*/_react["default"].createElement(_ActionTooltipBody["default"], {
      actionType: actionType,
      actionText: actionText,
      actionHref: href || actionHref,
      body: body,
      onAction: onAction
    }),
    autoHide: false,
    delay: delay,
    theme: theme,
    "data-qa": "action-tooltip"
  }, children);
};

ActionTooltip.defaultProps = {
  className: '',
  id: undefined,
  theme: 'dark',
  placement: 'top',
  offset: 5,
  containerClassName: '',
  delay: {
    show: 0,
    hide: 250
  },
  actionHref: '',
  href: '',
  onAction: function onAction() {},
  actionType: _enums.ActionTooltipType.Link
};
ActionTooltip.propTypes = {
  /** Sets the type of the action */
  actionType: _propTypes["default"].oneOf([_enums.ActionTooltipType.Button, _enums.ActionTooltipType.Link]),

  /** Sets the text of the action */
  actionText: _propTypes["default"].node.isRequired,

  /** Sets the href of the action (link) - DEPRECATED - use href */
  actionHref: _propTypes["default"].string,

  /** click href for link type */
  href: _propTypes["default"].string,

  /** Node - the component wrapped by the tooltip */
  children: _propTypes["default"].node.isRequired,

  /** String - Set the tooltip trigger id */
  id: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** String - Additional tooltip component class */
  className: _propTypes["default"].string,
  // /** String - Additional tooltip component class */
  containerClassName: _propTypes["default"].string,

  /** Set the theme for the tooltip */
  theme: _propTypes["default"].oneOf(['dark', 'light', 'error']),

  /** Popover placement supporting (top, bottom, left, right ) => <pos>-start, <pos>-end */
  placement: _propTypes["default"].string,

  /** set custom offset to tooltip arrow */
  offset: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /** Set show/hide delay for dialog - structure {show, hide} or number */
  delay: _propTypes["default"].oneOfType([_propTypes["default"].shape({
    show: _propTypes["default"].number,
    hide: _propTypes["default"].number
  }), _propTypes["default"].number]),

  /** Callback function - called when clicking the tooltip action */
  onAction: _propTypes["default"].func,

  /** Sets the body (content) of the tooltip F.E: text to be displayed */
  body: _propTypes["default"].node.isRequired
};
var _default = ActionTooltip;
exports["default"] = _default;