import React from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import cn from 'classnames';
import createStyles from '@guestyci/foundation/createStyles';
import Icon from '@guestyci/foundation/Icon';
import { ListItem } from '@guestyci/foundation/List';
import { Section, Row } from '@guestyci/foundation/Layout';
import Divider from '@guestyci/foundation/Divider';
import TextField from '@guestyci/foundation/TextField';
import { gray400, gray200 } from '@guestyci/foundation/theme/colors';
import Link from "../Link";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      letterSpacing: '0.4px',
      '&:hover $label': {
        color: theme.palette.link,
        fontWeight: theme.typography.fontWeight.bold,
        letterSpacing: '0.1px !important'
      }
    },
    divider: {
      borderColor: theme.palette.brand.primary,
      height: 'auto'
    },
    content: {},
    label: {},
    iconContainer: {
      minWidth: '24px',
      height: '24px',
      width: '24px',
      marginRight: theme.spacer(2)
    },
    icon: {
      fill: gray400
    },
    overflowHidden: {
      overflow: 'hidden'
    }
  };
});

var listItemJssOverrides = function listItemJssOverrides(theme) {
  return {
    selected: {
      color: theme.palette.brand.primary,
      backgroundColor: gray200,
      letterSpacing: '0.1px !important',
      borderRadius: 0
    }
  };
};

var MenuItem = function MenuItem(_ref) {
  var children = _ref.children,
      _ref$to = _ref.to,
      to = _ref$to === void 0 ? '' : _ref$to,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      icon = _ref.icon,
      className = _ref.className,
      _ref$jss = _ref.jss,
      jss = _ref$jss === void 0 ? {} : _ref$jss;
  var classes = useStyles({
    jss: jss
  });
  return /*#__PURE__*/React.createElement(Link, {
    to: to
  }, /*#__PURE__*/React.createElement(Row, {
    className: cn(classes.root, className),
    justify: "between"
  }, /*#__PURE__*/React.createElement(ListItem, {
    variant: "button",
    value: to,
    selected: selected,
    onClick: onClick,
    className: cn(classes.overflowHidden, classes.content),
    jss: listItemJssOverrides
  }, icon && /*#__PURE__*/React.createElement(Section, {
    className: classes.iconContainer,
    justify: "center",
    align: "center"
  }, /*#__PURE__*/React.createElement(Icon, {
    svg: icon,
    className: classes.icon
  })), /*#__PURE__*/React.createElement(TextField, {
    overflowEllipsis: true,
    className: classes.label,
    bold: selected
  }, children)), /*#__PURE__*/React.createElement(Divider, {
    thickness: 3,
    orientation: "vertical",
    className: selected ? classes.divider : ''
  })));
};

MenuItem.propTypes = {
  /** children passed to the ListItem - string or Node */
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,

  /** A route value to be passed when clicked */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /** Function to be called when clicked */
  onClick: PropTypes.func,

  /** Flag that marks the menu item as selected */
  selected: PropTypes.bool,

  /** Icon to be shown to the left of the title */
  icon: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Jss override to create custom styles */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /* Additional class name to be added to the MenuItem root */
  className: PropTypes.string
};
export default MenuItem;