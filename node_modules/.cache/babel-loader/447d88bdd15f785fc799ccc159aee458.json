{"ast":null,"code":"var _jsxFileName = \"/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/screens/AccountAddScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Resource from '@guestyci/agni';\nimport RaisedButton from '@guestyci/foundation/RaisedButton';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport Form from '@guestyci/foundation/Form';\nimport Input from '@guestyci/foundation/Input';\nimport DateRangePicker from '@guestyci/foundation/DatePicker/DateRangePicker';\nimport SingleDatePicker from '@guestyci/foundation/DatePicker/SingleDatePicker';\nimport NumberPicker from '@guestyci/foundation/NumberPicker';\nimport EmailInput from '@guestyci/foundation/EmailInput';\nimport Dropdown, { Option } from '@guestyci/foundation/Dropdown';\nimport TextField from '@guestyci/foundation/TextField';\nimport TextArea from '@guestyci/foundation/TextArea';\nimport Col from '@guestyci/foundation/Layout/Col';\nimport Section from '@guestyci/foundation/Layout/Section';\nimport DurationPicker from '@guestyci/foundation/DurationPicker';\nimport TimePicker from '@guestyci/foundation/TimePicker';\nimport FormField from '@guestyci/foundation/FormField';\nimport FormGroup from '@guestyci/foundation/FormGroup';\nimport { FormProvider } from '@guestyci/foundation/enums'; // import { email } from '@guestyci/foundation/validators';\n\nimport createStyles from '@guestyci/foundation/createStyles';\nimport ErrorBanner from '@guestyci/foundation/legacy/Table/ErrorBanner';\nimport { useToast } from '@guestyci/foundation/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = createStyles(theme => ({\n  app: {\n    backgroundColor: 'white'\n  }\n}));\nexport default function AccountAddScreen(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    addToast\n  } = useToast();\n  const {\n    api,\n    env,\n    config\n  } = Resource.create();\n  const {\n    id\n  } = useParams();\n  console.log('id:', id);\n  const [firstName, setFirstName] = useState();\n  const [lastName, setLastName] = useState();\n  const [email, setEmail] = useState();\n  const [emails, setEmails] = useState([]);\n  const [password, setPassword] = useState();\n  const errorMessage = 'There was a problem add the user.';\n  const [error, setError] = useState(false);\n\n  const onSubmit = e => {\n    // e.preventDefault();\n    console.log('onSubmit');\n    console.log(firstName);\n    console.log(lastName);\n    console.log(email);\n    console.log(emails);\n    console.log(password);\n\n    async function createUser() {\n      try {\n        const response = await api.post(`/users`, {\n          firstName,\n          lastName,\n          email,\n          emails,\n          password\n        }); // will go to `${config.MAILER_URL}/users`\n\n        console.log('response:', response); // const data = response.data;]\n\n        if (response.status === 200) {\n          addToast.success(`user ${firstName} was add successfully`);\n          props.history.push('/');\n        } else {\n          console.log('response.status: ', response.status);\n        }\n      } catch (error) {\n        console.log('error:', error);\n        addToast.danger(\"error adding the user\");\n        setError(true); // setTimeout(() => {\n        //   setError(false);\n        // }, 3000);\n      }\n    }\n\n    createUser(); // props.history.push(\"/\");\n  };\n\n  const closeError = () => {\n    setError(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    className: classes.app,\n    justify: \"center\",\n    \"data-qa\": \"account-add-screen\",\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      spacing: 6,\n      span: 6,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"h2\",\n        children: [\"Add User:\", firstName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FinalForm, {\n        onSubmit: onSubmit,\n        initialValues: {},\n        render: ({\n          handleSubmit\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          title: \"Create User\",\n          onSubmit: handleSubmit,\n          provider: FormProvider.Final,\n          fieldInstance: Field,\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(FormField, {\n                label: \"First Name\",\n                name: \"firstName\" //   info=\"Drama, Action etc.\"\n                ,\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"firstName\",\n                  value: firstName,\n                  placeholder: firstName,\n                  onChange: e => setFirstName(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormField, {\n                label: \"Last Name\",\n                name: \"lastName\",\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"lastName\",\n                  value: lastName,\n                  placeholder: lastName,\n                  onChange: e => setLastName(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormField, {\n                label: \"Email\",\n                name: \"email\",\n                children: /*#__PURE__*/_jsxDEV(EmailInput, {\n                  name: \"email\",\n                  value: email,\n                  placeholder: email // validate={[email]}\n                  ,\n                  onChange: e => setEmail(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormField, {\n                label: \"Emails\",\n                name: \"emails\",\n                children: /*#__PURE__*/_jsxDEV(EmailInput, {\n                  name: \"emails\",\n                  value: emails,\n                  placeholder: emails // validate={[email]}\n                  ,\n                  onChange: e => setEmails(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(FormField, {\n                label: \"Password\",\n                name: \"password\",\n                children: /*#__PURE__*/_jsxDEV(Input, {\n                  name: \"password\",\n                  type: password,\n                  value: password,\n                  placeholder: password,\n                  validate: [password],\n                  onChange: e => setPassword(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(RaisedButton, {\n              type: \"submit\",\n              children: \"Create User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this), error && /*#__PURE__*/_jsxDEV(ErrorBanner, {\n              show: error,\n              errorMessage: errorMessage,\n              onClick: closeError,\n              actionText: \"Try again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountAddScreen, \"QgmAgQ7QRNG/FMZKNZdcfk6aotU=\", false, function () {\n  return [useStyles, useToast, useParams];\n});\n\n_c = AccountAddScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountAddScreen\");","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/screens/AccountAddScreen.js"],"names":["React","useEffect","useState","useParams","Resource","RaisedButton","Form","FinalForm","Field","Input","DateRangePicker","SingleDatePicker","NumberPicker","EmailInput","Dropdown","Option","TextField","TextArea","Col","Section","DurationPicker","TimePicker","FormField","FormGroup","FormProvider","createStyles","ErrorBanner","useToast","useStyles","theme","app","backgroundColor","AccountAddScreen","props","classes","addToast","api","env","config","create","id","console","log","firstName","setFirstName","lastName","setLastName","email","setEmail","emails","setEmails","password","setPassword","errorMessage","error","setError","onSubmit","e","createUser","response","post","status","success","history","push","danger","closeError","handleSubmit","Final","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Resource from '@guestyci/agni';\n\nimport RaisedButton from '@guestyci/foundation/RaisedButton';\n\nimport { Form as FinalForm, Field } from 'react-final-form';\n\nimport Form from '@guestyci/foundation/Form';\nimport Input from '@guestyci/foundation/Input';\nimport DateRangePicker from '@guestyci/foundation/DatePicker/DateRangePicker';\nimport SingleDatePicker from '@guestyci/foundation/DatePicker/SingleDatePicker';\nimport NumberPicker from '@guestyci/foundation/NumberPicker';\nimport EmailInput from '@guestyci/foundation/EmailInput';\nimport Dropdown, { Option } from '@guestyci/foundation/Dropdown';\nimport TextField from '@guestyci/foundation/TextField';\nimport TextArea from '@guestyci/foundation/TextArea';\nimport Col from '@guestyci/foundation/Layout/Col';\nimport Section from '@guestyci/foundation/Layout/Section';\nimport DurationPicker from '@guestyci/foundation/DurationPicker';\nimport TimePicker from '@guestyci/foundation/TimePicker';\n\nimport FormField from '@guestyci/foundation/FormField';\nimport FormGroup from '@guestyci/foundation/FormGroup';\nimport { FormProvider } from '@guestyci/foundation/enums';\n// import { email } from '@guestyci/foundation/validators';\nimport createStyles from '@guestyci/foundation/createStyles';\n\n\n\nimport ErrorBanner from '@guestyci/foundation/legacy/Table/ErrorBanner';\n\nimport  { useToast } from '@guestyci/foundation/Toast';\n\n\nconst useStyles = createStyles((theme) => ({\n  app: {\n    backgroundColor: 'white',\n  },\n}));\n\nexport default function AccountAddScreen(props) {\n  const classes = useStyles();\n  const { addToast } = useToast();\n\n  const { api, env, config } = Resource.create();\n\n  const { id } = useParams();\n  console.log('id:', id);\n\n  const [firstName, setFirstName] = useState();\n\n  const [lastName, setLastName] = useState();\n\n  const [email, setEmail] = useState();\n  const [emails, setEmails] = useState([]);\n\n  const [password, setPassword] = useState();\n\n  const errorMessage = 'There was a problem add the user.';\n\n  const [error, setError] = useState(false);\n  const onSubmit = (e) => {\n    // e.preventDefault();\n\n    console.log('onSubmit');\n    console.log(firstName);\n    console.log(lastName);\n    console.log(email);\n    console.log(emails);\n    console.log(password);\n\n    async function createUser() {\n      try {\n        const response = await api.post(`/users`, {\n          firstName,\n          lastName,\n          email,\n          emails,\n          password,\n        }); // will go to `${config.MAILER_URL}/users`\n        console.log('response:', response);\n        // const data = response.data;]\n\n        if (response.status === 200) {\n          addToast.success(`user ${firstName} was add successfully`)\n          props.history.push('/');\n        } else {\n          console.log('response.status: ', response.status);\n        }\n      } catch (error) {\n        console.log('error:', error);\n        addToast.danger(\"error adding the user\")\n\n        setError(true);\n\n        // setTimeout(() => {\n        //   setError(false);\n        // }, 3000);\n      }\n    }\n    createUser();\n\n    // props.history.push(\"/\");\n  };\n\n  const closeError = () => {\n    setError(false);\n  };\n\n  return (\n    <Section className={classes.app} justify=\"center\">\n      <Col spacing={6} span={6}>\n        <TextField variant=\"h2\">\n          Add User:\n          {firstName} \n        </TextField>\n        <FinalForm\n          onSubmit={onSubmit}\n          initialValues={{}}\n          render={({ handleSubmit }) => (\n            <Form\n              title=\"Create User\"\n              onSubmit={handleSubmit}\n              provider={FormProvider.Final}\n              fieldInstance={Field}\n            >\n              <FormGroup>\n                <FormGroup>\n                  <FormField\n                    label=\"First Name\"\n                    name=\"firstName\"\n                    //   info=\"Drama, Action etc.\"\n                  >\n                    <Input\n                      name=\"firstName\"\n                      value={firstName}\n                      placeholder={firstName}\n                      onChange={(e) => setFirstName(e.target.value)}\n                    />\n                  </FormField>\n                  <FormField label=\"Last Name\" name=\"lastName\">\n                    <Input\n                      name=\"lastName\"\n                      value={lastName}\n                      placeholder={lastName}\n                      onChange={(e) => setLastName(e.target.value)}\n                    />\n                  </FormField>\n\n                  <FormField label=\"Email\" name=\"email\">\n                    <EmailInput\n                      name=\"email\"\n                      value={email}\n                      placeholder={email}\n                      // validate={[email]}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormField>\n\n                  <FormField label=\"Emails\" name=\"emails\">\n                    <EmailInput\n                      name=\"emails\"\n                      value={emails}\n                      placeholder={emails}\n                      // validate={[email]}\n                      onChange={(e) => setEmails(e.target.value)}\n                    />\n                  </FormField>\n\n                  <FormField label=\"Password\" name=\"password\">\n                    <Input\n                      name=\"password\"\n                      type={password}\n                      value={password}\n                      placeholder={password}\n                      validate={[password]}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormField>\n                </FormGroup>\n                {/* <FormField label=\"Country\" info=\"e.g (US)\" name=\"country\">\n                    <Input />\n                  </FormField>\n                  <FormField label=\"Runtime\" name=\"runtime\">\n                    <Input />\n                  </FormField>\n                  <FormField label=\"Contact\" name=\"contact\">\n                    <Input />\n                  </FormField>\n                  <FormField label=\"Biography\" name=\"bigraphy\" required>\n                    <TextArea />\n                  </FormField>\n                  <FormField label=\"Age\" name=\"age\" required>\n                    <NumberPicker />\n                  </FormField> */}\n                {/* <FormField\n                  label=\"Email\"\n                  name=\"email\"\n                  validate={[email]}\n                  required\n                >\n                  <EmailInput\n                    name=\"email\"\n                    value={email}\n                    placeholder={email}\n                  />\n                </FormField> */}\n                {/* <FormField label=\"Gender\" name=\"gender\" required>\n                    <Dropdown>\n                      {['Male', 'Female'].map((gender) => (\n                        <Option value={gender} key={gender}>\n                          {gender}\n                        </Option>\n                      ))}\n                    </Dropdown>\n                  </FormField>\n                  <FormField\n                    label=\"Single Date Picker\"\n                    name=\"singleDatePicker\"\n                    required\n                  >\n                    <SingleDatePicker />\n                  </FormField>\n                  <FormField\n                    label=\"Date Range Picker\"\n                    name=\"dateRangePicker\"\n                    required\n                  >\n                    <DateRangePicker />\n                  </FormField>\n                  <FormField label=\"Time picker\" name=\"time\" required>\n                    <TimePicker />\n                  </FormField>\n                  <FormField label=\"Duration picker\" name=\"duration\" required>\n                    <DurationPicker />\n                  </FormField> */}\n                <RaisedButton type=\"submit\">Create User</RaisedButton>\n\n                {error && (\n                  <ErrorBanner\n                    show={error}\n                    errorMessage={errorMessage}\n                    onClick={closeError}\n                    actionText=\"Try again\"\n                  />\n                )}\n              </FormGroup>\n            </Form>\n          )}\n        />\n      </Col>\n    </Section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}