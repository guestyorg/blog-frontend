import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

var Link = /*#__PURE__*/function (_PureComponent) {
  _inherits(Link, _PureComponent);

  var _super = _createSuper(Link);

  function Link() {
    var _this;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleClick = function () {
      var href = _this.props.href;

      if (href) {
        window.open(href, '_blank');
      }
    };

    return _this;
  }

  _createClass(Link, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          style = _this$props.style,
          children = _this$props.children,
          color = _this$props.color,
          props = _objectWithoutProperties(_this$props, ["className", "style", "children", "color"]);

      return /*#__PURE__*/React.createElement("div", _extends({
        role: "presentation",
        className: cn('text-hover-blue', 'd-flex', 'align-items-center', 'fill-hover-blue', 'transition-all', 'clickable', _defineProperty({}, "text-".concat(color, " fill-").concat(color), color), className),
        onClick: this.handleClick,
        style: style
      }, props, {
        "data-qa": "link"
      }), children);
    }
  }]);

  return Link;
}(PureComponent);

Link.defaultProps = {
  className: '',
  style: {},
  href: '',
  color: 'white'
};
Link.propTypes = {
  /** Additional class to add to the link component */
  className: PropTypes.string,

  /** Additional styles to add to the link component  */
  style: PropTypes.shape(),

  /** Url to redirect on click */
  href: PropTypes.string,

  /** The item to render inside the link */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,

  /** Color for link text */
  color: PropTypes.string
};
export default Link;