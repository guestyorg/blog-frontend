"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactJss = require("react-jss");

var _reactstrap = require("reactstrap");

var _DialogHeader = _interopRequireDefault(require("./DialogHeader"));

var _DialogFooter = _interopRequireDefault(require("./DialogFooter"));

var _DialogXHeader = _interopRequireDefault(require("./DialogXHeader"));

var useStyles = (0, _reactJss.createUseStyles)({
  modalContentWithMaxHeight: {
    minHeight: '250px !important ',
    maxHeight: '620px !important'
  },
  modalContent: {
    minHeight: '250px !important '
  }
});

var Dialog = function Dialog(_ref) {
  var onConfirm = _ref.onConfirm,
      value = _ref.value,
      onClose = _ref.onClose,
      isOpen = _ref.isOpen,
      title = _ref.title,
      headerRightComponent = _ref.headerRightComponent,
      footerLeftComponent = _ref.footerLeftComponent,
      showCancel = _ref.showCancel,
      isSubmitting = _ref.isSubmitting,
      type = _ref.type,
      confirmTitle = _ref.confirmTitle,
      cancelTitle = _ref.cancelTitle,
      disabled = _ref.disabled,
      children = _ref.children,
      noFooter = _ref.noFooter,
      bodyClassName = _ref.bodyClassName,
      className = _ref.className,
      centered = _ref.centered,
      windowScroll = _ref.windowScroll,
      disabledModalContentPadding = _ref.disabledModalContentPadding,
      onOpened = _ref.onOpened,
      onClosed = _ref.onClosed;
  var classes = useStyles();
  var handleConfirmClick = (0, _react.useCallback)(function () {
    if (onConfirm) {
      onConfirm(value);
    }
  });
  var handleCloseClick = (0, _react.useCallback)(function () {
    if (onClose) {
      onClose(value);
    }
  });
  var isXDialog = !title && noFooter;
  var modalContentClass = windowScroll ? classes.modalContent : classes.modalContentWithMaxHeight;
  return /*#__PURE__*/_react["default"].createElement(_reactstrap.Modal, {
    onOpened: onOpened,
    onClosed: onClosed,
    centered: centered,
    isOpen: isOpen,
    className: className,
    contentClassName: (0, _classnames["default"])('box-shadow-center-heavy', modalContentClass, (0, _defineProperty2["default"])({}, "".concat(isXDialog ? 'pb-6 pl-9 pt-4 pr-4' : 'px-9'), !disabledModalContentPadding)),
    "data-qa": "dialog"
  }, title && /*#__PURE__*/_react["default"].createElement(_DialogHeader["default"], {
    type: type,
    title: title,
    rightComponent: headerRightComponent
  }), isXDialog && /*#__PURE__*/_react["default"].createElement(_DialogXHeader["default"], {
    onClick: handleCloseClick,
    setAbsoluteRight: disabledModalContentPadding
  }), /*#__PURE__*/_react["default"].createElement(_reactstrap.ModalBody, {
    className: (0, _classnames["default"])("".concat(!disabledModalContentPadding && isXDialog ? 'pr-5 pl-0 pt-0 pb-0' : 'p-0'), 'overflow-y-auto', bodyClassName)
  }, children), !noFooter && /*#__PURE__*/_react["default"].createElement(_DialogFooter["default"], {
    disabled: disabled,
    isSubmitting: isSubmitting,
    showCancel: showCancel,
    showConfirm: !!onConfirm,
    cancelTitle: cancelTitle,
    confirmTitle: confirmTitle,
    onCancel: handleCloseClick,
    onConfirm: handleConfirmClick,
    leftComponent: footerLeftComponent
  }));
};

Dialog.defaultProps = {
  title: '',
  headerRightComponent: null,
  footerLeftComponent: null,
  onConfirm: undefined,
  confirmTitle: 'Save',
  cancelTitle: 'Cancel',
  disabled: false,
  value: null,
  noFooter: false,
  isSubmitting: false,
  showCancel: true,
  bodyClassName: '',
  className: '',
  type: 'primary',
  centered: false,
  windowScroll: false,
  disabledModalContentPadding: false
};
Dialog.propTypes = {
  /** Indicator whether or not the dialog should be open */
  isOpen: _propTypes["default"].bool.isRequired,

  /** Dialog body element */
  children: _propTypes["default"].node.isRequired,

  /** CallBack function to dismiss dialog */
  onClose: _propTypes["default"].func.isRequired,

  /** Header title for dialog */
  title: _propTypes["default"].string,

  /** Dialog header right element */
  headerRightComponent: _propTypes["default"].node,

  /** Dialog footer left element */
  footerLeftComponent: _propTypes["default"].node,

  /** Dialog confirm title for footer confirm button */
  confirmTitle: _propTypes["default"].string,

  /** Dialog cancel title for footer cancel button */
  cancelTitle: _propTypes["default"].string,

  /** Callback for the confirm button click -
   * not defining this will cause the confirm button to not render */
  onConfirm: _propTypes["default"].func,

  /** Indicator whether or not the dialog confirm button is disabled */
  disabled: _propTypes["default"].bool,

  /** Payload to pass on dialog callback click */
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number, _propTypes["default"].shape()]),

  /** Indicator whether or not to remove the footer */
  noFooter: _propTypes["default"].bool,

  /** Indicator whether or not to show the primary button in loading state */
  isSubmitting: _propTypes["default"].bool,

  /** Indicator whether or not to show the cancel button on the footer */
  showCancel: _propTypes["default"].bool,

  /** Additional class name to body */
  bodyClassName: _propTypes["default"].string,

  /** Additional class name to the dialog box  */
  className: _propTypes["default"].string,

  /** Set dialog type (error, primary) */
  type: _propTypes["default"].oneOf(['error', 'primary']),

  /** Indicator whether or not to center the modal */
  centered: _propTypes["default"].bool,

  /** Indicator whether or not dialog should have content scroll vs windowScroll */
  windowScroll: _propTypes["default"].bool,

  /** Indicator whether the dialog content will fill the full dialog without padding */
  disabledModalContentPadding: _propTypes["default"].bool,

  /** Callback triggered after open transition - Not this is only in special cases where you want a callback after the animation of open has ended */
  onOpened: _propTypes["default"].func,

  /** Callback triggered after exist animation - Not this is only in special cases where you want a callback after the animation of close has ended */
  onClosed: _propTypes["default"].func
};
var _default = Dialog;
exports["default"] = _default;