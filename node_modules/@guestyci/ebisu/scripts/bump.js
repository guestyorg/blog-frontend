const path = require('path');
const semver = require('semver');
const fs = require('fs');
const git = require('../util/git');
const { getPackageJsonPath, getChangelogPath } = require('../util/files');

const availableIncrements = new Set(['major', 'minor', 'patch']);

const getNextVersion = (version, inc, stable) => {
  const increment = inc || 'patch';

  if (!availableIncrements.has(increment)) {
    console.warn('Please choose a valid semver increment type');
    throw new Error(inc + ' is not a valid semver increment type');
  }

  if (stable) {
    return semver.inc(version, increment);
  } else {
    // calculate next available alpha

    const nextVersion = semver.prerelease(version)
      ? semver.inc(version, `prerelease`, 'alpha')
      : semver.inc(version, `pre${increment}`, 'alpha');

    const nextVersionSlug = nextVersion.slice(
      0,
      nextVersion.lastIndexOf('.') + 1
    );

    const latestAlpha = git
      .listLatestTags()
      .filter(version => version.includes(nextVersionSlug))
      .map(version => 1 * version.slice(version.lastIndexOf('.') + 1))
      .sort((a, b) => b - a)[0];

    const nextVersionAlpha =
      nextVersion.slice(nextVersion.lastIndexOf('.') + 1) * 1;

    if (latestAlpha >= nextVersionAlpha) {
      return nextVersionSlug + (latestAlpha + 1);
    } else {
      return nextVersion;
    }
  }
};

const updateVersion = (packageJson, inc, stable) => {
  const packageJsonPath = getPackageJsonPath();

  packageJson.version = getNextVersion(packageJson.version, inc, stable);
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));

  return packageJson.version;
};

const leftPad0 = n => ('0' + n).slice(-2);

const updateChangelog = async version => {
  const now = new Date();
  const dmy =
    leftPad0(now.getDate()) +
    '/' +
    leftPad0(now.getMonth() + 1) +
    '/' +
    now.getFullYear();

  const changelogPath = getChangelogPath();

  if (fs.existsSync(changelogPath) && !git.isAlpha(version)) {
    const changelog = fs.readFileSync(changelogPath, 'utf8');
    const cleanChangelog = changelog.replace('## Unpublished', '');
    const newDeployTitle = `## ${version} - ${dmy}`;
    fs.writeFileSync(
      changelogPath,
      `## Unpublished  \n${newDeployTitle}  ${cleanChangelog}`
    );
  }
};

module.exports = {
  updateVersion,
  updateChangelog,
};
