import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import isEmpty from 'lodash/isEmpty';
import cn from 'classnames';
import createStyles from '@guestyci/foundation/createStyles';
import history from "../utils";
var useStyles = createStyles({
  a: {
    '&:hover': {
      color: 'inherit',
      textDecoration: 'inherit'
    },
    color: 'inherit'
  }
});

var resolvePathName = function resolvePathName() {
  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var currentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
  var serializedPath = path.startsWith('/') ? path.substr(1) : path;

  if (currentPath.endsWith('/')) {
    return "".concat(currentPath).concat(serializedPath);
  }

  var currentPathArray = currentPath.split('/');

  if (currentPathArray.length) {
    currentPathArray.pop();
    var currentPathWithoutLastItem = currentPathArray.join('/');
    return "".concat(currentPathWithoutLastItem, "/").concat(serializedPath);
  }

  return "/".concat(serializedPath);
};

var Link = function Link(_ref) {
  var to = _ref.to,
      href = _ref.href,
      children = _ref.children,
      className = _ref.className,
      onClick = _ref.onClick,
      rest = _objectWithoutProperties(_ref, ["to", "href", "children", "className", "onClick"]);

  var classes = useStyles();
  var target = rest.target;
  var aHref = useMemo(function () {
    if (!isEmpty(href)) {
      return href;
    }

    var location = to;

    if (typeof to === 'string') {
      var locationFromPath = history.parsePath(to);
      locationFromPath.pathname = resolvePathName(locationFromPath.pathname, history.location().pathname);
      location = locationFromPath;
    }

    return location ? history.createHref(location) : '';
  }, [href, to]);
  var onLinkClick = useCallback(function (e) {
    if (!target || target === '_self') {
      e.preventDefault();

      if (e.ctrlKey || e.metaKey) {
        history.link(aHref, true);
      } else if (!isEmpty(to)) {
        history.push(to);
      } else {
        history.link(href, false);
      }
    }

    if (target === '_none') {
      e.preventDefault();
    }

    if (onClick) {
      onClick(e);
    }
  }, [href, to, target, onClick, history]);
  return /*#__PURE__*/React.createElement("a", _extends({
    href: aHref,
    className: cn(classes.a, className),
    onClick: onLinkClick
  }, rest), children);
};

Link.defaultProps = {
  className: '',
  to: '',
  href: ''
};
Link.propTypes = {
  /** Navigation prop for react route navigation */
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape()]),

  /** Navigation prop for window location navigation */
  href: PropTypes.string,

  /** Custom classes to style Link component */
  className: PropTypes.string
};
export default Link;