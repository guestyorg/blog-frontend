import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useState, useMemo, forwardRef } from 'react';
import PropTypes from 'prop-types';
import { OPEN_DOWN } from 'react-dates/lib/constants';
import moment from 'moment';
import 'react-dates/initialize';
import { SingleDatePicker as ReactDatesPicker } from 'react-dates';
import cn from 'classnames';
import createStyles from "../../createStyles";
import DatePickerStyles from "../styles";
import { uuid } from "../../utils/commonUtility";
import NavButton from "../NavButton";
import PickerClearButton from "../../basePicker/PickerClearButton";
import PickerInputButton from "../../basePicker/PickerInputButton";
import Row from "../../Layout/Row";

var BtnCalendar = function BtnCalendar(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("path", {
    d: "M18.5 2h-4V0h-1v2h-6V0h-1v2h-4A2.503 2.503 0 0 0 0 4.5v12C0 17.879 1.122 19 2.5 19h16c1.379 0 2.5-1.121 2.5-2.5v-12C21 3.122 19.879 2 18.5 2zm-16 1h4v.667h1V3h6v.667h1V3h4c.827 0 1.5.673 1.5 1.5V7H1V4.5C1 3.673 1.673 3 2.5 3zm16 15h-16c-.827 0-1.5-.673-1.5-1.5V8h19v8.5c0 .827-.673 1.5-1.5 1.5z"
  }));
};

BtnCalendar.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 21 19"
};
import { DATE_FORMAT, DATE_DISPLAY_FORMAT, MONTH_DISPLAY_FORMAT } from "../constants";
export var useStyles = createStyles(function (theme) {
  return {
    root: DatePickerStyles.root(theme),
    inputContainer: DatePickerStyles.inputContainer,
    focused: DatePickerStyles.focused(theme),
    error: DatePickerStyles.error(theme),
    disabled: DatePickerStyles.disabled(theme)
  };
}, {
  name: 'SingleDatePicker'
});

var renderMonthElement = function renderMonthElement(_ref) {
  var month = _ref.month;
  return month.format(MONTH_DISPLAY_FORMAT);
};

var SingleDatePicker = forwardRef(function SingleDatePicker(_ref2, ref) {
  var id = _ref2.id,
      name = _ref2.name,
      blockedDates = _ref2.blockedDates,
      disabled = _ref2.disabled,
      initialVisibleMonth = _ref2.initialVisibleMonth,
      value = _ref2.value,
      onMonthChange = _ref2.onMonthChange,
      onChange = _ref2.onChange,
      enablePastDays = _ref2.enablePastDays,
      focusedProp = _ref2.focused,
      onFocusChange = _ref2.onFocusChange,
      _ref2$isFetching = _ref2.isFetching,
      isFetching = _ref2$isFetching === void 0 ? false : _ref2$isFetching,
      _ref2$anchorDirection = _ref2.anchorDirection,
      anchorDirection = _ref2$anchorDirection === void 0 ? 'left' : _ref2$anchorDirection,
      _ref2$showClearDate = _ref2.showClearDate,
      showClearDate = _ref2$showClearDate === void 0 ? true : _ref2$showClearDate,
      error = _ref2.error,
      className = _ref2.className,
      style = _ref2.style,
      jss = _ref2.jss,
      rest = _objectWithoutProperties(_ref2, ["id", "name", "blockedDates", "disabled", "initialVisibleMonth", "value", "onMonthChange", "onChange", "enablePastDays", "focused", "onFocusChange", "isFetching", "anchorDirection", "showClearDate", "error", "className", "style", "jss"]);

  var classes = useStyles({
    jss: jss
  });

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      focusedState = _useState2[0],
      setFocusState = _useState2[1];

  var isFocused = focusedProp || focusedState;

  var handleFocusChange = function handleFocusChange(_ref3) {
    var focused = _ref3.focused;

    if (onFocusChange) {
      onFocusChange(focused);
    }

    setFocusState(focused);
  };

  var handleCalendarButtonClick = function handleCalendarButtonClick() {
    if (!isFocused) {
      if (onFocusChange) {
        onFocusChange(true);
      }

      setFocusState(true);
    }
  };

  var renderDayContents = function renderDayContents(day) {
    if (isFetching) {
      return '...';
    }

    return day.date();
  };

  var inputId = useMemo(function () {
    return id || uuid();
  }, [id]);
  var blockedDatesSet = useMemo(function () {
    return new Set(blockedDates || []);
  }, [blockedDates]);

  var isDayBlocked = function isDayBlocked(day) {
    var formattedDay = day.format(DATE_FORMAT);
    return isFetching || !!blockedDatesSet.has(formattedDay);
  };

  var getInitialVisibleMonth = function getInitialVisibleMonth() {
    return initialVisibleMonth ? moment(initialVisibleMonth) : moment();
  };

  var isOutsideRange = enablePastDays ? function () {
    return false;
  } : undefined;

  var handleDateChange = function handleDateChange(newDate) {
    if (onChange) {
      onChange(newDate, name);
    }
  };

  var handleClearDates = function handleClearDates() {
    handleDateChange(undefined);
  };

  return /*#__PURE__*/React.createElement(Row, {
    justify: "between",
    className: cn('date-picker', classes.root, _defineProperty({}, classes.focused, isFocused), _defineProperty({}, classes.error, error), _defineProperty({}, classes.disabled, disabled), className),
    style: style,
    ref: ref
  }, /*#__PURE__*/React.createElement(Row, {
    className: classes.inputContainer
  }, /*#__PURE__*/React.createElement(PickerInputButton, {
    disabled: disabled,
    onClick: handleCalendarButtonClick,
    svg: BtnCalendar,
    active: !!isFocused
  }), /*#__PURE__*/React.createElement(ReactDatesPicker, _extends({
    id: inputId,
    date: value ? moment(value) : value,
    onDateChange: handleDateChange,
    placeholder: "Select",
    focused: isFocused,
    disabled: disabled,
    initialVisibleMonth: getInitialVisibleMonth,
    onFocusChange: handleFocusChange,
    isDayBlocked: isDayBlocked,
    isOutsideRange: isOutsideRange,
    hideKeyboardShortcutsPanel: true,
    noBorder: true,
    openDirection: OPEN_DOWN,
    readOnly: true,
    daySize: 40,
    verticalSpacing: 4,
    numberOfMonths: 1,
    displayFormat: DATE_DISPLAY_FORMAT,
    renderMonthElement: renderMonthElement,
    renderDayContents: renderDayContents,
    appendToBody: false,
    anchorDirection: anchorDirection,
    onNextMonthClick: onMonthChange,
    onPrevMonthClick: onMonthChange,
    navPrev: /*#__PURE__*/React.createElement(NavButton, {
      direction: "Left"
    }),
    navNext: /*#__PURE__*/React.createElement(NavButton, {
      direction: "Right"
    })
  }, rest)), /*#__PURE__*/React.createElement(PickerClearButton, {
    show: value && showClearDate,
    onClick: handleClearDates
  })));
});
SingleDatePicker.displayName = 'SingleDatePicker';
export default SingleDatePicker;
SingleDatePicker.propTypes = {
  /** Id for date picker */
  id: PropTypes.string,

  /** date picker name to be set */
  name: PropTypes.string,

  /** Array of blocked dates - formatted as YYYY-MM-DD */
  blockedDates: PropTypes.arrayOf(PropTypes.string),

  /** Disable state in which picker interaction is not available */
  disabled: PropTypes.bool,

  /** month to be show when the dialog picker opens - formatted as YYYY-MM-DD */
  initialVisibleMonth: PropTypes.string,

  /** the picked date - formatted as YYYY-MM-DD */
  value: PropTypes.string,

  /** callback to be called when a switching months. Called with a momnet object of the new month */
  onMonthChange: PropTypes.func,

  /** Callback to be called on picker value change */
  onChange: PropTypes.func,

  /** Enable past days */
  enablePastDays: PropTypes.bool,

  /** Control focus state - focued => picker opens. Not required - focus state is uncontrolled by default */
  focused: PropTypes.bool,

  /** Callback to be called when focus state changes. Called with a boolean  */
  onFocusChange: PropTypes.func,

  /** Fetching state */
  isFetching: PropTypes.bool,

  /** Anchor direction to open the picker - */
  anchorDirection: PropTypes.oneOf(['left', 'right']),

  /** When dates is selected - show a clear button */
  showClearDate: PropTypes.bool,

  /** Indicator for form error state  */
  error: PropTypes.bool,

  /** class name to be added to the root */
  className: PropTypes.string,

  /** style to be added to the root */
  style: PropTypes.shape(),
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};