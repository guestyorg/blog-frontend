{"ast":null,"code":"var _jsxFileName = \"/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/screens/Account/AccountInfoScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { NavLink, useParams } from \"react-router-dom\";\nimport TextField from \"@guestyci/foundation/TextField\";\nimport Col from \"@guestyci/foundation/Layout/Col\";\nimport Section from \"@guestyci/foundation/Layout/Section\"; // import { email } from \"@guestyci/foundation/validators\";\n\nimport createStyles from \"@guestyci/foundation/createStyles\";\nimport { useToast } from \"@guestyci/foundation/Toast\";\nimport { detailsAccount } from \"../../actions/accountActions\";\nimport { ACCOUNT_DETAILS_RESET } from \"../../constants/accountConstants\";\nimport StatusIndication from \"@guestyci/foundation/StatusIndication\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = createStyles(theme => ({\n  app: {\n    backgroundColor: \"white\"\n  }\n}));\nexport default function AccountInfoScreen(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); // console.log(\"id:\", id);\n  // useSelector\n\n  const accountDetails = useSelector(state => state.accountDetails);\n  const {\n    loading,\n    error: errorAccountDetails,\n    account\n  } = accountDetails; // useDispatch\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!account) {\n      dispatch(detailsAccount(id));\n    }\n  }, [dispatch, props.history, account, id]);\n  useEffect(() => {\n    dispatch({\n      type: ACCOUNT_DETAILS_RESET\n    });\n  }, []);\n\n  const closeError = () => {\n    setError(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    className: classes.app,\n    justify: \"center\",\n    \"data-qa\": \"account-info-screen\",\n    children: [errorAccountDetails && /*#__PURE__*/_jsxDEV(StatusIndication, {\n      variant: \"danger\",\n      text: \"error getting the info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Col, {\n      spacing: 6,\n      span: 6,\n      children: account && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"h1\",\n          children: [\"Account Info:\", account.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"h3\",\n          children: [\"Name: \", account.name, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"h3\",\n          children: [\"Email: \", account.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"h3\",\n          children: [\"Created At: \", new Date(account.createdAt).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"h3\",\n          children: [\"Updated At: \", new Date(account.updatedAt).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountInfoScreen, \"7fd5fhQ0y1t2PorBEj8b/ZfdSck=\", false, function () {\n  return [useStyles, useParams, useSelector, useDispatch];\n});\n\n_c = AccountInfoScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountInfoScreen\");","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/screens/Account/AccountInfoScreen.js"],"names":["React","useEffect","useDispatch","useSelector","NavLink","useParams","TextField","Col","Section","createStyles","useToast","detailsAccount","ACCOUNT_DETAILS_RESET","StatusIndication","useStyles","theme","app","backgroundColor","AccountInfoScreen","props","classes","id","accountDetails","state","loading","error","errorAccountDetails","account","dispatch","history","type","closeError","setError","name","email","Date","createdAt","toLocaleString","updatedAt"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { NavLink, useParams } from \"react-router-dom\";\n\nimport TextField from \"@guestyci/foundation/TextField\";\nimport Col from \"@guestyci/foundation/Layout/Col\";\nimport Section from \"@guestyci/foundation/Layout/Section\";\n\n// import { email } from \"@guestyci/foundation/validators\";\nimport createStyles from \"@guestyci/foundation/createStyles\";\n\nimport { useToast } from \"@guestyci/foundation/Toast\";\nimport {\n  detailsAccount,\n} from \"../../actions/accountActions\";\nimport {\n  ACCOUNT_DETAILS_RESET,\n} from \"../../constants/accountConstants\";\nimport StatusIndication from \"@guestyci/foundation/StatusIndication\";\n\nconst useStyles = createStyles((theme) => ({\n  app: {\n    backgroundColor: \"white\",\n  },\n}));\n\nexport default function AccountInfoScreen(props) {\n  const classes = useStyles();\n\n  const { id } = useParams();\n  // console.log(\"id:\", id);\n\n  // useSelector\n  const accountDetails = useSelector((state) => state.accountDetails);\n  const { loading, error: errorAccountDetails, account } = accountDetails;\n\n  // useDispatch\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!account) {\n      dispatch(detailsAccount(id));\n    }\n  }, [dispatch, props.history, account, id]);\n\n  useEffect(() => {\n    dispatch({ type: ACCOUNT_DETAILS_RESET });\n  }, []);\n\n  const closeError = () => {\n    setError(false);\n  };\n\n  return (\n    <Section className={classes.app} justify=\"center\">\n      {errorAccountDetails && (\n        <StatusIndication variant=\"danger\" text=\"error getting the info\" />\n      )}\n\n      <Col spacing={6} span={6}>\n        {account && (\n          <>\n            <TextField variant=\"h1\">\n              Account Info:\n              {account.name}\n            </TextField>\n            <TextField variant=\"h3\">Name: {account.name} </TextField>\n            <TextField variant=\"h3\">Email: {account.email}</TextField>\n            <TextField variant=\"h3\">\n              Created At: {new Date(account.createdAt).toLocaleString()}\n            </TextField>\n            <TextField variant=\"h3\">\n              Updated At: {new Date(account.updatedAt).toLocaleString()}\n            </TextField>\n          </>\n        )}\n      </Col>\n    </Section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}