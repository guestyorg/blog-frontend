import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import isObject from 'lodash/isObject';
import cn from 'classnames';
import createStyles from "../createStyles";
import InputStyles from "../Input/styles";
import Row from "../Layout/Row";
import Button from "../Button";
import TextField from "../TextField";
import { isEmpty } from "../utils/commonUtility";
import Chip from "./Chip";
import composeEvent from "../utils/composeEvent";
export var useStyles = createStyles(function (theme) {
  return {
    root: _extends({}, theme.typography.primary, {}, InputStyles.shared(theme), {
      paddingRight: 0,
      paddingLeft: theme.spacer(1),
      '&:hover': _extends({}, InputStyles.hover(theme)),
      minHeight: 46,
      maxHeight: 150,
      overflowY: 'auto',
      '&::placeholder': InputStyles.placeholder(theme)
    }),
    input: {
      flex: 1,
      height: '100%'
    },
    placeholder: {
      paddingLeft: theme.spacer(2)
    },
    clearIcon: {
      color: theme.palette.secondary["default"],
      '&:hover': {
        color: theme.palette.primary["default"]
      }
    },
    disabled: InputStyles.disabled(theme),
    focus: InputStyles.focused(theme),
    error: InputStyles.error(theme)
  };
});
var ChipSelectInput = React.forwardRef(function ChipSelect(_ref, ref) {
  var _cn;

  var _ref$value = _ref.value,
      value = _ref$value === void 0 ? [] : _ref$value,
      onClick = _ref.onClick,
      open = _ref.open,
      _ref$renderComponent = _ref.renderComponent,
      renderComponent = _ref$renderComponent === void 0 ? null : _ref$renderComponent,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? '' : _ref$name,
      className = _ref.className,
      style = _ref.style,
      disabled = _ref.disabled,
      onChange = _ref.onChange,
      jss = _ref.jss,
      dataKey = _ref.dataKey,
      variant = _ref.variant,
      error = _ref.error,
      noClear = _ref.noClear,
      placeholder = _ref.placeholder,
      props = _objectWithoutProperties(_ref, ["value", "onClick", "open", "renderComponent", "name", "className", "style", "disabled", "onChange", "jss", "dataKey", "variant", "error", "noClear", "placeholder"]);

  var classes = useStyles({
    jss: jss
  });
  var SelectedItemComponent = renderComponent || Chip;

  var handleRemoveChip = function handleRemoveChip(e, selectedItem) {
    e.stopPropagation();
    var newValue = value === null || value === void 0 ? void 0 : value.filter(function (item) {
      return item !== selectedItem;
    });
    onChange(composeEvent(e, {
      value: newValue
    }), newValue);
  };

  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes.disabled, disabled), _defineProperty(_cn, classes.focus, open), _defineProperty(_cn, classes.error, error), _cn), className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/React.createElement(Row, {
    spacing: 1,
    fullWidth: true,
    wrap: true,
    align: "center",
    className: cn(classes.input)
  }, /*#__PURE__*/React.createElement(React.Fragment, null, !isEmpty(value) && value.map(function (val) {
    var key = isObject(val) ? val[dataKey] : val;
    var spreadProps = isObject(val) ? _extends({}, val) : {};
    return /*#__PURE__*/React.createElement(SelectedItemComponent, _extends({
      key: key,
      onClear: handleRemoveChip,
      value: val
    }, spreadProps));
  }), isEmpty(value) && /*#__PURE__*/React.createElement(TextField, {
    className: classes.placeholder
  }, placeholder))));
});
ChipSelectInput.propTypes = {
  /** Selected value to pass to the input */
  value: PropTypes.oneOfType([PropTypes.shape(), PropTypes.array, PropTypes.string, PropTypes.number]),
  onClick: PropTypes.func,
  onClear: PropTypes.func,

  /** Disabled boolean indicator */
  disabled: PropTypes.bool,

  /** Additional className */
  className: PropTypes.string,

  /** Additional style */
  style: PropTypes.shape(),

  /** form level name */
  name: PropTypes.string,

  /** Indicator whether or not the dropdown is open */
  open: PropTypes.bool,

  /** Custom node element to render as the value of the input  */
  renderComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /** jss override  */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Identifier key when passing complex structurs as value, defaults to value */
  dataKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
};
ChipSelectInput.displayName = 'ChipSelect';
export default ChipSelectInput;