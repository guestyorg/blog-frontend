import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import StepDivider from "../Steps/StepDivider";
import ProgressMapStep from "./ProgressMapStep";

var ProgressMap = /*#__PURE__*/function (_Component) {
  _inherits(ProgressMap, _Component);

  var _super = _createSuper(ProgressMap);

  function ProgressMap() {
    _classCallCheck(this, ProgressMap);

    return _super.apply(this, arguments);
  }

  _createClass(ProgressMap, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          descriptions = _this$props.descriptions,
          className = _this$props.className,
          style = _this$props.style,
          color = _this$props.color,
          width = _this$props.width;
      return /*#__PURE__*/React.createElement("div", {
        className: cn('flex-center', className),
        style: _extends({}, style),
        "data-qa": "progress-map"
      }, descriptions.map(function (item, index, array) {
        if (array.length - 1 !== index) {
          return [/*#__PURE__*/React.createElement(ProgressMapStep, {
            color: color,
            item: index + 1,
            key: "s-".concat(index + 1)
          }), /*#__PURE__*/React.createElement(StepDivider, {
            color: color,
            text: item,
            key: "s-".concat(index + 1),
            width: width
          })];
        }

        return /*#__PURE__*/React.createElement(ProgressMapStep, {
          color: color,
          item: index + 1,
          key: "s-".concat(index + 1),
          "data-qa": "progress-map"
        });
      }));
    }
  }]);

  return ProgressMap;
}(Component);

ProgressMap.defaultProps = {
  color: 'blue',
  width: 150
};
ProgressMap.propTypes = {
  /** Array of descriptions which will define steps count also */
  descriptions: PropTypes.arrayOf(PropTypes.string, PropTypes.node).isRequired,

  /** color for step */
  color: PropTypes.oneOf(['blue', 'gray']),

  /** distance between steps */
  width: PropTypes.number
};
export default ProgressMap;