import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo, useRef, useState, useEffect } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { Menu } from "../Menu";
import TextField from "../TextField";
import MenuItem from "../Menu/MenuItem";
import composeEvent from "../utils/composeEvent";
import createStyles from "../createStyles";
import TimePickerInput from "./TimePickerInput";
import { timePickerStyles } from "./styles";
export var useStyles = createStyles(function (theme) {
  return _extends({}, timePickerStyles(theme));
}, {
  name: 'TimePicker'
});

var generateOptions = function generateOptions(interval) {
  var itemCount = 24 * 60 / interval;

  var padTime = function padTime(t) {
    var padCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
      return "0".concat(t);
    };
    return t < 10 ? padCb(t) : t;
  };

  var minutes = 0;
  return _toConsumableArray(Array(Math.round(itemCount))).map(function () {
    var hours = Math.floor(minutes / 60);
    var isAM = hours < 12;
    var result = "".concat(padTime(hours % 12, function (t) {
      return t === 0 ? '12' : "0".concat(t);
    }), " : ").concat(padTime(minutes % 60), " ").concat(isAM ? 'AM' : 'PM');
    minutes += interval;
    return result;
  });
};

var menuItemjssOverrides = function menuItemjssOverrides(theme) {
  return {
    selected: {
      color: theme.palette.brand.primary
    }
  };
};

var TimePicker = React.forwardRef(function TimePicker(_ref, ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      className = _ref.className,
      style = _ref.style,
      name = _ref.name,
      defaultValue = _ref.defaultValue,
      resetable = _ref.resetable,
      disabled = _ref.disabled,
      jss = _ref.jss,
      interval = _ref.interval,
      error = _ref.error,
      props = _objectWithoutProperties(_ref, ["value", "onChange", "className", "style", "name", "defaultValue", "resetable", "disabled", "jss", "interval", "error"]);

  var classes = useStyles({
    jss: jss
  });
  var anchorRef = useRef();
  var selectedItemRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      open = _useState2[0],
      setOpen = _useState2[1];

  useEffect(function () {
    var selectedItem = selectedItemRef.current;

    if (open && selectedItem) {
      var parent = selectedItem.parentElement;

      if (parent) {
        parent.scroll(0, selectedItem.offsetTop - parent.clientHeight / 2);
      }
    }
  }, [open]);

  var handleInputClick = function handleInputClick() {
    setOpen(!open);
  };

  var handleTimePickerClose = function handleTimePickerClose() {
    setOpen(false);
  };

  var handleInputChange = function handleInputChange(e, inputValue) {
    // work around to solve - see https://github.com/guestyorg/foundation-ui/issues/284
    Object.assign(e.target, {
      name: name,
      value: inputValue
    });
    onChange(e);
    handleTimePickerClose();
  };

  var handleItemClick = function handleItemClick(e, selectedValue) {
    composeEvent(e, {
      name: name,
      value: selectedValue
    });
    onChange(e);
    handleTimePickerClose();
  };

  var handleClearClick = function handleClearClick(e) {
    e.stopPropagation();
    composeEvent(e, {
      name: name
    });
    onChange(e);
  };

  var options = useMemo(function () {
    return generateOptions(interval);
  }, [interval]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn(classes.root, className),
    style: style
  }, props), /*#__PURE__*/React.createElement(TimePickerInput, {
    ref: anchorRef,
    onClick: handleInputClick,
    onChange: handleInputChange,
    onClear: handleClearClick,
    open: open,
    disabled: disabled,
    defaultValue: defaultValue,
    resetable: resetable,
    value: value,
    error: error
  }), /*#__PURE__*/React.createElement(Menu, {
    anchorDirection: "start",
    open: open,
    className: classes.menu,
    onClose: handleTimePickerClose,
    variant: "menu",
    fitAnchor: true,
    anchor: anchorRef
  }, options.map(function (option) {
    return /*#__PURE__*/React.createElement(MenuItem, {
      key: option,
      value: option,
      onClick: handleItemClick,
      selected: value === option,
      ref: value === option ? selectedItemRef : undefined,
      jss: menuItemjssOverrides
    }, /*#__PURE__*/React.createElement(TextField, null, option));
  })));
});
TimePicker.defaultProps = {
  interval: 15,
  className: '',
  style: {},
  name: '',
  value: undefined,
  jss: {},
  disabled: false,
  resetable: false,
  defaultValue: undefined
};
TimePicker.propTypes = {
  /** Callback function to be called on value changed - arguments - (event) */
  onChange: PropTypes.func.isRequired,

  /** Additional class for timepicker root */
  className: PropTypes.string,

  /** Additional style for timepicker root */
  style: PropTypes.shape(),

  /** form element name */
  name: PropTypes.string,

  /** Controlled value to set to the time picker */
  value: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** The interval leaps for the picker items in minutes */
  interval: PropTypes.number,

  /** JSS overrides for TimePicker */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** default value to reset to */
  defaultValue: PropTypes.string,

  /** indicator whether or not to allow reset */
  resetable: PropTypes.bool
};
TimePicker.displayName = 'TimePicker';
export default TimePicker;