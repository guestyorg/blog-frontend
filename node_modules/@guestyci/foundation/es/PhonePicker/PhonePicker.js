import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import debounce from 'lodash/debounce';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import useHover from "../useHover";
import useFocus from "../useFocus";
import useComposeRefs from "../useComposeRefs";
import Row from "../Layout/Row";
import Input from "../Input";
import TextField from "../TextField";
import Dropdown, { Option } from "../Dropdown";
import InputActions from "../Input/InputActions";
import InputStyles from "../Input/styles";
import CountryFlagButton from "./CountryFlagButton";
import PhonePickerDropdownItem from "./PhonePickerDropdownItem";
import countries from "./countries";
import * as flags from "./flags";
export const useStyles = createStyles(theme => ({
  root: {
    height: '46px',
    borderRadius: '2px',
    border: `solid 1px ${theme.palette.border}`,
    color: `${theme.palette.text.input} !important`,
    transition: theme.transition.create(),
    '&:hover': InputStyles.hover(theme)
  },
  focused: InputStyles.focused(theme),
  disabled: InputStyles.disabled(theme),
  error: InputStyles.error(theme),
  dialCodeInput: {
    borderStyle: 'none',
    display: 'flex',
    alignItems: 'center',
    '&:hover': {
      borderStyle: 'none'
    },
    paddingLeft: theme.spacer(2),
    paddingRight: theme.spacer(1)
  },
  numberInput: {
    borderStyle: 'none',
    '&:hover': {
      borderStyle: 'none'
    },
    height: '100%',
    paddingLeft: '0px'
  },
  dropdown: {
    width: '45px'
  }
}));
const inputJssOverride = {
  input: {
    height: 'unset',
    width: '100%',
    border: 'none',
    backgroundColor: 'transparent'
  },
  focused: {
    borderStyle: 'none',
    boxShadow: 'none'
  }
};
const defaultCountry = countries.find(({
  name
}) => name === 'United States');
const ALLOWED_SYMBOLS = '0-9-+*#';
export const getCleanNumber = (number, dialCode) => number.replace(new RegExp(`^\\+(${dialCode})|[^${ALLOWED_SYMBOLS}]`, 'g'), '');
export const extractCountry = number => {
  if (!number.startsWith('+')) {
    return;
  }

  let country;
  const countryWithAreaCode = countries.find(c => {
    const {
      dialCode,
      areaCodes
    } = c;

    if (number.startsWith(`+${dialCode}`)) {
      country = c;
      const cleanNumber = getCleanNumber(number, dialCode);
      return areaCodes?.some(code => cleanNumber.startsWith(code));
    }

    return false;
  });
  return countryWithAreaCode || country;
};
const PhonePicker = React.forwardRef(function PhonePicker(_ref, ref) {
  let {
    name = '',
    value = '',
    onChange = noop,
    className = '',
    disabled = false,
    error = null,
    withActions = true,
    primary = false,
    onRemove = noop,
    onStar = noop,
    style = {},
    jss = {}
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["name", "value", "onChange", "className", "disabled", "error", "withActions", "primary", "onRemove", "onStar", "style", "jss"]);

  const classes = useStyles({
    jss
  });
  const [focused, focusRef] = useFocus();
  const [isHovering, hoverRef] = useHover();
  const [country, setCountry] = useState(defaultCountry);
  const [filteredCounties, setFilteredCountries] = useState(countries);
  const containerRef = useComposeRefs(hoverRef, ref);

  const onDropdownChange = e => {
    const {
      value: c
    } = e.target;
    setCountry(c);
    setFilteredCountries(countries);
  };

  const onDropdownSearch = debounce(e => {
    const {
      value: search
    } = e.target;
    const filtered = countries.filter(({
      name: countryName
    }) => countryName.toLowerCase().includes(search.toLowerCase()));
    setFilteredCountries(filtered);
  }, 100);

  const manipulateEvent = (event, newValue) => {
    event.persist();
    Object.defineProperty(event, 'target', {
      value: {
        value: newValue,
        name
      }
    });
    return event;
  };

  const onInputChange = e => {
    const {
      value: inputValue
    } = e.target;

    if (inputValue === '') {
      onChange(e);
      return;
    }

    const regex = new RegExp(`^[${ALLOWED_SYMBOLS}]+$`);

    if (!regex.test(inputValue)) {
      return;
    }

    const newValue = inputValue.startsWith('+') ? inputValue : `+${country.dialCode} ${inputValue}`;
    onChange(manipulateEvent(e, newValue));
  };

  const inputNumber = useMemo(() => {
    const c = extractCountry(value);

    if (!c) {
      return value;
    }

    setCountry(c);
    return getCleanNumber(value, c.dialCode);
  }, [value]);
  return /*#__PURE__*/React.createElement(Row, _extends({}, props, {
    ref: containerRef,
    className: cn(classes.root, {
      [classes.focused]: focused
    }, {
      [classes.disabled]: disabled
    }, {
      [classes.error]: error
    }, className),
    style: style
  }), /*#__PURE__*/React.createElement(Dropdown, {
    value: country,
    disabled: disabled,
    className: classes.dropdown,
    input: /*#__PURE__*/React.createElement(CountryFlagButton, {
      ref: focusRef,
      disabled: disabled,
      CountryIcon: flags[country.iso2.toUpperCase()]
    }),
    onChange: onDropdownChange,
    onSearchQueryChange: onDropdownSearch,
    searchable: true
  }, filteredCounties.map(c => /*#__PURE__*/React.createElement(Option, {
    value: c,
    key: c.iso2
  }, /*#__PURE__*/React.createElement(PhonePickerDropdownItem, {
    country: c
  })))), /*#__PURE__*/React.createElement(TextField, {
    className: classes.dialCodeInput
  }, `+${country.dialCode}`), /*#__PURE__*/React.createElement(Input, {
    value: inputNumber,
    className: classes.numberInput,
    jss: inputJssOverride,
    onChange: onInputChange,
    disabled: disabled,
    name: name,
    suffix: withActions && /*#__PURE__*/React.createElement(InputActions, {
      disabled: disabled,
      show: isHovering,
      primary: primary,
      onRemove: onRemove,
      onStar: onStar,
      name: name
    })
  }));
});
PhonePicker.propTypes = {
  /** Input level name property */
  name: PropTypes.string,

  /** value for controlled component */
  value: PropTypes.string,

  /** Cb for input change - params: {value: String, isValid: Boolean}, id|name {String | number} */
  onChange: PropTypes.func,

  /** Additional class to the top component level */
  className: PropTypes.string,

  /** Additional style to the top component level */
  style: PropTypes.shape(),

  /** Boolean disable/enable component */
  disabled: PropTypes.bool,

  /**  Cb for clicking on the trash icon */
  onRemove: PropTypes.func,

  /** Cb for clicking on the star (set primary) icon */
  onStar: PropTypes.func,

  /** Indicator whether to show the star/trash actions */
  withActions: PropTypes.bool,

  /** Boolean setting the email as primary */
  primary: PropTypes.bool
};
export default PhonePicker;