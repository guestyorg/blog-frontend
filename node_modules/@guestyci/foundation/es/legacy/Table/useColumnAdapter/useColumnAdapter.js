import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import { useMemo, lazy, useCallback } from 'react';
import memoize from 'lodash/memoize';

const useColumnAdapter = ({
  configColumns,
  viewColumns
}, overridingAdapters = []) => {
  const getCellComponent = useCallback(memoize(type => lazy(() => new Promise(resolve => {
    import(`../${type}Cell`).then(resolve).catch(() => resolve(import("../Cell")));
  }))), []);

  const defaultAdapter = ({
    configColumn = {},
    viewColumn = {}
  }) => {
    const {
      id: dataKey,
      headerProps: configHeaderProps,
      cellProps: configCellProps,
      cell,
      title
    } = configColumn,
          configColumnProps = _objectWithoutPropertiesLoose(configColumn, ["id", "headerProps", "cellProps", "cell", "title"]);

    const {
      headerProps: viewHeaderProps,
      cellProps: viewCellProps
    } = viewColumn,
          viewColumnProps = _objectWithoutPropertiesLoose(viewColumn, ["id", "headerProps", "cellProps"]);

    return {
      columnProps: _extends({}, configColumnProps, {}, viewColumnProps, {
        dataKey
      }),
      headerProps: _extends({}, configHeaderProps, {}, viewHeaderProps, {
        children: title
      }),
      cellProps: _extends({}, configCellProps, {}, viewCellProps),
      CellComponent: getCellComponent(cell)
    };
  };

  const tableStructure = useMemo(() => {
    if (!configColumns || !viewColumns) return [];
    const adapters = [defaultAdapter, ...overridingAdapters];
    return viewColumns.map(viewColumn => adapters.reduce((acc, currentAdapter) => {
      const currentColumnMetaData = currentAdapter({
        configColumn: configColumns[viewColumn.id],
        viewColumn
      });
      return _extends({}, acc, {}, currentColumnMetaData);
    }, {}));
  }, [configColumns, viewColumns, ...overridingAdapters]);
  return tableStructure;
};

export default useColumnAdapter;