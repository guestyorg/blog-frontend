import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import queryParser from 'querystring';
import isEmpty from 'lodash/isEmpty';
import isString from 'lodash/isString';
import { getHistory } from "../createHistory/createHistory";
import { postRouteChangeOutOfApp } from "../routerListener/routeListener";
var absWindow = window.parent;
/**
 * Parse string path into location object
 * @param path {String } path to parse
 * @return {{search: string, hash: string, pathname: (*|string)}}
 */

function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}
/**
 * Build the query params to be set on the url
 * @param params    {Object}  The payload object
 * @returns {string}    the formatted query params
 */


function _buildURLQueryParams(params) {
  return queryParser.stringify(params);
}
/**
 * Get the url query params
 * @returns {*}
 */


function getQueryParams() {
  var search = getHistory().location.search.replace('?', '');
  return queryParser.parse(search);
}
/**
 * Build search query params from params and preserve query
 * @param params
 * @param preserveQueryParams
 * @returns {string}
 */


function _buildSearchQueryParam() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var preserveQueryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var newSearch = '';
  var isParamsEmpty = isEmpty(params);
  var search = getHistory().location.search.replace('?', '');

  if (preserveQueryParams && isParamsEmpty) {
    newSearch = search;
  } else if (preserveQueryParams && !isParamsEmpty) {
    var newQuery = _extends({}, params, getQueryParams());

    newSearch = _buildURLQueryParams(newQuery);
  } else if (!preserveQueryParams && !isParamsEmpty) {
    newSearch = _buildURLQueryParams(params);
  }

  return !isEmpty(newSearch) ? "?".concat(newSearch) : newSearch;
}
/**
 * Return the url pathname
 * @param relative  { Boolean } Return the url without the baseUrl, defaults to true
 * @return {String}
 */


function getPathName() {
  var relative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  try {
    return relative ? absWindow.location.pathname.replace(getHistory().baseUrl, '') : absWindow.location.pathname;
  } catch (e) {
    return e;
  }
}
/**
 * Check if url has a specific parameter in it
 * @param param {String || Number}  The url parameter to check if exists
 * @return {Boolean}
 */


function hasInPath(param) {
  try {
    var path = getPathName(false) || '';
    var set = new Set(path.split('/'));
    return set.has(param);
  } catch (e) {
    return e;
  }
}
/**
 * Link to url
 * @param path  {String}  The full path for the link
 * @param isNewTab  {Boolean} Indicator whether or not to show in new tab ( auto - true)
 */


function link(path) {
  var isNewTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (isNewTab) {
    absWindow.open(path, '_blank');
  } else if (getHistory().isFragment) {
    postRouteChangeOutOfApp(path);
  }
}
/**
 * Set query params into the url
 * @param params  {Object} the query param object to set
 * @param preservePrevious  {Boolean}  indicator whether or not to preserve the previous query params
 */


function setQueryParams(params) {
  var preservePrevious = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var search = _buildSearchQueryParam(params, preservePrevious);

  getHistory().push({
    search: search
  });
}
/**
 * Navigate to new container
 * @param pathname {String} The route to nav to
 * @param params {Object} The query params to pass as object
 * @param preserveQueryParams
 */


function go(pathname) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var preserveQueryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!isEmpty(pathname)) {
    var search;

    if (isString(params)) {
      search = params;
    } else {
      search = _buildSearchQueryParam(params, preserveQueryParams);
    }

    getHistory().push({
      pathname: pathname,
      search: search
    });
  }
}
/**
 * Replace the current history
 * @param pathname
 * @param search
 * @param rest
 */


function replace(_ref) {
  var pathname = _ref.pathname,
      search = _ref.search,
      rest = _objectWithoutProperties(_ref, ["pathname", "search"]);

  var formattedSearch = isString(search) ? search : _buildSearchQueryParam(search);
  getHistory().replace(_extends({
    pathname: pathname,
    search: formattedSearch
  }, rest));
}
/**
 * Navigation function allowing user to push to history
 * @param payload   {String | Object}   String or object with the route
 * if object possible attributes are : { pathname - string : route to navigate to, search - object: query params to set to url  }
 * @param preserveQueryParams  { Boolean } Indicator whether or not to keep query params
 */


function push(payload, preserveQueryParams) {
  if (isString(payload)) {
    go(payload);
  } else {
    var pathname = payload.pathname,
        search = payload.search;
    go(pathname, search, preserveQueryParams);
  }
}
/**
 * Return a string of the query params
 * @param params  {Object}  Query params object
 * @return {string}
 */


function stringifyQueryParams(params) {
  return _buildURLQueryParams(params);
}

function location() {
  return getHistory().location;
}

function createHref(href) {
  return getHistory().createHref(href);
}

function length() {
  return getHistory().length;
}

export default {
  listen: getHistory().listen,
  goBack: getHistory().goBack,
  goForward: getHistory().goForward,
  location: location,
  go: go,
  setQueryParams: setQueryParams,
  getPathName: getPathName,
  getQueryParams: getQueryParams,
  link: link,
  hasInPath: hasInPath,
  replace: replace,
  length: length,
  push: push,
  createHref: createHref,
  stringifyQueryParams: stringifyQueryParams,
  parsePath: parsePath
};