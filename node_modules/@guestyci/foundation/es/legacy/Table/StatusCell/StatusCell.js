import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { string, bool, node, shape } from 'prop-types';
import cn from 'classnames';
import Pill from "../../Pill";
import useTranslations from '@guestyci/localize/useTranslations';
import { isEmpty } from "../../../utils";
import Cell from "../Cell";
import Statuses from "./statuses";
const translations = [{
  id: 'smartviews_v3:status_cell.status.pending',
  d: 'Pending'
}, {
  id: 'smartviews_v3:status_cell.status.approved',
  d: 'Approved'
}, {
  id: 'smartviews_v3:status_cell.status.flagged',
  d: 'Flagged'
}, {
  id: 'smartviews_v3:status_cell.status.archived',
  d: 'Archived'
}, {
  id: 'smartviews_v3:status_cell.status.regenerating',
  d: 'Regenerating'
}, {
  id: 'smartviews_v3:status_cell.status.regeneration_failed',
  d: 'Regeneration Failed'
}, {
  id: 'smartviews_v3:status_cell.status.regeneration_required',
  d: 'Regeneration required'
}, {
  id: 'smartviews_v3:status_cell.status.unknown',
  d: 'Unknown'
}];
const statusColors = {
  [Statuses.Pending]: 'yellow',
  [Statuses.Approved]: 'green',
  [Statuses.Flagged]: 'red',
  [Statuses.Archived]: 'gray',
  [Statuses.Regenerating]: 'blue',
  [Statuses.RegenerationFailed]: 'red',
  [Statuses.RegenerationRequired]: 'gray',
  unknown: 'black'
};

function StatusCell(_ref) {
  let {
    status,
    isLoading,
    overflowEllipsis,
    overflowEllipsisTooltip,
    className,
    contentClassName,
    style
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["status", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style"]);

  const [pending, approved, flagged, archived, regenerating, regenerationFailed, regenerationRequired, unknown] = useTranslations(translations);
  const statusTitles = {
    [Statuses.Pending]: pending,
    [Statuses.Approved]: approved,
    [Statuses.Flagged]: flagged,
    [Statuses.Archived]: archived,
    [Statuses.Regenerating]: regenerating,
    [Statuses.RegenerationFailed]: regenerationFailed,
    [Statuses.RegenerationRequired]: regenerationRequired
  };
  const displayStatus = statusTitles[status] || unknown;
  return /*#__PURE__*/React.createElement(Cell, _extends({}, rest, {
    isLoading: isLoading,
    overflowEllipsisTooltip: overflowEllipsisTooltip || displayStatus,
    overflowEllipsis: overflowEllipsis,
    className: cn('status-cell', className),
    contentClassName: contentClassName,
    style: style,
    "data-qa": "status-cell"
  }), !isEmpty(status) && /*#__PURE__*/React.createElement(Pill, {
    bgColor: statusColors[status] || statusColors.unknown,
    className: "text-center"
  }, displayStatus));
}

StatusCell.propTypes = {
  /** value of a status */
  status: string,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: node,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape()
};
StatusCell.defaultProps = {
  status: '',
  isLoading: false,
  className: '',
  contentClassName: '',
  style: {},
  overflowEllipsis: true,
  overflowEllipsisTooltip: null
};
export default StatusCell;