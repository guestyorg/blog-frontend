#!/usr/bin/env node

const ora = require('ora');
const path = require('path');
const fs = require('fs');
const fetch = require('node-fetch');
const FormData = require('form-data');
const rimraf = require('rimraf');

const crowdinBaseURL = 'https://api.crowdin.com/api/project/dashboard-test';
const crowdinUpdateURL = `${crowdinBaseURL}/update-file?&key=${process.env.CROWDIN_API_KEY}`;
const crowdinFilesURL = `${crowdinBaseURL}/info?json&key=${process.env.CROWDIN_API_KEY}`;
const crowdinEnglishLanguageURL = filename =>
  `${crowdinBaseURL}/export-file?key=${process.env.CROWDIN_API_KEY}&file=${filename}&language=en-US`;

const getValidApps = async () => {
  const response = await fetch(crowdinFilesURL, { method: 'POST' }).then(res =>
    res.json()
  );

  const filenames = new Set(response.files.map(file => file.name));
  return filenames;
};

const getCurrentUSKeys = async filename => {
  const keys = await fetch(crowdinEnglishLanguageURL(filename), {
    method: 'GET',
  }).then(res => res.json());

  return keys;
};

const uploadToCrowdin = async localizationJson => {
  const { filename, translations } = localizationJson;

  const validApps = await getValidApps();
  if (!validApps.has(filename)) {
    throw new Error('The localization file does not exist in crowdin. ');
  }

  const currentTranslations = await getCurrentUSKeys(filename);
  const currentKeys = Object.keys(currentTranslations);
  const newKeys = Object.keys(translations);

  currentKeys.forEach(key => {
    if (translations[key] === undefined) {
      throw new Error(
        `Key ${key} exists in old translation but not in new one`
      );
    }
  });

  if (currentKeys.length === newKeys.length) {
    return;
  }

  fs.writeFileSync(
    `${process.cwd()}/${filename}`,
    JSON.stringify(translations)
  );

  const formData = new FormData();
  formData.append(
    `files[${filename}]`,
    fs.createReadStream(`${process.cwd()}/${filename}`)
  );

  formData.append('update_option', 'update_without_changes');
  return fetch(crowdinUpdateURL, { method: 'POST', body: formData });
};

const start = async () => {
  const spinner = ora({ spinner: 'bouncingBar' });
  spinner.color = 'blue';

  try {
    spinner.start('Validating and Uploading new locales to crowdin.');

    const appDir = process.cwd();
    const localizationFilePath = path.resolve(appDir, 'localization.json');

    if (!fs.existsSync(localizationFilePath)) {
      console.log('No localization file, skipping language generation');
      process.exit(0);
    }

    const localizationFile = require(localizationFilePath);
    const upload = await uploadToCrowdin(localizationFile);
    if (!upload) {
      spinner.succeed('Not uploaded with exit code 0');
      process.exit(0);
    }

    rimraf.sync(`${process.cwd()}/${localizationFile.filename}`);
    spinner.succeed('Uploaded.');
  } catch (e) {
    spinner.fail(e.message);
    process.exit(1);
  }
};

start();
