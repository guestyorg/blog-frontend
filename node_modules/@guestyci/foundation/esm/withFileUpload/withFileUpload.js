import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import { CLOUDINARY_URL } from "../constants/constants";
import { openUploadWidget } from "../utils/fileUploadUtility";

var getScript = function getScript(src) {
  var scripts = document.querySelectorAll("script[src=\"".concat(src, "\"]"));

  if (scripts) {
    return scripts[0];
  }

  return null;
};
/**
 * Create a wrapper compose to support upload functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */


function withFileUpload(ComposedComponent) {
  var script = getScript(CLOUDINARY_URL);

  var FileUploadWrapper = /*#__PURE__*/function (_Component) {
    _inherits(FileUploadWrapper, _Component);

    var _super = _createSuper(FileUploadWrapper);

    function FileUploadWrapper(props) {
      var _this;

      _classCallCheck(this, FileUploadWrapper);

      _this = _super.call(this, props);

      _this.onScriptLoad = function () {
        _this.setState({
          loaded: true
        });
      };

      _this.loadScript = function () {
        console.log(script);

        if (!script) {
          script = document.createElement('script');
          script.src = CLOUDINARY_URL;
          script.async = true;
          script.addEventListener('load', _this.onScriptLoad);
          document.body.appendChild(script);
        }
      };

      _this.open = function (_ref) {
        var onSuccess = _ref.onSuccess,
            onFailure = _ref.onFailure,
            rest = _objectWithoutProperties(_ref, ["onSuccess", "onFailure"]);

        var loaded = _this.state.loaded;

        if (loaded && window.cloudinary) {
          openUploadWidget({
            onSuccess: onSuccess,
            onFailure: onFailure,
            rest: rest
          });
        }
      };

      _this.state = {
        loaded: false
      };
      return _this;
    }

    _createClass(FileUploadWrapper, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.loadScript();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        script.removeEventListener('load', this.onScriptLoad);
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
          open: this.open,
          "data-qa": "file-upload-wrapper"
        }));
      }
    }]);

    return FileUploadWrapper;
  }(Component);

  return FileUploadWrapper;
}

export default withFileUpload;