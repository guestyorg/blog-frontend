import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import Button from "../Button";
import { capitalize } from "../utils/commonUtility";
import { blue10, blue700, gray50, gray600 } from "../theme/colors";
import { fade } from "../theme/utils";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      height: 'fit-content',
      overflow: 'hidden',
      width: 'fit-content',
      borderRadius: '50% !important'
    },
    colorTransParent: {
      color: 'inherit',
      '&:not([disabled]):hover': {
        backgroundColor: 'transparent'
      }
    },
    colorPrimary: {
      color: theme.palette.primary["default"],
      '&:not([disabled]):hover': {
        backgroundColor: fade(blue10, 0.3)
      }
    },
    colorSecondary: {
      color: theme.palette.text.secondary,
      '&:not([disabled]):hover': {
        backgroundColor: gray50
      }
    },
    icon: {
      fill: 'currentColor'
    },
    iconXxs: {
      padding: theme.spacer(2)
    },
    iconXs: {
      padding: theme.spacer(2)
    },
    iconSm: {
      padding: theme.spacer(2)
    },
    iconMd: {
      padding: theme.spacer(3)
    },
    iconLg: {
      padding: theme.spacer(3)
    },
    positionSuffix: {
      marginRight: '-15px !important'
    },
    positionPrefix: {
      marginLeft: '-15px !important'
    }
  };
}, {
  name: 'IconButton'
});
export var getIconSize = function getIconSize(size) {
  switch (size) {
    case 'xxs':
      return 10;

    case 'xs':
      return 15;

    case 'md':
      return 25;

    case 'lg':
      return 30;

    default:
      return 20;
  }
};

var getRippleColor = function getRippleColor(color, rippleColor) {
  if (color === 'primary') {
    return blue700;
  }

  if (color === 'secondary') {
    return gray600;
  }

  return rippleColor;
};

var IconButton = React.forwardRef(function IconButton(_ref, ref) {
  var _cn, _children$props, _children$props2, _children$props3;

  var size = _ref.size,
      isLoading = _ref.isLoading,
      onClick = _ref.onClick,
      disabled = _ref.disabled,
      className = _ref.className,
      spinnerColor = _ref.spinnerColor,
      children = _ref.children,
      position = _ref.position,
      jss = _ref.jss,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? 'default' : _ref$color,
      rippleColor = _ref.rippleColor,
      props = _objectWithoutProperties(_ref, ["size", "isLoading", "onClick", "disabled", "className", "spinnerColor", "children", "position", "jss", "color", "rippleColor"]);

  var classes = useStyles({
    jss: jss
  });
  var iconSize = getIconSize(size);
  var iconColor = isLoading ? 'transparent' : color;
  var iconRippleColor = getRippleColor(color, rippleColor);
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    disabled: disabled,
    isLoading: isLoading,
    onClick: onClick,
    rippleColor: iconRippleColor,
    spinnerColor: spinnerColor,
    className: cn(classes.root, (_cn = {}, _defineProperty(_cn, classes["color".concat(capitalize(iconColor))], iconColor !== 'default'), _defineProperty(_cn, classes["icon".concat(capitalize(size))], size), _defineProperty(_cn, classes["position".concat(capitalize(position))], position), _cn), className),
    ref: ref
  }), React.cloneElement(children, {
    className: cn(classes.icon, children === null || children === void 0 ? void 0 : (_children$props = children.props) === null || _children$props === void 0 ? void 0 : _children$props.className),
    height: (children === null || children === void 0 ? void 0 : (_children$props2 = children.props) === null || _children$props2 === void 0 ? void 0 : _children$props2.height) || iconSize,
    width: (children === null || children === void 0 ? void 0 : (_children$props3 = children.props) === null || _children$props3 === void 0 ? void 0 : _children$props3.width) || iconSize
  }));
});
IconButton.defaultProps = {
  onClick: noop,
  isLoading: false,
  disabled: false,
  size: 'sm'
};
IconButton.propTypes = {
  /** Child element to locate inside of button */
  children: PropTypes.node.isRequired,

  /** callback to handle click event for button (evnt) => {} */
  onClick: PropTypes.func,

  /** Button size - values =['xs', 'sm', 'md', 'lg'] */
  size: PropTypes.oneOf(['xxs', 'xs', 'sm', 'md', 'lg']),

  /** Indicator whether or not to show loader in button */
  isLoading: PropTypes.bool,

  /** Indicator whether or not to button is disabled */
  disabled: PropTypes.bool,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** color to set icon button - value =[transparent, primary, secondary] */
  color: PropTypes.string,

  /** Adds negative margins 15 to counter padding in components
   * Commonly used with Input suffix/prefix or Rows with spacing
   */
  position: PropTypes.oneOf(['suffix', 'prefix'])
};
IconButton.displayName = 'IconButton';
export default IconButton;