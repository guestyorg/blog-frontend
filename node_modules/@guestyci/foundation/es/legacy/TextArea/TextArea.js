import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import isNumber from 'lodash/isNumber';
import TextareaAutosize from 'react-textarea-autosize';
import noop from 'lodash/noop';
import InputLabel from "../InputLabel/InputLabel";
import { Theme } from "../../enums/enums";

class TextArea extends Component {
  constructor(props) {
    super(props);

    this._isValid = inputLength => {
      const {
        maxLength
      } = this.props;
      return !isNumber(maxLength) || maxLength - inputLength >= 0;
    };

    this._calcCharCount = input => {
      const {
        maxLength
      } = this.props;

      if (isNumber(maxLength)) {
        return maxLength - input.length;
      }

      return undefined;
    };

    this.handleInputChange = event => {
      const {
        value
      } = event.currentTarget;
      const {
        id,
        name,
        onChange
      } = this.props;

      if (this._isValid(value.length)) {
        this.setState({
          charCount: this._calcCharCount(value)
        });

        if (onChange) {
          onChange(value, id || name);
        }
      }
    };

    this.getTheme = theme => {
      switch (theme) {
        case Theme.Light:
          return 'border-gray-lightest bg-white';

        case Theme.Dark:
          return 'bg-gray-lightest border-gray-light';

        case Theme.Yellow:
          return 'bg-yellow-light border-gray-light';

        default:
          return 'border-gray-lightest bg-white';
      }
    };

    this.state = {
      charCount: props.maxLength
    };
    this.textAreaRef = React.createRef();
  }

  render() {
    const {
      charCount
    } = this.state;

    const _this$props = this.props,
          {
      value,
      maxLength,
      containerStyle,
      tooltip,
      label,
      disabled,
      className,
      rows,
      maxRows,
      theme,
      containerClassName,
      autoFocus,
      placeholder
    } = _this$props,
          props = _objectWithoutPropertiesLoose(_this$props, ["value", "maxLength", "containerStyle", "tooltip", "label", "disabled", "className", "rows", "maxRows", "theme", "containerClassName", "autoFocus", "required", "placeholder"]);

    const textAreaTheme = this.getTheme(theme);
    return /*#__PURE__*/React.createElement("div", {
      className: "d-flex-fill flex-column input-wrapper",
      "data-qa": "text-area"
    }, label && /*#__PURE__*/React.createElement(InputLabel, {
      label: label,
      tooltip: tooltip
    }), /*#__PURE__*/React.createElement("div", {
      className: cn('d-flex-fill flex-start-center pos-relative border-gray-lighter b-1', containerClassName, textAreaTheme, {
        'bg-gray-lighter': disabled
      }),
      style: containerStyle
    }, /*#__PURE__*/React.createElement(TextareaAutosize, _extends({}, props, {
      placeholder: placeholder,
      autoFocus: autoFocus,
      ref: this.textAreaRef,
      maxRows: maxRows,
      rows: rows,
      value: value,
      disabled: disabled,
      maxLength: maxLength,
      onChange: this.handleInputChange,
      className: cn('w-100 border-0 py-3 px-4 min-height-50 font-size-md text-black', textAreaTheme, className)
    })), isNumber(maxLength) && /*#__PURE__*/React.createElement("span", {
      className: "textarea-charcount font-size-md text-muted pos-absolute mr-2 right-0 bottom-0"
    }, charCount)));
  }

}

TextArea.defaultProps = {
  maxLength: null,
  value: undefined,
  onChange: noop,
  placeholder: '',
  label: null,
  tooltip: '',
  disabled: false,
  rows: 1,
  maxRows: 5,
  theme: Theme.Dark,
  containerClassName: '',
  autoFocus: false
};
TextArea.propTypes = {
  /** Controlled text area value */
  value: PropTypes.string,

  /** On change trigger function to update on text change */
  onChange: PropTypes.func,

  /** The max length for the text area input */
  maxLength: PropTypes.number,

  /** TextArea Placeholder */
  placeholder: PropTypes.string,

  /** A label to show on top of the input */
  label: PropTypes.string,

  /** Add tooltip help icon and message - tooltip - String help message */
  tooltip: PropTypes.string,

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** Row number to set for the textarea */
  rows: PropTypes.number,

  /** max number of rows for expandable text area */
  maxRows: PropTypes.number,

  /** Define theme for text area - possible values = [Theme.Light, Theme.Dark, Theme.Yellow] */
  theme: PropTypes.oneOf([Theme.Light, Theme.Dark, Theme.Yellow]),

  /** Container level class name */
  containerClassName: PropTypes.string,

  /** Boolean to define if should be auto focused */
  autoFocus: PropTypes.bool
};
export default TextArea;