import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import PropTypes from 'prop-types';
import isObject from 'lodash/isObject';
import cn from 'classnames';
import createStyles from "../createStyles";
import InputStyles from "../Input/styles";
import Row from "../Layout/Row";
import Button from "../Button";
import TextField from "../TextField";
import { isEmpty } from "../utils/commonUtility";
import Chip from "./Chip";
import composeEvent from "../utils/composeEvent";
export const useStyles = createStyles(theme => ({
  root: _extends({}, theme.typography.primary, {}, InputStyles.shared(theme), {
    paddingRight: 0,
    paddingLeft: theme.spacer(1),
    '&:hover': _extends({}, InputStyles.hover(theme)),
    minHeight: 46,
    maxHeight: 150,
    overflowY: 'auto',
    '&::placeholder': InputStyles.placeholder(theme)
  }),
  input: {
    flex: 1,
    height: '100%'
  },
  placeholder: {
    paddingLeft: theme.spacer(2)
  },
  clearIcon: {
    color: theme.palette.secondary.default,
    '&:hover': {
      color: theme.palette.primary.default
    }
  },
  disabled: InputStyles.disabled(theme),
  focus: InputStyles.focused(theme),
  error: InputStyles.error(theme)
}));
const ChipSelectInput = React.forwardRef(function ChipSelect(_ref, ref) {
  let {
    value = [],
    onClick,
    open,
    renderComponent = null,
    name = '',
    className,
    style,
    disabled,
    onChange,
    jss,
    dataKey,
    error,
    placeholder
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "onClick", "open", "renderComponent", "name", "className", "style", "disabled", "onChange", "jss", "dataKey", "variant", "error", "noClear", "placeholder"]);

  const classes = useStyles({
    jss
  });
  const SelectedItemComponent = renderComponent || Chip;

  const handleRemoveChip = (e, selectedItem) => {
    e.stopPropagation();
    const newValue = value?.filter(item => item !== selectedItem);
    onChange(composeEvent(e, {
      value: newValue
    }), newValue);
  };

  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: cn(classes.root, {
      [classes.disabled]: disabled,
      [classes.focus]: open,
      [classes.error]: error
    }, className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/React.createElement(Row, {
    spacing: 1,
    fullWidth: true,
    wrap: true,
    align: "center",
    className: cn(classes.input)
  }, /*#__PURE__*/React.createElement(React.Fragment, null, !isEmpty(value) && value.map(val => {
    const key = isObject(val) ? val[dataKey] : val;
    const spreadProps = isObject(val) ? _extends({}, val) : {};
    return /*#__PURE__*/React.createElement(SelectedItemComponent, _extends({
      key: key,
      onClear: handleRemoveChip,
      value: val
    }, spreadProps));
  }), isEmpty(value) && /*#__PURE__*/React.createElement(TextField, {
    className: classes.placeholder
  }, placeholder))));
});
ChipSelectInput.propTypes = {
  /** Selected value to pass to the input */
  value: PropTypes.oneOfType([PropTypes.shape(), PropTypes.array, PropTypes.string, PropTypes.number]),
  onClick: PropTypes.func,
  onClear: PropTypes.func,

  /** Disabled boolean indicator */
  disabled: PropTypes.bool,

  /** Additional className */
  className: PropTypes.string,

  /** Additional style */
  style: PropTypes.shape(),

  /** form level name */
  name: PropTypes.string,

  /** Indicator whether or not the dropdown is open */
  open: PropTypes.bool,

  /** Custom node element to render as the value of the input  */
  renderComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /** jss override  */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Identifier key when passing complex structurs as value, defaults to value */
  dataKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
};
ChipSelectInput.displayName = 'ChipSelect';
export default ChipSelectInput;