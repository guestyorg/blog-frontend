{"ast":null,"code":"// import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from \"redux-thunk\";\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n// ////\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n// const initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n//   accountSignin: {\n//     accountInfo: localStorage.getItem(\"accountInfo\")\n//       ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//       : null,\n//   },\n// };\n// const reducer = combineReducers({\n//   userRegister: userRegisterReducer,\n//   userSignin: userSigninReducer,\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n//   /////\n//   blogRegister: blogRegisterReducer,\n//   blogSignin: blogSigninReducer,\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n//   /////\n//   accountRegister: accountRegisterReducer,\n//   accountSignin: accountSigninReducer,\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   reducer,\n//   initialState,\n//   composeEnhancer(applyMiddleware(thunk))\n// );\n// export default store;\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport thunk from \"redux-thunk\";\nimport { accountDeleteReducer, accountDetailsReducer, accountListReducer, accountRegisterReducer, accountSigninReducer, accountUpdateReducer } from \"./reducers/accountReducers\";\nimport { userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userAddReducer, userSigninReducer, userUpdateReducer } from \"./reducers/userReducers\";\nimport { blogDeleteReducer, postDeleteReducer, blogDetailsReducer, postDetailsReducer, blogListReducer, blogRegisterReducer, blogAddReducer, postAddReducer, blogSigninReducer, blogUpdateReducer } from \"./reducers/blogReducers\";\nconst initialState = {\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\") ? JSON.parse(localStorage.getItem(\"accountInfo\")) : null\n  },\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null\n  }\n}; // temp reducer to be removed\n// Once real reducers added you can delete this\n\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}; // shape the state structure\n\n\nconst rootReducer = combineReducers({\n  userRegister: userRegisterReducer,\n  userAdd: userAddReducer,\n  userSignin: userSigninReducer,\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  blogRegister: blogRegisterReducer,\n  blogAdd: blogAddReducer,\n  postAdd: postAddReducer,\n  blogSignin: blogSigninReducer,\n  blogDetails: blogDetailsReducer,\n  postDetails: postDetailsReducer,\n  blogUpdate: blogUpdateReducer,\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n  postDelete: postDeleteReducer,\n  accountRegister: accountRegisterReducer,\n  accountSignin: accountSigninReducer,\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer\n}); // Add custom middleware here\n\nconst featureMiddleware = [];\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // (initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n// }),\n//   api;\n\nexport default (() => {\n  // console.log('initialState:', initialState)\n  const store = createStore(rootReducer, initialState, // composeEnhancer(\n  //   applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n  // )\n  composeEnhancer(applyMiddleware(thunk)));\n  return store;\n});","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/simple-app-archive/src/store.js"],"names":["applyMiddleware","combineReducers","createStore","compose","reducer","formReducer","thunk","accountDeleteReducer","accountDetailsReducer","accountListReducer","accountRegisterReducer","accountSigninReducer","accountUpdateReducer","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userAddReducer","userSigninReducer","userUpdateReducer","blogDeleteReducer","postDeleteReducer","blogDetailsReducer","postDetailsReducer","blogListReducer","blogRegisterReducer","blogAddReducer","postAddReducer","blogSigninReducer","blogUpdateReducer","initialState","accountSignin","accountInfo","localStorage","getItem","JSON","parse","userSignin","userInfo","tempReducer","state","action","type","rootReducer","userRegister","userAdd","userDetails","userUpdate","userList","userDelete","blogRegister","blogAdd","postAdd","blogSignin","blogDetails","postDetails","blogUpdate","blogList","blogDelete","postDelete","accountRegister","accountDetails","accountUpdate","accountList","accountDelete","featureMiddleware","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"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","sourcesContent":["// import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\n// import { reducer as formReducer } from 'redux-form';\n\n// import thunk from \"redux-thunk\";\n\n// import {\n//   accountDeleteReducer,\n//   accountDetailsReducer,\n//   accountListReducer,\n//   accountRegisterReducer,\n//   accountSigninReducer,\n//   accountUpdateReducer,\n// } from \"./reducers/accountReducers\";\n\n// import {\n//   userDeleteReducer,\n//   userDetailsReducer,\n//   userListReducer,\n//   userRegisterReducer,\n//   userSigninReducer,\n//   userUpdateReducer,\n// } from \"./reducers/userReducers\";\n\n// ////\n\n// import {\n//   blogDeleteReducer,\n//   blogDetailsReducer,\n//   blogListReducer,\n//   blogRegisterReducer,\n//   blogSigninReducer,\n//   blogUpdateReducer,\n// } from \"./reducers/blogReducers\";\n\n// const initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n\n//   accountSignin: {\n//     accountInfo: localStorage.getItem(\"accountInfo\")\n//       ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n//       : null,\n//   },\n// };\n// const reducer = combineReducers({\n//   userRegister: userRegisterReducer,\n\n//   userSignin: userSigninReducer,\n\n//   userDetails: userDetailsReducer,\n//   userUpdate: userUpdateReducer,\n\n//   userList: userListReducer,\n//   userDelete: userDeleteReducer,\n\n//   /////\n\n//   blogRegister: blogRegisterReducer,\n\n//   blogSignin: blogSigninReducer,\n\n//   blogDetails: blogDetailsReducer,\n//   blogUpdate: blogUpdateReducer,\n\n//   blogList: blogListReducer,\n//   blogDelete: blogDeleteReducer,\n\n//   /////\n\n//   accountRegister: accountRegisterReducer,\n\n//   accountSignin: accountSigninReducer,\n\n//   accountDetails: accountDetailsReducer,\n//   accountUpdate: accountUpdateReducer,\n\n//   accountList: accountListReducer,\n//   accountDelete: accountDeleteReducer,\n// });\n// const composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const store = createStore(\n//   reducer,\n//   initialState,\n//   composeEnhancer(applyMiddleware(thunk))\n// );\n\n// export default store;\n\nimport { applyMiddleware, combineReducers, createStore, compose } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport thunk from \"redux-thunk\";\n\nimport {\n  accountDeleteReducer,\n  accountDetailsReducer,\n  accountListReducer,\n  accountRegisterReducer,\n  accountSigninReducer,\n  accountUpdateReducer,\n} from \"./reducers/accountReducers\";\n\nimport {\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userAddReducer,\n  userSigninReducer,\n  userUpdateReducer,\n} from \"./reducers/userReducers\";\n\nimport {\n  blogDeleteReducer,\n  postDeleteReducer,\n  blogDetailsReducer,\n  postDetailsReducer,\n  blogListReducer,\n  blogRegisterReducer,\n  blogAddReducer,\n  postAddReducer,\n  blogSigninReducer,\n  blogUpdateReducer,\n} from \"./reducers/blogReducers\";\n\nconst initialState = {\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\")\n      ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n      : null,\n  },\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\")\n      ? JSON.parse(localStorage.getItem(\"userInfo\"))\n      : null,\n  },\n};\n\n// temp reducer to be removed\n// Once real reducers added you can delete this\nconst tempReducer = (state = {}, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n// shape the state structure\nconst rootReducer = combineReducers({\n  userRegister: userRegisterReducer,\n\n  userAdd: userAddReducer,\n\n  userSignin: userSigninReducer,\n\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n\n  blogRegister: blogRegisterReducer,\n\n  blogAdd: blogAddReducer,\n\n  postAdd: postAddReducer,\n\n  blogSignin: blogSigninReducer,\n\n  blogDetails: blogDetailsReducer,\n\n  postDetails: postDetailsReducer,\n\n  blogUpdate: blogUpdateReducer,\n\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n\n  postDelete: postDeleteReducer,\n\n  accountRegister: accountRegisterReducer,\n\n  accountSignin: accountSigninReducer,\n\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer,\n});\n\n// Add custom middleware here\nconst featureMiddleware = [];\n\n/**\n * Initialize the redux store\n * Create the store\n * Applying extra arguments\n * To pass further arguments please config the function\n * @param initialState  {Object}  initial state for store\n * @param api {Object}  API class for api middleware\n * @return {Store<any, AnyAction> & {dispatch: any}}\n */\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// (initialState = {\n//   userSignin: {\n//     userInfo: localStorage.getItem(\"userInfo\")\n//       ? JSON.parse(localStorage.getItem(\"userInfo\"))\n//       : null,\n//   },\n// }),\n//   api;\n\nexport default () => {\n  // console.log('initialState:', initialState)\n  const store = createStore(\n    rootReducer,\n    initialState,\n    // composeEnhancer(\n    //   applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n    // )\n    composeEnhancer(applyMiddleware(thunk))\n  );\n  return store;\n};\n"]},"metadata":{},"sourceType":"module"}