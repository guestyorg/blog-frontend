import React, { useRef, useCallback, useEffect } from 'react';
import PropTypes from 'prop-types';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import TileItem from "./TileItem";
var tileWidth = 100;
var useStyles = createUseStyles({
  'tile-items-list': function tileItemsList(props) {
    return {
      'max-width': props.maxShownItems * tileWidth
    };
  },
  listBottom: {
    "float": 'left',
    clear: 'both'
  }
});

var scrollToBottom = function scrollToBottom(listRef) {
  if (listRef) {
    listRef.current.scrollIntoView({
      behavior: 'smooth'
    });
  }
};

var TilesItemsList = function TilesItemsList(_ref) {
  var tileItems = _ref.tileItems,
      maxShownItems = _ref.maxShownItems,
      onDeleteItem = _ref.onDeleteItem;
  var listRef = useRef(null);
  var classes = useStyles({
    maxShownItems: maxShownItems
  });
  useEffect(function () {
    if (tileItems.length > maxShownItems) {
      scrollToBottom(listRef);
    }
  }, [tileItems, maxShownItems]);
  var onDelete = useCallback(function (itemKey) {
    onDeleteItem(itemKey);
  });
  return /*#__PURE__*/React.createElement("div", {
    className: cn("".concat(classes['tile-items-list'], " flex-space-between-center flex-row overflow-y-scroll")),
    "data-qa": "tiles-items-list"
  }, tileItems.map(function (item, i) {
    var itemKey = "tile-item-".concat(i);
    var isLast = i === tileItems.length - 1;
    return /*#__PURE__*/React.createElement("div", {
      className: cn('tile-item bg-gray-lightest height-90 min-width-100 border-gray-light', {
        'br-1': !isLast
      }),
      key: itemKey
    }, item && /*#__PURE__*/React.createElement(TileItem, {
      icon: item[1].icon,
      text: item[1].text,
      height: item[1].height,
      width: item[1].width,
      itemKey: item[0],
      onDelete: onDelete
    }));
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.listBottom,
    ref: listRef
  }));
};

TilesItemsList.defaultProps = {
  tileItems: [],
  maxShownItems: 4
};
TilesItemsList.propTypes = {
  // tile items to render
  tileItems: PropTypes.arrayOf(PropTypes.array),
  // sets the number of tiles what would be rendered
  maxShownItems: PropTypes.number
};
export default TilesItemsList;