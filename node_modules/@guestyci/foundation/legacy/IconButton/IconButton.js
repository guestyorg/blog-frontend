"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _BaseButton = _interopRequireDefault(require("../BaseButton/BaseButton"));

var _enums = require("../../enums/enums");

var _Tooltip = _interopRequireDefault(require("../Tooltip/Tooltip"));

var lightThemeClasses = 'fill-white fill-hover-blue-dark-theme';

var IconButton = function IconButton(_ref) {
  var icon = _ref.icon,
      svg = _ref.svg,
      onClick = _ref.onClick,
      className = _ref.className,
      style = _ref.style,
      disabled = _ref.disabled,
      iconClassName = _ref.iconClassName,
      iconStyle = _ref.iconStyle,
      type = _ref.type,
      iconWidth = _ref.iconWidth,
      iconHeight = _ref.iconHeight,
      theme = _ref.theme,
      name = _ref.name,
      id = _ref.id,
      tooltip = _ref.tooltip,
      tooltipPlacement = _ref.tooltipPlacement;
  return /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
    body: tooltip,
    placement: tooltipPlacement,
    id: id,
    "data-qa": "icon-button"
  }, /*#__PURE__*/_react["default"].createElement(_BaseButton["default"], {
    onClick: onClick,
    name: name,
    className: className,
    variant: "icon",
    style: style,
    disabled: disabled,
    id: id
  }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    className: (0, _classnames["default"])({
      'fill-hover-blue': !disabled
    }, {
      'fill-gray': disabled
    }, (0, _defineProperty2["default"])({}, lightThemeClasses, theme === _enums.Theme.Light), iconClassName),
    style: iconStyle,
    icon: icon,
    svg: svg,
    width: iconWidth,
    height: iconHeight,
    color: type === 'hint' ? 'muted' : 'gray-dark'
  })));
};

IconButton.defaultProps = {
  className: '',
  style: {},
  disabled: false,
  iconWidth: 20,
  iconHeight: 20,
  iconClassName: '',
  iconStyle: {},
  theme: 'dark',
  id: undefined,
  name: undefined,
  tooltip: null,
  tooltipPlacement: 'top',
  type: 'icon'
};
IconButton.propTypes = {
  /** Button click callback function */
  onClick: _propTypes["default"].func.isRequired,

  /** Button indicator whether disabled or not */
  disabled: _propTypes["default"].bool,

  /** Button additional classes */
  className: _propTypes["default"].string,

  /** Button additional styling */
  style: _propTypes["default"].shape(),

  /** The specified Icon from the Guesty Icon bank */
  icon: _propTypes["default"].string,

  /** The svg icon to render */
  svg: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** The specified Icon height */
  iconHeight: _propTypes["default"].number,

  /** The specified Icon width */
  iconWidth: _propTypes["default"].number,

  /** The specified Icon className */
  iconClassName: _propTypes["default"].string,

  /** The specified Icon Style */
  iconStyle: _propTypes["default"].shape(),

  /** Defined the theme for the button component */
  theme: _propTypes["default"].oneOf(['dark', 'light']),

  /** Add name prop to the button itself to pass on click */
  name: _propTypes["default"].string,

  /** Add oid prop to the button itself to pass on click */
  id: _propTypes["default"].string,

  /* Tooltip body to show over icon button */
  tooltip: _propTypes["default"].node,

  /* tooltip placement according to the Tooltip component */
  tooltipPlacement: _propTypes["default"].string,

  /* Set the icon color when not selected to hint color or icon(regular) */
  type: _propTypes["default"].oneOf(['icon', 'hint'])
};
var _default = IconButton;
exports["default"] = _default;