{"ast":null,"code":"import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment/moment';\nimport LocalizationContext from \"../LocalizationProvider/LocalizationContext\";\nimport { MomentFormatTypes } from \"../utils\";\nimport getDateFormat from \"./getDateFormat\";\n\nvar FormattedDate = function FormattedDate(_ref) {\n  var format = _ref.format,\n      date = _ref.date,\n      variant = _ref.variant;\n  var Tag = variant || Fragment;\n  var momentDate = moment(date);\n  return momentDate.isValid() ? React.createElement(LocalizationContext.Consumer, null, function (_ref2) {\n    var isEnglish = _ref2.isEnglish;\n    return React.createElement(Tag, null, momentDate.format(getDateFormat(format, isEnglish)));\n  }) : React.createElement(Fragment, null, \"Invalid date\");\n};\n\nFormattedDate.defaultProps = {\n  format: MomentFormatTypes.Date,\n  variant: undefined\n};\nFormattedDate.propTypes = {\n  /** date value is required */\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string, PropTypes.number]).isRequired,\n\n  /** Date format to custom show moment (shortDate, date, fullDate, mmmm yyyyy, mmm yyyyy) */\n  format: PropTypes.oneOf([MomentFormatTypes.ShortDate, MomentFormatTypes.Date, MomentFormatTypes.FullDate, MomentFormatTypes.MMMM_YYYY, MomentFormatTypes.MMM_YYYY]),\n\n  /** set the moment component to be variant ('div','string'...) in stead of fragment */\n  variant: PropTypes.string\n};\nexport default FormattedDate;","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/node_modules/@guestyci/localize/esm/FormattedDate/FormattedDate.js"],"names":["React","Fragment","PropTypes","moment","LocalizationContext","MomentFormatTypes","getDateFormat","FormattedDate","_ref","format","date","variant","Tag","momentDate","isValid","createElement","Consumer","_ref2","isEnglish","defaultProps","Date","undefined","propTypes","oneOfType","instanceOf","string","number","isRequired","oneOf","ShortDate","FullDate","MMMM_YYYY","MMM_YYYY"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC/C,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,IAAI,GAAGF,IAAI,CAACE,IADhB;AAAA,MAEIC,OAAO,GAAGH,IAAI,CAACG,OAFnB;AAGA,MAAIC,GAAG,GAAGD,OAAO,IAAIV,QAArB;AACA,MAAIY,UAAU,GAAGV,MAAM,CAACO,IAAD,CAAvB;AACA,SAAOG,UAAU,CAACC,OAAX,KAAuBd,KAAK,CAACe,aAAN,CAAoBX,mBAAmB,CAACY,QAAxC,EAAkD,IAAlD,EAAwD,UAAUC,KAAV,EAAiB;AACrG,QAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AACA,WAAOlB,KAAK,CAACe,aAAN,CAAoBH,GAApB,EAAyB,IAAzB,EAA+BC,UAAU,CAACJ,MAAX,CAAkBH,aAAa,CAACG,MAAD,EAASS,SAAT,CAA/B,CAA/B,CAAP;AACD,GAH6B,CAAvB,GAGFlB,KAAK,CAACe,aAAN,CAAoBd,QAApB,EAA8B,IAA9B,EAAoC,cAApC,CAHL;AAID,CAVD;;AAYAM,aAAa,CAACY,YAAd,GAA6B;AAC3BV,EAAAA,MAAM,EAAEJ,iBAAiB,CAACe,IADC;AAE3BT,EAAAA,OAAO,EAAEU;AAFkB,CAA7B;AAIAd,aAAa,CAACe,SAAd,GAA0B;AACxB;AACAZ,EAAAA,IAAI,EAAER,SAAS,CAACqB,SAAV,CAAoB,CAACrB,SAAS,CAACsB,UAAV,CAAqBJ,IAArB,CAAD,EAA6BlB,SAAS,CAACuB,MAAvC,EAA+CvB,SAAS,CAACwB,MAAzD,CAApB,EAAsFC,UAFpE;;AAIxB;AACAlB,EAAAA,MAAM,EAAEP,SAAS,CAAC0B,KAAV,CAAgB,CAACvB,iBAAiB,CAACwB,SAAnB,EAA8BxB,iBAAiB,CAACe,IAAhD,EAAsDf,iBAAiB,CAACyB,QAAxE,EAAkFzB,iBAAiB,CAAC0B,SAApG,EAA+G1B,iBAAiB,CAAC2B,QAAjI,CAAhB,CALgB;;AAOxB;AACArB,EAAAA,OAAO,EAAET,SAAS,CAACuB;AARK,CAA1B;AAUA,eAAelB,aAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment/moment';\nimport LocalizationContext from \"../LocalizationProvider/LocalizationContext\";\nimport { MomentFormatTypes } from \"../utils\";\nimport getDateFormat from \"./getDateFormat\";\n\nvar FormattedDate = function FormattedDate(_ref) {\n  var format = _ref.format,\n      date = _ref.date,\n      variant = _ref.variant;\n  var Tag = variant || Fragment;\n  var momentDate = moment(date);\n  return momentDate.isValid() ? React.createElement(LocalizationContext.Consumer, null, function (_ref2) {\n    var isEnglish = _ref2.isEnglish;\n    return React.createElement(Tag, null, momentDate.format(getDateFormat(format, isEnglish)));\n  }) : React.createElement(Fragment, null, \"Invalid date\");\n};\n\nFormattedDate.defaultProps = {\n  format: MomentFormatTypes.Date,\n  variant: undefined\n};\nFormattedDate.propTypes = {\n  /** date value is required */\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string, PropTypes.number]).isRequired,\n\n  /** Date format to custom show moment (shortDate, date, fullDate, mmmm yyyyy, mmm yyyyy) */\n  format: PropTypes.oneOf([MomentFormatTypes.ShortDate, MomentFormatTypes.Date, MomentFormatTypes.FullDate, MomentFormatTypes.MMMM_YYYY, MomentFormatTypes.MMM_YYYY]),\n\n  /** set the moment component to be variant ('div','string'...) in stead of fragment */\n  variant: PropTypes.string\n};\nexport default FormattedDate;"]},"metadata":{},"sourceType":"module"}