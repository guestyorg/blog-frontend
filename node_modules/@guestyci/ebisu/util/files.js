const path = require('path');
const fs = require('fs');
const merge = require('lodash.merge');

const { pipe } = require('./fp');

const getPackageJsonPath = () => path.resolve(process.cwd(), 'package.json');
const getChangelogPath = () => path.resolve(process.cwd(), 'CHANGELOG.md');
const getManifestPath = () => path.resolve(process.cwd(), 'manifest.json');

const getManifest = () => {
  const manifestPath = getManifestPath();
  try {
    return JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
  } catch (e) {
    throw new Error(
      'Cannot parse manifest.json. It is probably not a valid json file.'
    );
  }
};

const loadPackageJson = () => {
  const packageJsonPath = getPackageJsonPath();

  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    return packageJson;
  } catch (e) {
    throw new Error('Cannot find package.json at ' + packageJsonPath);
  }
};

const getKeyFromJson = (key, json) => {
  return key
    .split('.')
    .reduce((currNode, key) => currNode && currNode[key], json);
};

const writePackageJson = nextPackageJson => {
  const packageJsonPath = getPackageJsonPath();

  fs.writeFileSync(packageJsonPath, JSON.stringify(nextPackageJson, null, 2));
};

const getConfig = key => {
  const configPath = `${process.cwd()}/.circleci/config.json`;
  if (fs.existsSync(configPath)) {
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    return config[key];
  }
  return null;
};

const getAppDir = () => process.cwd();

const getAppName = () =>
  getAppDir()
    .split(path.sep)
    .pop();

const appendObjToPackageJson = (obj, { overwrite = false } = {}) =>
  pipe(
    loadPackageJson,
    packageJson => merge(packageJson, obj, overwrite ? {} : packageJson),
    writePackageJson
  )();

const copyIfNotExists = (source, target) => {
  if (fs.existsSync(source) && !fs.existsSync(target)) {
    fs.copyFileSync(source, target);
  }
};

module.exports = {
  getPackageJsonPath,
  getKeyFromJson,
  getChangelogPath,
  loadPackageJson,
  writePackageJson,
  getConfig,
  getAppDir,
  getAppName,
  appendObjToPackageJson,
  copyIfNotExists,
  getManifestPath,
  getManifest,
};
