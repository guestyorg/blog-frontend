import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import withSelectionGroup from "../baseSelectionControl/withSelectionGroup";

var CheckboxGroup = /*#__PURE__*/function (_Component) {
  _inherits(CheckboxGroup, _Component);

  var _super = _createSuper(CheckboxGroup);

  function CheckboxGroup() {
    var _this;

    _classCallCheck(this, CheckboxGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.changeCheckboxStatus = function (value, childName, checkedRadioId) {
      var onOptionClicked = _this.props.onOptionClicked;
      onOptionClicked(checkedRadioId);
    };

    _this.addPropsToChild = function (child, hasRightBorder) {
      return React.cloneElement(child.child, {
        key: child.uid,
        onChange: _this.changeCheckboxStatus,
        checked: child.checked,
        id: child.uid,
        className: child.child.props.className,
        borderRight: hasRightBorder
      });
    };

    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          selectedCheckboxesWhenMulti = _this$props.selectedCheckboxesWhenMulti;
      onChange(selectedCheckboxesWhenMulti);
    }
  }, {
    key: "wrapCheckedChildrenWithDivs",
    value: function wrapCheckedChildrenWithDivs(childrenStructure) {
      var _this2 = this;

      var indexes = childrenStructure.map(function (child) {
        return child.checked ? 1 : 0;
      });
      var checkedChildren = [];
      var fineStructure = [];
      indexes.forEach(function (value, index) {
        if (checkedChildren.length > 0 && value === 0) {
          fineStructure.push( /*#__PURE__*/React.createElement("div", {
            className: cn('d-flex', 'box-shadow', 'z-index-1'),
            key: "CheckboxGroup_".concat(childrenStructure[index].uid)
          }, checkedChildren));
          fineStructure.push(_this2.addPropsToChild(childrenStructure[index], index !== indexes.length - 1));
          checkedChildren = [];
        } else if (value === 0) {
          fineStructure.push(_this2.addPropsToChild(childrenStructure[index], index !== indexes.length - 1));
        } else {
          checkedChildren.push(_this2.addPropsToChild(childrenStructure[index], index !== indexes.length - 1));

          if (indexes.length - 1 === index) {
            fineStructure.push( /*#__PURE__*/React.createElement("div", {
              className: cn('d-flex', 'box-shadow', 'z-index-1'),
              key: "CheckboxGroup_".concat(childrenStructure[index].uid)
            }, checkedChildren));
          }
        }
      });
      return fineStructure;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          options = _this$props2.options,
          className = _this$props2.className;
      var children = Array.from(options.values());
      return /*#__PURE__*/React.createElement("div", {
        className: className,
        "data-qa": "checkbox-group"
      }, /*#__PURE__*/React.createElement("div", {
        className: cn('row', 'border', 'border-radius-2')
      }, this.wrapCheckedChildrenWithDivs(children)));
    }
  }]);

  return CheckboxGroup;
}(Component);

CheckboxGroup.propTypes = {
  /** children will be rendered inside the CheckboxGroup */
  children: PropTypes.node.isRequired,

  /** classes to be added to the component */
  className: PropTypes.string,

  /** callback for on checkboxGroup change */
  onChange: PropTypes.func.isRequired
};
export var CheckboxGroupComponent = CheckboxGroup;
export default withSelectionGroup(CheckboxGroup);