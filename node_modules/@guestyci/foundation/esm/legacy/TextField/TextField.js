import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';

var getVariantClass = function getVariantClass(variant) {
  switch (variant) {
    case 'title':
      return {
        variantColor: 'muted',
        variantFont: 'md'
      };

    case 'h2':
      return {
        variantColor: 'muted',
        variantFont: '2xl'
      };

    case 'label':
      return {
        variantColor: 'muted',
        variantFont: 'sm'
      };

    default:
      return {};
  }
};

var TextField = React.forwardRef(function TextField(_ref, ref) {
  var color = _ref.color,
      bgColor = _ref.bgColor,
      children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      onClick = _ref.onClick,
      name = _ref.name,
      id = _ref.id,
      size = _ref.size,
      variant = _ref.variant,
      inline = _ref.inline,
      weight = _ref.weight,
      bold = _ref.bold;

  var _getVariantClass = getVariantClass(variant),
      _getVariantClass$vari = _getVariantClass.variantColor,
      variantColor = _getVariantClass$vari === void 0 ? color : _getVariantClass$vari,
      _getVariantClass$vari2 = _getVariantClass.variantFont,
      variantFont = _getVariantClass$vari2 === void 0 ? size : _getVariantClass$vari2;

  var fontWeight = bold ? 'bold' : weight;
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    role: "presentation",
    className: cn('text-field-wrapper', _defineProperty({}, "text-".concat(variantColor, " fill-").concat(variantColor), variantColor), _defineProperty({}, "bg-".concat(bgColor), bgColor), _defineProperty({}, "font-size-".concat(variantFont), variantFont), {
      clickable: onClick
    }, _defineProperty({}, "font-weight-".concat(fontWeight), fontWeight), {
      'd-inline': inline
    }, className),
    style: style,
    onClick: onClick,
    name: name,
    id: id
  }, children);
});
TextField.defaultProps = {
  color: null,
  bgColor: null,
  size: null,
  className: '',
  style: {},
  onClick: null,
  name: '',
  id: '',
  variant: null,
  inline: false,
  weight: undefined,
  bold: false
};
TextField.propTypes = {
  color: PropTypes.string,
  bgColor: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  className: PropTypes.string,
  style: PropTypes.shape(),
  onClick: PropTypes.func,
  name: PropTypes.string,
  id: PropTypes.string,

  /** one of [ 'xs', 'md', 'lg', 'lg-xl', 'xl', '2xl', '3xl' ] */
  size: PropTypes.oneOf(['xs', 'md', 'lg', 'lg-xl', 'xl', '2xl', '3xl']),

  /** one of [ 'title', 'label', 'h2' ] */
  variant: PropTypes.oneOf(['title', 'label', 'h2']),

  /** whether text element is of inline display */
  inline: PropTypes.bool,
  bold: PropTypes.bool,

  /** one of [ 'bold', 'reg', 'light' ] */
  weight: PropTypes.oneOf(['bold', 'reg', 'light'])
}; // Hack for withInfo plugin

TextField.displayName = 'TextField';
export default TextField;