import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useCallback, useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import useHover from "../../../useHover";
import { white } from "../../../theme/colors";
import CheckboxCell from "../CheckboxCell";
import createStyles from "../../../createStyles";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      display: 'table-row',
      minHeight: 45,
      backgroundColor: white,
      '&:hover': {
        backgroundColor: theme.palette.action.selected,
        transform: 'scale(1)',
        boxShadow: '3px 2px 13px 0 rgba(0, 0, 0, 0.08)'
      },
      '& .checkbox-cell': {
        borderLeftColor: 'transparent !important',
        borderLeftWidth: 3,
        '&.checked': {
          borderLeftColor: "".concat(theme.palette.brand.primary, " !important")
        }
      }
    },
    child: {
      zIndex: 5
    },
    checkboxCell: {
      left: 0,
      borderBottom: "1px solid ".concat(theme.palette.border)
    }
  };
}, {
  name: 'CellRow'
});
var CellRow = React.memo(function CellRow(_ref) {
  var _children$, _children$$props;

  var children = _ref.children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      data = _ref.data,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      _ref$onClick = _ref.onClick,
      onClick = _ref$onClick === void 0 ? noop : _ref$onClick,
      rowId = _ref.rowId,
      _ref$onCheckboxChange = _ref.onCheckboxChange,
      onCheckboxChange = _ref$onCheckboxChange === void 0 ? noop : _ref$onCheckboxChange,
      _ref$multiSelect = _ref.multiSelect,
      multiSelect = _ref$multiSelect === void 0 ? false : _ref$multiSelect,
      _ref$checked = _ref.checked,
      checked = _ref$checked === void 0 ? false : _ref$checked,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;
  var fixedLeft = ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : (_children$$props = _children$.props) === null || _children$$props === void 0 ? void 0 : _children$$props.fixed) === 'left';
  var classes = useStyles({});

  var _useHover = useHover(),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var handleRowClick = useCallback(function (e) {
    e.stopPropagation();

    if (onClick) {
      onClick(_extends({}, data, {
        rowId: rowId
      }));
    }
  }, [onClick, data, rowId]);
  var cells = useMemo(function () {
    return React.Children.map(children, function (child) {
      var _child$props = child.props,
          dataKey = _child$props.dataKey,
          cellClassName = _child$props.className;
      return React.cloneElement(child, _extends({
        className: cn(classes.child, cellClassName),
        isLoading: isLoading
      }, data[dataKey]));
    });
  }, [children, data, isLoading]);
  return /*#__PURE__*/React.createElement("div", {
    role: "presentation",
    ref: hoverRef,
    className: cn('cell-row', classes.root, _defineProperty({}, classes.checked, checked), {
      clickable: onClick
    }, {
      'row-hovered': isHovering
    }, className),
    style: style,
    onClick: handleRowClick
  }, multiSelect && /*#__PURE__*/React.createElement(CheckboxCell, {
    className: cn(classes.checkboxCell, classes.child, {
      checked: checked
    }),
    fixed: fixedLeft,
    value: rowId,
    checked: checked,
    onChange: onCheckboxChange
  }), cells);
});
CellRow.propTypes = {
  children: PropTypes.node.isRequired,
  rowId: PropTypes.string.isRequired,
  data: PropTypes.shape().isRequired,
  onClick: PropTypes.func,
  className: PropTypes.string,
  style: PropTypes.shape(),
  multiSelect: PropTypes.bool,
  onCheckboxChange: PropTypes.func,
  checked: PropTypes.bool
};
CellRow.displayName = 'CellRow';
export default CellRow;