import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useMemo } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { uuid } from "../utils/commonUtility";
import Row from "../Layout/Row";
import TextField from "../TextField";
import createStyles from "../createStyles";
import IconButton from "../IconButton";
import { gray300, white } from "../theme/colors";
import { fade } from "../theme/utils";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      position: 'relative',
      cursor: 'pointer',
      borderRadius: 10
    },
    "switch": {
      transition: theme.transition.create(),
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      borderRadius: 10,
      backgroundColor: theme.palette.text["default"],
      '&:before': {
        transition: theme.transition.create(),
        content: '""',
        left: 0,
        position: 'absolute',
        height: 14,
        transform: 'translateX(1px)',
        width: 14,
        marginTop: 1,
        borderRadius: '50%',
        backgroundColor: white
      }
    },
    disabled: {
      cursor: 'not-allowed',
      color: theme.palette.disabledText
    },
    input: {
      cursor: 'inherit',
      position: 'absolute',
      opacity: 0,
      width: '100%',
      height: '100%',
      borderRadius: 3,
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1,
      '&:checked + $switch': {
        backgroundColor: theme.palette.primary["default"],
        '&:before': {
          content: '',
          transform: 'translateX(13px)'
        }
      },
      '&:disabled + $switch': {
        backgroundColor: gray300
      },
      '&:disabled:checked + $switch': {
        backgroundColor: fade(theme.palette.primary["default"], 0.6)
      }
    }
  };
}, {
  name: 'Switch'
});
var jssOverrides = {
  iconSm: {
    padding: 0
  },
  root: {
    height: 16,
    width: 28
  }
};
var Switch = React.forwardRef(function Switch(_ref, ref) {
  var id = _ref.id,
      children = _ref.children,
      value = _ref.value,
      onChange = _ref.onChange,
      checked = _ref.checked,
      disabled = _ref.disabled,
      className = _ref.className,
      style = _ref.style,
      jss = _ref.jss,
      name = _ref.name,
      props = _objectWithoutProperties(_ref, ["id", "children", "value", "onChange", "checked", "disabled", "className", "style", "jss", "name"]);

  var classes = useStyles({
    jss: jss
  });
  var inputId = useMemo(function () {
    return id || uuid();
  }, [id]);
  return /*#__PURE__*/React.createElement("label", {
    htmlFor: inputId,
    ref: ref
  }, /*#__PURE__*/React.createElement(Row, {
    spacing: 2,
    align: "center",
    className: cn(classes.root, _defineProperty({}, classes.disabled, disabled), className),
    style: style
  }, /*#__PURE__*/React.createElement(IconButton, {
    size: "sm",
    color: "primary",
    jss: jssOverrides
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", _extends({}, props, {
    id: inputId,
    type: "checkbox",
    checked: checked,
    disabled: disabled,
    onChange: onChange,
    className: classes.input,
    name: name,
    value: value
  })), /*#__PURE__*/React.createElement("div", {
    className: classes["switch"]
  }))), children && /*#__PURE__*/React.createElement(TextField, null, children)));
});
Switch.propTypes = {
  /** Boolean flag used to set the switch as checked or not */
  checked: PropTypes.bool,

  /** Function to toggle the switch */
  onChange: PropTypes.func,

  /** Boolean indicator to toggle disabled for the switch */
  disabled: PropTypes.bool,

  /** The value to pass on switch click */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** Checkbox name */
  name: PropTypes.string,

  /** Additional class to add to the switch */
  className: PropTypes.string,

  /** Additional style to add to the switch */
  style: PropTypes.shape(),

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Switch.defaultProps = {
  disabled: false,
  value: '',
  name: '',
  className: '',
  style: {},
  onChange: noop,
  checked: false
};
Switch.displayName = 'Switch';
export default Switch;