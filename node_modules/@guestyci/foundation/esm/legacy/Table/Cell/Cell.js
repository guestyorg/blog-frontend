import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React from 'react';
import { node, string, shape, bool } from 'prop-types';
import cn from 'classnames';
import PlaceholderBase from "../../Placeholder";
import Tooltip from "../../Tooltip";
import { isNumber } from "../../../utils/commonUtility";
import useOverflowBoundaries from "../../../useOverflowBoundaries";
import createStyles from "../../../createStyles";
import TextField from "../../../TextField";
var useStyles = createStyles(function (theme) {
  return {
    root: {
      backgroundColor: 'inherit',
      display: 'table-cell',
      overflow: 'none',
      verticalAlign: 'middle',
      borderBottom: "1px solid ".concat(theme.palette.border)
    },
    cellContent: {
      padding: theme.spacer(3)
    }
  };
}, {
  name: 'Cell'
});
var Cell = React.forwardRef(function Cell(_ref, ref) {
  var children = _ref.children,
      isLoading = _ref.isLoading,
      overflowEllipsis = _ref.overflowEllipsis,
      overflowEllipsisTooltip = _ref.overflowEllipsisTooltip,
      className = _ref.className,
      contentClassName = _ref.contentClassName,
      style = _ref.style,
      width = _ref.width,
      positionLeft = _ref.positionLeft,
      positionRight = _ref.positionRight,
      Placeholder = _ref.Placeholder,
      jss = _ref.jss,
      tooltipId = _ref.tooltipId,
      props = _objectWithoutProperties(_ref, ["children", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style", "width", "positionLeft", "positionRight", "Placeholder", "jss", "tooltipId"]);

  var classes = useStyles({
    jss: jss
  });

  var _useOverflowBoundarie = useOverflowBoundaries(),
      _useOverflowBoundarie2 = _slicedToArray(_useOverflowBoundarie, 2),
      isOverflowed = _useOverflowBoundarie2[0],
      overflowRef = _useOverflowBoundarie2[1];

  var tooltipBody = overflowEllipsis && isOverflowed ? overflowEllipsisTooltip : null;

  var layoutStyles = _extends({}, isNumber(positionRight) && {
    right: "".concat(positionRight, "px")
  }, {}, isNumber(positionLeft) && {
    left: "".concat(positionLeft, "px")
  }, {}, isNumber(width) && {
    width: "".concat(width, "px")
  });

  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    ref: ref,
    className: cn('cell', classes.root, className),
    style: _extends({}, style, {}, layoutStyles)
  }), /*#__PURE__*/React.createElement(Tooltip, {
    id: tooltipId,
    body: tooltipBody
  }, /*#__PURE__*/React.createElement(TextField, {
    overflowEllipsis: overflowEllipsis,
    className: cn('cell-content', classes.cellContent, contentClassName),
    ref: overflowRef
  }, isLoading ? Placeholder : children)));
});
Cell.propTypes = {
  /** content of a cell */
  children: node,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: node,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape(),

  /** component to be rendered when loading is in progress  */
  Placeholder: node
};
Cell.defaultProps = {
  children: null,
  className: '',
  contentClassName: '',
  style: {},
  overflowEllipsis: false,
  overflowEllipsisTooltip: null,
  isLoading: false,
  Placeholder: /*#__PURE__*/React.createElement(PlaceholderBase, {
    className: "cell-placeholder height-10 w-fill"
  })
};
Cell.displayName = 'Cell';
export default Cell;