import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { arrayOf, object, func, string, bool, shape } from 'prop-types';
import { createUseStyles } from 'react-jss';
import noop from 'lodash/noop';
import cn from 'classnames';
import IconDropdown from "../../IconDropdown";
import Spinner from "../../Spinner";

var BtnAc = function BtnAc(props) {
  return /*#__PURE__*/React.createElement("svg", props, /*#__PURE__*/React.createElement("circle", {
    cx: "1.5",
    cy: "1.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "7",
    cy: "1.5",
    r: "1.5"
  }), /*#__PURE__*/React.createElement("circle", {
    cx: "12.5",
    cy: "1.5",
    r: "1.5"
  }));
};

BtnAc.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 14 3"
};
import { AnchorDirectionType } from "../../../enums";
import Cell from "../Cell";
const useStyles = createUseStyles({
  spinner: {
    width: '25px',
    height: '25px'
  }
});

const ActionsCell = (_ref) => {
  let {
    onChange,
    options,
    isLoading,
    isActionInProgress,
    className,
    style
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["onChange", "options", "isLoading", "isActionInProgress", "className", "style"]);

  const {
    spinner
  } = useStyles();
  return /*#__PURE__*/React.createElement(Cell, _extends({}, rest, {
    isLoading: isLoading,
    className: cn('actions-cell', className),
    style: style,
    contentClassName: "d-flex justify-content-end mr-1",
    "data-qa": "actions-cell"
  }), isActionInProgress ? /*#__PURE__*/React.createElement(Spinner, {
    size: 20,
    className: spinner
  }) : /*#__PURE__*/React.createElement(IconDropdown, {
    svg: BtnAc,
    onChange: onChange,
    options: options,
    className: cn('d-flex', 'justify-content-center', 'width-25 height-25', 'bg-white', 'b-1 border-white border-hover-gray border-radius-25'),
    iconClassName: "p-0",
    anchorDirection: AnchorDirectionType.End,
    width: 14
  }));
};

ActionsCell.propTypes = {
  /**
   * The dropdown options to show - Structure ({
   *   label: {Node} - the label to present,
   *   value: {String|number} - unique value to be sent to the server,
   *   name: {String} - required if value to present if label is component-shown in input once selected,
   * })
   */
  options: arrayOf(object),

  /** Callback function to be called on value changed */
  onChange: func,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that some action is in progress, shows spinner */
  isActionInProgress: bool,

  /** class name of cell */
  className: string,

  /** styles applied to a cell */
  style: shape()
};
ActionsCell.defaultProps = {
  options: [],
  onChange: noop,
  isLoading: false,
  isActionInProgress: false,
  className: '',
  style: {}
};
export default ActionsCell;