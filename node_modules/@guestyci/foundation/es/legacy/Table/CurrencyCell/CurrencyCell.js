import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import { bool, number, oneOfType, shape, string } from 'prop-types';
import cn from 'classnames';
import Currency from '@guestyci/localize/FormattedCurrency';
import TextField from "../../TextField";
import TextCell from "../TextCell";

function CurrencyCell(_ref) {
  let {
    value,
    currency,
    color,
    isLoading,
    overflowEllipsis,
    overflowEllipsisTooltip,
    className,
    contentClassName,
    style
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["value", "currency", "color", "isLoading", "overflowEllipsis", "overflowEllipsisTooltip", "className", "contentClassName", "style"]);

  return /*#__PURE__*/React.createElement(TextCell, _extends({}, rest, {
    isLoading: isLoading,
    overflowEllipsis: overflowEllipsis,
    overflowEllipsisTooltip: overflowEllipsisTooltip,
    className: cn('currency-cell', className),
    contentClassName: contentClassName,
    style: style,
    "data-qa": "currency-cell"
  }), /*#__PURE__*/React.createElement(TextField, {
    color: color,
    className: "d-inline"
  }, /*#__PURE__*/React.createElement(Currency, {
    currency: currency,
    value: value
  })));
}

CurrencyCell.propTypes = {
  /** value is required */
  value: oneOfType([number, string]).isRequired,

  /** currency type (USD,EUR,...) */
  currency: string,

  /** color of the text as defined in design system colors */
  color: string,

  /** indicator that cell is yet to receive data */
  isLoading: bool,

  /** indicator that cell should trim cell content and show tooltip with full data */
  overflowEllipsis: bool,

  /** tooltip body of an overflowed cell content */
  overflowEllipsisTooltip: string,

  /** class name of cell */
  className: string,

  /** class name of cell content wrapper */
  contentClassName: string,

  /** styles applied to a cell */
  style: shape()
};
CurrencyCell.defaultProps = {
  currency: '',
  color: '',
  className: '',
  contentClassName: '',
  style: {},
  isLoading: false,
  overflowEllipsis: true,
  overflowEllipsisTooltip: ''
};
export default CurrencyCell;