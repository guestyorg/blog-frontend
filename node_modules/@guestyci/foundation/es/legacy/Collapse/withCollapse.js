import _extends from "@babel/runtime/helpers/esm/extends";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
/**
 * Create a wrapper compose to support Accordion functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */

const withCollapse = ComposedComponent => {
  var _temp;

  return _temp = class extends Component {
    constructor(props) {
      super(props);

      this.closeCollapse = () => {
        const {
          onVisibilityChange
        } = this.props;
        this.setState({
          show: false
        });
        onVisibilityChange(false);
      };

      this.openCollapse = event => {
        const {
          onVisibilityChange
        } = this.props;

        if (event) {
          event.stopPropagation();
        }

        this.setState({
          show: true
        });
        onVisibilityChange(true);
      };

      this.toggleCollapse = event => {
        const {
          onVisibilityChange
        } = this.props;
        const {
          show
        } = this.state;

        if (event) {
          event.stopPropagation();
        }

        onVisibilityChange(!show);
        this.setState(prevState => ({
          show: !prevState.show
        }));
      };

      this.state = {
        show: false
      };
    }

    render() {
      const {
        show
      } = this.state;
      return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
        isCollapsed: !show,
        closeCollapse: this.closeCollapse,
        openCollapse: this.openCollapse,
        toggleCollapse: this.toggleCollapse
      }));
    }

  }, _temp;
};

Component.propTypes = {
  onVisibilityChange: PropTypes.func
};
Component.defaultProps = {
  onVisibilityChange: noop
};
export default withCollapse;