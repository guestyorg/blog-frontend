import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useCallback, useEffect, useRef, useState } from 'react';

function useDrag(payload, onDrop) {
  var isDraggable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var dragRef = useRef();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDragging = _useState2[0],
      setIsDragging = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isDragOver = _useState4[0],
      setIsDragOver = _useState4[1];

  var handleDragStart = useCallback(function (e) {
    e.stopPropagation();
    e.dataTransfer.setData('text', JSON.stringify(payload));
    e.dataTransfer.dropEffect = 'move';
    setIsDragging(true);
    setIsDragOver(false);
  }, [payload, setIsDragging, setIsDragOver]);
  var handleDragOver = useCallback(function (e) {
    e.preventDefault();
    setIsDragOver(true);
  }, [setIsDragOver]);
  var handleDragDrop = useCallback(function (e) {
    e.preventDefault();
    var data = JSON.parse(e.dataTransfer.getData('text'));
    setIsDragging(false);
    setIsDragOver(false);

    if (onDrop) {
      onDrop({
        sourceData: data,
        targetData: payload
      });
    }
  }, [payload, onDrop, setIsDragOver, setIsDragging]);
  useEffect(function () {
    var node = dragRef.current;

    if (node && isDraggable) {
      node.draggable = true;
      node.addEventListener('dragstart', handleDragStart);
      node.addEventListener('drop', handleDragDrop);
      node.addEventListener('dragover', handleDragOver);
      return function () {
        node.draggable = false;
        node.removeEventListener('dragstart', handleDragStart);
        node.removeEventListener('drop', handleDragDrop);
        node.removeEventListener('dragover', handleDragOver);
      };
    }
  }, [payload, isDraggable, handleDragDrop, handleDragStart, handleDragOver]);
  return [{
    isDragging: isDragging,
    isDragOver: isDragOver
  }, dragRef];
}

export default useDrag;