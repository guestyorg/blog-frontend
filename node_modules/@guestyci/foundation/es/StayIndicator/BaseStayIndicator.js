import React, { forwardRef } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import memoize from '@guestyci/memoize';
import { Row, Col } from "../Layout";
import { gray300 } from "../theme/colors";
import { StayStatus } from "../enums/enums";
import createStyles from "../createStyles";
import IndicatorCircle from "./IndicatorCircle";
import IndicatorLine from "./IndicatorLine";
import { componentThickness, componentMinLength } from "./helpers";
const {
  Complete,
  Reserved,
  Staying
} = StayStatus;
export const getColorBasedStyles = memoize((status, isDark, classes) => {
  const {
    backgroundSuccess,
    borderSuccess,
    borderWarning,
    borderDark,
    borderGrey
  } = classes;

  switch (status) {
    case Complete:
      return {
        left: [backgroundSuccess, borderSuccess],
        right: [backgroundSuccess, borderSuccess]
      };

    case Reserved:
      return {
        left: [borderWarning],
        right: [borderWarning]
      };

    case Staying:
      return {
        left: [backgroundSuccess, borderSuccess],
        right: [isDark ? borderDark : borderGrey]
      };

    default:
      return {
        left: [isDark ? borderDark : borderGrey],
        right: [isDark ? borderDark : borderGrey]
      };
  }
});
export const useStyles = createStyles(theme => ({
  indicatorLineSize: {
    flexGrow: 1
  },
  indicatorCircle: {
    fill: theme.palette.background.white
  },
  indicatorCircleSize: {
    width: componentThickness,
    height: componentThickness
  },
  backgroundSuccess: {
    fill: theme.palette.success.default
  },
  borderSuccess: {
    stroke: theme.palette.success.default
  },
  borderWarning: {
    stroke: theme.palette.alert.default
  },
  borderDark: {
    stroke: theme.palette.text.primary
  },
  borderGrey: {
    stroke: gray300
  },
  rootHorizontal: {
    minWidth: componentMinLength
  },
  rootVertical: {
    minHeight: componentMinLength
  },
  rootHorizontalSmall: {
    width: componentMinLength,
    height: componentThickness
  },
  rootHorizontalFullWidth: {
    width: '100%'
  },
  rootVerticalSmall: {
    height: componentMinLength,
    width: componentThickness
  },
  rootVerticalFullWidth: {
    height: '100%'
  },
  indicatorLine: {},
  root: {}
}));
const BaseStayIndicator = forwardRef(({
  status = StayStatus.Planned,
  className,
  dark,
  jss,
  fullWidth,
  vertical
}, ref) => {
  const classes = useStyles({
    jss
  });
  const Wrapper = vertical ? Col : Row;
  return /*#__PURE__*/React.createElement(Wrapper, {
    className: cn({
      [classes.rootHorizontal]: !vertical,
      [classes.rootVertical]: vertical,
      [classes.rootHorizontalSmall]: !vertical,
      [classes.rootHorizontalFullWidth]: !vertical && fullWidth,
      [classes.rootVerticalSmall]: vertical,
      [classes.rootVerticalFullWidth]: vertical && fullWidth
    }, classes.root, className),
    ref: ref
  }, /*#__PURE__*/React.createElement(IndicatorCircle, {
    className: cn('stay-indicator-circle-1', classes.indicatorCircle, classes.indicatorCircleSize, ...getColorBasedStyles(status, dark, classes).left)
  }), /*#__PURE__*/React.createElement(IndicatorLine, {
    vertical: vertical,
    className: cn('stay-indicator-line-1', classes.indicatorLine, classes.indicatorLineSize, ...getColorBasedStyles(status, dark, classes).left)
  }), /*#__PURE__*/React.createElement(IndicatorLine, {
    vertical: vertical,
    className: cn('stay-indicator-line-2', classes.indicatorLine, classes.indicatorLineSize, ...getColorBasedStyles(status, dark, classes).right)
  }), /*#__PURE__*/React.createElement(IndicatorCircle, {
    className: cn('stay-indicator-circle-2', classes.indicatorCircle, classes.indicatorCircleSize, ...getColorBasedStyles(status, dark, classes).right)
  }));
});
BaseStayIndicator.displayName = 'BaseStayIndicator';
BaseStayIndicator.propTypes = {
  /** Stay status - Enum (StayStatus- [Reserved, Planned, Staying, Complete,]) */
  status: PropTypes.oneOf([StayStatus.Planned, StayStatus.Staying, StayStatus.Complete, StayStatus.Reserved]),

  /** Additional class to add to StayIndicator */
  className: PropTypes.string,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** Set orientation as vertical(default is horizontal) */
  vertical: PropTypes.bool,

  /** Set theme to dark */
  dark: PropTypes.bool,

  /** Set the stay indicator to fill space */
  fullWidth: PropTypes.bool,

  /** reference that will be applied to Row container */
  ref: PropTypes.shape()
};
export default BaseStayIndicator;