"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FieldComponent = exports.getFormFieldValidation = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _memoize = _interopRequireDefault(require("@guestyci/memoize"));

var _InputLabel = _interopRequireDefault(require("../InputLabel/InputLabel"));

var _FormFieldComponent = _interopRequireDefault(require("./FormFieldComponent"));

var _validators = require("../../validators");

var _enums = require("../../enums");

var _FormContext = _interopRequireDefault(require("../Form/FormContext"));

var composeValidators = (0, _memoize["default"])(function (validators) {
  return function (value) {
    return validators.reduce(function (error, validator) {
      return error || validator(value);
    }, undefined);
  };
});
var buildValidators = (0, _memoize["default"])(function (validations, required) {
  return required ? [_validators.required].concat((0, _toConsumableArray2["default"])(validations)) : validations;
});

var getFormFieldValidation = function getFormFieldValidation(validations, required, provider) {
  return provider === _enums.FormProvider.Redux ? buildValidators(validations, required) : composeValidators(required ? [_validators.required].concat((0, _toConsumableArray2["default"])(validations)) : validations);
};

exports.getFormFieldValidation = getFormFieldValidation;

var FormField = function FormField(_ref) {
  var children = _ref.children,
      label = _ref.label,
      tooltip = _ref.tooltip,
      className = _ref.className,
      style = _ref.style,
      name = _ref.name,
      validate = _ref.validate,
      field = _ref.field,
      fieldClassName = _ref.fieldClassName,
      inputLabelClassName = _ref.inputLabelClassName,
      required = _ref.required,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "label", "tooltip", "className", "style", "name", "validate", "field", "fieldClassName", "inputLabelClassName", "required"]);

  var _useContext = (0, _react.useContext)(_FormContext["default"]),
      provider = _useContext.provider,
      fieldInstance = _useContext.fieldInstance;

  var Field = field || fieldInstance;
  var validations = (0, _react.useMemo)(function () {
    return getFormFieldValidation(validate, required, provider);
  }, [provider, validate, required]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('relative form-field w-fill', className),
    style: style,
    "data-qa": "form-field"
  }, label && /*#__PURE__*/_react["default"].createElement(_InputLabel["default"], {
    label: label,
    tooltip: tooltip,
    className: inputLabelClassName
  }), /*#__PURE__*/_react["default"].createElement(Field, (0, _extends2["default"])({
    name: name,
    validate: validations,
    className: fieldClassName,
    component: _FormFieldComponent["default"],
    required: required
  }, props), children));
};

FormField.defaultProps = {
  label: '',
  tooltip: '',
  className: '',
  field: undefined,
  style: {},
  fieldClassName: '',
  validate: [],
  required: false,
  inputLabelClassName: ''
};
FormField.propTypes = {
  /** form field name to validate accordingly */
  name: _propTypes["default"].string.isRequired,

  /** the redux form field props - required due to redux-form limitations */
  field: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func]),

  /** Form field level validations to run - to use required, use the boolean required prop - Must be an Array */
  validate: _propTypes["default"].arrayOf(_propTypes["default"].func),

  /** Form element to render */
  children: _propTypes["default"].node.isRequired,

  /** form field label */
  label: _propTypes["default"].string,

  /** Form field label tooltip */
  tooltip: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].string, _propTypes["default"].arrayOf(_propTypes["default"].node)]),

  /** Form field root level additional class */
  className: _propTypes["default"].string,

  /** Form field root level additional class */
  style: _propTypes["default"].shape(),

  /** Form field component level additional class */
  fieldClassName: _propTypes["default"].string,

  /** Boolean indicator whether or not field is required */
  required: _propTypes["default"].bool,

  /** Additional class for input label level */
  inputLabelClassName: _propTypes["default"].string
};
var FieldComponent = FormField;
exports.FieldComponent = FieldComponent;
var _default = FormField;
exports["default"] = _default;