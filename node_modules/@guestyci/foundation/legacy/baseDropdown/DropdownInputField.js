"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactJss = require("react-jss");

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _ActionButton = _interopRequireDefault(require("../ActionButton"));

var _withFocus = _interopRequireDefault(require("../../withFocus/withFocus"));

var _Fade = _interopRequireDefault(require("../Fade"));

var BtnDelete = function BtnDelete(props) {
  return /*#__PURE__*/_react["default"].createElement("svg", props, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M8.485.707L7.778 0 4.243 3.536.707 0 0 .707l3.536 3.536L0 7.778l.707.707L4.243 4.95l3.535 3.535.707-.707L4.95 4.243z"
  }));
};

BtnDelete.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 8.4854 8.4854"
};

var BtnArrowDown = function BtnArrowDown(props) {
  return /*#__PURE__*/_react["default"].createElement("svg", props, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M4.533 4.997c.13.006.26-.039.357-.136L8.925.826a.488.488 0 0 0-.69-.69L4.532 3.843.826.137a.488.488 0 0 0-.69.69L4.172 4.86c.097.097.23.143.362.136z"
  }));
};

BtnArrowDown.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 9.0618038 4.9977479"
};
var useStyles = (0, _reactJss.createUseStyles)({
  input: {
    '&:focus': {
      borderColor: 'transparent',
      borderRadius: 0,
      boxShadow: 'none'
    }
  },
  selectedValueContainer: {
    minWidth: 0
  },
  dropDownInputField: {
    '&.disabled-lite': {
      cursor: 'not-allowed'
    }
  },
  ellipsisActionBtn: {
    minWidth: '45px'
  }
});

var DropdownInputField = function DropdownInputField(_ref) {
  var onQueryChange = _ref.onQueryChange,
      placeholder = _ref.placeholder,
      onIconClick = _ref.onIconClick,
      noAction = _ref.noAction,
      inputClassName = _ref.inputClassName,
      onClearQuery = _ref.onClearQuery,
      isOpen = _ref.isOpen,
      searchable = _ref.searchable,
      value = _ref.value,
      onClearSelected = _ref.onClearSelected,
      query = _ref.query,
      className = _ref.className,
      name = _ref.name,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      isFocused = _ref.isFocused,
      noClear = _ref.noClear,
      disabled = _ref.disabled,
      ellipsis = _ref.ellipsis;
  var classes = useStyles();
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('b-1 border-gray-light flex-start-center pos-relative font-size-md d-flex border-radius-2', className, classes.dropDownInputField, {
      'bg-white': !disabled
    }, {
      'bg-gray-lighter': disabled
    }, {
      'text-muted': disabled
    }, {
      'disabled-lite': disabled
    }),
    "data-qa": "dropdown-input-field"
  }, searchable && /*#__PURE__*/_react["default"].createElement("input", {
    value: isFocused ? query : value,
    onFocus: onFocus,
    onBlur: onBlur,
    type: "text",
    name: name,
    placeholder: placeholder,
    onChange: onQueryChange,
    className: (0, _classnames["default"])('input-element pl-4 flex-1 height-46 border-0 b-0 bg-transparent border-gray-light br-1', classes._input, classes.selectedValueContainer, inputClassName, {
      'overflow-ellipsis': ellipsis
    }),
    disabled: disabled
  }), !searchable && /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('flex-1 px-4 font-size-md', classes.selectedValueContainer, {
      'text-gray-dark': !value,
      'overflow-ellipsis': ellipsis
    }),
    name: name
  }, value || placeholder), (!noClear || searchable && isFocused) && /*#__PURE__*/_react["default"].createElement(_Fade["default"], {
    show: !!value || !!query,
    speed: "quick",
    mountOnEnter: true
  }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
    className: "mr-3",
    onClick: query ? onClearQuery : onClearSelected,
    svg: BtnDelete,
    iconHeight: 10,
    iconWidth: 10
  })), !noAction && /*#__PURE__*/_react["default"].createElement(_ActionButton["default"], {
    className: (0, _classnames["default"])('bl-1 b-0 p-0 flex-shrink-0', (0, _defineProperty2["default"])({}, classes.ellipsisActionBtn, ellipsis)),
    iconClassName: (0, _classnames["default"])('transition-transform', {
      'transform-180': isOpen
    }),
    svg: BtnArrowDown,
    iconWidth: 9,
    iconHeight: 9,
    iconColor: isOpen ? 'blue' : 'gray-dark',
    onClick: onIconClick,
    disabled: disabled
  }));
};

DropdownInputField.defaultProps = {
  placeholder: 'Select',
  value: '',
  searchable: false,
  onClearQuery: _noop["default"],
  onClearSelected: _noop["default"],
  onIconClick: _noop["default"],
  query: '',
  noAction: false,
  isOpen: false,
  className: '',
  inputClassName: '',
  name: '',
  noClear: false,
  disabled: false,
  ellipsis: false
};
DropdownInputField.propTypes = {
  /** Function to be called on input value changed */
  onQueryChange: _propTypes["default"].func.isRequired,

  /** String to populate the placeholder */
  placeholder: _propTypes["default"].string,

  /** Function to be called when clicking the input side icon */
  onIconClick: _propTypes["default"].func,

  /** Boolean to control the dropdown list state */
  isOpen: _propTypes["default"].bool,

  /** String, search value or input */
  value: _propTypes["default"].string,

  /** Indicator whether or not the input field is searchable */
  searchable: _propTypes["default"].bool,

  /** Callback for clear field query */
  onClearQuery: _propTypes["default"].func,

  /** Callback for clear field selected value */
  onClearSelected: _propTypes["default"].func,

  /** The query search for input */
  query: _propTypes["default"].string,

  /** Remove action button from input field */
  noAction: _propTypes["default"].bool,

  /** Indicator whether or not we are disabling the clear button */
  noClear: _propTypes["default"].bool,

  /** Additional class for root level */
  className: _propTypes["default"].string,

  /** Additional class for input level */
  inputClassName: _propTypes["default"].string,

  /** item name */
  name: _propTypes["default"].string,

  /** Indicator for disabled status */
  disabled: _propTypes["default"].bool,

  /** Indicator whether or not selected value is one line & with ellipsis text */
  ellipsis: _propTypes["default"].bool
};

var _default = (0, _withFocus["default"])(DropdownInputField);

exports["default"] = _default;