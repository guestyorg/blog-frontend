"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.deserializeTimeToObject = exports.useStyles = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _createStyles = _interopRequireDefault(require("../createStyles"));

var _Row = _interopRequireDefault(require("../Layout/Row"));

var _Button = _interopRequireDefault(require("../Button"));

var _TextField = _interopRequireDefault(require("../TextField"));

var _PickerClearButton = _interopRequireDefault(require("../basePicker/PickerClearButton"));

var _PickerInputButton = _interopRequireDefault(require("../basePicker/PickerInputButton"));

var _Input = _interopRequireDefault(require("../Input"));

var _PickerResetWrapper = _interopRequireDefault(require("../basePicker/PickerResetWrapper"));

var _styles = require("./styles");

var BtnTime = function BtnTime(props) {
  return /*#__PURE__*/_react["default"].createElement("svg", props, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M10.5 0C4.71 0 0 4.71 0 10.5S4.71 21 10.5 21 21 16.29 21 10.5 16.29 0 10.5 0zm0 20C5.262 20 1 15.738 1 10.5S5.262 1 10.5 1 20 5.262 20 10.5 15.738 20 10.5 20z"
  }), /*#__PURE__*/_react["default"].createElement("path", {
    d: "M10 5H9v7h7v-1h-6z"
  }));
};

BtnTime.defaultProps = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 21 21"
};
var useStyles = (0, _createStyles["default"])(function (theme) {
  return (0, _extends2["default"])({}, (0, _styles.timePickerInputStyles)(theme));
});
exports.useStyles = useStyles;

var deserializeTimeToObject = function deserializeTimeToObject(value) {
  if (!value) {
    return {
      hour: '',
      minute: '',
      ampm: ''
    };
  }

  var valueArray = value.split(':');
  var minValueArray = valueArray[1].trim().split(' ');
  return {
    hour: (valueArray[0] || '00').trim(),
    minute: (minValueArray[0] || '00').trim(),
    ampm: minValueArray[1] || 'am'
  };
};

exports.deserializeTimeToObject = deserializeTimeToObject;

var serializeTimeFromValue = function serializeTimeFromValue(e, _ref, name, paddedValue) {
  var hour = _ref.hour,
      minute = _ref.minute,
      ampm = _ref.ampm;
  var value = e.target.value;
  var usableValue = paddedValue || value;

  if (!value) {
    return '';
  }

  switch (name) {
    case 'hour':
      return "".concat(usableValue, " : ").concat(minute || '00', " ").concat(ampm || 'am');

    case 'minute':
      return "".concat(hour || '00', " : ").concat(usableValue || '', " ").concat(ampm || 'am');

    case 'ampm':
      return "".concat(hour || '00', " : ").concat(minute || '00', " ").concat(usableValue);

    default:
      return '';
  }
};

var jumpToNextInput = function jumpToNextInput(ref) {
  ref.current.select();
};

var TimePickerInput = _react["default"].forwardRef(function TimePickerInput(_ref2, ref) {
  var _cn;

  var value = _ref2.value,
      onClick = _ref2.onClick,
      onChange = _ref2.onChange,
      open = _ref2.open,
      _ref2$name = _ref2.name,
      name = _ref2$name === void 0 ? '' : _ref2$name,
      className = _ref2.className,
      style = _ref2.style,
      disabled = _ref2.disabled,
      onClear = _ref2.onClear,
      noClear = _ref2.noClear,
      defaultValue = _ref2.defaultValue,
      resetable = _ref2.resetable,
      jss = _ref2.jss,
      error = _ref2.error,
      props = (0, _objectWithoutProperties2["default"])(_ref2, ["value", "onClick", "onChange", "open", "name", "className", "style", "disabled", "onClear", "noClear", "defaultValue", "resetable", "jss", "error"]);
  var classes = useStyles({
    jss: jss
  });
  var hourRef = (0, _react.useRef)();
  var minuteRef = (0, _react.useRef)();
  var ampmRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    if (open) {
      hourRef.current.focus();
    }
  }, [open]);
  var time = (0, _react.useMemo)(function () {
    return deserializeTimeToObject(value);
  }, [value]);

  var handleInputFocus = function handleInputFocus(e) {
    e.target.select();
  };

  var handleInputBlur = function handleInputBlur(inputName) {
    return function (e) {
      var inputValue = e.target.value;
      var paddedValue = inputValue.length === 1 ? "0".concat(inputValue) : inputValue;

      if (paddedValue !== inputValue) {
        var newValue = serializeTimeFromValue(e, time, inputName, paddedValue);
        onChange(e, newValue);
      }
    };
  };

  var handleReset = function handleReset(e) {
    e.stopPropagation();
    onChange(e, defaultValue);
  };

  var dispatchEvent = function dispatchEvent(e, newValue) {
    e.stopPropagation();
    onChange(e, newValue);
  };

  var handleAMPMChange = function handleAMPMChange(e) {
    var newValue = serializeTimeFromValue(e, time, 'ampm');
    dispatchEvent(e, newValue);
  };

  var handleHoursChange = function handleHoursChange(e) {
    var inputValue = e.currentTarget.value;

    if (inputValue < 0 || inputValue > 12) {
      return;
    }

    var newValue = serializeTimeFromValue(e, time, 'hour');
    dispatchEvent(e, newValue);

    if (inputValue.length === 2) {
      jumpToNextInput(minuteRef);
    }
  };

  var handleMinutesChange = function handleMinutesChange(e) {
    var inputValue = e.target.value;

    if (inputValue < 0 || inputValue >= 60) {
      return;
    }

    var newValue = serializeTimeFromValue(e, time, 'minute');
    dispatchEvent(e, newValue);

    if (inputValue.length === 2) {
      jumpToNextInput(ampmRef);
    }
  };

  var hour = time.hour,
      minute = time.minute,
      ampm = time.ampm;
  return /*#__PURE__*/_react["default"].createElement(_Button["default"], (0, _extends2["default"])({}, props, {
    enableRipple: false,
    ref: ref,
    value: value,
    name: name,
    className: (0, _classnames["default"])(classes.root, (_cn = {}, (0, _defineProperty2["default"])(_cn, classes.disabled, disabled), (0, _defineProperty2["default"])(_cn, classes.focus, open), (0, _defineProperty2["default"])(_cn, classes.error, error), _cn), className),
    onClick: onClick,
    disabled: disabled,
    style: style
  }), /*#__PURE__*/_react["default"].createElement(_PickerResetWrapper["default"], {
    align: "center",
    justify: "between",
    resetable: resetable,
    onReset: handleReset
  }, /*#__PURE__*/_react["default"].createElement(_PickerInputButton["default"], {
    svg: BtnTime,
    disabled: disabled,
    active: open
  }), /*#__PURE__*/_react["default"].createElement(_Row["default"], {
    className: classes.row,
    span: "auto",
    align: "center"
  }, /*#__PURE__*/_react["default"].createElement(_Input["default"], {
    disabled: disabled,
    ref: hourRef,
    maxLength: 2,
    onFocus: handleInputFocus,
    onChange: handleHoursChange,
    onBlur: handleInputBlur('hour'),
    name: "hour",
    value: hour,
    className: classes.input,
    placeholder: "HH"
  }), /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
    className: classes.separator
  }, ":"), /*#__PURE__*/_react["default"].createElement(_Input["default"], {
    disabled: disabled,
    maxLength: 2,
    ref: minuteRef,
    onFocus: handleInputFocus,
    onChange: handleMinutesChange,
    onBlur: handleInputBlur('minute'),
    name: "minute",
    value: minute,
    className: classes.input,
    placeholder: "MM"
  }), /*#__PURE__*/_react["default"].createElement(_Input["default"], {
    disabled: disabled,
    maxLength: 2,
    ref: ampmRef,
    onFocus: handleInputFocus,
    onChange: handleAMPMChange,
    name: "ampm",
    value: ampm,
    className: classes.input,
    placeholder: "AM"
  })), !noClear && !disabled && /*#__PURE__*/_react["default"].createElement(_PickerClearButton["default"], {
    show: !!value,
    onClick: onClear
  })));
});

TimePickerInput.propTypes = {
  /** Selected value to pass to the input */
  value: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].array, _propTypes["default"].string, _propTypes["default"].number]),
  onClick: _propTypes["default"].func,
  onClear: _propTypes["default"].func,

  /** Prop to remove clear button if exists */
  noClear: _propTypes["default"].bool,

  /** Disabled boolean indicator */
  disabled: _propTypes["default"].bool,

  /** Additional className */
  className: _propTypes["default"].string,

  /** Additional style */
  style: _propTypes["default"].shape(),

  /** form level name */
  name: _propTypes["default"].string,

  /** Indicator whether or not the dropdown is open */
  open: _propTypes["default"].bool,

  /** jss override  */
  jss: _propTypes["default"].oneOfType([_propTypes["default"].shape(), _propTypes["default"].func])
};
TimePickerInput.displayName = 'TimePickerInput';
var _default = TimePickerInput;
exports["default"] = _default;