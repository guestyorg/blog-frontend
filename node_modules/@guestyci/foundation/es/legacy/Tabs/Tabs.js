import React, { Component } from 'react';
import PropTypes from 'prop-types';
import withStyles from 'react-jss';
import cn from 'classnames';
import noop from 'lodash/noop';
import isNumber from 'lodash/isNumber';
import ActiveTabBottomBorder from "./ActiveTabBottomBorder";
import ExpandingSearchBar from "../ExpandingSearchBar/ExpandingSearchBar";
import Fade from "../Fade/Fade";
import { isEmpty } from "../../utils";
const styles = {
  expandableSearchBar: {
    top: 2
  }
};
export const shouldRecalculatePosition = (prevChildren, children) => {
  if (!children) {
    return false;
  }

  if (!prevChildren && children) {
    return true;
  }

  return prevChildren.length !== children.length;
};

class Tabs extends Component {
  constructor(props) {
    super(props);

    this.setControlledPosition = value => {
      const tabs = this.tabsRef.current.getElementsByClassName('tab-item');
      const index = Array.from(tabs).findIndex(tab => tab.value === String(value));

      if (index > -1) {
        this.setPosition(index);
      }
    };

    this.setPosition = activeTabIndex => {
      this.setState({
        activeTabIndex
      }, () => {
        this.setBorderWidth();
      });
    };

    this.setBorderWidth = () => {
      const {
        activeTabIndex
      } = this.state;
      const tabs = this.tabsRef.current.getElementsByClassName('tab-item');
      const activeChild = tabs[activeTabIndex];
      this.setState({
        borderWidth: activeChild.offsetWidth,
        position: activeChild.offsetLeft
      });
    };

    this.initActiveTabIndex = children => {
      let activeIndex = 0;
      React.Children.map(children, (child, index) => {
        if (child.props.active && !child.props.disabled) {
          activeIndex = index;
        }
      });
      return activeIndex;
    };

    this.changeTab = (activeTabIndex, value = {}) => {
      this.setPosition(activeTabIndex);
      const {
        onChange,
        onChangeTab
      } = this.props;

      if (onChange || onChangeTab) {
        const tabProps = {
          value,
          activeTabIndex
        };

        if (onChange) {
          onChange(tabProps);
        }

        if (onChangeTab) {
          onChangeTab(tabProps);
        }
      }
    };

    this.toggleTabs = isSearchOpen => {
      this.setState({
        showTabs: !isSearchOpen
      });
    };

    this.isActiveIndex = index => {
      const {
        activeTabIndex
      } = this.state;
      return index === activeTabIndex;
    };

    this.tabsRef = React.createRef();
    this.state = {
      activeTabIndex: !isEmpty(props.initialValue) ? props.initialValue : this.initActiveTabIndex(props.children),
      borderWidth: 0,
      position: null,
      showTabs: true
    };
  }

  componentDidMount() {
    const {
      initialValue,
      value
    } = this.props;

    if (!isEmpty(initialValue) || !isEmpty(value)) {
      this.setControlledPosition(initialValue || value);
    } else {
      setTimeout(() => this.setBorderWidth(), 300);
    }
  }

  componentDidUpdate(prevProps) {
    const {
      value,
      children
    } = this.props;

    if (!isEmpty(value) && value !== prevProps.value) {
      this.setControlledPosition(value);
    }

    if (shouldRecalculatePosition(prevProps.children, children)) {
      setTimeout(() => {
        this.setBorderWidth();
        this.setControlledPosition(value);
      }, 155);
    }
  }

  render() {
    const {
      children,
      className,
      style,
      onSearchSubmit,
      withSearch,
      noBorderBottom,
      noBorder,
      classes,
      activeTabContentClassName,
      fullWidth,
      onSearchChange
    } = this.props;
    const {
      activeTabIndex,
      borderWidth,
      position,
      showTabs
    } = this.state;
    const activeTabContent = Array.isArray(children) ? children[activeTabIndex] && children[activeTabIndex]?.props?.children : children?.props?.children;
    const borderClass = !(noBorder || noBorderBottom) ? 'bb-2 border-gray-light' : '';
    return /*#__PURE__*/React.createElement("div", {
      className: cn('d-flex-fill', 'flex-column', className),
      ref: this.tabsRef,
      style: style,
      "data-qa": "tabs"
    }, /*#__PURE__*/React.createElement("div", {
      className: cn('d-flex', withSearch && borderClass)
    }, /*#__PURE__*/React.createElement(Fade, {
      mountOnEnter: true,
      show: showTabs,
      className: cn('relative', {
        'w-fill': fullWidth
      })
    }, /*#__PURE__*/React.createElement("div", {
      className: cn('tabs-wrapper d-flex text-uppercase min-height-50 h-fill text-gray-dark', !withSearch && borderClass)
    }, React.Children.map(children, (child, index) => React.cloneElement(child, {
      onClick: this.changeTab,
      className: index !== children.length - 1 ? 'mr-5' : '',
      tabIndex: index,
      isActive: this.isActiveIndex(index)
    }))), !!(isNumber(activeTabIndex) && isNumber(position)) && /*#__PURE__*/React.createElement(ActiveTabBottomBorder, {
      width: borderWidth,
      style: withSearch ? {
        bottom: -2
      } : null,
      position: position
    })), withSearch && /*#__PURE__*/React.createElement(ExpandingSearchBar, {
      onSubmit: onSearchSubmit,
      containerClassName: classes.expandableSearchBar,
      onToggleSearch: this.toggleTabs,
      onChange: onSearchChange
    })), activeTabContent && /*#__PURE__*/React.createElement("div", {
      className: cn('mt-6', activeTabContentClassName)
    }, activeTabContent));
  }

}

Tabs.defaultProps = {
  onChange: noop,
  onChangeTab: noop,
  className: '',
  style: {},
  withSearch: false,
  onSearchSubmit: noop,
  onSearchChange: noop,
  noBorder: false,
  noBorderBottom: false,
  initialValue: null,
  value: null,
  activeTabContentClassName: '',
  fullWidth: false
};
Tabs.propTypes = {
  /** The tabs children array to render */
  children: PropTypes.node.isRequired,

  /** Callback for on tab change payload:{ activeTabIndex, value (as passed in tab) } */
  onChange: PropTypes.func,

  /** Deprecated - user onChange in stead, Callback for tab change */
  onChangeTab: PropTypes.func,

  /** Additional class to tabs root */
  className: PropTypes.string,

  /** Additional style to tabs root */
  style: PropTypes.shape(),

  /** Indicator whether or not we want a search option on the tabs */
  withSearch: PropTypes.bool,

  /** Callback function to apply on search submit */
  onSearchSubmit: PropTypes.func,

  /** Callback function to apply on search input change */
  onSearchChange: PropTypes.func,

  /** Indicator whether or not to show the border for the tabs - DEPRECATED */
  noBorder: PropTypes.bool,

  /** Indicator whether or not to show the bottom line for the tabs */
  noBorderBottom: PropTypes.bool,

  /** initial tab index value to be active */
  initialValue: PropTypes.number,

  /** Controlled value for tab index - setting this will make component controlled */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Additional class to wrapper of children */
  activeTabContentClassName: PropTypes.string,

  /** Boolean indicator for parent full width */
  fullWidth: PropTypes.bool
};
export const TabsComponent = Tabs;
export default withStyles(styles)(Tabs);