{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport queryParser from 'querystring';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport { getHistory } from \"../createHistory/createHistory\";\nimport { postRouteChangeOutOfApp } from \"../routerListener/routeListener\";\nvar absWindow = window.parent;\n/**\n * Parse string path into location object\n * @param path {String } path to parse\n * @return {{search: string, hash: string, pathname: (*|string)}}\n */\n\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\n/**\n * Build the query params to be set on the url\n * @param params    {Object}  The payload object\n * @returns {string}    the formatted query params\n */\n\n\nfunction _buildURLQueryParams(params) {\n  return queryParser.stringify(params);\n}\n/**\n * Get the url query params\n * @returns {*}\n */\n\n\nfunction getQueryParams() {\n  var search = getHistory().location.search.replace('?', '');\n  return queryParser.parse(search);\n}\n/**\n * Build search query params from params and preserve query\n * @param params\n * @param preserveQueryParams\n * @returns {string}\n */\n\n\nfunction _buildSearchQueryParam() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var preserveQueryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var newSearch = '';\n  var isParamsEmpty = isEmpty(params);\n  var search = getHistory().location.search.replace('?', '');\n\n  if (preserveQueryParams && isParamsEmpty) {\n    newSearch = search;\n  } else if (preserveQueryParams && !isParamsEmpty) {\n    var newQuery = _extends({}, params, getQueryParams());\n\n    newSearch = _buildURLQueryParams(newQuery);\n  } else if (!preserveQueryParams && !isParamsEmpty) {\n    newSearch = _buildURLQueryParams(params);\n  }\n\n  return !isEmpty(newSearch) ? \"?\".concat(newSearch) : newSearch;\n}\n/**\n * Return the url pathname\n * @param relative  { Boolean } Return the url without the baseUrl, defaults to true\n * @return {String}\n */\n\n\nfunction getPathName() {\n  var relative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  try {\n    return relative ? absWindow.location.pathname.replace(getHistory().baseUrl, '') : absWindow.location.pathname;\n  } catch (e) {\n    return e;\n  }\n}\n/**\n * Check if url has a specific parameter in it\n * @param param {String || Number}  The url parameter to check if exists\n * @return {Boolean}\n */\n\n\nfunction hasInPath(param) {\n  try {\n    var path = getPathName(false) || '';\n    var set = new Set(path.split('/'));\n    return set.has(param);\n  } catch (e) {\n    return e;\n  }\n}\n/**\n * Link to url\n * @param path  {String}  The full path for the link\n * @param isNewTab  {Boolean} Indicator whether or not to show in new tab ( auto - true)\n */\n\n\nfunction link(path) {\n  var isNewTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (isNewTab) {\n    absWindow.open(path, '_blank');\n  } else if (getHistory().isFragment) {\n    postRouteChangeOutOfApp(path);\n  }\n}\n/**\n * Set query params into the url\n * @param params  {Object} the query param object to set\n * @param preservePrevious  {Boolean}  indicator whether or not to preserve the previous query params\n */\n\n\nfunction setQueryParams(params) {\n  var preservePrevious = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var search = _buildSearchQueryParam(params, preservePrevious);\n\n  getHistory().push({\n    search: search\n  });\n}\n/**\n * Navigate to new container\n * @param pathname {String} The route to nav to\n * @param params {Object} The query params to pass as object\n * @param preserveQueryParams\n */\n\n\nfunction go(pathname) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var preserveQueryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!isEmpty(pathname)) {\n    var search;\n\n    if (isString(params)) {\n      search = params;\n    } else {\n      search = _buildSearchQueryParam(params, preserveQueryParams);\n    }\n\n    getHistory().push({\n      pathname: pathname,\n      search: search\n    });\n  }\n}\n/**\n * Replace the current history\n * @param pathname\n * @param search\n * @param rest\n */\n\n\nfunction replace(_ref) {\n  var pathname = _ref.pathname,\n      search = _ref.search,\n      rest = _objectWithoutProperties(_ref, [\"pathname\", \"search\"]);\n\n  var formattedSearch = isString(search) ? search : _buildSearchQueryParam(search);\n  getHistory().replace(_extends({\n    pathname: pathname,\n    search: formattedSearch\n  }, rest));\n}\n/**\n * Navigation function allowing user to push to history\n * @param payload   {String | Object}   String or object with the route\n * if object possible attributes are : { pathname - string : route to navigate to, search - object: query params to set to url  }\n * @param preserveQueryParams  { Boolean } Indicator whether or not to keep query params\n */\n\n\nfunction push(payload, preserveQueryParams) {\n  if (isString(payload)) {\n    go(payload);\n  } else {\n    var pathname = payload.pathname,\n        search = payload.search;\n    go(pathname, search, preserveQueryParams);\n  }\n}\n/**\n * Return a string of the query params\n * @param params  {Object}  Query params object\n * @return {string}\n */\n\n\nfunction stringifyQueryParams(params) {\n  return _buildURLQueryParams(params);\n}\n\nfunction location() {\n  return getHistory().location;\n}\n\nfunction createHref(href) {\n  return getHistory().createHref(href);\n}\n\nfunction length() {\n  return getHistory().length;\n}\n\nexport default {\n  listen: getHistory().listen,\n  goBack: getHistory().goBack,\n  goForward: getHistory().goForward,\n  location: location,\n  go: go,\n  setQueryParams: setQueryParams,\n  getPathName: getPathName,\n  getQueryParams: getQueryParams,\n  link: link,\n  hasInPath: hasInPath,\n  replace: replace,\n  length: length,\n  push: push,\n  createHref: createHref,\n  stringifyQueryParams: stringifyQueryParams,\n  parsePath: parsePath\n};","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/onboarding-blog/onboarding-blog-app/onboarding-frontend-main/simple-app-archive/node_modules/@guestyci/history/esm/utils/utils.js"],"names":["_objectWithoutProperties","_extends","queryParser","isEmpty","isString","getHistory","postRouteChangeOutOfApp","absWindow","window","parent","parsePath","path","pathname","search","hash","hashIndex","indexOf","substr","searchIndex","_buildURLQueryParams","params","stringify","getQueryParams","location","replace","parse","_buildSearchQueryParam","arguments","length","undefined","preserveQueryParams","newSearch","isParamsEmpty","newQuery","concat","getPathName","relative","baseUrl","e","hasInPath","param","set","Set","split","has","link","isNewTab","open","isFragment","setQueryParams","preservePrevious","push","go","_ref","rest","formattedSearch","payload","stringifyQueryParams","createHref","href","listen","goBack","goForward"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport queryParser from 'querystring';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport { getHistory } from \"../createHistory/createHistory\";\nimport { postRouteChangeOutOfApp } from \"../routerListener/routeListener\";\nvar absWindow = window.parent;\n/**\n * Parse string path into location object\n * @param path {String } path to parse\n * @return {{search: string, hash: string, pathname: (*|string)}}\n */\n\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\n/**\n * Build the query params to be set on the url\n * @param params    {Object}  The payload object\n * @returns {string}    the formatted query params\n */\n\n\nfunction _buildURLQueryParams(params) {\n  return queryParser.stringify(params);\n}\n/**\n * Get the url query params\n * @returns {*}\n */\n\n\nfunction getQueryParams() {\n  var search = getHistory().location.search.replace('?', '');\n  return queryParser.parse(search);\n}\n/**\n * Build search query params from params and preserve query\n * @param params\n * @param preserveQueryParams\n * @returns {string}\n */\n\n\nfunction _buildSearchQueryParam() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var preserveQueryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var newSearch = '';\n  var isParamsEmpty = isEmpty(params);\n  var search = getHistory().location.search.replace('?', '');\n\n  if (preserveQueryParams && isParamsEmpty) {\n    newSearch = search;\n  } else if (preserveQueryParams && !isParamsEmpty) {\n    var newQuery = _extends({}, params, getQueryParams());\n\n    newSearch = _buildURLQueryParams(newQuery);\n  } else if (!preserveQueryParams && !isParamsEmpty) {\n    newSearch = _buildURLQueryParams(params);\n  }\n\n  return !isEmpty(newSearch) ? \"?\".concat(newSearch) : newSearch;\n}\n/**\n * Return the url pathname\n * @param relative  { Boolean } Return the url without the baseUrl, defaults to true\n * @return {String}\n */\n\n\nfunction getPathName() {\n  var relative = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  try {\n    return relative ? absWindow.location.pathname.replace(getHistory().baseUrl, '') : absWindow.location.pathname;\n  } catch (e) {\n    return e;\n  }\n}\n/**\n * Check if url has a specific parameter in it\n * @param param {String || Number}  The url parameter to check if exists\n * @return {Boolean}\n */\n\n\nfunction hasInPath(param) {\n  try {\n    var path = getPathName(false) || '';\n    var set = new Set(path.split('/'));\n    return set.has(param);\n  } catch (e) {\n    return e;\n  }\n}\n/**\n * Link to url\n * @param path  {String}  The full path for the link\n * @param isNewTab  {Boolean} Indicator whether or not to show in new tab ( auto - true)\n */\n\n\nfunction link(path) {\n  var isNewTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (isNewTab) {\n    absWindow.open(path, '_blank');\n  } else if (getHistory().isFragment) {\n    postRouteChangeOutOfApp(path);\n  }\n}\n/**\n * Set query params into the url\n * @param params  {Object} the query param object to set\n * @param preservePrevious  {Boolean}  indicator whether or not to preserve the previous query params\n */\n\n\nfunction setQueryParams(params) {\n  var preservePrevious = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var search = _buildSearchQueryParam(params, preservePrevious);\n\n  getHistory().push({\n    search: search\n  });\n}\n/**\n * Navigate to new container\n * @param pathname {String} The route to nav to\n * @param params {Object} The query params to pass as object\n * @param preserveQueryParams\n */\n\n\nfunction go(pathname) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var preserveQueryParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!isEmpty(pathname)) {\n    var search;\n\n    if (isString(params)) {\n      search = params;\n    } else {\n      search = _buildSearchQueryParam(params, preserveQueryParams);\n    }\n\n    getHistory().push({\n      pathname: pathname,\n      search: search\n    });\n  }\n}\n/**\n * Replace the current history\n * @param pathname\n * @param search\n * @param rest\n */\n\n\nfunction replace(_ref) {\n  var pathname = _ref.pathname,\n      search = _ref.search,\n      rest = _objectWithoutProperties(_ref, [\"pathname\", \"search\"]);\n\n  var formattedSearch = isString(search) ? search : _buildSearchQueryParam(search);\n  getHistory().replace(_extends({\n    pathname: pathname,\n    search: formattedSearch\n  }, rest));\n}\n/**\n * Navigation function allowing user to push to history\n * @param payload   {String | Object}   String or object with the route\n * if object possible attributes are : { pathname - string : route to navigate to, search - object: query params to set to url  }\n * @param preserveQueryParams  { Boolean } Indicator whether or not to keep query params\n */\n\n\nfunction push(payload, preserveQueryParams) {\n  if (isString(payload)) {\n    go(payload);\n  } else {\n    var pathname = payload.pathname,\n        search = payload.search;\n    go(pathname, search, preserveQueryParams);\n  }\n}\n/**\n * Return a string of the query params\n * @param params  {Object}  Query params object\n * @return {string}\n */\n\n\nfunction stringifyQueryParams(params) {\n  return _buildURLQueryParams(params);\n}\n\nfunction location() {\n  return getHistory().location;\n}\n\nfunction createHref(href) {\n  return getHistory().createHref(href);\n}\n\nfunction length() {\n  return getHistory().length;\n}\n\nexport default {\n  listen: getHistory().listen,\n  goBack: getHistory().goBack,\n  goForward: getHistory().goForward,\n  location: location,\n  go: go,\n  setQueryParams: setQueryParams,\n  getPathName: getPathName,\n  getQueryParams: getQueryParams,\n  link: link,\n  hasInPath: hasInPath,\n  replace: replace,\n  length: length,\n  push: push,\n  createHref: createHref,\n  stringifyQueryParams: stringifyQueryParams,\n  parsePath: parsePath\n};"]},"metadata":{},"sourceType":"module"}