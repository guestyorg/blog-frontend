import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useCallback } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import createStyles from "../createStyles";
import Button from "../Button";
import { white } from "../theme/colors";
export const useStyles = createStyles(theme => ({
  root: {
    display: 'flex',
    justifyContent: 'flex-start',
    alignItems: 'center',
    width: '100%',
    padding: `0px ${theme.spacer(4)}px`,
    transition: theme.transition.create('background-color'),
    '&:last-child': {
      marginBottom: '0 !important'
    }
  },
  focus: {
    '&:not([disabled])': {
      '&:focus': {
        backgroundColor: theme.palette.primary.background
      },
      '&.active': {
        backgroundColor: theme.palette.primary.background
      }
    }
  },
  hover: {
    '&:not([disabled]):hover': {
      borderRadius: 0,
      backgroundColor: theme.palette.primary.background
    }
  },
  height: {
    minHeight: 40
  },
  selected: {}
}), {
  name: 'MenuItem'
});
const MenuItem = React.forwardRef(function MenuItem(_ref, ref) {
  let {
    className,
    style,
    children,
    onClick,
    selected,
    disabled,
    rippleColor,
    value,
    jss
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "style", "children", "onClick", "selected", "disabled", "rippleColor", "selectedClassName", "value", "jss"]);

  const classes = useStyles({
    jss
  });
  const handleMenuItemClick = useCallback(e => {
    if (onClick) {
      onClick(e, value);
    }
  }, [value, onClick]);
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    ref: ref,
    disabled: disabled,
    rippleColor: rippleColor,
    value: value,
    className: cn(classes.root, classes.height, classes.hover, classes.focus, {
      [classes.selected]: selected
    }, className),
    onClick: handleMenuItemClick,
    style: style
  }), children);
});
MenuItem.defaultProps = {
  className: '',
  style: {},
  value: undefined,
  onClick: null,
  selected: false,
  rippleColor: white
};
MenuItem.propTypes = {
  /** The list item inner component to render */
  children: PropTypes.node.isRequired,

  /** Additional class to add to the list item component */
  className: PropTypes.string,

  /** Additional style to add to the list item component */
  style: PropTypes.shape(),

  /** Value to pass on list click (only relevant for clickable list items) */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** CB for handling list item click event */
  onClick: PropTypes.func,

  /** Indicator whether or not the list item is selected */
  selected: PropTypes.bool,

  /** Set the click ripple color */
  rippleColor: PropTypes.string,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
MenuItem.displayName = 'MenuItem';
export default MenuItem;