import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

/* eslint-disable global-require */
import queryParser from 'querystring';
import reactIntl from "../react-intl";

var localeDataURL = function localeDataURL(lang) {
  return "https://d2g7j5hs6q3xyb.cloudfront.net/production/atomic-design/localesInit/scripts/".concat(lang, ".js");
};

var localeJsonURL = function localeJsonURL(lang) {
  return "https://d2g7j5hs6q3xyb.cloudfront.net/production/atomic-design/localesInit/locales1/".concat(lang, ".json");
};

export var warningHandler = console.warn.bind(console);
export var getLanguage = function getLanguage() {
  var query = window.location.search.split('?');
  var queryLang;

  if (query.length >= 2) {
    var params = queryParser.parse(query[1]);
    queryLang = params && params.lang ? params.lang : undefined;
  }

  return queryLang || window.localStorage.getItem('lang') || 'en-US';
};
var get = reactIntl.get,
    getHTML = reactIntl.getHTML,
    formatHTMLMessage = reactIntl.formatHTMLMessage,
    formatMessage = reactIntl.formatMessage,
    determineLocale = reactIntl.determineLocale,
    load = reactIntl.load,
    loadRemoteScript = reactIntl.loadRemoteScript,
    getLocaleFromCookie = reactIntl.getLocaleFromCookie,
    getDescendantProp = reactIntl.getDescendantProp,
    getLocaleFromURL = reactIntl.getLocaleFromURL,
    getLocaleFromBrowser = reactIntl.getLocaleFromBrowser;
export var init = function init(options) {
  var _options$fallbackLoca, fallbackLocale, locale, _options$debug, debug, langs, promises, responses, _locales;

  return _regeneratorRuntime.async(function init$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _options$fallbackLoca = options.fallbackLocale, fallbackLocale = _options$fallbackLoca === void 0 ? 'en-US' : _options$fallbackLoca, locale = options.currentLocale, _options$debug = options.debug, debug = _options$debug === void 0 ? false : _options$debug;
          langs = _toConsumableArray(new Set([locale, fallbackLocale]));
          _context.prev = 2;
          promises = langs.map(function (lang) {
            return fetch(localeJsonURL(lang)).then(function (response) {
              return response.json();
            });
          });
          _context.next = 6;
          return _regeneratorRuntime.awrap(Promise.all(promises));

        case 6:
          responses = _context.sent;
          _locales = langs.reduce(function (acc, lang, index) {
            acc[lang] = responses[index];
            return acc;
          }, {});
          console.log({
            locales: _locales
          });
          return _context.abrupt("return", reactIntl.init({
            locales: _locales,
            warningHandler: warningHandler,
            fallbackLocale: fallbackLocale,
            currentLocale: locale,
            debug: debug,
            commonLocaleDataUrls: langs.reduce(function (acc, lang) {
              var shortLang = lang.split('-')[0].split('_')[0];
              acc[shortLang] = localeDataURL(shortLang);
              return acc;
            }, {})
          }));

        case 12:
          _context.prev = 12;
          _context.t0 = _context["catch"](2);
          console.warn('[i18n] Warning: Could not load locales, please validate language files');
          return _context.abrupt("return", _context.t0);

        case 16:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[2, 12]]);
};
export var intl = {
  init: init,
  get: get.bind(reactIntl),
  getHTML: getHTML.bind(reactIntl),
  formatHTMLMessage: formatHTMLMessage.bind(reactIntl),
  formatMessage: formatMessage.bind(reactIntl),
  determineLocale: determineLocale.bind(reactIntl),
  load: load.bind(reactIntl),
  loadRemoteScript: loadRemoteScript.bind(reactIntl),
  getLocaleFromCookie: getLocaleFromCookie.bind(reactIntl),
  getDescendantProp: getDescendantProp.bind(reactIntl),
  getLocaleFromURL: getLocaleFromURL.bind(reactIntl),
  getLocaleFromBrowser: getLocaleFromBrowser.bind(reactIntl)
};
export var locales = {};