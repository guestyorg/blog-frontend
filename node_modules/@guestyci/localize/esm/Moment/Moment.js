import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import moment from 'moment';
import memoize from '@guestyci/memoize';
import { MomentFormatTypes } from "../utils/localeData";
import LocalizationContext from "../LocalizationProvider/LocalizationContext";
import FormattedDate from "../FormattedDate";
import FormattedTime from "../FormattedTime";
moment.updateLocale('en', {
  relativeTime: {
    future: 'in %s',
    past: '%s ago',
    s: 'seconds',
    ss: '%ss',
    m: 'a minute',
    mm: '%dm',
    h: '1h',
    hh: '%dh',
    d: '1d',
    dd: '%dd',
    M: 'a month',
    MM: '%dm',
    y: 'a year',
    yy: '%dy'
  }
});
var dateToFromNow = memoize(function (date, isEnglish) {
  if (isEnglish) {
    var diff = moment().diff(date, 'days');

    if (Math.abs(diff) !== 1) {
      return moment(date).fromNow();
    }

    return diff > 0 ? 'Yesterday' : 'Tomorrow';
  }

  return moment(date).fromNow();
});

var Moment = function Moment(_ref) {
  var date = _ref.date,
      format = _ref.format,
      fromNow = _ref.fromNow,
      className = _ref.className,
      style = _ref.style,
      color = _ref.color,
      humanize = _ref.humanize,
      variant = _ref.variant;
  var Tag = variant || Fragment;
  return React.createElement("div", {
    className: cn('d-flex moment-wrapper', _defineProperty({}, "text-".concat(color), color), className),
    style: style
  }, fromNow || humanize ? React.createElement(LocalizationContext.Consumer, null, function (_ref2) {
    var isEnglish = _ref2.isEnglish;
    return React.createElement(Tag, null, dateToFromNow(date, isEnglish));
  }) : React.createElement(React.Fragment, null, format === MomentFormatTypes.Time ? React.createElement(FormattedTime, {
    variant: variant,
    time: date
  }) : React.createElement(FormattedDate, {
    variant: variant,
    date: date,
    format: format
  })));
};

Moment.defaultProps = {
  format: MomentFormatTypes.Date,
  humanize: false,
  fromNow: false,
  className: '',
  style: {},
  color: 'muted',
  variant: undefined
};
Moment.propTypes = {
  /** Date to process by moment - Unix/ISO/Date */
  date: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]).isRequired,

  /** Date format to custom show moment (shortDate, date, fullDate, mmmm yyyy, mmm yyyy, time) */
  format: PropTypes.oneOf([MomentFormatTypes.ShortDate, MomentFormatTypes.Date, MomentFormatTypes.FullDate, MomentFormatTypes.MMMM_YYYY, MomentFormatTypes.MMM_YYYY, MomentFormatTypes.Time]),

  /** Indicator whether or not moment should show time from now (humanized)
   * - Deprecated use humanize
   * */
  fromNow: PropTypes.bool,

  /** Indicator whether or not moment should show time from now (humanized) */
  humanize: PropTypes.bool,

  /** Additional class name to root level */
  className: PropTypes.string,

  /** Additional style name to root level */
  style: PropTypes.shape(),

  /** text color for the moment component */
  color: PropTypes.string,

  /** set the moment component to be variant ('div','string'...) in stead of fragment */
  variant: PropTypes.string
};
export default Moment;