{"ast":null,"code":"import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { accountDeleteReducer, accountDetailsReducer, accountListReducer, accountRegisterReducer, accountSigninReducer, accountUpdateReducer } from \"./reducers/accountReducers\";\nimport { userDeleteReducer, userDetailsReducer, userListReducer, userRegisterReducer, userSigninReducer, userUpdateReducer } from \"./reducers/userReducers\"; ////\n\nimport { blogDeleteReducer, blogDetailsReducer, blogListReducer, blogRegisterReducer, blogSigninReducer, blogUpdateReducer } from \"./reducers/blogReducers\";\nconst initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) : null\n  },\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\") ? JSON.parse(localStorage.getItem(\"accountInfo\")) : null\n  }\n};\nconst reducer = combineReducers({\n  userRegister: userRegisterReducer,\n  userSignin: userSigninReducer,\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  /////\n  blogRegister: blogRegisterReducer,\n  blogSignin: blogSigninReducer,\n  blogDetails: blogDetailsReducer,\n  blogUpdate: blogUpdateReducer,\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n  /////\n  accountRegister: accountRegisterReducer,\n  accountSignin: accountSigninReducer,\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)));\nexport default store; // import { applyMiddleware, combineReducers, createStore } from 'redux';\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from 'redux-thunk';\n// // temp reducer to be removed\n// // Once real reducers added you can delete this\n// const tempReducer = (state = {}, action) => {\n//   switch (action.type) {\n//     default:\n//       return state;\n//   }\n// };\n// // shape the state structure\n// const rootReducer = combineReducers({\n//   tempReducer,\n//   form: formReducer,\n// });\n// // Add custom middleware here\n// const featureMiddleware = [];\n// /**\n//  * Initialize the redux store\n//  * Create the store\n//  * Applying extra arguments\n//  * To pass further arguments please config the function\n//  * @param initialState  {Object}  initial state for store\n//  * @param api {Object}  API class for api middleware\n//  * @return {Store<any, AnyAction> & {dispatch: any}}\n//  */\n// export default (initialState = {}, api) =>\n//   createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n//   );","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/src/store.js"],"names":["createStore","compose","applyMiddleware","combineReducers","thunk","accountDeleteReducer","accountDetailsReducer","accountListReducer","accountRegisterReducer","accountSigninReducer","accountUpdateReducer","userDeleteReducer","userDetailsReducer","userListReducer","userRegisterReducer","userSigninReducer","userUpdateReducer","blogDeleteReducer","blogDetailsReducer","blogListReducer","blogRegisterReducer","blogSigninReducer","blogUpdateReducer","initialState","userSignin","userInfo","localStorage","getItem","JSON","parse","accountSignin","accountInfo","reducer","userRegister","userDetails","userUpdate","userList","userDelete","blogRegister","blogSignin","blogDetails","blogUpdate","blogList","blogDelete","accountRegister","accountDetails","accountUpdate","accountList","accountDelete","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA,SACEC,oBADF,EAEEC,qBAFF,EAGEC,kBAHF,EAIEC,sBAJF,EAKEC,oBALF,EAMEC,oBANF,QAOO,4BAPP;AASA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,mBAJF,EAKEC,iBALF,EAMEC,iBANF,QAOO,yBAPP,C,CAUA;;AAEA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,mBAJF,EAKEC,iBALF,EAMEC,iBANF,QAOO,yBAPP;AAeA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACNC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADM,GAEN;AAHM,GADO;AAOnBG,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAEL,YAAY,CAACC,OAAb,CAAqB,aAArB,IACTC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,CADS,GAET;AAHS;AAPI,CAArB;AAaA,MAAMK,OAAO,GAAG7B,eAAe,CAAC;AAE9B8B,EAAAA,YAAY,EAAEnB,mBAFgB;AAI9BU,EAAAA,UAAU,EAAET,iBAJkB;AAM9BmB,EAAAA,WAAW,EAAEtB,kBANiB;AAO9BuB,EAAAA,UAAU,EAAEnB,iBAPkB;AAS9BoB,EAAAA,QAAQ,EAAEvB,eAToB;AAU9BwB,EAAAA,UAAU,EAAE1B,iBAVkB;AAc9B;AAEA2B,EAAAA,YAAY,EAAElB,mBAhBgB;AAkB9BmB,EAAAA,UAAU,EAAElB,iBAlBkB;AAoB9BmB,EAAAA,WAAW,EAAEtB,kBApBiB;AAqB9BuB,EAAAA,UAAU,EAAEnB,iBArBkB;AAuB9BoB,EAAAA,QAAQ,EAAEvB,eAvBoB;AAwB9BwB,EAAAA,UAAU,EAAE1B,iBAxBkB;AA4B9B;AAEA2B,EAAAA,eAAe,EAAEpC,sBA9Ba;AAgC9BsB,EAAAA,aAAa,EAAErB,oBAhCe;AAkC9BoC,EAAAA,cAAc,EAAEvC,qBAlCc;AAmC9BwC,EAAAA,aAAa,EAAEpC,oBAnCe;AAqC9BqC,EAAAA,WAAW,EAAExC,kBArCiB;AAsC9ByC,EAAAA,aAAa,EAAE3C;AAtCe,CAAD,CAA/B;AAwCA,MAAM4C,eAAe,GAAGC,MAAM,CAACC,oCAAP,IAA+ClD,OAAvE;AACA,MAAMmD,KAAK,GAAGpD,WAAW,CACvBgC,OADuB,EAEvBT,YAFuB,EAGvB0B,eAAe,CAAC/C,eAAe,CAACE,KAAD,CAAhB,CAHQ,CAAzB;AAMA,eAAegD,KAAf,C,CAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, compose, applyMiddleware, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\n\n\nimport {\n  accountDeleteReducer,\n  accountDetailsReducer,\n  accountListReducer,\n  accountRegisterReducer,\n  accountSigninReducer,\n  accountUpdateReducer,\n} from \"./reducers/accountReducers\";\n\nimport {\n  userDeleteReducer,\n  userDetailsReducer,\n  userListReducer,\n  userRegisterReducer,\n  userSigninReducer,\n  userUpdateReducer,\n} from \"./reducers/userReducers\";\n\n\n////\n\nimport {\n  blogDeleteReducer,\n  blogDetailsReducer,\n  blogListReducer,\n  blogRegisterReducer,\n  blogSigninReducer,\n  blogUpdateReducer,\n} from \"./reducers/blogReducers\";\n\n\n\n\n\n\n\nconst initialState = {\n  userSignin: {\n    userInfo: localStorage.getItem(\"userInfo\")\n      ? JSON.parse(localStorage.getItem(\"userInfo\"))\n      : null,\n  },\n\n  accountSignin: {\n    accountInfo: localStorage.getItem(\"accountInfo\")\n      ? JSON.parse(localStorage.getItem(\"accountInfo\"))\n      : null,\n  },\n};\nconst reducer = combineReducers({\n\n  userRegister: userRegisterReducer,\n\n  userSignin: userSigninReducer,\n\n  userDetails: userDetailsReducer,\n  userUpdate: userUpdateReducer,\n\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n\n\n\n  /////\n\n  blogRegister: blogRegisterReducer,\n\n  blogSignin: blogSigninReducer,\n\n  blogDetails: blogDetailsReducer,\n  blogUpdate: blogUpdateReducer,\n\n  blogList: blogListReducer,\n  blogDelete: blogDeleteReducer,\n\n\n\n  /////\n\n  accountRegister: accountRegisterReducer,\n\n  accountSignin: accountSigninReducer,\n\n  accountDetails: accountDetailsReducer,\n  accountUpdate: accountUpdateReducer,\n\n  accountList: accountListReducer,\n  accountDelete: accountDeleteReducer,\n});\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  initialState,\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nexport default store;\n\n\n\n\n\n\n\n\n\n// import { applyMiddleware, combineReducers, createStore } from 'redux';\n// import { reducer as formReducer } from 'redux-form';\n// import thunk from 'redux-thunk';\n\n// // temp reducer to be removed\n// // Once real reducers added you can delete this\n// const tempReducer = (state = {}, action) => {\n//   switch (action.type) {\n//     default:\n//       return state;\n//   }\n// };\n// // shape the state structure\n// const rootReducer = combineReducers({\n//   tempReducer,\n//   form: formReducer,\n// });\n\n// // Add custom middleware here\n// const featureMiddleware = [];\n\n// /**\n//  * Initialize the redux store\n//  * Create the store\n//  * Applying extra arguments\n//  * To pass further arguments please config the function\n//  * @param initialState  {Object}  initial state for store\n//  * @param api {Object}  API class for api middleware\n//  * @return {Store<any, AnyAction> & {dispatch: any}}\n//  */\n// export default (initialState = {}, api) =>\n//   createStore(\n//     rootReducer,\n//     initialState,\n//     applyMiddleware(...featureMiddleware, thunk.withExtraArgument(api))\n//   );\n"]},"metadata":{},"sourceType":"module"}