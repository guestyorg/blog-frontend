import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useState, useMemo, useCallback } from 'react';
import { createUseStyles } from 'react-jss';
import cn from 'classnames';
import PropTypes from 'prop-types';
import { Transition, TransitionGroup } from 'react-transition-group';
import Portal from "../Portal/Portal";
import Col from "../Col";
import { VARIANTS_NAMES } from "./Toast";
import StackedToast from "./StackedToast";
import context from "./context";
import { uuid } from "../../utils/commonUtility";
import zIndex from "../../theme/zIndex";
const {
  Provider
} = context;
const useStyles = createUseStyles({
  wrapper: {
    position: 'fixed',
    left: 'auto',
    right: 24,
    top: 24,
    zIndex: zIndex.toast
  }
});

const ToastProvider = ({
  children,
  className,
  duration
}) => {
  const {
    wrapper
  } = useStyles();
  const [toasts, setToasts] = useState([]);
  const dismissToast = useCallback(id => {
    setToasts(_toasts => _toasts.filter(_toast => _toast.id !== id));
  }, [setToasts]);
  const ctx = useMemo(() => {
    const addToast = VARIANTS_NAMES.reduce((acc, variant) => {
      acc[variant] = (message, options = {}) => {
        const id = uuid();
        const {
          autoHide,
          autoHideDelay,
          action
        } = options;

        const onDismiss = () => dismissToast(id);

        setToasts(_toasts => [..._toasts, {
          autoHide,
          autoHideDelay,
          action,
          variant,
          message,
          id,
          onDismiss
        }]);
        return onDismiss;
      };

      return acc;
    }, {});
    return {
      addToast
    };
  }, [setToasts, dismissToast]);
  return /*#__PURE__*/React.createElement(Provider, {
    value: ctx,
    "data-qa": "toast-provider"
  }, children, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Col, {
    spacing: 1,
    className: cn(wrapper, className)
  }, /*#__PURE__*/React.createElement(TransitionGroup, {
    component: null
  }, toasts?.map(props => /*#__PURE__*/React.createElement(Transition, {
    key: props.id,
    unmountOnExit: true,
    timeout: duration,
    mountOnEnter: true,
    appear: true
  }, transitionState => /*#__PURE__*/React.createElement(StackedToast, _extends({}, props, {
    transition: transitionState,
    duration: duration
  }))))))));
};

ToastProvider.defaultProps = {
  duration: 300,
  className: ''
};
ToastProvider.propTypes = {
  /** Wrapper className */
  className: PropTypes.string,

  /** App tree | Consumer target */
  children: PropTypes.node.isRequired,

  /** Animation duration */
  duration: PropTypes.number
};
export default ToastProvider;