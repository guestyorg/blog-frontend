/* eslint-disable class-methods-use-this */
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import withStyles from 'react-jss';
import isEmpty from 'lodash/isEmpty';
import { isNumber, parseNumber } from "../../utils/commonUtility";
import Input from "../Input/Input";
import NumberPickerActionButtons from "./NumberPickerActionButtons";
import PickerResetWrapper from "../basePicker/PickerResetWrapper";
const styles = {
  numberPickerLabelWrapper: {
    alignItems: 'center',
    '& .numberPickerLabel': {
      border: 0,
      '& input': {
        padding: '10px 5px!important',
        textAlign: 'right'
      }
    }
  },
  resetBtn: {
    borderLeftWidth: '0 !important'
  },
  input: {
    borderRightWidth: '0 !important'
  },
  isReadOnly: {
    '&:disabled': {
      color: 'black'
    }
  },
  inputWrapper: {
    'border-top-left-radius': '2px !important',
    'border-bottom-left-radius': '2px !important',
    'border-right': 0
  }
};

const shouldControlChangeInputValue = (value, prevValue, stateValue) => isNumber(value) && value !== prevValue && value !== stateValue;

class NumberPicker extends PureComponent {
  constructor(props) {
    super(props);

    this.handleIncrementClick = () => {
      const {
        max,
        step
      } = this.props;
      const {
        value
      } = this.state;
      const val = +value || 0;
      const newVal = parseNumber(val + step);

      if (!isNumber(max) || isNumber(max) && newVal <= max) {
        this.setState({
          value: newVal,
          disableMin: false,
          disableMax: isNumber(max) && newVal >= max
        }, () => this.handleValueChange(newVal));
      }
    };

    this.calculateValueWithText = value => {
      const {
        innerSingularText,
        innerPluralText,
        suffix
      } = this.props;
      const {
        isReadOnlyLocal
      } = this.state;

      if (!isReadOnlyLocal) {
        return value;
      }

      if (!innerPluralText) {
        return `${value} ${innerSingularText}`;
      }

      if (innerSingularText && innerPluralText && !suffix) {
        if (parseInt(value, 10) === 1) {
          return `${value} ${innerSingularText}`;
        }

        if (parseInt(value, 10) > 1) {
          return `${value} ${innerPluralText}`;
        }

        if (parseInt(value, 10) === 0) {
          return `${value} ${innerPluralText}`;
        }
      }

      return value;
    };

    this.handleDecrementClick = () => {
      const {
        min,
        step
      } = this.props;
      const {
        value
      } = this.state;
      const val = +value || 0;
      const newVal = parseNumber(val - step);

      if (!isNumber(min) || isNumber(min) && newVal >= min) {
        this.setState({
          value: newVal,
          disableMax: false,
          disableMin: isNumber(min) && newVal <= min
        }, () => this.handleValueChange(newVal));
      }
    };

    this.handleInputChange = value => {
      const {
        min,
        max
      } = this.props;

      if (isEmpty(value) || this.isValid(value)) {
        this.setState({
          value,
          disableMax: isNumber(max) && value >= max,
          disableMin: isNumber(min) && value <= min
        }, () => this.handleValueChange(value));
      }
    };

    this.isValidFloatingPoint = value => {
      if (value === Math.floor(value)) {
        return true;
      }

      const {
        floatingPoint
      } = this.props;
      const decValue = value.toString().split('.')[1];
      const decPoints = decValue ? decValue.length : 0;
      return floatingPoint >= decPoints;
    };

    this.reset = () => {
      const {
        max,
        min,
        defaultValue
      } = this.props;
      this.setState({
        value: defaultValue,
        disableMax: isNumber(max) && defaultValue >= max,
        disableMin: isNumber(min) && defaultValue <= min
      });
      this.handleValueChange(defaultValue);
    };

    const initialValue = parseNumber(isNumber(props.value) ? props.value : props.defaultValue, '');
    this.state = {
      value: initialValue,
      isReadOnlyLocal: false,
      disableMax: isNumber(initialValue) && isNumber(props.max) && initialValue >= props.max,
      disableMin: isNumber(initialValue) && isNumber(props.min) && initialValue <= props.min
    };
  }

  componentDidMount() {
    const {
      isReadOnly,
      asLabel
    } = this.props;
    this.setState({
      isReadOnlyLocal: isReadOnly || asLabel
    });
  }

  componentDidUpdate(prevProps) {
    const {
      defaultValue,
      value
    } = this.props;
    const {
      value: stateValue
    } = this.state;

    if (defaultValue !== prevProps.defaultValue) {
      this.handleInputChange(defaultValue);
    }

    if (shouldControlChangeInputValue(value, prevProps.value, stateValue)) {
      this.handleInputChange(value);
    }
  }

  handleValueChange(value) {
    const {
      onChange,
      id,
      name
    } = this.props;
    onChange(parseNumber(value, null), id || name);
  }

  isValid(value) {
    const numberRegex = RegExp('^-?\\d*\\.?\\d*$');
    return numberRegex.test(value);
  }

  render() {
    const {
      disabled,
      placeholder,
      inputClassName,
      inputStyle,
      className,
      style,
      resetable,
      defaultValue,
      classes,
      name,
      id,
      required,
      suffix,
      innerPluralText,
      innerSingularText,
      asLabel,
      icon
    } = this.props;
    const {
      isReadOnlyLocal
    } = this.state;
    const {
      value,
      disableMax,
      disableMin
    } = this.state;
    const isReadOnlyWithoutSuffixAndHasText = isReadOnlyLocal && !suffix && (innerPluralText || innerSingularText);
    return /*#__PURE__*/React.createElement(PickerResetWrapper, {
      className: cn(className, {
        [classes.numberPickerLabelWrapper]: asLabel
      }),
      style: style,
      resetable: resetable,
      disabled: defaultValue === value,
      id: id,
      onReset: this.reset,
      "data-qa": "number-picker"
    }, icon && icon, /*#__PURE__*/React.createElement(Input, {
      suffix: suffix,
      required: required,
      name: name,
      id: id,
      value: this.calculateValueWithText(value),
      disabled: isReadOnlyLocal || disabled,
      placeholder: placeholder,
      onChange: this.handleInputChange,
      className: cn(inputClassName, {
        [classes.isReadOnly]: isReadOnlyWithoutSuffixAndHasText
      }),
      containerClassName: cn(classes.input, {
        'bg-white': isReadOnlyLocal
      }, 'border-radius-0', classes.inputWrapper, {
        numberPickerLabel: asLabel
      }),
      style: inputStyle
    }), /*#__PURE__*/React.createElement(NumberPickerActionButtons, {
      asLabel: asLabel,
      disableMax: disabled || disableMax,
      disableMin: disabled || disableMin,
      onIncrement: this.handleIncrementClick,
      onDecrement: this.handleDecrementClick
    }));
  }

}

NumberPicker.defaultProps = {
  value: undefined,
  disabled: false,
  defaultValue: undefined,
  min: undefined,
  max: undefined,
  step: 1,
  floatingPoint: 0,
  placeholder: '',
  inputClassName: '',
  inputStyle: {},
  className: '',
  style: {},
  resetable: false,
  id: undefined,
  name: '',
  suffix: null,
  innerPluralText: null,
  innerSingularText: null,
  isReadOnly: false,
  asLabel: false
};
NumberPicker.propTypes = {
  /** Controlled value to be set */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Indicator whether or not the input is disabled */
  disabled: PropTypes.bool,

  /** CallBack for on value change */
  onChange: PropTypes.func.isRequired,

  /** Default value for input (also resets to value) */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** Minimum allowed value */
  min: PropTypes.number,

  /** Maximum allowed value */
  max: PropTypes.number,

  /** Amount to increment / decrement on each button click
   * - also allows the support do decimal point */
  step: PropTypes.number,

  /** Placeholder for input level */
  placeholder: PropTypes.string,

  /** Additional class for input level */
  inputClassName: PropTypes.string,

  /** Additional style for input level */
  inputStyle: PropTypes.shape(),

  /** Additional class for root level */
  className: PropTypes.string,

  /** additional style for root level */
  style: PropTypes.shape(),

  /** Show the reset option for the input (resets to defaultValue) */
  resetable: PropTypes.bool,

  /** id indicator for field */
  id: PropTypes.string,

  /** name indicator for field */
  name: PropTypes.string,

  /** Suffix to locate at the end of the number picker */
  suffix: PropTypes.node,

  /** Floating point allowed for number picker */
  floatingPoint: PropTypes.number,

  /** inner plural text locate after the number */
  innerPluralText: PropTypes.string,

  /** inner singular text locate after the number */
  innerSingularText: PropTypes.string,

  /** an indicator if the input is read only means you can't enter a number only use the buttons */
  isReadOnly: PropTypes.bool,

  /** Component icon */
  icon: PropTypes.node,

  /** Should render as label */
  asLabel: PropTypes.bool
};
export const NumberPickerComponent = NumberPicker;
export default withStyles(styles)(NumberPicker);