import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
/**
 * Create a wrapper compose to support Hover functionality
 * @param ComposedComponent
 * @returns {{Component}}
 */

function withHover(ComposedComponent) {
  var HoverWrapper = /*#__PURE__*/function (_Component) {
    _inherits(HoverWrapper, _Component);

    var _super = _createSuper(HoverWrapper);

    function HoverWrapper(props) {
      var _this;

      _classCallCheck(this, HoverWrapper);

      _this = _super.call(this, props);

      _this.onHoverLeave = function () {
        _this.setState({
          isHovering: false
        });
      };

      _this.onHoverEnter = function () {
        _this.setState({
          isHovering: true
        });
      };

      _this.state = {
        isHovering: false
      };
      _this.hoverRef = React.createRef();
      return _this;
    }

    _createClass(HoverWrapper, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var node = this.hoverRef.current;

        if (node) {
          node.addEventListener('mouseover', this.onHoverEnter);
          node.addEventListener('mouseleave', this.onHoverLeave);
          node.addEventListener('blur', this.onHoverLeave);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var node = this.hoverRef.current;

        if (node) {
          node.removeEventListener('mouseover', this.onHoverEnter);
          node.removeEventListener('mouseleave', this.onHoverLeave);
          node.removeEventListener('blur', this.onHoverLeave);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var isHovering = this.state.isHovering;
        return /*#__PURE__*/React.createElement(ComposedComponent, _extends({}, this.props, {
          isHovering: isHovering,
          hoverRef: this.hoverRef,
          onHoverLeave: this.onHoverLeave,
          onHoverEnter: this.onHoverEnter,
          "data-qa": "hover-wrapper"
        }));
      }
    }]);

    return HoverWrapper;
  }(Component);

  return HoverWrapper;
}

export default withHover;