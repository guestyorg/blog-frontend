import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useMemo, useRef, useState } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';
import noop from 'lodash/noop';
import { Menu } from "../Menu";
import TextField from "../TextField";
import MenuItem from "../Menu/MenuItem";
import createStyles from "../createStyles";
import DurationPickerInput from "./DurationPickerInput";
import { timePickerStyles } from "../TimePicker/styles";
export const useStyles = createStyles(theme => _extends({}, timePickerStyles(theme)), {
  name: 'DurationPicker'
});

const generateOptions = (duration, interval) => {
  const itemCount = duration / interval;

  const padTime = t => t < 10 ? `0${t}` : t;

  let minutes = interval;
  const items = [...Array(Math.round(itemCount))];
  return items.map(() => {
    const result = `${padTime(Math.floor(minutes / 60))} : ${padTime(minutes % 60)}`;
    const value = minutes;
    minutes += interval;
    return {
      label: result,
      value
    };
  });
};

const DurationPicker = React.forwardRef(function DurationPicker(_ref, ref) {
  let {
    value,
    onChange = noop,
    className = '',
    style = {},
    name = '',
    defaultValue,
    resetable = false,
    disabled = false,
    jss = {},
    interval = 30,
    error = false,
    duration = 24 * 60
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["value", "onChange", "className", "style", "name", "defaultValue", "resetable", "disabled", "jss", "interval", "error", "duration"]);

  const classes = useStyles({
    jss
  });
  const anchorRef = useRef();
  const [open, setOpen] = useState(false);

  const handleInputClick = () => {
    setOpen(!open);
  };

  const handleDurationPickerClose = () => {
    setOpen(false);
  };

  const dispatchEvent = (e, selectedValue) => {
    // work around to solve - see https://github.com/guestyorg/foundation-ui/issues/284
    Object.assign(e.target, {
      name,
      value: selectedValue
    });
    onChange(e, selectedValue);
  };

  const handleInputChange = (e, inputValue) => {
    e.stopPropagation();
    dispatchEvent(e, inputValue);
    handleDurationPickerClose();
  };

  const handleItemClick = (e, selectedValue) => {
    dispatchEvent(e, selectedValue);
    handleDurationPickerClose();
  };

  const handleClearClick = e => {
    dispatchEvent(e);
  };

  const options = useMemo(() => generateOptions(duration, interval), [duration, interval]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: cn(classes.root, className),
    style: style
  }, props), /*#__PURE__*/React.createElement(DurationPickerInput, {
    ref: anchorRef,
    onClick: handleInputClick,
    onChange: handleInputChange,
    onClear: handleClearClick,
    open: open,
    disabled: disabled,
    defaultValue: defaultValue,
    resetable: resetable,
    value: value,
    error: error
  }), /*#__PURE__*/React.createElement(Menu, {
    anchorDirection: "start",
    open: open,
    className: classes.menu,
    onClose: handleDurationPickerClose,
    variant: "menu",
    fitAnchor: true,
    anchor: anchorRef
  }, options.map(option => /*#__PURE__*/React.createElement(MenuItem, {
    key: option.value,
    value: option.value,
    onClick: handleItemClick
  }, /*#__PURE__*/React.createElement(TextField, null, option.label)))));
});
DurationPicker.propTypes = {
  /** Callback function to be called on value changed - arguments - (event) */
  onChange: PropTypes.func.isRequired,

  /** Additional class for duration picker root */
  className: PropTypes.string,

  /** Additional style for duration picker root */
  style: PropTypes.shape(),

  /** form element name */
  name: PropTypes.string,

  /** Controlled value to set to the duration picker */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /** Indicator for disabled status */
  disabled: PropTypes.bool,

  /** The interval leaps for the picker items in minutes */
  interval: PropTypes.number,

  /** JSS overrides for DurationPicker */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func]),

  /** default value to reset to */
  defaultValue: PropTypes.string,

  /** indicator whether or not to allow reset */
  resetable: PropTypes.bool,

  /** The max duration value to build dropdown values from  in minutes */
  duration: PropTypes.number
};
DurationPicker.displayName = 'DurationPicker';
export default DurationPicker;