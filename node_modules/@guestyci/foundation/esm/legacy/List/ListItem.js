import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';

var ListItem = /*#__PURE__*/function (_Component) {
  _inherits(ListItem, _Component);

  var _super = _createSuper(ListItem);

  function ListItem() {
    var _this;

    _classCallCheck(this, ListItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleListItemClick = function (e) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          value = _this$props.value;
      e.stopPropagation();

      if (onClick) {
        onClick(value);
      }
    };

    return _this;
  }

  _createClass(ListItem, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          className = _this$props2.className,
          style = _this$props2.style,
          children = _this$props2.children,
          dense = _this$props2.dense,
          onClick = _this$props2.onClick,
          isSelected = _this$props2.isSelected,
          selectedClassName = _this$props2.selectedClassName,
          fullWidth = _this$props2.fullWidth,
          props = _objectWithoutProperties(_this$props2, ["className", "style", "children", "dense", "onClick", "isSelected", "selectedClassName", "fullWidth"]);

      return /*#__PURE__*/React.createElement("div", _extends({
        role: "presentation",
        className: cn('d-flex', 'transition-bg-color', {
          'w-fill': fullWidth
        }, {
          'my-2': !dense
        }, {
          clickable: onClick
        }, _defineProperty({}, selectedClassName, isSelected), className),
        onClick: this.handleListItemClick,
        style: style
      }, props, {
        "data-qa": "list-item"
      }), children);
    }
  }]);

  return ListItem;
}(Component);

ListItem.defaultProps = {
  className: '',
  style: {},
  dense: false,
  value: undefined,
  onClick: null,
  isSelected: false,
  selectedClassName: '',
  fullWidth: true
};
ListItem.propTypes = {
  /** The list item inner component to render */
  children: PropTypes.node.isRequired,

  /** Additional class to add to the list item component */
  className: PropTypes.string,

  /** Additional style to add to the list item component */
  style: PropTypes.shape(),

  /** Indicator whether the list should be dense or not */
  dense: PropTypes.bool,

  /** Value to pass on list click (only relevant for clickable list items) */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** CB for handling list item click event */
  onClick: PropTypes.func,

  /** Indicator whether or not the list item is selected */
  isSelected: PropTypes.bool,

  /** Class for the selected state */
  selectedClassName: PropTypes.string,

  /** Indicator whether or not list item should be full width */
  fullWidth: PropTypes.bool
};
export default ListItem;