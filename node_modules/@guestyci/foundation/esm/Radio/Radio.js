import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import noop from 'lodash/noop';
import createStyles from "../createStyles";
import { uuid } from "../utils/commonUtility";
import Row from "../Layout/Row";
import IconButton from "../IconButton";
import TextField from "../TextField";
import RadioIcon from "./RadioIcon";
import useHover from "../useHover";
import useRadioGroup from "../RadioGroup/useRadioGroup";
export var useStyles = createStyles(function (theme) {
  return {
    root: {
      position: 'relative',
      cursor: 'pointer'
    },
    radio: {
      height: 16,
      width: 16
    },
    disabled: {
      cursor: 'not-allowed',
      color: theme.palette.text.placeholder
    },
    input: {
      cursor: 'inherit',
      position: 'absolute',
      opacity: 0,
      width: '100%',
      height: '100%',
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    }
  };
}, {
  name: 'Radio'
});
var Radio = React.forwardRef(function Radio(_ref, ref) {
  var id = _ref.id,
      checkedProp = _ref.checked,
      onChangeProp = _ref.onChange,
      disabled = _ref.disabled,
      value = _ref.value,
      nameProp = _ref.name,
      children = _ref.children,
      style = _ref.style,
      className = _ref.className,
      jss = _ref.jss,
      props = _objectWithoutProperties(_ref, ["id", "checked", "onChange", "disabled", "value", "name", "children", "style", "className", "jss"]);

  var classes = useStyles({
    jss: jss
  });

  var _useHover = useHover(),
      _useHover2 = _slicedToArray(_useHover, 2),
      isHovering = _useHover2[0],
      hoverRef = _useHover2[1];

  var radioData = useRadioGroup();
  var checked = radioData.value ? radioData.value === value : checkedProp;
  var onChange = radioData.onChange || onChangeProp;
  var name = radioData.name || nameProp;
  var inputId = useMemo(function () {
    return id || uuid();
  }, [id]);
  return /*#__PURE__*/React.createElement("label", {
    htmlFor: inputId,
    ref: ref
  }, /*#__PURE__*/React.createElement(Row, {
    ref: hoverRef,
    align: "center",
    className: cn(classes.root, _defineProperty({}, classes.disabled, disabled), className),
    style: style
  }, /*#__PURE__*/React.createElement(IconButton, {
    color: "secondary",
    size: "sm",
    disabled: disabled
  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RadioIcon, {
    isHovering: isHovering,
    disabled: disabled,
    className: classes.radio,
    checked: checked
  }), /*#__PURE__*/React.createElement("input", _extends({}, props, {
    id: inputId,
    type: "radio",
    checked: checked,
    disabled: disabled,
    onChange: onChange,
    className: classes.input,
    name: name,
    value: value
  })))), children && /*#__PURE__*/React.createElement(TextField, null, children)));
});
Radio.defaultProps = {
  disabled: false,
  value: '',
  name: '',
  className: '',
  style: {},
  onChange: noop,
  checked: false
};
Radio.propTypes = {
  /** Boolean flag used to set the radio input as checked or not */
  checked: PropTypes.bool,

  /** Function to toggle the radio input */
  onChange: PropTypes.func,

  /** Boolean indicator to toggle disabled for the radio input */
  disabled: PropTypes.bool,

  /** The value to pass on radio input click */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.shape()]),

  /** Radio name */
  name: PropTypes.string,

  /** Additional class to add to the radio input */
  className: PropTypes.string,

  /** Additional style to add to the radio input */
  style: PropTypes.shape(),

  /** children to render inside of the radio */
  children: PropTypes.node,

  /** jss override object to customize the jss classes */
  jss: PropTypes.oneOfType([PropTypes.shape(), PropTypes.func])
};
Radio.displayName = 'Radio';
export default Radio;