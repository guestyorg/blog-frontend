import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import { TransitionGroup } from 'react-transition-group';
import CSSTransition from "./CSSTransition";

const CSSTransitionGroup = ({
  animation,
  className,
  timeout,
  children,
  show,
  style
}) => {
  const transitionChildren = useMemo(() => children.filter(child => Boolean(child)), [children]);
  return /*#__PURE__*/React.createElement(TransitionGroup, {
    component: null,
    className: cn('css-transition-group', className),
    style: style,
    "data-qa": "css-transition-group"
  }, React.Children.map(transitionChildren, (child, index) => {
    const id = child.key || `child-${index}`;
    return /*#__PURE__*/React.createElement(CSSTransition, {
      key: id,
      show: show,
      animation: animation,
      timeout: timeout
    }, child);
  }));
};

CSSTransitionGroup.defaultProps = {
  className: '',
  timeout: 0,
  animation: ''
};
CSSTransitionGroup.propTypes = {
  /* Animation for css transition from animation scss */
  animation: PropTypes.string,

  /* Additional class name for css transition root */
  className: PropTypes.string,

  /* Child components for css transition */
  children: PropTypes.arrayOf(PropTypes.node).isRequired,

  /* timeout between animations */
  timeout: PropTypes.oneOfType([PropTypes.shape({
    enter: PropTypes.number.isRequired,
    leave: PropTypes.number.isRequired
  }), PropTypes.number])
};
export default CSSTransitionGroup;