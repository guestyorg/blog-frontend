import { useEffect, useRef, useState } from 'react';

function useResize({
  startWidth = 0,
  minWidth = 85,
  isResizable = true,
  id,
  onResizeEnd
}) {
  const resizeRef = useRef({});
  const [width, setWidth] = useState(startWidth);

  const handleResize = e => {
    e.preventDefault();
    const node = resizeRef.current;
    const {
      isDragging,
      startX,
      dragStartWidth
    } = node;

    if (isDragging) {
      const calculatedWidth = Math.max(dragStartWidth + (e.pageX - startX), minWidth);

      if (width !== calculatedWidth) {
        setWidth(calculatedWidth);
      }

      node.cachedWidth = calculatedWidth;
    }
  };

  const handleResizeEnd = e => {
    const node = resizeRef.current;
    node.startX = e.pageX;
    node.isDragging = false;
    node.dragStartWidth = node.cachedWidth;
    onResizeEnd({
      [id]: node.cachedWidth
    });
    document.removeEventListener('mousemove', handleResize);
    document.removeEventListener('mouseup', handleResizeEnd);
  };

  const handleResizeStart = e => {
    e.preventDefault();
    const node = resizeRef.current;
    node.isDragging = true;
    node.startX = e.pageX;
    node.dragStartWidth = node.dragStartWidth || width;
    document.addEventListener('mousemove', handleResize);
    document.addEventListener('mouseup', handleResizeEnd);
  };

  useEffect(() => {
    const node = resizeRef.current;

    if (node && isResizable) {
      node.addEventListener('mousedown', handleResizeStart);
      return () => {
        node.removeEventListener('mousedown', handleResizeStart);
      };
    }
  }, [isResizable]);
  return [width, resizeRef];
}

export default useResize;