import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { useState, useRef, useEffect } from 'react';

var useFocus = function useFocus() {
  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isFocused = _useState2[0],
      setFocused = _useState2[1];

  var focusRef = useRef(null);

  var onFocus = function onFocus() {
    setFocused(true);
  };

  var onBlur = function onBlur() {
    setFocused(false);
  };

  useEffect(function () {
    var node = focusRef.current;

    if (node) {
      node.addEventListener('focus', onFocus);
      node.addEventListener('blur', onBlur);
      return function () {
        node.removeEventListener('focus', onFocus);
        node.removeEventListener('blur', onBlur);
      };
    }
  }, []);
  return [isFocused, focusRef];
};

export default useFocus;