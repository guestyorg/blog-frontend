{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport SvgIcon from \"../SvgIcon/SvgIcon\";\nimport S3Icon from \"./S3Icon\";\nvar Icon = forwardRef(function Icon(_ref, ref) {\n  var icon = _ref.icon,\n      svg = _ref.svg,\n      props = _objectWithoutProperties(_ref, [\"icon\", \"svg\"]);\n\n  if (svg) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      svg: svg\n    }, props, {\n      ref: ref\n    }));\n  }\n\n  if (icon) {\n    return /*#__PURE__*/React.createElement(S3Icon, _extends({\n      icon: icon\n    }, props));\n  }\n\n  return null;\n});\nIcon.defaultProps = {\n  width: 20,\n  height: 20,\n  color: '',\n  fillColor: '',\n  strokeColor: '',\n  className: '',\n  style: {},\n  noFill: false\n};\n\nvar svgOrIconPropsCheck = function svgOrIconPropsCheck(props) {\n  if (!props.icon && !props.svg) {\n    return new Error(\"One of 'icon' or 'svg' is required by 'Icon' component.\");\n  }\n\n  if (props.icon && typeof props.icon !== 'string') {\n    return new Error(\"Icon expects a string.\");\n  }\n\n  if (props.svg && typeof props.svg !== 'function' && _typeof(props.svg) !== 'object') {\n    return new Error(\"Svg expects a function or an object.\");\n  }\n};\n\nIcon.propTypes = {\n  /** Icon width in pixels */\n  width: PropTypes.number,\n\n  /** Icon height in pixels */\n  height: PropTypes.number,\n\n  /** Icon fill color - see style guide colors for options - Deprecated use fillColor */\n  color: PropTypes.string,\n\n  /** Icon fill color - see style guide colors for options */\n  fillColor: PropTypes.string,\n\n  /** Icon stroke color - see style guide colors for options */\n  strokeColor: PropTypes.string,\n\n  /** Class to add to the Icon component */\n  className: PropTypes.string,\n\n  /** Style to add to Icon component */\n  style: PropTypes.shape(),\n\n  /** The string name of the Icon to use. Also possible to pass without the icon prop */\n  icon: svgOrIconPropsCheck,\n\n  /** The svg icon to render */\n  svg: svgOrIconPropsCheck,\n\n  /** boolean - decide whether to disable default fill color */\n  noFill: PropTypes.bool\n}; // Hack for withInfo plugin\n\nIcon.displayName = 'Icon';\nexport default Icon;","map":{"version":3,"sources":["/Users/giladdekel/Workspace/Guesty/boilplate/simple-app/simple-app-archive/node_modules/@guestyci/foundation/esm/legacy/Icon/Icon.js"],"names":["_typeof","_extends","_objectWithoutProperties","React","forwardRef","PropTypes","SvgIcon","S3Icon","Icon","_ref","ref","icon","svg","props","createElement","defaultProps","width","height","color","fillColor","strokeColor","className","style","noFill","svgOrIconPropsCheck","Error","propTypes","number","string","shape","bool","displayName"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport SvgIcon from \"../SvgIcon/SvgIcon\";\nimport S3Icon from \"./S3Icon\";\nvar Icon = forwardRef(function Icon(_ref, ref) {\n  var icon = _ref.icon,\n      svg = _ref.svg,\n      props = _objectWithoutProperties(_ref, [\"icon\", \"svg\"]);\n\n  if (svg) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      svg: svg\n    }, props, {\n      ref: ref\n    }));\n  }\n\n  if (icon) {\n    return /*#__PURE__*/React.createElement(S3Icon, _extends({\n      icon: icon\n    }, props));\n  }\n\n  return null;\n});\nIcon.defaultProps = {\n  width: 20,\n  height: 20,\n  color: '',\n  fillColor: '',\n  strokeColor: '',\n  className: '',\n  style: {},\n  noFill: false\n};\n\nvar svgOrIconPropsCheck = function svgOrIconPropsCheck(props) {\n  if (!props.icon && !props.svg) {\n    return new Error(\"One of 'icon' or 'svg' is required by 'Icon' component.\");\n  }\n\n  if (props.icon && typeof props.icon !== 'string') {\n    return new Error(\"Icon expects a string.\");\n  }\n\n  if (props.svg && typeof props.svg !== 'function' && _typeof(props.svg) !== 'object') {\n    return new Error(\"Svg expects a function or an object.\");\n  }\n};\n\nIcon.propTypes = {\n  /** Icon width in pixels */\n  width: PropTypes.number,\n\n  /** Icon height in pixels */\n  height: PropTypes.number,\n\n  /** Icon fill color - see style guide colors for options - Deprecated use fillColor */\n  color: PropTypes.string,\n\n  /** Icon fill color - see style guide colors for options */\n  fillColor: PropTypes.string,\n\n  /** Icon stroke color - see style guide colors for options */\n  strokeColor: PropTypes.string,\n\n  /** Class to add to the Icon component */\n  className: PropTypes.string,\n\n  /** Style to add to Icon component */\n  style: PropTypes.shape(),\n\n  /** The string name of the Icon to use. Also possible to pass without the icon prop */\n  icon: svgOrIconPropsCheck,\n\n  /** The svg icon to render */\n  svg: svgOrIconPropsCheck,\n\n  /** boolean - decide whether to disable default fill color */\n  noFill: PropTypes.bool\n}; // Hack for withInfo plugin\n\nIcon.displayName = 'Icon';\nexport default Icon;"]},"metadata":{},"sourceType":"module"}